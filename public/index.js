/*! For license information please see index.js.LICENSE.txt */
(()=>{var e,t,n={109:(e,t,n)=>{"use strict";var r=n(836);t.Z=void 0;var a=r(n(938)),o=n(893),i=(0,a.default)((0,o.jsx)("path",{d:"M11 15h2v2h-2zm0-8h2v6h-2zm8-4h-4.18C14.4 1.84 13.3 1 12 1c-1.3 0-2.4.84-2.82 2H5c-.14 0-.27.01-.4.04-.39.08-.74.28-1.01.55-.18.18-.33.4-.43.64-.1.23-.16.49-.16.77v14c0 .27.06.54.16.78s.25.45.43.64c.27.27.62.47 1.01.55.13.02.26.03.4.03h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-7-.25c.41 0 .75.34.75.75s-.34.75-.75.75-.75-.34-.75-.75.34-.75.75-.75zM19 19H5V5h14v14z"}),"AssignmentLateOutlined");t.Z=i},617:(e,t,n)=>{"use strict";var r=n(836);t.Z=void 0;var a=r(n(938)),o=n(893),i=(0,a.default)((0,o.jsx)("path",{d:"M19 4h-1V2h-2v2H8V2H6v2H5c-1.11 0-1.99.9-1.99 2L3 20c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 16H5V10h14v10zm0-12H5V6h14v2zM9 14H7v-2h2v2zm4 0h-2v-2h2v2zm4 0h-2v-2h2v2zm-8 4H7v-2h2v2zm4 0h-2v-2h2v2zm4 0h-2v-2h2v2z"}),"CalendarMonthOutlined");t.Z=i},211:(e,t,n)=>{"use strict";var r=n(836);t.Z=void 0;var a=r(n(938)),o=n(893),i=(0,a.default)((0,o.jsx)("path",{d:"M20 8V6c0-1.65-1.35-3-3-3H7C5.35 3 4 4.35 4 6v2c-1.65 0-3 1.35-3 3v5c0 1.65 1.35 3 3 3v1c0 .55.45 1 1 1s1-.45 1-1v-1h12v1c0 .55.45 1 1 1s1-.45 1-1v-1c1.65 0 3-1.35 3-3v-5c0-1.65-1.35-3-3-3zM6 6c0-.55.45-1 1-1h10c.55 0 1 .45 1 1v2.78c-.61.55-1 1.34-1 2.22v2H7v-2c0-.88-.39-1.67-1-2.22V6zm15 10c0 .55-.45 1-1 1H4c-.55 0-1-.45-1-1v-5c0-.55.45-1 1-1s1 .45 1 1v4h14v-4c0-.55.45-1 1-1s1 .45 1 1v5z"}),"ChairOutlined");t.Z=i},989:(e,t,n)=>{"use strict";var r=n(836);t.Z=void 0;var a=r(n(938)),o=n(893),i=(0,a.default)((0,o.jsx)("path",{d:"M20 6h-8l-2-2H4c-1.11 0-1.99.89-1.99 2L2 18c0 1.11.89 2 2 2h16c1.11 0 2-.89 2-2V8c0-1.11-.89-2-2-2zm0 12H4V6h5.17l2 2H20v10zm-8-4h2v2h2v-2h2v-2h-2v-2h-2v2h-2z"}),"CreateNewFolderOutlined");t.Z=i},570:(e,t,n)=>{"use strict";var r=n(836);t.Z=void 0;var a=r(n(938)),o=n(893),i=(0,a.default)((0,o.jsx)("path",{d:"M20 6h-8l-2-2H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V8c0-1.1-.9-2-2-2zm0 12H4V6h5.17l2 2H20v10zm-5-5c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm-4 4h8v-1c0-1.33-2.67-2-4-2s-4 .67-4 2v1z"}),"FolderSharedOutlined");t.Z=i},503:(e,t,n)=>{"use strict";var r=n(836);t.Z=void 0;var a=r(n(938)),o=n(893),i=(0,a.default)((0,o.jsx)("path",{d:"M4 10.5c-.83 0-1.5.67-1.5 1.5s.67 1.5 1.5 1.5 1.5-.67 1.5-1.5-.67-1.5-1.5-1.5zm0-6c-.83 0-1.5.67-1.5 1.5S3.17 7.5 4 7.5 5.5 6.83 5.5 6 4.83 4.5 4 4.5zm0 12c-.83 0-1.5.68-1.5 1.5s.68 1.5 1.5 1.5 1.5-.68 1.5-1.5-.67-1.5-1.5-1.5zM7 19h14v-2H7v2zm0-6h14v-2H7v2zm0-8v2h14V5H7z"}),"FormatListBulletedOutlined");t.Z=i},833:(e,t,n)=>{"use strict";var r=n(836);t.Z=void 0;var a=r(n(938)),o=n(893),i=(0,a.default)((0,o.jsx)("path",{d:"M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z"}),"MenuOutlined");t.Z=i},79:(e,t,n)=>{"use strict";var r=n(836);t.Z=void 0;var a=r(n(938)),o=n(893),i=(0,a.default)((0,o.jsx)("path",{d:"M12 5.9c1.16 0 2.1.94 2.1 2.1s-.94 2.1-2.1 2.1S9.9 9.16 9.9 8s.94-2.1 2.1-2.1m0 9c2.97 0 6.1 1.46 6.1 2.1v1.1H5.9V17c0-.64 3.13-2.1 6.1-2.1M12 4C9.79 4 8 5.79 8 8s1.79 4 4 4 4-1.79 4-4-1.79-4-4-4zm0 9c-2.67 0-8 1.34-8 4v3h16v-3c0-2.66-5.33-4-8-4z"}),"PersonOutlineOutlined");t.Z=i},571:(e,t,n)=>{"use strict";var r=n(836);t.Z=void 0;var a=r(n(938)),o=n(893),i=(0,a.default)([(0,o.jsx)("path",{d:"M8.55 12c-1.07-.71-2.25-1.27-3.53-1.61 1.28.34 2.46.9 3.53 1.61zm10.43-1.61c-1.29.34-2.49.91-3.57 1.64 1.08-.73 2.28-1.3 3.57-1.64z"},"0"),(0,o.jsx)("path",{d:"M15.49 9.63c-.18-2.79-1.31-5.51-3.43-7.63-2.14 2.14-3.32 4.86-3.55 7.63 1.28.68 2.46 1.56 3.49 2.63 1.03-1.06 2.21-1.94 3.49-2.63zm-6.5 2.65c-.14-.1-.3-.19-.45-.29.15.11.31.19.45.29zm6.42-.25c-.13.09-.27.16-.4.26.13-.1.27-.17.4-.26zM12 15.45C9.85 12.17 6.18 10 2 10c0 5.32 3.36 9.82 8.03 11.49.63.23 1.29.4 1.97.51.68-.12 1.33-.29 1.97-.51C18.64 19.82 22 15.32 22 10c-4.18 0-7.85 2.17-10 5.45z"},"1")],"Spa");t.Z=i},938:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return r.createSvgIcon}});var r=n(359)},359:(e,t,n)=>{"use strict";n.r(t),n.d(t,{capitalize:()=>l,createChainedFunction:()=>u,createSvgIcon:()=>Mr,debounce:()=>Ir,deprecatedPropType:()=>Fr,isMuiElement:()=>jr,ownerDocument:()=>$r,ownerWindow:()=>Ur,requirePropFactory:()=>Hr,setRef:()=>Vr,unstable_ClassNameGenerator:()=>sa,unstable_useEnhancedEffect:()=>Qr,unstable_useId:()=>Yr,unsupportedProp:()=>Zr,useControlled:()=>Xr,useEventCallback:()=>Jr,useForkRef:()=>ea,useIsFocusVisible:()=>ua});const r=e=>e,a=(()=>{let e=r;return{configure(t){e=t},generate:t=>e(t),reset(){e=r}}})();function o(e){let t="https://mui.com/production-error/?code="+e;for(let e=1;e<arguments.length;e+=1)t+="&args[]="+encodeURIComponent(arguments[e]);return"Minified MUI error #"+e+"; visit "+t+" for the full message."}function i(e){if("string"!=typeof e)throw new Error(o(7));return e.charAt(0).toUpperCase()+e.slice(1)}const l=i,u=function(...e){return e.reduce(((e,t)=>null==t?e:function(...n){e.apply(this,n),t.apply(this,n)}),(()=>{}))};function s(){return s=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},s.apply(this,arguments)}var c=n(294),d=n.t(c,2);function f(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}function p(e){var t,n,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=p(e[t]))&&(r&&(r+=" "),r+=n);else for(t in e)e[t]&&(r&&(r+=" "),r+=t);return r}const m=function(){for(var e,t,n=0,r="";n<arguments.length;)(e=arguments[n++])&&(t=p(e))&&(r&&(r+=" "),r+=t);return r};function h(e){return null!==e&&"object"==typeof e&&e.constructor===Object}function A(e,t,n={clone:!0}){const r=n.clone?s({},e):e;return h(e)&&h(t)&&Object.keys(t).forEach((a=>{"__proto__"!==a&&(h(t[a])&&a in e&&h(e[a])?r[a]=A(e[a],t[a],n):r[a]=t[a])})),r}const g=["values","unit","step"];const y={borderRadius:4},v={xs:0,sm:600,md:900,lg:1200,xl:1536},b={keys:["xs","sm","md","lg","xl"],up:e=>`@media (min-width:${v[e]}px)`};function w(e,t,n){const r=e.theme||{};if(Array.isArray(t)){const e=r.breakpoints||b;return t.reduce(((r,a,o)=>(r[e.up(e.keys[o])]=n(t[o]),r)),{})}if("object"==typeof t){const e=r.breakpoints||b;return Object.keys(t).reduce(((r,a)=>{if(-1!==Object.keys(e.values||v).indexOf(a))r[e.up(a)]=n(t[a],a);else{const e=a;r[e]=t[e]}return r}),{})}return n(t)}function E(e,t,n=!0){if(!t||"string"!=typeof t)return null;if(e&&e.vars&&n){const n=`vars.${t}`.split(".").reduce(((e,t)=>e&&e[t]?e[t]:null),e);if(null!=n)return n}return t.split(".").reduce(((e,t)=>e&&null!=e[t]?e[t]:null),e)}function x(e,t,n,r=n){let a;return a="function"==typeof e?e(n):Array.isArray(e)?e[n]||r:E(e,n)||r,t&&(a=t(a,r)),a}const k=function(e){const{prop:t,cssProperty:n=e.prop,themeKey:r,transform:a}=e,o=e=>{if(null==e[t])return null;const o=e[t],l=E(e.theme,r)||{};return w(e,o,(e=>{let r=x(l,a,e);return e===r&&"string"==typeof e&&(r=x(l,a,`${t}${"default"===e?"":i(e)}`,e)),!1===n?r:{[n]:r}}))};return o.propTypes={},o.filterProps=[t],o},S=function(e,t){return t?A(e,t,{clone:!1}):e},C={m:"margin",p:"padding"},B={t:"Top",r:"Right",b:"Bottom",l:"Left",x:["Left","Right"],y:["Top","Bottom"]},_={marginX:"mx",marginY:"my",paddingX:"px",paddingY:"py"},P=function(e){const t={};return e=>(void 0===t[e]&&(t[e]=(e=>{if(e.length>2){if(!_[e])return[e];e=_[e]}const[t,n]=e.split(""),r=C[t],a=B[n]||"";return Array.isArray(a)?a.map((e=>r+e)):[r+a]})(e)),t[e])}(),N=["m","mt","mr","mb","ml","mx","my","margin","marginTop","marginRight","marginBottom","marginLeft","marginX","marginY","marginInline","marginInlineStart","marginInlineEnd","marginBlock","marginBlockStart","marginBlockEnd"],O=["p","pt","pr","pb","pl","px","py","padding","paddingTop","paddingRight","paddingBottom","paddingLeft","paddingX","paddingY","paddingInline","paddingInlineStart","paddingInlineEnd","paddingBlock","paddingBlockStart","paddingBlockEnd"],T=[...N,...O];function z(e,t,n,r){var a;const o=null!=(a=E(e,t,!1))?a:n;return"number"==typeof o?e=>"string"==typeof e?e:o*e:Array.isArray(o)?e=>"string"==typeof e?e:o[e]:"function"==typeof o?o:()=>{}}function R(e){return z(e,"spacing",8)}function L(e,t){if("string"==typeof t||null==t)return t;const n=e(Math.abs(t));return t>=0?n:"number"==typeof n?-n:`-${n}`}function M(e,t){const n=R(e.theme);return Object.keys(e).map((r=>function(e,t,n,r){if(-1===t.indexOf(n))return null;const a=function(e,t){return n=>e.reduce(((e,r)=>(e[r]=L(t,n),e)),{})}(P(n),r);return w(e,e[n],a)}(e,t,r,n))).reduce(S,{})}function I(e){return M(e,N)}function F(e){return M(e,O)}function j(e){return M(e,T)}I.propTypes={},I.filterProps=N,F.propTypes={},F.filterProps=O,j.propTypes={},j.filterProps=T;const D=j,$=["breakpoints","palette","spacing","shape"],U=function(e={},...t){const{breakpoints:n={},palette:r={},spacing:a,shape:o={}}=e,i=f(e,$),l=function(e){const{values:t={xs:0,sm:600,md:900,lg:1200,xl:1536},unit:n="px",step:r=5}=e,a=f(e,g),o=(e=>{const t=Object.keys(e).map((t=>({key:t,val:e[t]})))||[];return t.sort(((e,t)=>e.val-t.val)),t.reduce(((e,t)=>s({},e,{[t.key]:t.val})),{})})(t),i=Object.keys(o);function l(e){return`@media (min-width:${"number"==typeof t[e]?t[e]:e}${n})`}function u(e){return`@media (max-width:${("number"==typeof t[e]?t[e]:e)-r/100}${n})`}function c(e,a){const o=i.indexOf(a);return`@media (min-width:${"number"==typeof t[e]?t[e]:e}${n}) and (max-width:${(-1!==o&&"number"==typeof t[i[o]]?t[i[o]]:a)-r/100}${n})`}return s({keys:i,values:o,up:l,down:u,between:c,only:function(e){return i.indexOf(e)+1<i.length?c(e,i[i.indexOf(e)+1]):l(e)},not:function(e){const t=i.indexOf(e);return 0===t?l(i[1]):t===i.length-1?u(i[t]):c(e,i[i.indexOf(e)+1]).replace("@media","@media not all and")},unit:n},a)}(n),u=function(e=8){if(e.mui)return e;const t=R({spacing:e}),n=(...e)=>(0===e.length?[1]:e).map((e=>{const n=t(e);return"number"==typeof n?`${n}px`:n})).join(" ");return n.mui=!0,n}(a);let c=A({breakpoints:l,direction:"ltr",components:{},palette:s({mode:"light"},r),spacing:u,shape:s({},y,o)},i);return c=t.reduce(((e,t)=>A(e,t)),c),c},H=c.createContext(null),W=U(),V=function(e=W){return function(e=null){const t=c.useContext(H);return t&&(n=t,0!==Object.keys(n).length)?t:e;var n}(e)};function q(e,t=0,n=1){return Math.min(Math.max(t,e),n)}function Q(e){if(e.type)return e;if("#"===e.charAt(0))return Q(function(e){e=e.slice(1);const t=new RegExp(`.{1,${e.length>=6?2:1}}`,"g");let n=e.match(t);return n&&1===n[0].length&&(n=n.map((e=>e+e))),n?`rgb${4===n.length?"a":""}(${n.map(((e,t)=>t<3?parseInt(e,16):Math.round(parseInt(e,16)/255*1e3)/1e3)).join(", ")})`:""}(e));const t=e.indexOf("("),n=e.substring(0,t);if(-1===["rgb","rgba","hsl","hsla","color"].indexOf(n))throw new Error(o(9,e));let r,a=e.substring(t+1,e.length-1);if("color"===n){if(a=a.split(" "),r=a.shift(),4===a.length&&"/"===a[3].charAt(0)&&(a[3]=a[3].slice(1)),-1===["srgb","display-p3","a98-rgb","prophoto-rgb","rec-2020"].indexOf(r))throw new Error(o(10,r))}else a=a.split(",");return a=a.map((e=>parseFloat(e))),{type:n,values:a,colorSpace:r}}function K(e){const{type:t,colorSpace:n}=e;let{values:r}=e;return-1!==t.indexOf("rgb")?r=r.map(((e,t)=>t<3?parseInt(e,10):e)):-1!==t.indexOf("hsl")&&(r[1]=`${r[1]}%`,r[2]=`${r[2]}%`),r=-1!==t.indexOf("color")?`${n} ${r.join(" ")}`:`${r.join(", ")}`,`${t}(${r})`}function G(e){let t="hsl"===(e=Q(e)).type||"hsla"===e.type?Q(function(e){e=Q(e);const{values:t}=e,n=t[0],r=t[1]/100,a=t[2]/100,o=r*Math.min(a,1-a),i=(e,t=(e+n/30)%12)=>a-o*Math.max(Math.min(t-3,9-t,1),-1);let l="rgb";const u=[Math.round(255*i(0)),Math.round(255*i(8)),Math.round(255*i(4))];return"hsla"===e.type&&(l+="a",u.push(t[3])),K({type:l,values:u})}(e)).values:e.values;return t=t.map((t=>("color"!==e.type&&(t/=255),t<=.03928?t/12.92:((t+.055)/1.055)**2.4))),Number((.2126*t[0]+.7152*t[1]+.0722*t[2]).toFixed(3))}const Y={black:"#000",white:"#fff"},Z={50:"#fafafa",100:"#f5f5f5",200:"#eeeeee",300:"#e0e0e0",400:"#bdbdbd",500:"#9e9e9e",600:"#757575",700:"#616161",800:"#424242",900:"#212121",A100:"#f5f5f5",A200:"#eeeeee",A400:"#bdbdbd",A700:"#616161"},X="#f3e5f5",J="#ce93d8",ee="#ba68c8",te="#ab47bc",ne="#9c27b0",re="#7b1fa2",ae="#e57373",oe="#ef5350",ie="#f44336",le="#d32f2f",ue="#c62828",se="#ffb74d",ce="#ffa726",de="#ff9800",fe="#f57c00",pe="#e65100",me="#e3f2fd",he="#90caf9",Ae="#42a5f5",ge="#1976d2",ye="#1565c0",ve="#4fc3f7",be="#29b6f6",we="#03a9f4",Ee="#0288d1",xe="#01579b",ke="#81c784",Se="#66bb6a",Ce="#4caf50",Be="#388e3c",_e="#2e7d32",Pe="#1b5e20",Ne=["mode","contrastThreshold","tonalOffset"],Oe={text:{primary:"rgba(0, 0, 0, 0.87)",secondary:"rgba(0, 0, 0, 0.6)",disabled:"rgba(0, 0, 0, 0.38)"},divider:"rgba(0, 0, 0, 0.12)",background:{paper:Y.white,default:Y.white},action:{active:"rgba(0, 0, 0, 0.54)",hover:"rgba(0, 0, 0, 0.04)",hoverOpacity:.04,selected:"rgba(0, 0, 0, 0.08)",selectedOpacity:.08,disabled:"rgba(0, 0, 0, 0.26)",disabledBackground:"rgba(0, 0, 0, 0.12)",disabledOpacity:.38,focus:"rgba(0, 0, 0, 0.12)",focusOpacity:.12,activatedOpacity:.12}},Te={text:{primary:Y.white,secondary:"rgba(255, 255, 255, 0.7)",disabled:"rgba(255, 255, 255, 0.5)",icon:"rgba(255, 255, 255, 0.5)"},divider:"rgba(255, 255, 255, 0.12)",background:{paper:"#121212",default:"#121212"},action:{active:Y.white,hover:"rgba(255, 255, 255, 0.08)",hoverOpacity:.08,selected:"rgba(255, 255, 255, 0.16)",selectedOpacity:.16,disabled:"rgba(255, 255, 255, 0.3)",disabledBackground:"rgba(255, 255, 255, 0.12)",disabledOpacity:.38,focus:"rgba(255, 255, 255, 0.12)",focusOpacity:.12,activatedOpacity:.24}};function ze(e,t,n,r){const a=r.light||r,o=r.dark||1.5*r;e[t]||(e.hasOwnProperty(n)?e[t]=e[n]:"light"===t?e.light=function(e,t){if(e=Q(e),t=q(t),-1!==e.type.indexOf("hsl"))e.values[2]+=(100-e.values[2])*t;else if(-1!==e.type.indexOf("rgb"))for(let n=0;n<3;n+=1)e.values[n]+=(255-e.values[n])*t;else if(-1!==e.type.indexOf("color"))for(let n=0;n<3;n+=1)e.values[n]+=(1-e.values[n])*t;return K(e)}(e.main,a):"dark"===t&&(e.dark=function(e,t){if(e=Q(e),t=q(t),-1!==e.type.indexOf("hsl"))e.values[2]*=1-t;else if(-1!==e.type.indexOf("rgb")||-1!==e.type.indexOf("color"))for(let n=0;n<3;n+=1)e.values[n]*=1-t;return K(e)}(e.main,o)))}const Re=["fontFamily","fontSize","fontWeightLight","fontWeightRegular","fontWeightMedium","fontWeightBold","htmlFontSize","allVariants","pxToRem"],Le={textTransform:"uppercase"},Me='"Roboto", "Helvetica", "Arial", sans-serif';function Ie(e,t){const n="function"==typeof t?t(e):t,{fontFamily:r=Me,fontSize:a=14,fontWeightLight:o=300,fontWeightRegular:i=400,fontWeightMedium:l=500,fontWeightBold:u=700,htmlFontSize:c=16,allVariants:d,pxToRem:p}=n,m=f(n,Re),h=a/14,g=p||(e=>e/c*h+"rem"),y=(e,t,n,a,o)=>{return s({fontFamily:r,fontWeight:e,fontSize:g(t),lineHeight:n},r===Me?{letterSpacing:(i=a/t,Math.round(1e5*i)/1e5+"em")}:{},o,d);var i},v={h1:y(o,96,1.167,-1.5),h2:y(o,60,1.2,-.5),h3:y(i,48,1.167,0),h4:y(i,34,1.235,.25),h5:y(i,24,1.334,0),h6:y(l,20,1.6,.15),subtitle1:y(i,16,1.75,.15),subtitle2:y(l,14,1.57,.1),body1:y(i,16,1.5,.15),body2:y(i,14,1.43,.15),button:y(l,14,1.75,.4,Le),caption:y(i,12,1.66,.4),overline:y(i,12,2.66,1,Le)};return A(s({htmlFontSize:c,pxToRem:g,fontFamily:r,fontSize:a,fontWeightLight:o,fontWeightRegular:i,fontWeightMedium:l,fontWeightBold:u},v),m,{clone:!1})}function Fe(...e){return[`${e[0]}px ${e[1]}px ${e[2]}px ${e[3]}px rgba(0,0,0,0.2)`,`${e[4]}px ${e[5]}px ${e[6]}px ${e[7]}px rgba(0,0,0,0.14)`,`${e[8]}px ${e[9]}px ${e[10]}px ${e[11]}px rgba(0,0,0,0.12)`].join(",")}const je=["none",Fe(0,2,1,-1,0,1,1,0,0,1,3,0),Fe(0,3,1,-2,0,2,2,0,0,1,5,0),Fe(0,3,3,-2,0,3,4,0,0,1,8,0),Fe(0,2,4,-1,0,4,5,0,0,1,10,0),Fe(0,3,5,-1,0,5,8,0,0,1,14,0),Fe(0,3,5,-1,0,6,10,0,0,1,18,0),Fe(0,4,5,-2,0,7,10,1,0,2,16,1),Fe(0,5,5,-3,0,8,10,1,0,3,14,2),Fe(0,5,6,-3,0,9,12,1,0,3,16,2),Fe(0,6,6,-3,0,10,14,1,0,4,18,3),Fe(0,6,7,-4,0,11,15,1,0,4,20,3),Fe(0,7,8,-4,0,12,17,2,0,5,22,4),Fe(0,7,8,-4,0,13,19,2,0,5,24,4),Fe(0,7,9,-4,0,14,21,2,0,5,26,4),Fe(0,8,9,-5,0,15,22,2,0,6,28,5),Fe(0,8,10,-5,0,16,24,2,0,6,30,5),Fe(0,8,11,-5,0,17,26,2,0,6,32,5),Fe(0,9,11,-5,0,18,28,2,0,7,34,6),Fe(0,9,12,-6,0,19,29,2,0,7,36,6),Fe(0,10,13,-6,0,20,31,3,0,8,38,7),Fe(0,10,13,-6,0,21,33,3,0,8,40,7),Fe(0,10,14,-6,0,22,35,3,0,8,42,7),Fe(0,11,14,-7,0,23,36,3,0,9,44,8),Fe(0,11,15,-7,0,24,38,3,0,9,46,8)],De=["duration","easing","delay"],$e={easeInOut:"cubic-bezier(0.4, 0, 0.2, 1)",easeOut:"cubic-bezier(0.0, 0, 0.2, 1)",easeIn:"cubic-bezier(0.4, 0, 1, 1)",sharp:"cubic-bezier(0.4, 0, 0.6, 1)"},Ue={shortest:150,shorter:200,short:250,standard:300,complex:375,enteringScreen:225,leavingScreen:195};function He(e){return`${Math.round(e)}ms`}function We(e){if(!e)return 0;const t=e/36;return Math.round(10*(4+15*t**.25+t/5))}function Ve(e){const t=s({},$e,e.easing),n=s({},Ue,e.duration);return s({getAutoHeightDuration:We,create:(e=["all"],r={})=>{const{duration:a=n.standard,easing:o=t.easeInOut,delay:i=0}=r;return f(r,De),(Array.isArray(e)?e:[e]).map((e=>`${e} ${"string"==typeof a?a:He(a)} ${o} ${"string"==typeof i?i:He(i)}`)).join(",")}},e,{easing:t,duration:n})}const qe={mobileStepper:1e3,fab:1050,speedDial:1050,appBar:1100,drawer:1200,modal:1300,snackbar:1400,tooltip:1500},Qe=["breakpoints","mixins","spacing","palette","transitions","typography","shape"];const Ke=function(e={},...t){const{mixins:n={},palette:r={},transitions:a={},typography:i={}}=e,l=f(e,Qe);if(e.vars)throw new Error(o(18));const u=function(e){const{mode:t="light",contrastThreshold:n=3,tonalOffset:r=.2}=e,a=f(e,Ne),i=e.primary||function(e="light"){return"dark"===e?{main:he,light:me,dark:Ae}:{main:ge,light:Ae,dark:ye}}(t),l=e.secondary||function(e="light"){return"dark"===e?{main:J,light:X,dark:te}:{main:ne,light:ee,dark:re}}(t),u=e.error||function(e="light"){return"dark"===e?{main:ie,light:ae,dark:le}:{main:le,light:oe,dark:ue}}(t),c=e.info||function(e="light"){return"dark"===e?{main:be,light:ve,dark:Ee}:{main:Ee,light:we,dark:xe}}(t),d=e.success||function(e="light"){return"dark"===e?{main:Se,light:ke,dark:Be}:{main:_e,light:Ce,dark:Pe}}(t),p=e.warning||function(e="light"){return"dark"===e?{main:ce,light:se,dark:fe}:{main:"#ed6c02",light:de,dark:pe}}(t);function m(e){const t=function(e,t){const n=G(e),r=G(t);return(Math.max(n,r)+.05)/(Math.min(n,r)+.05)}(e,Te.text.primary)>=n?Te.text.primary:Oe.text.primary;return t}const h=({color:e,name:t,mainShade:n=500,lightShade:a=300,darkShade:i=700})=>{if(!(e=s({},e)).main&&e[n]&&(e.main=e[n]),!e.hasOwnProperty("main"))throw new Error(o(11,t?` (${t})`:"",n));if("string"!=typeof e.main)throw new Error(o(12,t?` (${t})`:"",JSON.stringify(e.main)));return ze(e,"light",a,r),ze(e,"dark",i,r),e.contrastText||(e.contrastText=m(e.main)),e},g={dark:Te,light:Oe};return A(s({common:s({},Y),mode:t,primary:h({color:i,name:"primary"}),secondary:h({color:l,name:"secondary",mainShade:"A400",lightShade:"A200",darkShade:"A700"}),error:h({color:u,name:"error"}),warning:h({color:p,name:"warning"}),info:h({color:c,name:"info"}),success:h({color:d,name:"success"}),grey:Z,contrastThreshold:n,getContrastText:m,augmentColor:h,tonalOffset:r},g[t]),a)}(r),c=U(e);let d=A(c,{mixins:(p=c.breakpoints,m=n,s({toolbar:{minHeight:56,[p.up("xs")]:{"@media (orientation: landscape)":{minHeight:48}},[p.up("sm")]:{minHeight:64}}},m)),palette:u,shadows:je.slice(),typography:Ie(u,i),transitions:Ve(a),zIndex:s({},qe)});var p,m;return d=A(d,l),d=t.reduce(((e,t)=>A(e,t)),d),d}();function Ge({props:e,name:t}){return function({props:e,name:t,defaultTheme:n}){return function(e){const{theme:t,name:n,props:r}=e;return t&&t.components&&t.components[n]&&t.components[n].defaultProps?function(e,t){const n=s({},t);return Object.keys(e).forEach((t=>{void 0===n[t]&&(n[t]=e[t])})),n}(t.components[n].defaultProps,r):r}({theme:V(n),name:t,props:e})}({props:e,name:t,defaultTheme:Ke})}const Ye=function(e){var t=Object.create(null);return function(n){return void 0===t[n]&&(t[n]=e(n)),t[n]}};var Ze=/^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|enterKeyHint|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/;const Xe=Ye((function(e){return Ze.test(e)||111===e.charCodeAt(0)&&110===e.charCodeAt(1)&&e.charCodeAt(2)<91}));var Je=function(){function e(e){var t=this;this._insertTag=function(e){var n;n=0===t.tags.length?t.insertionPoint?t.insertionPoint.nextSibling:t.prepend?t.container.firstChild:t.before:t.tags[t.tags.length-1].nextSibling,t.container.insertBefore(e,n),t.tags.push(e)},this.isSpeedy=void 0===e.speedy||e.speedy,this.tags=[],this.ctr=0,this.nonce=e.nonce,this.key=e.key,this.container=e.container,this.prepend=e.prepend,this.insertionPoint=e.insertionPoint,this.before=null}var t=e.prototype;return t.hydrate=function(e){e.forEach(this._insertTag)},t.insert=function(e){this.ctr%(this.isSpeedy?65e3:1)==0&&this._insertTag(function(e){var t=document.createElement("style");return t.setAttribute("data-emotion",e.key),void 0!==e.nonce&&t.setAttribute("nonce",e.nonce),t.appendChild(document.createTextNode("")),t.setAttribute("data-s",""),t}(this));var t=this.tags[this.tags.length-1];if(this.isSpeedy){var n=function(e){if(e.sheet)return e.sheet;for(var t=0;t<document.styleSheets.length;t++)if(document.styleSheets[t].ownerNode===e)return document.styleSheets[t]}(t);try{n.insertRule(e,n.cssRules.length)}catch(e){}}else t.appendChild(document.createTextNode(e));this.ctr++},t.flush=function(){this.tags.forEach((function(e){return e.parentNode&&e.parentNode.removeChild(e)})),this.tags=[],this.ctr=0},e}(),et=Math.abs,tt=String.fromCharCode,nt=Object.assign;function rt(e){return e.trim()}function at(e,t,n){return e.replace(t,n)}function ot(e,t){return e.indexOf(t)}function it(e,t){return 0|e.charCodeAt(t)}function lt(e,t,n){return e.slice(t,n)}function ut(e){return e.length}function st(e){return e.length}function ct(e,t){return t.push(e),e}var dt=1,ft=1,pt=0,mt=0,ht=0,At="";function gt(e,t,n,r,a,o,i){return{value:e,root:t,parent:n,type:r,props:a,children:o,line:dt,column:ft,length:i,return:""}}function yt(e,t){return nt(gt("",null,null,"",null,null,0),e,{length:-e.length},t)}function vt(){return ht=mt>0?it(At,--mt):0,ft--,10===ht&&(ft=1,dt--),ht}function bt(){return ht=mt<pt?it(At,mt++):0,ft++,10===ht&&(ft=1,dt++),ht}function wt(){return it(At,mt)}function Et(){return mt}function xt(e,t){return lt(At,e,t)}function kt(e){switch(e){case 0:case 9:case 10:case 13:case 32:return 5;case 33:case 43:case 44:case 47:case 62:case 64:case 126:case 59:case 123:case 125:return 4;case 58:return 3;case 34:case 39:case 40:case 91:return 2;case 41:case 93:return 1}return 0}function St(e){return dt=ft=1,pt=ut(At=e),mt=0,[]}function Ct(e){return At="",e}function Bt(e){return rt(xt(mt-1,Nt(91===e?e+2:40===e?e+1:e)))}function _t(e){for(;(ht=wt())&&ht<33;)bt();return kt(e)>2||kt(ht)>3?"":" "}function Pt(e,t){for(;--t&&bt()&&!(ht<48||ht>102||ht>57&&ht<65||ht>70&&ht<97););return xt(e,Et()+(t<6&&32==wt()&&32==bt()))}function Nt(e){for(;bt();)switch(ht){case e:return mt;case 34:case 39:34!==e&&39!==e&&Nt(ht);break;case 40:41===e&&Nt(e);break;case 92:bt()}return mt}function Ot(e,t){for(;bt()&&e+ht!==57&&(e+ht!==84||47!==wt()););return"/*"+xt(t,mt-1)+"*"+tt(47===e?e:bt())}function Tt(e){for(;!kt(wt());)bt();return xt(e,mt)}var zt="-ms-",Rt="-webkit-",Lt="comm",Mt="rule",It="decl",Ft="@keyframes";function jt(e,t){for(var n="",r=st(e),a=0;a<r;a++)n+=t(e[a],a,e,t)||"";return n}function Dt(e,t,n,r){switch(e.type){case"@import":case It:return e.return=e.return||e.value;case Lt:return"";case Ft:return e.return=e.value+"{"+jt(e.children,r)+"}";case Mt:e.value=e.props.join(",")}return ut(n=jt(e.children,r))?e.return=e.value+"{"+n+"}":""}function $t(e){return Ct(Ut("",null,null,null,[""],e=St(e),0,[0],e))}function Ut(e,t,n,r,a,o,i,l,u){for(var s=0,c=0,d=i,f=0,p=0,m=0,h=1,A=1,g=1,y=0,v="",b=a,w=o,E=r,x=v;A;)switch(m=y,y=bt()){case 40:if(108!=m&&58==it(x,d-1)){-1!=ot(x+=at(Bt(y),"&","&\f"),"&\f")&&(g=-1);break}case 34:case 39:case 91:x+=Bt(y);break;case 9:case 10:case 13:case 32:x+=_t(m);break;case 92:x+=Pt(Et()-1,7);continue;case 47:switch(wt()){case 42:case 47:ct(Wt(Ot(bt(),Et()),t,n),u);break;default:x+="/"}break;case 123*h:l[s++]=ut(x)*g;case 125*h:case 59:case 0:switch(y){case 0:case 125:A=0;case 59+c:p>0&&ut(x)-d&&ct(p>32?Vt(x+";",r,n,d-1):Vt(at(x," ","")+";",r,n,d-2),u);break;case 59:x+=";";default:if(ct(E=Ht(x,t,n,s,c,a,l,v,b=[],w=[],d),o),123===y)if(0===c)Ut(x,t,E,E,b,o,d,l,w);else switch(99===f&&110===it(x,3)?100:f){case 100:case 109:case 115:Ut(e,E,E,r&&ct(Ht(e,E,E,0,0,a,l,v,a,b=[],d),w),a,w,d,l,r?b:w);break;default:Ut(x,E,E,E,[""],w,0,l,w)}}s=c=p=0,h=g=1,v=x="",d=i;break;case 58:d=1+ut(x),p=m;default:if(h<1)if(123==y)--h;else if(125==y&&0==h++&&125==vt())continue;switch(x+=tt(y),y*h){case 38:g=c>0?1:(x+="\f",-1);break;case 44:l[s++]=(ut(x)-1)*g,g=1;break;case 64:45===wt()&&(x+=Bt(bt())),f=wt(),c=d=ut(v=x+=Tt(Et())),y++;break;case 45:45===m&&2==ut(x)&&(h=0)}}return o}function Ht(e,t,n,r,a,o,i,l,u,s,c){for(var d=a-1,f=0===a?o:[""],p=st(f),m=0,h=0,A=0;m<r;++m)for(var g=0,y=lt(e,d+1,d=et(h=i[m])),v=e;g<p;++g)(v=rt(h>0?f[g]+" "+y:at(y,/&\f/g,f[g])))&&(u[A++]=v);return gt(e,t,n,0===a?Mt:l,u,s,c)}function Wt(e,t,n){return gt(e,t,n,Lt,tt(ht),lt(e,2,-2),0)}function Vt(e,t,n,r){return gt(e,t,n,It,lt(e,0,r),lt(e,r+1,-1),r)}var qt=function(e,t,n){for(var r=0,a=0;r=a,a=wt(),38===r&&12===a&&(t[n]=1),!kt(a);)bt();return xt(e,mt)},Qt=new WeakMap,Kt=function(e){if("rule"===e.type&&e.parent&&!(e.length<1)){for(var t=e.value,n=e.parent,r=e.column===n.column&&e.line===n.line;"rule"!==n.type;)if(!(n=n.parent))return;if((1!==e.props.length||58===t.charCodeAt(0)||Qt.get(n))&&!r){Qt.set(e,!0);for(var a=[],o=function(e,t){return Ct(function(e,t){var n=-1,r=44;do{switch(kt(r)){case 0:38===r&&12===wt()&&(t[n]=1),e[n]+=qt(mt-1,t,n);break;case 2:e[n]+=Bt(r);break;case 4:if(44===r){e[++n]=58===wt()?"&\f":"",t[n]=e[n].length;break}default:e[n]+=tt(r)}}while(r=bt());return e}(St(e),t))}(t,a),i=n.props,l=0,u=0;l<o.length;l++)for(var s=0;s<i.length;s++,u++)e.props[u]=a[l]?o[l].replace(/&\f/g,i[s]):i[s]+" "+o[l]}}},Gt=function(e){if("decl"===e.type){var t=e.value;108===t.charCodeAt(0)&&98===t.charCodeAt(2)&&(e.return="",e.value="")}};function Yt(e,t){switch(function(e,t){return 45^it(e,0)?(((t<<2^it(e,0))<<2^it(e,1))<<2^it(e,2))<<2^it(e,3):0}(e,t)){case 5103:return"-webkit-print-"+e+e;case 5737:case 4201:case 3177:case 3433:case 1641:case 4457:case 2921:case 5572:case 6356:case 5844:case 3191:case 6645:case 3005:case 6391:case 5879:case 5623:case 6135:case 4599:case 4855:case 4215:case 6389:case 5109:case 5365:case 5621:case 3829:return Rt+e+e;case 5349:case 4246:case 4810:case 6968:case 2756:return Rt+e+"-moz-"+e+zt+e+e;case 6828:case 4268:return Rt+e+zt+e+e;case 6165:return Rt+e+zt+"flex-"+e+e;case 5187:return Rt+e+at(e,/(\w+).+(:[^]+)/,"-webkit-box-$1$2-ms-flex-$1$2")+e;case 5443:return Rt+e+zt+"flex-item-"+at(e,/flex-|-self/,"")+e;case 4675:return Rt+e+zt+"flex-line-pack"+at(e,/align-content|flex-|-self/,"")+e;case 5548:return Rt+e+zt+at(e,"shrink","negative")+e;case 5292:return Rt+e+zt+at(e,"basis","preferred-size")+e;case 6060:return"-webkit-box-"+at(e,"-grow","")+Rt+e+zt+at(e,"grow","positive")+e;case 4554:return Rt+at(e,/([^-])(transform)/g,"$1-webkit-$2")+e;case 6187:return at(at(at(e,/(zoom-|grab)/,"-webkit-$1"),/(image-set)/,"-webkit-$1"),e,"")+e;case 5495:case 3959:return at(e,/(image-set\([^]*)/,"-webkit-$1$`$1");case 4968:return at(at(e,/(.+:)(flex-)?(.*)/,"-webkit-box-pack:$3-ms-flex-pack:$3"),/s.+-b[^;]+/,"justify")+Rt+e+e;case 4095:case 3583:case 4068:case 2532:return at(e,/(.+)-inline(.+)/,"-webkit-$1$2")+e;case 8116:case 7059:case 5753:case 5535:case 5445:case 5701:case 4933:case 4677:case 5533:case 5789:case 5021:case 4765:if(ut(e)-1-t>6)switch(it(e,t+1)){case 109:if(45!==it(e,t+4))break;case 102:return at(e,/(.+:)(.+)-([^]+)/,"$1-webkit-$2-$3$1-moz-"+(108==it(e,t+3)?"$3":"$2-$3"))+e;case 115:return~ot(e,"stretch")?Yt(at(e,"stretch","fill-available"),t)+e:e}break;case 4949:if(115!==it(e,t+1))break;case 6444:switch(it(e,ut(e)-3-(~ot(e,"!important")&&10))){case 107:return at(e,":",":-webkit-")+e;case 101:return at(e,/(.+:)([^;!]+)(;|!.+)?/,"$1-webkit-"+(45===it(e,14)?"inline-":"")+"box$3$1-webkit-$2$3$1-ms-$2box$3")+e}break;case 5936:switch(it(e,t+11)){case 114:return Rt+e+zt+at(e,/[svh]\w+-[tblr]{2}/,"tb")+e;case 108:return Rt+e+zt+at(e,/[svh]\w+-[tblr]{2}/,"tb-rl")+e;case 45:return Rt+e+zt+at(e,/[svh]\w+-[tblr]{2}/,"lr")+e}return Rt+e+zt+e+e}return e}var Zt=[function(e,t,n,r){if(e.length>-1&&!e.return)switch(e.type){case It:e.return=Yt(e.value,e.length);break;case Ft:return jt([yt(e,{value:at(e.value,"@","@-webkit-")})],r);case Mt:if(e.length)return function(e,t){return e.map(t).join("")}(e.props,(function(t){switch(function(e,t){return(e=/(::plac\w+|:read-\w+)/.exec(e))?e[0]:e}(t)){case":read-only":case":read-write":return jt([yt(e,{props:[at(t,/:(read-\w+)/,":-moz-$1")]})],r);case"::placeholder":return jt([yt(e,{props:[at(t,/:(plac\w+)/,":-webkit-input-$1")]}),yt(e,{props:[at(t,/:(plac\w+)/,":-moz-$1")]}),yt(e,{props:[at(t,/:(plac\w+)/,"-ms-input-$1")]})],r)}return""}))}}];const Xt=function(e){var t=e.key;if("css"===t){var n=document.querySelectorAll("style[data-emotion]:not([data-s])");Array.prototype.forEach.call(n,(function(e){-1!==e.getAttribute("data-emotion").indexOf(" ")&&(document.head.appendChild(e),e.setAttribute("data-s",""))}))}var r,a,o=e.stylisPlugins||Zt,i={},l=[];r=e.container||document.head,Array.prototype.forEach.call(document.querySelectorAll('style[data-emotion^="'+t+' "]'),(function(e){for(var t=e.getAttribute("data-emotion").split(" "),n=1;n<t.length;n++)i[t[n]]=!0;l.push(e)}));var u,s,c,d,f=[Dt,(d=function(e){u.insert(e)},function(e){e.root||(e=e.return)&&d(e)})],p=(s=[Kt,Gt].concat(o,f),c=st(s),function(e,t,n,r){for(var a="",o=0;o<c;o++)a+=s[o](e,t,n,r)||"";return a});a=function(e,t,n,r){u=n,jt($t(e?e+"{"+t.styles+"}":t.styles),p),r&&(m.inserted[t.name]=!0)};var m={key:t,sheet:new Je({key:t,container:r,nonce:e.nonce,speedy:e.speedy,prepend:e.prepend,insertionPoint:e.insertionPoint}),nonce:e.nonce,inserted:i,registered:{},insert:a};return m.sheet.hydrate(l),m},Jt=function(e){for(var t,n=0,r=0,a=e.length;a>=4;++r,a-=4)t=1540483477*(65535&(t=255&e.charCodeAt(r)|(255&e.charCodeAt(++r))<<8|(255&e.charCodeAt(++r))<<16|(255&e.charCodeAt(++r))<<24))+(59797*(t>>>16)<<16),n=1540483477*(65535&(t^=t>>>24))+(59797*(t>>>16)<<16)^1540483477*(65535&n)+(59797*(n>>>16)<<16);switch(a){case 3:n^=(255&e.charCodeAt(r+2))<<16;case 2:n^=(255&e.charCodeAt(r+1))<<8;case 1:n=1540483477*(65535&(n^=255&e.charCodeAt(r)))+(59797*(n>>>16)<<16)}return(((n=1540483477*(65535&(n^=n>>>13))+(59797*(n>>>16)<<16))^n>>>15)>>>0).toString(36)},en={animationIterationCount:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,msGridRow:1,msGridRowSpan:1,msGridColumn:1,msGridColumnSpan:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1};var tn=/[A-Z]|^ms/g,nn=/_EMO_([^_]+?)_([^]*?)_EMO_/g,rn=function(e){return 45===e.charCodeAt(1)},an=function(e){return null!=e&&"boolean"!=typeof e},on=Ye((function(e){return rn(e)?e:e.replace(tn,"-$&").toLowerCase()})),ln=function(e,t){switch(e){case"animation":case"animationName":if("string"==typeof t)return t.replace(nn,(function(e,t,n){return sn={name:t,styles:n,next:sn},t}))}return 1===en[e]||rn(e)||"number"!=typeof t||0===t?t:t+"px"};function un(e,t,n){if(null==n)return"";if(void 0!==n.__emotion_styles)return n;switch(typeof n){case"boolean":return"";case"object":if(1===n.anim)return sn={name:n.name,styles:n.styles,next:sn},n.name;if(void 0!==n.styles){var r=n.next;if(void 0!==r)for(;void 0!==r;)sn={name:r.name,styles:r.styles,next:sn},r=r.next;return n.styles+";"}return function(e,t,n){var r="";if(Array.isArray(n))for(var a=0;a<n.length;a++)r+=un(e,t,n[a])+";";else for(var o in n){var i=n[o];if("object"!=typeof i)null!=t&&void 0!==t[i]?r+=o+"{"+t[i]+"}":an(i)&&(r+=on(o)+":"+ln(o,i)+";");else if(!Array.isArray(i)||"string"!=typeof i[0]||null!=t&&void 0!==t[i[0]]){var l=un(e,t,i);switch(o){case"animation":case"animationName":r+=on(o)+":"+l+";";break;default:r+=o+"{"+l+"}"}}else for(var u=0;u<i.length;u++)an(i[u])&&(r+=on(o)+":"+ln(o,i[u])+";")}return r}(e,t,n);case"function":if(void 0!==e){var a=sn,o=n(e);return sn=a,un(e,t,o)}}if(null==t)return n;var i=t[n];return void 0!==i?i:n}var sn,cn=/label:\s*([^\s;\n{]+)\s*(;|$)/g,dn=function(e,t,n){if(1===e.length&&"object"==typeof e[0]&&null!==e[0]&&void 0!==e[0].styles)return e[0];var r=!0,a="";sn=void 0;var o=e[0];null==o||void 0===o.raw?(r=!1,a+=un(n,t,o)):a+=o[0];for(var i=1;i<e.length;i++)a+=un(n,t,e[i]),r&&(a+=o[i]);cn.lastIndex=0;for(var l,u="";null!==(l=cn.exec(a));)u+="-"+l[1];return{name:Jt(a)+u,styles:a,next:sn}},fn=!!d.useInsertionEffect&&d.useInsertionEffect,pn=fn||function(e){return e()},mn=(fn||c.useLayoutEffect,(0,c.createContext)("undefined"!=typeof HTMLElement?Xt({key:"css"}):null));mn.Provider;var hn=function(e){return(0,c.forwardRef)((function(t,n){var r=(0,c.useContext)(mn);return e(t,r,n)}))},An=(0,c.createContext)({});function gn(e,t,n){var r="";return n.split(" ").forEach((function(n){void 0!==e[n]?t.push(e[n]+";"):r+=n+" "})),r}var yn=function(e,t,n){var r=e.key+"-"+t.name;!1===n&&void 0===e.registered[r]&&(e.registered[r]=t.styles)},vn=Xe,bn=function(e){return"theme"!==e},wn=function(e){return"string"==typeof e&&e.charCodeAt(0)>96?vn:bn},En=function(e,t,n){var r;if(t){var a=t.shouldForwardProp;r=e.__emotion_forwardProp&&a?function(t){return e.__emotion_forwardProp(t)&&a(t)}:a}return"function"!=typeof r&&n&&(r=e.__emotion_forwardProp),r},xn=function(e){var t=e.cache,n=e.serialized,r=e.isStringTag;return yn(t,n,r),pn((function(){return function(e,t,n){yn(e,t,n);var r=e.key+"-"+t.name;if(void 0===e.inserted[t.name]){var a=t;do{e.insert(t===a?"."+r:"",a,e.sheet,!0),a=a.next}while(void 0!==a)}}(t,n,r)})),null};var kn=function e(t,n){var r,a,o=t.__emotion_real===t,i=o&&t.__emotion_base||t;void 0!==n&&(r=n.label,a=n.target);var l=En(t,n,o),u=l||wn(i),d=!u("as");return function(){var f=arguments,p=o&&void 0!==t.__emotion_styles?t.__emotion_styles.slice(0):[];if(void 0!==r&&p.push("label:"+r+";"),null==f[0]||void 0===f[0].raw)p.push.apply(p,f);else{p.push(f[0][0]);for(var m=f.length,h=1;h<m;h++)p.push(f[h],f[0][h])}var A=hn((function(e,t,n){var r=d&&e.as||i,o="",s=[],f=e;if(null==e.theme){for(var m in f={},e)f[m]=e[m];f.theme=(0,c.useContext)(An)}"string"==typeof e.className?o=gn(t.registered,s,e.className):null!=e.className&&(o=e.className+" ");var h=dn(p.concat(s),t.registered,f);o+=t.key+"-"+h.name,void 0!==a&&(o+=" "+a);var A=d&&void 0===l?wn(r):u,g={};for(var y in e)d&&"as"===y||A(y)&&(g[y]=e[y]);return g.className=o,g.ref=n,(0,c.createElement)(c.Fragment,null,(0,c.createElement)(xn,{cache:t,serialized:h,isStringTag:"string"==typeof r}),(0,c.createElement)(r,g))}));return A.displayName=void 0!==r?r:"Styled("+("string"==typeof i?i:i.displayName||i.name||"Component")+")",A.defaultProps=t.defaultProps,A.__emotion_real=A,A.__emotion_base=i,A.__emotion_styles=p,A.__emotion_forwardProp=l,Object.defineProperty(A,"toString",{value:function(){return"."+a}}),A.withComponent=function(t,r){return e(t,s({},n,r,{shouldForwardProp:En(A,r,!0)})).apply(void 0,p)},A}}.bind();["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","big","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","marquee","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","picture","pre","progress","q","rp","rt","ruby","s","samp","script","section","select","small","source","span","strong","style","sub","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","title","tr","track","u","ul","var","video","wbr","circle","clipPath","defs","ellipse","foreignObject","g","image","line","linearGradient","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","svg","text","tspan"].forEach((function(e){kn[e]=kn(e)}));const Sn=kn,Cn=["variant"];function Bn(e){return 0===e.length}function _n(e){const{variant:t}=e,n=f(e,Cn);let r=t||"";return Object.keys(n).sort().forEach((t=>{r+="color"===t?Bn(r)?e[t]:i(e[t]):`${Bn(r)?t:i(t)}${i(e[t].toString())}`})),r}const Pn=function(...e){const t=e.reduce(((e,t)=>(t.filterProps.forEach((n=>{e[n]=t})),e)),{}),n=e=>Object.keys(e).reduce(((n,r)=>t[r]?S(n,t[r](e)):n),{});return n.propTypes={},n.filterProps=e.reduce(((e,t)=>e.concat(t.filterProps)),[]),n};function Nn(e){return"number"!=typeof e?e:`${e}px solid`}const On=k({prop:"border",themeKey:"borders",transform:Nn}),Tn=k({prop:"borderTop",themeKey:"borders",transform:Nn}),zn=k({prop:"borderRight",themeKey:"borders",transform:Nn}),Rn=k({prop:"borderBottom",themeKey:"borders",transform:Nn}),Ln=k({prop:"borderLeft",themeKey:"borders",transform:Nn}),Mn=k({prop:"borderColor",themeKey:"palette"}),In=k({prop:"borderTopColor",themeKey:"palette"}),Fn=k({prop:"borderRightColor",themeKey:"palette"}),jn=k({prop:"borderBottomColor",themeKey:"palette"}),Dn=k({prop:"borderLeftColor",themeKey:"palette"}),$n=e=>{if(void 0!==e.borderRadius&&null!==e.borderRadius){const t=z(e.theme,"shape.borderRadius",4),n=e=>({borderRadius:L(t,e)});return w(e,e.borderRadius,n)}return null};$n.propTypes={},$n.filterProps=["borderRadius"];const Un=Pn(On,Tn,zn,Rn,Ln,Mn,In,Fn,jn,Dn,$n),Hn=Pn(k({prop:"displayPrint",cssProperty:!1,transform:e=>({"@media print":{display:e}})}),k({prop:"display"}),k({prop:"overflow"}),k({prop:"textOverflow"}),k({prop:"visibility"}),k({prop:"whiteSpace"})),Wn=Pn(k({prop:"flexBasis"}),k({prop:"flexDirection"}),k({prop:"flexWrap"}),k({prop:"justifyContent"}),k({prop:"alignItems"}),k({prop:"alignContent"}),k({prop:"order"}),k({prop:"flex"}),k({prop:"flexGrow"}),k({prop:"flexShrink"}),k({prop:"alignSelf"}),k({prop:"justifyItems"}),k({prop:"justifySelf"})),Vn=e=>{if(void 0!==e.gap&&null!==e.gap){const t=z(e.theme,"spacing",8),n=e=>({gap:L(t,e)});return w(e,e.gap,n)}return null};Vn.propTypes={},Vn.filterProps=["gap"];const qn=e=>{if(void 0!==e.columnGap&&null!==e.columnGap){const t=z(e.theme,"spacing",8),n=e=>({columnGap:L(t,e)});return w(e,e.columnGap,n)}return null};qn.propTypes={},qn.filterProps=["columnGap"];const Qn=e=>{if(void 0!==e.rowGap&&null!==e.rowGap){const t=z(e.theme,"spacing",8),n=e=>({rowGap:L(t,e)});return w(e,e.rowGap,n)}return null};Qn.propTypes={},Qn.filterProps=["rowGap"];const Kn=Pn(Vn,qn,Qn,k({prop:"gridColumn"}),k({prop:"gridRow"}),k({prop:"gridAutoFlow"}),k({prop:"gridAutoColumns"}),k({prop:"gridAutoRows"}),k({prop:"gridTemplateColumns"}),k({prop:"gridTemplateRows"}),k({prop:"gridTemplateAreas"}),k({prop:"gridArea"})),Gn=Pn(k({prop:"position"}),k({prop:"zIndex",themeKey:"zIndex"}),k({prop:"top"}),k({prop:"right"}),k({prop:"bottom"}),k({prop:"left"}));function Yn(e,t){return"grey"===t?t:e}const Zn=Pn(k({prop:"color",themeKey:"palette",transform:Yn}),k({prop:"bgcolor",cssProperty:"backgroundColor",themeKey:"palette",transform:Yn}),k({prop:"backgroundColor",themeKey:"palette",transform:Yn})),Xn=k({prop:"boxShadow",themeKey:"shadows"});function Jn(e){return e<=1&&0!==e?100*e+"%":e}const er=k({prop:"width",transform:Jn}),tr=e=>{if(void 0!==e.maxWidth&&null!==e.maxWidth){const t=t=>{var n,r,a;return{maxWidth:(null==(n=e.theme)||null==(r=n.breakpoints)||null==(a=r.values)?void 0:a[t])||v[t]||Jn(t)}};return w(e,e.maxWidth,t)}return null};tr.filterProps=["maxWidth"];const nr=k({prop:"minWidth",transform:Jn}),rr=k({prop:"height",transform:Jn}),ar=k({prop:"maxHeight",transform:Jn}),or=k({prop:"minHeight",transform:Jn}),ir=(k({prop:"size",cssProperty:"width",transform:Jn}),k({prop:"size",cssProperty:"height",transform:Jn}),Pn(er,tr,nr,rr,ar,or,k({prop:"boxSizing"}))),lr=k({prop:"fontFamily",themeKey:"typography"}),ur=k({prop:"fontSize",themeKey:"typography"}),sr=k({prop:"fontStyle",themeKey:"typography"}),cr=k({prop:"fontWeight",themeKey:"typography"}),dr=k({prop:"letterSpacing"}),fr=k({prop:"textTransform"}),pr=k({prop:"lineHeight"}),mr=k({prop:"textAlign"}),hr=Pn(k({prop:"typography",cssProperty:!1,themeKey:"typography"}),lr,ur,sr,cr,dr,pr,mr,fr),Ar={borders:Un.filterProps,display:Hn.filterProps,flexbox:Wn.filterProps,grid:Kn.filterProps,positions:Gn.filterProps,palette:Zn.filterProps,shadows:Xn.filterProps,sizing:ir.filterProps,spacing:D.filterProps,typography:hr.filterProps},gr={borders:Un,display:Hn,flexbox:Wn,grid:Kn,positions:Gn,palette:Zn,shadows:Xn,sizing:ir,spacing:D,typography:hr};Object.keys(Ar).reduce(((e,t)=>(Ar[t].forEach((n=>{e[n]=gr[t]})),e)),{});const yr=function(e=gr){const t=Object.keys(e).reduce(((t,n)=>(e[n].filterProps.forEach((r=>{t[r]=e[n]})),t)),{});function n(e,n,r){const a={[e]:n,theme:r},o=t[e];return o?o(a):{[e]:n}}return function e(r){const{sx:a,theme:o={}}=r||{};if(!a)return null;function i(r){let a=r;if("function"==typeof r)a=r(o);else if("object"!=typeof r)return r;if(!a)return null;const i=function(e={}){var t;return(null==(t=e.keys)?void 0:t.reduce(((t,n)=>(t[e.up(n)]={},t)),{}))||{}}(o.breakpoints),l=Object.keys(i);let u=i;return Object.keys(a).forEach((r=>{const i="function"==typeof(l=a[r])?l(o):l;var l;if(null!=i)if("object"==typeof i)if(t[r])u=S(u,n(r,i,o));else{const t=w({theme:o},i,(e=>({[r]:e})));!function(...e){const t=e.reduce(((e,t)=>e.concat(Object.keys(t))),[]),n=new Set(t);return e.every((e=>n.size===Object.keys(e).length))}(t,i)?u=S(u,t):u[r]=e({sx:i,theme:o})}else u=S(u,n(r,i,o))})),s=u,l.reduce(((e,t)=>{const n=e[t];return(!n||0===Object.keys(n).length)&&delete e[t],e}),s);var s}return Array.isArray(a)?a.map(i):i(a)}}();yr.filterProps=["sx"];const vr=yr,br=["name","slot","skipVariantsResolver","skipSx","overridesResolver"],wr=["theme"],Er=["theme"];function xr(e){return 0===Object.keys(e).length}function kr(e){return"ownerState"!==e&&"theme"!==e&&"sx"!==e&&"as"!==e}const Sr=U(),Cr=function(e={}){const{defaultTheme:t=Sr,rootShouldForwardProp:n=kr,slotShouldForwardProp:r=kr,styleFunctionSx:a=vr}=e,o=e=>{const n=xr(e.theme)?t:e.theme;return a(s({},e,{theme:n}))};return o.__mui_systemSx=!0,(e,a={})=>{((e,t)=>{Array.isArray(e.__emotion_styles)&&(e.__emotion_styles=e.__emotion_styles.filter((e=>!(null!=e&&e.__mui_systemSx))))})(e);const{name:i,slot:l,skipVariantsResolver:u,skipSx:c,overridesResolver:d}=a,p=f(a,br),m=void 0!==u?u:l&&"Root"!==l||!1,h=c||!1;let A=kr;"Root"===l?A=n:l?A=r:function(e){return"string"==typeof e&&e.charCodeAt(0)>96}(e)&&(A=void 0);const g=function(e,t){return Sn(e,t)}(e,s({shouldForwardProp:A,label:void 0},p)),y=(e,...n)=>{const r=n?n.map((e=>"function"==typeof e&&e.__emotion_real!==e?n=>{let{theme:r}=n,a=f(n,wr);return e(s({theme:xr(r)?t:r},a))}:e)):[];let a=e;i&&d&&r.push((e=>{const n=xr(e.theme)?t:e.theme,r=((e,t)=>t.components&&t.components[e]&&t.components[e].styleOverrides?t.components[e].styleOverrides:null)(i,n);if(r){const t={};return Object.entries(r).forEach((([r,a])=>{t[r]="function"==typeof a?a(s({},e,{theme:n})):a})),d(e,t)}return null})),i&&!m&&r.push((e=>{const n=xr(e.theme)?t:e.theme;return((e,t,n,r)=>{var a,o;const{ownerState:i={}}=e,l=[],u=null==n||null==(a=n.components)||null==(o=a[r])?void 0:o.variants;return u&&u.forEach((n=>{let r=!0;Object.keys(n.props).forEach((t=>{i[t]!==n.props[t]&&e[t]!==n.props[t]&&(r=!1)})),r&&l.push(t[_n(n.props)])})),l})(e,((e,t)=>{let n=[];t&&t.components&&t.components[e]&&t.components[e].variants&&(n=t.components[e].variants);const r={};return n.forEach((e=>{const t=_n(e.props);r[t]=e.style})),r})(i,n),n,i)})),h||r.push(o);const l=r.length-n.length;if(Array.isArray(e)&&l>0){const t=new Array(l).fill("");a=[...e,...t],a.raw=[...e.raw,...t]}else"function"==typeof e&&e.__emotion_real!==e&&(a=n=>{let{theme:r}=n,a=f(n,Er);return e(s({theme:xr(r)?t:r},a))});return g(a,...r)};return g.withConfig&&(y.withConfig=g.withConfig),y}}({defaultTheme:Ke,rootShouldForwardProp:e=>kr(e)&&"classes"!==e}),Br=Cr,_r={active:"active",checked:"checked",completed:"completed",disabled:"disabled",error:"error",expanded:"expanded",focused:"focused",focusVisible:"focusVisible",required:"required",selected:"selected"};function Pr(e,t,n="Mui"){const r=_r[t];return r?`${n}-${r}`:`${a.generate(e)}-${t}`}function Nr(e){return Pr("MuiSvgIcon",e)}!function(e,t,n="Mui"){const r={};["root","colorPrimary","colorSecondary","colorAction","colorError","colorDisabled","fontSizeInherit","fontSizeSmall","fontSizeMedium","fontSizeLarge"].forEach((t=>{r[t]=Pr(e,t,n)}))}("MuiSvgIcon");var Or=n(893);const Tr=["children","className","color","component","fontSize","htmlColor","inheritViewBox","titleAccess","viewBox"],zr=Br("svg",{name:"MuiSvgIcon",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,"inherit"!==n.color&&t[`color${l(n.color)}`],t[`fontSize${l(n.fontSize)}`]]}})((({theme:e,ownerState:t})=>{var n,r,a,o,i,l,u,s,c,d,f,p,m,h,A,g,y;return{userSelect:"none",width:"1em",height:"1em",display:"inline-block",fill:"currentColor",flexShrink:0,transition:null==(n=e.transitions)||null==(r=n.create)?void 0:r.call(n,"fill",{duration:null==(a=e.transitions)||null==(o=a.duration)?void 0:o.shorter}),fontSize:{inherit:"inherit",small:(null==(i=e.typography)||null==(l=i.pxToRem)?void 0:l.call(i,20))||"1.25rem",medium:(null==(u=e.typography)||null==(s=u.pxToRem)?void 0:s.call(u,24))||"1.5rem",large:(null==(c=e.typography)||null==(d=c.pxToRem)?void 0:d.call(c,35))||"2.1875rem"}[t.fontSize],color:null!=(f=null==(p=(e.vars||e).palette)||null==(m=p[t.color])?void 0:m.main)?f:{action:null==(h=(e.vars||e).palette)||null==(A=h.action)?void 0:A.active,disabled:null==(g=(e.vars||e).palette)||null==(y=g.action)?void 0:y.disabled,inherit:void 0}[t.color]}})),Rr=c.forwardRef((function(e,t){const n=Ge({props:e,name:"MuiSvgIcon"}),{children:r,className:a,color:o="inherit",component:i="svg",fontSize:u="medium",htmlColor:c,inheritViewBox:d=!1,titleAccess:p,viewBox:h="0 0 24 24"}=n,A=f(n,Tr),g=s({},n,{color:o,component:i,fontSize:u,instanceFontSize:e.fontSize,inheritViewBox:d,viewBox:h}),y={};d||(y.viewBox=h);const v=(e=>{const{color:t,fontSize:n,classes:r}=e;return function(e,t,n){const r={};return Object.keys(e).forEach((a=>{r[a]=e[a].reduce(((e,r)=>(r&&(e.push(t(r)),n&&n[r]&&e.push(n[r])),e)),[]).join(" ")})),r}({root:["root","inherit"!==t&&`color${l(t)}`,`fontSize${l(n)}`]},Nr,r)})(g);return(0,Or.jsxs)(zr,s({as:i,className:m(v.root,a),focusable:"false",color:c,"aria-hidden":!p||void 0,role:p?"img":void 0,ref:t},y,A,{ownerState:g,children:[r,p?(0,Or.jsx)("title",{children:p}):null]}))}));Rr.muiName="SvgIcon";const Lr=Rr;function Mr(e,t){function n(n,r){return(0,Or.jsx)(Lr,s({"data-testid":`${t}Icon`,ref:r},n,{children:e}))}return n.muiName=Lr.muiName,c.memo(c.forwardRef(n))}const Ir=function(e,t=166){let n;function r(...r){clearTimeout(n),n=setTimeout((()=>{e.apply(this,r)}),t)}return r.clear=()=>{clearTimeout(n)},r},Fr=function(e,t){return()=>null},jr=function(e,t){return c.isValidElement(e)&&-1!==t.indexOf(e.type.muiName)};function Dr(e){return e&&e.ownerDocument||document}const $r=Dr,Ur=function(e){return Dr(e).defaultView||window},Hr=function(e,t){return()=>null};function Wr(e,t){"function"==typeof e?e(t):e&&(e.current=t)}const Vr=Wr,qr="undefined"!=typeof window?c.useLayoutEffect:c.useEffect,Qr=qr;let Kr=0;const Gr=d.useId,Yr=function(e){if(void 0!==Gr){const t=Gr();return null!=e?e:t}return function(e){const[t,n]=c.useState(e),r=e||t;return c.useEffect((()=>{null==t&&(Kr+=1,n(`mui-${Kr}`))}),[t]),r}(e)},Zr=function(e,t,n,r,a){return null},Xr=function({controlled:e,default:t,name:n,state:r="value"}){const{current:a}=c.useRef(void 0!==e),[o,i]=c.useState(t);return[a?e:o,c.useCallback((e=>{a||i(e)}),[])]},Jr=function(e){const t=c.useRef(e);return qr((()=>{t.current=e})),c.useCallback(((...e)=>(0,t.current)(...e)),[])},ea=function(...e){return c.useMemo((()=>e.every((e=>null==e))?null:t=>{e.forEach((e=>{Wr(e,t)}))}),e)};let ta,na=!0,ra=!1;const aa={text:!0,search:!0,url:!0,tel:!0,email:!0,password:!0,number:!0,date:!0,month:!0,week:!0,time:!0,datetime:!0,"datetime-local":!0};function oa(e){e.metaKey||e.altKey||e.ctrlKey||(na=!0)}function ia(){na=!1}function la(){"hidden"===this.visibilityState&&ra&&(na=!0)}const ua=function(){const e=c.useCallback((e=>{var t;null!=e&&((t=e.ownerDocument).addEventListener("keydown",oa,!0),t.addEventListener("mousedown",ia,!0),t.addEventListener("pointerdown",ia,!0),t.addEventListener("touchstart",ia,!0),t.addEventListener("visibilitychange",la,!0))}),[]),t=c.useRef(!1);return{isFocusVisibleRef:t,onFocus:function(e){return!!function(e){const{target:t}=e;try{return t.matches(":focus-visible")}catch(e){}return na||function(e){const{type:t,tagName:n}=e;return!("INPUT"!==n||!aa[t]||e.readOnly)||"TEXTAREA"===n&&!e.readOnly||!!e.isContentEditable}(t)}(e)&&(t.current=!0,!0)},onBlur:function(){return!!t.current&&(ra=!0,window.clearTimeout(ta),ta=window.setTimeout((()=>{ra=!1}),100),t.current=!1,!0)},ref:e}},sa={configure:e=>{console.warn(["MUI: `ClassNameGenerator` import from `@mui/material/utils` is outdated and might cause unexpected issues.","","You should use `import { unstable_ClassNameGenerator } from '@mui/material/className'` instead","","The detail of the issue: https://github.com/mui/material-ui/issues/30011#issuecomment-1024993401","","The updated documentation: https://mui.com/guides/classname-generator/"].join("\n")),a.configure(e)}}},383:(e,t,n)=>{"use strict";n.d(t,{Z:()=>l});var r=n(537),a=n.n(r),o=n(645),i=n.n(o)()(a());i.push([e.id,'/*\n! tailwindcss v3.2.4 | MIT License | https://tailwindcss.com\n*//*\n1. Prevent padding and border from affecting element width. (https://github.com/mozdevs/cssremedy/issues/4)\n2. Allow adding a border to an element by just adding a border-width. (https://github.com/tailwindcss/tailwindcss/pull/116)\n*/\n\n*,\n::before,\n::after {\n  box-sizing: border-box; /* 1 */\n  border-width: 0; /* 2 */\n  border-style: solid; /* 2 */\n  border-color: #e5e7eb; /* 2 */\n}\n\n::before,\n::after {\n  --tw-content: \'\';\n}\n\n/*\n1. Use a consistent sensible line-height in all browsers.\n2. Prevent adjustments of font size after orientation changes in iOS.\n3. Use a more readable tab size.\n4. Use the user\'s configured `sans` font-family by default.\n5. Use the user\'s configured `sans` font-feature-settings by default.\n*/\n\nhtml {\n  line-height: 1.5; /* 1 */\n  -webkit-text-size-adjust: 100%; /* 2 */\n  -moz-tab-size: 4; /* 3 */\n  -o-tab-size: 4;\n     tab-size: 4; /* 3 */\n  font-family: ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, "Noto Sans", sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji"; /* 4 */\n  font-feature-settings: normal; /* 5 */\n}\n\n/*\n1. Remove the margin in all browsers.\n2. Inherit line-height from `html` so users can set them as a class directly on the `html` element.\n*/\n\nbody {\n  margin: 0; /* 1 */\n  line-height: inherit; /* 2 */\n}\n\n/*\n1. Add the correct height in Firefox.\n2. Correct the inheritance of border color in Firefox. (https://bugzilla.mozilla.org/show_bug.cgi?id=190655)\n3. Ensure horizontal rules are visible by default.\n*/\n\nhr {\n  height: 0; /* 1 */\n  color: inherit; /* 2 */\n  border-top-width: 1px; /* 3 */\n}\n\n/*\nAdd the correct text decoration in Chrome, Edge, and Safari.\n*/\n\nabbr:where([title]) {\n  -webkit-text-decoration: underline dotted;\n          text-decoration: underline dotted;\n}\n\n/*\nRemove the default font size and weight for headings.\n*/\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n  font-size: inherit;\n  font-weight: inherit;\n}\n\n/*\nReset links to optimize for opt-in styling instead of opt-out.\n*/\n\na {\n  color: inherit;\n  text-decoration: inherit;\n}\n\n/*\nAdd the correct font weight in Edge and Safari.\n*/\n\nb,\nstrong {\n  font-weight: bolder;\n}\n\n/*\n1. Use the user\'s configured `mono` font family by default.\n2. Correct the odd `em` font sizing in all browsers.\n*/\n\ncode,\nkbd,\nsamp,\npre {\n  font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace; /* 1 */\n  font-size: 1em; /* 2 */\n}\n\n/*\nAdd the correct font size in all browsers.\n*/\n\nsmall {\n  font-size: 80%;\n}\n\n/*\nPrevent `sub` and `sup` elements from affecting the line height in all browsers.\n*/\n\nsub,\nsup {\n  font-size: 75%;\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline;\n}\n\nsub {\n  bottom: -0.25em;\n}\n\nsup {\n  top: -0.5em;\n}\n\n/*\n1. Remove text indentation from table contents in Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=999088, https://bugs.webkit.org/show_bug.cgi?id=201297)\n2. Correct table border color inheritance in all Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=935729, https://bugs.webkit.org/show_bug.cgi?id=195016)\n3. Remove gaps between table borders by default.\n*/\n\ntable {\n  text-indent: 0; /* 1 */\n  border-color: inherit; /* 2 */\n  border-collapse: collapse; /* 3 */\n}\n\n/*\n1. Change the font styles in all browsers.\n2. Remove the margin in Firefox and Safari.\n3. Remove default padding in all browsers.\n*/\n\nbutton,\ninput,\noptgroup,\nselect,\ntextarea {\n  font-family: inherit; /* 1 */\n  font-size: 100%; /* 1 */\n  font-weight: inherit; /* 1 */\n  line-height: inherit; /* 1 */\n  color: inherit; /* 1 */\n  margin: 0; /* 2 */\n  padding: 0; /* 3 */\n}\n\n/*\nRemove the inheritance of text transform in Edge and Firefox.\n*/\n\nbutton,\nselect {\n  text-transform: none;\n}\n\n/*\n1. Correct the inability to style clickable types in iOS and Safari.\n2. Remove default button styles.\n*/\n\nbutton,\n[type=\'button\'],\n[type=\'reset\'],\n[type=\'submit\'] {\n  -webkit-appearance: button; /* 1 */\n  background-color: transparent; /* 2 */\n  background-image: none; /* 2 */\n}\n\n/*\nUse the modern Firefox focus style for all focusable elements.\n*/\n\n:-moz-focusring {\n  outline: auto;\n}\n\n/*\nRemove the additional `:invalid` styles in Firefox. (https://github.com/mozilla/gecko-dev/blob/2f9eacd9d3d995c937b4251a5557d95d494c9be1/layout/style/res/forms.css#L728-L737)\n*/\n\n:-moz-ui-invalid {\n  box-shadow: none;\n}\n\n/*\nAdd the correct vertical alignment in Chrome and Firefox.\n*/\n\nprogress {\n  vertical-align: baseline;\n}\n\n/*\nCorrect the cursor style of increment and decrement buttons in Safari.\n*/\n\n::-webkit-inner-spin-button,\n::-webkit-outer-spin-button {\n  height: auto;\n}\n\n/*\n1. Correct the odd appearance in Chrome and Safari.\n2. Correct the outline style in Safari.\n*/\n\n[type=\'search\'] {\n  -webkit-appearance: textfield; /* 1 */\n  outline-offset: -2px; /* 2 */\n}\n\n/*\nRemove the inner padding in Chrome and Safari on macOS.\n*/\n\n::-webkit-search-decoration {\n  -webkit-appearance: none;\n}\n\n/*\n1. Correct the inability to style clickable types in iOS and Safari.\n2. Change font properties to `inherit` in Safari.\n*/\n\n::-webkit-file-upload-button {\n  -webkit-appearance: button; /* 1 */\n  font: inherit; /* 2 */\n}\n\n/*\nAdd the correct display in Chrome and Safari.\n*/\n\nsummary {\n  display: list-item;\n}\n\n/*\nRemoves the default spacing and border for appropriate elements.\n*/\n\nblockquote,\ndl,\ndd,\nh1,\nh2,\nh3,\nh4,\nh5,\nh6,\nhr,\nfigure,\np,\npre {\n  margin: 0;\n}\n\nfieldset {\n  margin: 0;\n  padding: 0;\n}\n\nlegend {\n  padding: 0;\n}\n\nol,\nul,\nmenu {\n  list-style: none;\n  margin: 0;\n  padding: 0;\n}\n\n/*\nPrevent resizing textareas horizontally by default.\n*/\n\ntextarea {\n  resize: vertical;\n}\n\n/*\n1. Reset the default placeholder opacity in Firefox. (https://github.com/tailwindlabs/tailwindcss/issues/3300)\n2. Set the default placeholder color to the user\'s configured gray 400 color.\n*/\n\ninput::-moz-placeholder, textarea::-moz-placeholder {\n  opacity: 1; /* 1 */\n  color: #9ca3af; /* 2 */\n}\n\ninput::placeholder,\ntextarea::placeholder {\n  opacity: 1; /* 1 */\n  color: #9ca3af; /* 2 */\n}\n\n/*\nSet the default cursor for buttons.\n*/\n\nbutton,\n[role="button"] {\n  cursor: pointer;\n}\n\n/*\nMake sure disabled buttons don\'t get the pointer cursor.\n*/\n:disabled {\n  cursor: default;\n}\n\n/*\n1. Make replaced elements `display: block` by default. (https://github.com/mozdevs/cssremedy/issues/14)\n2. Add `vertical-align: middle` to align replaced elements more sensibly by default. (https://github.com/jensimmons/cssremedy/issues/14#issuecomment-634934210)\n   This can trigger a poorly considered lint error in some tools but is included by design.\n*/\n\nimg,\nsvg,\nvideo,\ncanvas,\naudio,\niframe,\nembed,\nobject {\n  display: block; /* 1 */\n  vertical-align: middle; /* 2 */\n}\n\n/*\nConstrain images and videos to the parent width and preserve their intrinsic aspect ratio. (https://github.com/mozdevs/cssremedy/issues/14)\n*/\n\nimg,\nvideo {\n  max-width: 100%;\n  height: auto;\n}\n\n/* Make elements with the HTML hidden attribute stay hidden by default */\n[hidden] {\n  display: none;\n}\n\n*, ::before, ::after {\n  --tw-border-spacing-x: 0;\n  --tw-border-spacing-y: 0;\n  --tw-translate-x: 0;\n  --tw-translate-y: 0;\n  --tw-rotate: 0;\n  --tw-skew-x: 0;\n  --tw-skew-y: 0;\n  --tw-scale-x: 1;\n  --tw-scale-y: 1;\n  --tw-pan-x:  ;\n  --tw-pan-y:  ;\n  --tw-pinch-zoom:  ;\n  --tw-scroll-snap-strictness: proximity;\n  --tw-ordinal:  ;\n  --tw-slashed-zero:  ;\n  --tw-numeric-figure:  ;\n  --tw-numeric-spacing:  ;\n  --tw-numeric-fraction:  ;\n  --tw-ring-inset:  ;\n  --tw-ring-offset-width: 0px;\n  --tw-ring-offset-color: #fff;\n  --tw-ring-color: rgb(59 130 246 / 0.5);\n  --tw-ring-offset-shadow: 0 0 #0000;\n  --tw-ring-shadow: 0 0 #0000;\n  --tw-shadow: 0 0 #0000;\n  --tw-shadow-colored: 0 0 #0000;\n  --tw-blur:  ;\n  --tw-brightness:  ;\n  --tw-contrast:  ;\n  --tw-grayscale:  ;\n  --tw-hue-rotate:  ;\n  --tw-invert:  ;\n  --tw-saturate:  ;\n  --tw-sepia:  ;\n  --tw-drop-shadow:  ;\n  --tw-backdrop-blur:  ;\n  --tw-backdrop-brightness:  ;\n  --tw-backdrop-contrast:  ;\n  --tw-backdrop-grayscale:  ;\n  --tw-backdrop-hue-rotate:  ;\n  --tw-backdrop-invert:  ;\n  --tw-backdrop-opacity:  ;\n  --tw-backdrop-saturate:  ;\n  --tw-backdrop-sepia:  ;\n}\n\n::backdrop {\n  --tw-border-spacing-x: 0;\n  --tw-border-spacing-y: 0;\n  --tw-translate-x: 0;\n  --tw-translate-y: 0;\n  --tw-rotate: 0;\n  --tw-skew-x: 0;\n  --tw-skew-y: 0;\n  --tw-scale-x: 1;\n  --tw-scale-y: 1;\n  --tw-pan-x:  ;\n  --tw-pan-y:  ;\n  --tw-pinch-zoom:  ;\n  --tw-scroll-snap-strictness: proximity;\n  --tw-ordinal:  ;\n  --tw-slashed-zero:  ;\n  --tw-numeric-figure:  ;\n  --tw-numeric-spacing:  ;\n  --tw-numeric-fraction:  ;\n  --tw-ring-inset:  ;\n  --tw-ring-offset-width: 0px;\n  --tw-ring-offset-color: #fff;\n  --tw-ring-color: rgb(59 130 246 / 0.5);\n  --tw-ring-offset-shadow: 0 0 #0000;\n  --tw-ring-shadow: 0 0 #0000;\n  --tw-shadow: 0 0 #0000;\n  --tw-shadow-colored: 0 0 #0000;\n  --tw-blur:  ;\n  --tw-brightness:  ;\n  --tw-contrast:  ;\n  --tw-grayscale:  ;\n  --tw-hue-rotate:  ;\n  --tw-invert:  ;\n  --tw-saturate:  ;\n  --tw-sepia:  ;\n  --tw-drop-shadow:  ;\n  --tw-backdrop-blur:  ;\n  --tw-backdrop-brightness:  ;\n  --tw-backdrop-contrast:  ;\n  --tw-backdrop-grayscale:  ;\n  --tw-backdrop-hue-rotate:  ;\n  --tw-backdrop-invert:  ;\n  --tw-backdrop-opacity:  ;\n  --tw-backdrop-saturate:  ;\n  --tw-backdrop-sepia:  ;\n}\r\n.container {\n  width: 100%;\n}\r\n@media (min-width: 640px) {\n\n  .container {\n    max-width: 640px;\n  }\n}\r\n@media (min-width: 768px) {\n\n  .container {\n    max-width: 768px;\n  }\n}\r\n@media (min-width: 1024px) {\n\n  .container {\n    max-width: 1024px;\n  }\n}\r\n@media (min-width: 1280px) {\n\n  .container {\n    max-width: 1280px;\n  }\n}\r\n@media (min-width: 1536px) {\n\n  .container {\n    max-width: 1536px;\n  }\n}\r\n.absolute {\n  position: absolute;\n}\r\n.inset-y-0 {\n  top: 0px;\n  bottom: 0px;\n}\r\n.right-0 {\n  right: 0px;\n}\r\n.m-20 {\n  margin: 5rem;\n}\r\n.my-2 {\n  margin-top: 0.5rem;\n  margin-bottom: 0.5rem;\n}\r\n.mx-4 {\n  margin-left: 1rem;\n  margin-right: 1rem;\n}\r\n.ml-2 {\n  margin-left: 0.5rem;\n}\r\n.mt-2 {\n  margin-top: 0.5rem;\n}\r\n.mr-1 {\n  margin-right: 0.25rem;\n}\r\n.mr-4 {\n  margin-right: 1rem;\n}\r\n.mr-3 {\n  margin-right: 0.75rem;\n}\r\n.mb-1 {\n  margin-bottom: 0.25rem;\n}\r\n.mr-2 {\n  margin-right: 0.5rem;\n}\r\n.mt-4 {\n  margin-top: 1rem;\n}\r\n.mb-4 {\n  margin-bottom: 1rem;\n}\r\n.mb-7 {\n  margin-bottom: 1.75rem;\n}\r\n.mb-5 {\n  margin-bottom: 1.25rem;\n}\r\n.ml-1 {\n  margin-left: 0.25rem;\n}\r\n.block {\n  display: block;\n}\r\n.flex {\n  display: flex;\n}\r\n.inline-flex {\n  display: inline-flex;\n}\r\n.h-screen {\n  height: 100vh;\n}\r\n.h-4 {\n  height: 1rem;\n}\r\n.h-full {\n  height: 100%;\n}\r\n.w-screen {\n  width: 100vw;\n}\r\n.w-full {\n  width: 100%;\n}\r\n.w-8 {\n  width: 2rem;\n}\r\n.w-4 {\n  width: 1rem;\n}\r\n.w-1\\/5 {\n  width: 20%;\n}\r\n.w-1\\/6 {\n  width: 16.666667%;\n}\r\n.grow {\n  flex-grow: 1;\n}\r\n.cursor-pointer {\n  cursor: pointer;\n}\r\n.flex-col {\n  flex-direction: column;\n}\r\n.items-start {\n  align-items: flex-start;\n}\r\n.items-center {\n  align-items: center;\n}\r\n.items-baseline {\n  align-items: baseline;\n}\r\n.items-stretch {\n  align-items: stretch;\n}\r\n.justify-center {\n  justify-content: center;\n}\r\n.justify-between {\n  justify-content: space-between;\n}\r\n.rounded-md {\n  border-radius: 0.375rem;\n}\r\n.rounded-full {\n  border-radius: 9999px;\n}\r\n.rounded-t {\n  border-top-left-radius: 0.25rem;\n  border-top-right-radius: 0.25rem;\n}\r\n.rounded-t-md {\n  border-top-left-radius: 0.375rem;\n  border-top-right-radius: 0.375rem;\n}\r\n.rounded-b-md {\n  border-bottom-right-radius: 0.375rem;\n  border-bottom-left-radius: 0.375rem;\n}\r\n.border {\n  border-width: 1px;\n}\r\n.border-l-8 {\n  border-left-width: 8px;\n}\r\n.border-b-0 {\n  border-bottom-width: 0px;\n}\r\n.border-t-0 {\n  border-top-width: 0px;\n}\r\n.border-b {\n  border-bottom-width: 1px;\n}\r\n.border-sky-700 {\n  --tw-border-opacity: 1;\n  border-color: rgb(3 105 161 / var(--tw-border-opacity));\n}\r\n.border-gray-300 {\n  --tw-border-opacity: 1;\n  border-color: rgb(209 213 219 / var(--tw-border-opacity));\n}\r\n.bg-white {\n  --tw-bg-opacity: 1;\n  background-color: rgb(255 255 255 / var(--tw-bg-opacity));\n}\r\n.bg-slate-800 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(30 41 59 / var(--tw-bg-opacity));\n}\r\n.bg-slate-700 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(51 65 85 / var(--tw-bg-opacity));\n}\r\n.bg-slate-600 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(71 85 105 / var(--tw-bg-opacity));\n}\r\n.bg-slate-100 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(241 245 249 / var(--tw-bg-opacity));\n}\r\n.bg-gray-200 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(229 231 235 / var(--tw-bg-opacity));\n}\r\n.bg-gray-100 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(243 244 246 / var(--tw-bg-opacity));\n}\r\n.p-10 {\n  padding: 2.5rem;\n}\r\n.p-4 {\n  padding: 1rem;\n}\r\n.px-5 {\n  padding-left: 1.25rem;\n  padding-right: 1.25rem;\n}\r\n.px-4 {\n  padding-left: 1rem;\n  padding-right: 1rem;\n}\r\n.py-2 {\n  padding-top: 0.5rem;\n  padding-bottom: 0.5rem;\n}\r\n.py-1 {\n  padding-top: 0.25rem;\n  padding-bottom: 0.25rem;\n}\r\n.py-3 {\n  padding-top: 0.75rem;\n  padding-bottom: 0.75rem;\n}\r\n.px-2 {\n  padding-left: 0.5rem;\n  padding-right: 0.5rem;\n}\r\n.pr-3 {\n  padding-right: 0.75rem;\n}\r\n.pt-2 {\n  padding-top: 0.5rem;\n}\r\n.pb-3 {\n  padding-bottom: 0.75rem;\n}\r\n.pt-4 {\n  padding-top: 1rem;\n}\r\n.pl-2 {\n  padding-left: 0.5rem;\n}\r\n.font-serif {\n  font-family: ui-serif, Georgia, Cambria, "Times New Roman", Times, serif;\n}\r\n.text-sm {\n  font-size: 0.875rem;\n  line-height: 1.25rem;\n}\r\n.text-\\[8px\\] {\n  font-size: 8px;\n}\r\n.text-xl {\n  font-size: 1.25rem;\n  line-height: 1.75rem;\n}\r\n.text-2xl {\n  font-size: 1.5rem;\n  line-height: 2rem;\n}\r\n.text-lg {\n  font-size: 1.125rem;\n  line-height: 1.75rem;\n}\r\n.font-bold {\n  font-weight: 700;\n}\r\n.font-normal {\n  font-weight: 400;\n}\r\n.font-semibold {\n  font-weight: 600;\n}\r\n.uppercase {\n  text-transform: uppercase;\n}\r\n.text-white {\n  --tw-text-opacity: 1;\n  color: rgb(255 255 255 / var(--tw-text-opacity));\n}\r\n.text-gray-300 {\n  --tw-text-opacity: 1;\n  color: rgb(209 213 219 / var(--tw-text-opacity));\n}\r\n.text-sky-700 {\n  --tw-text-opacity: 1;\n  color: rgb(3 105 161 / var(--tw-text-opacity));\n}\r\n.text-gray-500 {\n  --tw-text-opacity: 1;\n  color: rgb(107 114 128 / var(--tw-text-opacity));\n}\r\n.text-slate-500 {\n  --tw-text-opacity: 1;\n  color: rgb(100 116 139 / var(--tw-text-opacity));\n}\r\n.underline {\n  text-decoration-line: underline;\n}\r\n.shadow {\n  --tw-shadow: 0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1);\n  --tw-shadow-colored: 0 1px 3px 0 var(--tw-shadow-color), 0 1px 2px -1px var(--tw-shadow-color);\n  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);\n}\r\n.outline-none {\n  outline: 2px solid transparent;\n  outline-offset: 2px;\n}',"",{version:3,sources:["webpack://./src/index.css"],names:[],mappings:"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",sourcesContent:["@tailwind base;\r\n@tailwind components;\r\n@tailwind utilities;"],sourceRoot:""}]);const l=i},645:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,a,o){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(r)for(var l=0;l<this.length;l++){var u=this[l][0];null!=u&&(i[u]=!0)}for(var s=0;s<e.length;s++){var c=[].concat(e[s]);r&&i[c[0]]||(void 0!==o&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=o),n&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=n):c[2]=n),a&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=a):c[4]="".concat(a)),t.push(c))}},t}},537:e=>{"use strict";e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(a," */"),i=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[t].concat(i).concat([o]).join("\n")}return[t].join("\n")}},448:(e,t,n)=>{"use strict";var r=n(294),a=n(840);function o(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var i=new Set,l={};function u(e,t){s(e,t),s(e+"Capture",t)}function s(e,t){for(l[e]=t,e=0;e<t.length;e++)i.add(t[e])}var c=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),d=Object.prototype.hasOwnProperty,f=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,p={},m={};function h(e,t,n,r,a,o,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=a,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=o,this.removeEmptyString=i}var A={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){A[e]=new h(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];A[t]=new h(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){A[e]=new h(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){A[e]=new h(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){A[e]=new h(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){A[e]=new h(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){A[e]=new h(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){A[e]=new h(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){A[e]=new h(e,5,!1,e.toLowerCase(),null,!1,!1)}));var g=/[\-:]([a-z])/g;function y(e){return e[1].toUpperCase()}function v(e,t,n,r){var a=A.hasOwnProperty(t)?A[t]:null;(null!==a?0!==a.type:r||!(2<t.length)||"o"!==t[0]&&"O"!==t[0]||"n"!==t[1]&&"N"!==t[1])&&(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,a,r)&&(n=null),r||null===a?function(e){return!!d.call(m,e)||!d.call(p,e)&&(f.test(e)?m[e]=!0:(p[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):a.mustUseProperty?e[a.propertyName]=null===n?3!==a.type&&"":n:(t=a.attributeName,r=a.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(a=a.type)||4===a&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(g,y);A[t]=new h(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(g,y);A[t]=new h(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(g,y);A[t]=new h(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){A[e]=new h(e,1,!1,e.toLowerCase(),null,!1,!1)})),A.xlinkHref=new h("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){A[e]=new h(e,1,!1,e.toLowerCase(),null,!0,!0)}));var b=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,w=Symbol.for("react.element"),E=Symbol.for("react.portal"),x=Symbol.for("react.fragment"),k=Symbol.for("react.strict_mode"),S=Symbol.for("react.profiler"),C=Symbol.for("react.provider"),B=Symbol.for("react.context"),_=Symbol.for("react.forward_ref"),P=Symbol.for("react.suspense"),N=Symbol.for("react.suspense_list"),O=Symbol.for("react.memo"),T=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var z=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.cache"),Symbol.for("react.tracing_marker");var R=Symbol.iterator;function L(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=R&&e[R]||e["@@iterator"])?e:null}var M,I=Object.assign;function F(e){if(void 0===M)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);M=t&&t[1]||""}return"\n"+M+e}var j=!1;function D(e,t){if(!e||j)return"";j=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(t){if(t&&r&&"string"==typeof t.stack){for(var a=t.stack.split("\n"),o=r.stack.split("\n"),i=a.length-1,l=o.length-1;1<=i&&0<=l&&a[i]!==o[l];)l--;for(;1<=i&&0<=l;i--,l--)if(a[i]!==o[l]){if(1!==i||1!==l)do{if(i--,0>--l||a[i]!==o[l]){var u="\n"+a[i].replace(" at new "," at ");return e.displayName&&u.includes("<anonymous>")&&(u=u.replace("<anonymous>",e.displayName)),u}}while(1<=i&&0<=l);break}}}finally{j=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?F(e):""}function $(e){switch(e.tag){case 5:return F(e.type);case 16:return F("Lazy");case 13:return F("Suspense");case 19:return F("SuspenseList");case 0:case 2:case 15:return D(e.type,!1);case 11:return D(e.type.render,!1);case 1:return D(e.type,!0);default:return""}}function U(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case x:return"Fragment";case E:return"Portal";case S:return"Profiler";case k:return"StrictMode";case P:return"Suspense";case N:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case B:return(e.displayName||"Context")+".Consumer";case C:return(e._context.displayName||"Context")+".Provider";case _:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case O:return null!==(t=e.displayName||null)?t:U(e.type)||"Memo";case T:t=e._payload,e=e._init;try{return U(e(t))}catch(e){}}return null}function H(e){var t=e.type;switch(e.tag){case 24:return"Cache";case 9:return(t.displayName||"Context")+".Consumer";case 10:return(t._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=(e=t.render).displayName||e.name||"",t.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return U(t);case 8:return t===k?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"==typeof t)return t.displayName||t.name||null;if("string"==typeof t)return t}return null}function W(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function V(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function q(e){e._valueTracker||(e._valueTracker=function(e){var t=V(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var a=n.get,o=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return a.call(this)},set:function(e){r=""+e,o.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function Q(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=V(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function K(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function G(e,t){var n=t.checked;return I({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function Y(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=W(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function Z(e,t){null!=(t=t.checked)&&v(e,"checked",t,!1)}function X(e,t){Z(e,t);var n=W(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?ee(e,t.type,n):t.hasOwnProperty("defaultValue")&&ee(e,t.type,W(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function J(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function ee(e,t,n){"number"===t&&K(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}var te=Array.isArray;function ne(e,t,n,r){if(e=e.options,t){t={};for(var a=0;a<n.length;a++)t["$"+n[a]]=!0;for(n=0;n<e.length;n++)a=t.hasOwnProperty("$"+e[n].value),e[n].selected!==a&&(e[n].selected=a),a&&r&&(e[n].defaultSelected=!0)}else{for(n=""+W(n),t=null,a=0;a<e.length;a++){if(e[a].value===n)return e[a].selected=!0,void(r&&(e[a].defaultSelected=!0));null!==t||e[a].disabled||(t=e[a])}null!==t&&(t.selected=!0)}}function re(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(o(91));return I({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function ae(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(o(92));if(te(n)){if(1<n.length)throw Error(o(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:W(n)}}function oe(e,t){var n=W(t.value),r=W(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function ie(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}function le(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function ue(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?le(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var se,ce,de=(ce=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((se=se||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=se.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return ce(e,t)}))}:ce);function fe(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var pe={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},me=["Webkit","ms","Moz","O"];function he(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||pe.hasOwnProperty(e)&&pe[e]?(""+t).trim():t+"px"}function Ae(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),a=he(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,a):e[n]=a}}Object.keys(pe).forEach((function(e){me.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),pe[t]=pe[e]}))}));var ge=I({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ye(e,t){if(t){if(ge[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(o(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(o(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(o(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(o(62))}}function ve(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var be=null;function we(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Ee=null,xe=null,ke=null;function Se(e){if(e=va(e)){if("function"!=typeof Ee)throw Error(o(280));var t=e.stateNode;t&&(t=wa(t),Ee(e.stateNode,e.type,t))}}function Ce(e){xe?ke?ke.push(e):ke=[e]:xe=e}function Be(){if(xe){var e=xe,t=ke;if(ke=xe=null,Se(e),t)for(e=0;e<t.length;e++)Se(t[e])}}function _e(e,t){return e(t)}function Pe(){}var Ne=!1;function Oe(e,t,n){if(Ne)return e(t,n);Ne=!0;try{return _e(e,t,n)}finally{Ne=!1,(null!==xe||null!==ke)&&(Pe(),Be())}}function Te(e,t){var n=e.stateNode;if(null===n)return null;var r=wa(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(o(231,t,typeof n));return n}var ze=!1;if(c)try{var Re={};Object.defineProperty(Re,"passive",{get:function(){ze=!0}}),window.addEventListener("test",Re,Re),window.removeEventListener("test",Re,Re)}catch(ce){ze=!1}function Le(e,t,n,r,a,o,i,l,u){var s=Array.prototype.slice.call(arguments,3);try{t.apply(n,s)}catch(e){this.onError(e)}}var Me=!1,Ie=null,Fe=!1,je=null,De={onError:function(e){Me=!0,Ie=e}};function $e(e,t,n,r,a,o,i,l,u){Me=!1,Ie=null,Le.apply(De,arguments)}function Ue(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(4098&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function He(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function We(e){if(Ue(e)!==e)throw Error(o(188))}function Ve(e){return null!==(e=function(e){var t=e.alternate;if(!t){if(null===(t=Ue(e)))throw Error(o(188));return t!==e?null:e}for(var n=e,r=t;;){var a=n.return;if(null===a)break;var i=a.alternate;if(null===i){if(null!==(r=a.return)){n=r;continue}break}if(a.child===i.child){for(i=a.child;i;){if(i===n)return We(a),e;if(i===r)return We(a),t;i=i.sibling}throw Error(o(188))}if(n.return!==r.return)n=a,r=i;else{for(var l=!1,u=a.child;u;){if(u===n){l=!0,n=a,r=i;break}if(u===r){l=!0,r=a,n=i;break}u=u.sibling}if(!l){for(u=i.child;u;){if(u===n){l=!0,n=i,r=a;break}if(u===r){l=!0,r=i,n=a;break}u=u.sibling}if(!l)throw Error(o(189))}}if(n.alternate!==r)throw Error(o(190))}if(3!==n.tag)throw Error(o(188));return n.stateNode.current===n?e:t}(e))?qe(e):null}function qe(e){if(5===e.tag||6===e.tag)return e;for(e=e.child;null!==e;){var t=qe(e);if(null!==t)return t;e=e.sibling}return null}var Qe=a.unstable_scheduleCallback,Ke=a.unstable_cancelCallback,Ge=a.unstable_shouldYield,Ye=a.unstable_requestPaint,Ze=a.unstable_now,Xe=a.unstable_getCurrentPriorityLevel,Je=a.unstable_ImmediatePriority,et=a.unstable_UserBlockingPriority,tt=a.unstable_NormalPriority,nt=a.unstable_LowPriority,rt=a.unstable_IdlePriority,at=null,ot=null,it=Math.clz32?Math.clz32:function(e){return 0==(e>>>=0)?32:31-(lt(e)/ut|0)|0},lt=Math.log,ut=Math.LN2,st=64,ct=4194304;function dt(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194240&e;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return 130023424&e;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function ft(e,t){var n=e.pendingLanes;if(0===n)return 0;var r=0,a=e.suspendedLanes,o=e.pingedLanes,i=268435455&n;if(0!==i){var l=i&~a;0!==l?r=dt(l):0!=(o&=i)&&(r=dt(o))}else 0!=(i=n&~a)?r=dt(i):0!==o&&(r=dt(o));if(0===r)return 0;if(0!==t&&t!==r&&0==(t&a)&&((a=r&-r)>=(o=t&-t)||16===a&&0!=(4194240&o)))return t;if(0!=(4&r)&&(r|=16&n),0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)a=1<<(n=31-it(t)),r|=e[n],t&=~a;return r}function pt(e,t){switch(e){case 1:case 2:case 4:return t+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;default:return-1}}function mt(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function ht(){var e=st;return 0==(4194240&(st<<=1))&&(st=64),e}function At(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function gt(e,t,n){e.pendingLanes|=t,536870912!==t&&(e.suspendedLanes=0,e.pingedLanes=0),(e=e.eventTimes)[t=31-it(t)]=n}function yt(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-it(n),a=1<<r;a&t|e[r]&t&&(e[r]|=t),n&=~a}}var vt=0;function bt(e){return 1<(e&=-e)?4<e?0!=(268435455&e)?16:536870912:4:1}var wt,Et,xt,kt,St,Ct=!1,Bt=[],_t=null,Pt=null,Nt=null,Ot=new Map,Tt=new Map,zt=[],Rt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function Lt(e,t){switch(e){case"focusin":case"focusout":_t=null;break;case"dragenter":case"dragleave":Pt=null;break;case"mouseover":case"mouseout":Nt=null;break;case"pointerover":case"pointerout":Ot.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":Tt.delete(t.pointerId)}}function Mt(e,t,n,r,a,o){return null===e||e.nativeEvent!==o?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:o,targetContainers:[a]},null!==t&&null!==(t=va(t))&&Et(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==a&&-1===t.indexOf(a)&&t.push(a),e)}function It(e){var t=ya(e.target);if(null!==t){var n=Ue(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=He(n)))return e.blockedOn=t,void St(e.priority,(function(){xt(n)}))}else if(3===t&&n.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function Ft(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Gt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=va(n))&&Et(t),e.blockedOn=n,!1;var r=new(n=e.nativeEvent).constructor(n.type,n);be=r,n.target.dispatchEvent(r),be=null,t.shift()}return!0}function jt(e,t,n){Ft(e)&&n.delete(t)}function Dt(){Ct=!1,null!==_t&&Ft(_t)&&(_t=null),null!==Pt&&Ft(Pt)&&(Pt=null),null!==Nt&&Ft(Nt)&&(Nt=null),Ot.forEach(jt),Tt.forEach(jt)}function $t(e,t){e.blockedOn===t&&(e.blockedOn=null,Ct||(Ct=!0,a.unstable_scheduleCallback(a.unstable_NormalPriority,Dt)))}function Ut(e){function t(t){return $t(t,e)}if(0<Bt.length){$t(Bt[0],e);for(var n=1;n<Bt.length;n++){var r=Bt[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==_t&&$t(_t,e),null!==Pt&&$t(Pt,e),null!==Nt&&$t(Nt,e),Ot.forEach(t),Tt.forEach(t),n=0;n<zt.length;n++)(r=zt[n]).blockedOn===e&&(r.blockedOn=null);for(;0<zt.length&&null===(n=zt[0]).blockedOn;)It(n),null===n.blockedOn&&zt.shift()}var Ht=b.ReactCurrentBatchConfig,Wt=!0;function Vt(e,t,n,r){var a=vt,o=Ht.transition;Ht.transition=null;try{vt=1,Qt(e,t,n,r)}finally{vt=a,Ht.transition=o}}function qt(e,t,n,r){var a=vt,o=Ht.transition;Ht.transition=null;try{vt=4,Qt(e,t,n,r)}finally{vt=a,Ht.transition=o}}function Qt(e,t,n,r){if(Wt){var a=Gt(e,t,n,r);if(null===a)Wr(e,t,r,Kt,n),Lt(e,r);else if(function(e,t,n,r,a){switch(t){case"focusin":return _t=Mt(_t,e,t,n,r,a),!0;case"dragenter":return Pt=Mt(Pt,e,t,n,r,a),!0;case"mouseover":return Nt=Mt(Nt,e,t,n,r,a),!0;case"pointerover":var o=a.pointerId;return Ot.set(o,Mt(Ot.get(o)||null,e,t,n,r,a)),!0;case"gotpointercapture":return o=a.pointerId,Tt.set(o,Mt(Tt.get(o)||null,e,t,n,r,a)),!0}return!1}(a,e,t,n,r))r.stopPropagation();else if(Lt(e,r),4&t&&-1<Rt.indexOf(e)){for(;null!==a;){var o=va(a);if(null!==o&&wt(o),null===(o=Gt(e,t,n,r))&&Wr(e,t,r,Kt,n),o===a)break;a=o}null!==a&&r.stopPropagation()}else Wr(e,t,r,null,n)}}var Kt=null;function Gt(e,t,n,r){if(Kt=null,null!==(e=ya(e=we(r))))if(null===(t=Ue(e)))e=null;else if(13===(n=t.tag)){if(null!==(e=He(t)))return e;e=null}else if(3===n){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null);return Kt=e,null}function Yt(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Xe()){case Je:return 1;case et:return 4;case tt:case nt:return 16;case rt:return 536870912;default:return 16}default:return 16}}var Zt=null,Xt=null,Jt=null;function en(){if(Jt)return Jt;var e,t,n=Xt,r=n.length,a="value"in Zt?Zt.value:Zt.textContent,o=a.length;for(e=0;e<r&&n[e]===a[e];e++);var i=r-e;for(t=1;t<=i&&n[r-t]===a[o-t];t++);return Jt=a.slice(e,1<t?1-t:void 0)}function tn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function nn(){return!0}function rn(){return!1}function an(e){function t(t,n,r,a,o){for(var i in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=a,this.target=o,this.currentTarget=null,e)e.hasOwnProperty(i)&&(t=e[i],this[i]=t?t(a):a[i]);return this.isDefaultPrevented=(null!=a.defaultPrevented?a.defaultPrevented:!1===a.returnValue)?nn:rn,this.isPropagationStopped=rn,this}return I(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=nn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=nn)},persist:function(){},isPersistent:nn}),t}var on,ln,un,sn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},cn=an(sn),dn=I({},sn,{view:0,detail:0}),fn=an(dn),pn=I({},dn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:Sn,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==un&&(un&&"mousemove"===e.type?(on=e.screenX-un.screenX,ln=e.screenY-un.screenY):ln=on=0,un=e),on)},movementY:function(e){return"movementY"in e?e.movementY:ln}}),mn=an(pn),hn=an(I({},pn,{dataTransfer:0})),An=an(I({},dn,{relatedTarget:0})),gn=an(I({},sn,{animationName:0,elapsedTime:0,pseudoElement:0})),yn=I({},sn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),vn=an(yn),bn=an(I({},sn,{data:0})),wn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},En={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},xn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function kn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=xn[e])&&!!t[e]}function Sn(){return kn}var Cn=I({},dn,{key:function(e){if(e.key){var t=wn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=tn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?En[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:Sn,charCode:function(e){return"keypress"===e.type?tn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?tn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),Bn=an(Cn),_n=an(I({},pn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Pn=an(I({},dn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:Sn})),Nn=an(I({},sn,{propertyName:0,elapsedTime:0,pseudoElement:0})),On=I({},pn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),Tn=an(On),zn=[9,13,27,32],Rn=c&&"CompositionEvent"in window,Ln=null;c&&"documentMode"in document&&(Ln=document.documentMode);var Mn=c&&"TextEvent"in window&&!Ln,In=c&&(!Rn||Ln&&8<Ln&&11>=Ln),Fn=String.fromCharCode(32),jn=!1;function Dn(e,t){switch(e){case"keyup":return-1!==zn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function $n(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Un=!1,Hn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Wn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Hn[e.type]:"textarea"===t}function Vn(e,t,n,r){Ce(r),0<(t=qr(t,"onChange")).length&&(n=new cn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var qn=null,Qn=null;function Kn(e){Fr(e,0)}function Gn(e){if(Q(ba(e)))return e}function Yn(e,t){if("change"===e)return t}var Zn=!1;if(c){var Xn;if(c){var Jn="oninput"in document;if(!Jn){var er=document.createElement("div");er.setAttribute("oninput","return;"),Jn="function"==typeof er.oninput}Xn=Jn}else Xn=!1;Zn=Xn&&(!document.documentMode||9<document.documentMode)}function tr(){qn&&(qn.detachEvent("onpropertychange",nr),Qn=qn=null)}function nr(e){if("value"===e.propertyName&&Gn(Qn)){var t=[];Vn(t,Qn,e,we(e)),Oe(Kn,t)}}function rr(e,t,n){"focusin"===e?(tr(),Qn=n,(qn=t).attachEvent("onpropertychange",nr)):"focusout"===e&&tr()}function ar(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Gn(Qn)}function or(e,t){if("click"===e)return Gn(t)}function ir(e,t){if("input"===e||"change"===e)return Gn(t)}var lr="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function ur(e,t){if(lr(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var a=n[r];if(!d.call(t,a)||!lr(e[a],t[a]))return!1}return!0}function sr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function cr(e,t){var n,r=sr(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=sr(r)}}function dr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?dr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function fr(){for(var e=window,t=K();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=K((e=t.contentWindow).document)}return t}function pr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function mr(e){var t=fr(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&dr(n.ownerDocument.documentElement,n)){if(null!==r&&pr(n))if(t=r.start,void 0===(e=r.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if((e=(t=n.ownerDocument||document)&&t.defaultView||window).getSelection){e=e.getSelection();var a=n.textContent.length,o=Math.min(r.start,a);r=void 0===r.end?o:Math.min(r.end,a),!e.extend&&o>r&&(a=r,r=o,o=a),a=cr(n,o);var i=cr(n,r);a&&i&&(1!==e.rangeCount||e.anchorNode!==a.node||e.anchorOffset!==a.offset||e.focusNode!==i.node||e.focusOffset!==i.offset)&&((t=t.createRange()).setStart(a.node,a.offset),e.removeAllRanges(),o>r?(e.addRange(t),e.extend(i.node,i.offset)):(t.setEnd(i.node,i.offset),e.addRange(t)))}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof n.focus&&n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var hr=c&&"documentMode"in document&&11>=document.documentMode,Ar=null,gr=null,yr=null,vr=!1;function br(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;vr||null==Ar||Ar!==K(r)||(r="selectionStart"in(r=Ar)&&pr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},yr&&ur(yr,r)||(yr=r,0<(r=qr(gr,"onSelect")).length&&(t=new cn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=Ar)))}function wr(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var Er={animationend:wr("Animation","AnimationEnd"),animationiteration:wr("Animation","AnimationIteration"),animationstart:wr("Animation","AnimationStart"),transitionend:wr("Transition","TransitionEnd")},xr={},kr={};function Sr(e){if(xr[e])return xr[e];if(!Er[e])return e;var t,n=Er[e];for(t in n)if(n.hasOwnProperty(t)&&t in kr)return xr[e]=n[t];return e}c&&(kr=document.createElement("div").style,"AnimationEvent"in window||(delete Er.animationend.animation,delete Er.animationiteration.animation,delete Er.animationstart.animation),"TransitionEvent"in window||delete Er.transitionend.transition);var Cr=Sr("animationend"),Br=Sr("animationiteration"),_r=Sr("animationstart"),Pr=Sr("transitionend"),Nr=new Map,Or="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function Tr(e,t){Nr.set(e,t),u(t,[e])}for(var zr=0;zr<Or.length;zr++){var Rr=Or[zr];Tr(Rr.toLowerCase(),"on"+(Rr[0].toUpperCase()+Rr.slice(1)))}Tr(Cr,"onAnimationEnd"),Tr(Br,"onAnimationIteration"),Tr(_r,"onAnimationStart"),Tr("dblclick","onDoubleClick"),Tr("focusin","onFocus"),Tr("focusout","onBlur"),Tr(Pr,"onTransitionEnd"),s("onMouseEnter",["mouseout","mouseover"]),s("onMouseLeave",["mouseout","mouseover"]),s("onPointerEnter",["pointerout","pointerover"]),s("onPointerLeave",["pointerout","pointerover"]),u("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),u("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),u("onBeforeInput",["compositionend","keypress","textInput","paste"]),u("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Lr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Mr=new Set("cancel close invalid load scroll toggle".split(" ").concat(Lr));function Ir(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,a,i,l,u,s){if($e.apply(this,arguments),Me){if(!Me)throw Error(o(198));var c=Ie;Me=!1,Ie=null,Fe||(Fe=!0,je=c)}}(r,t,void 0,e),e.currentTarget=null}function Fr(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],a=r.event;r=r.listeners;e:{var o=void 0;if(t)for(var i=r.length-1;0<=i;i--){var l=r[i],u=l.instance,s=l.currentTarget;if(l=l.listener,u!==o&&a.isPropagationStopped())break e;Ir(a,l,s),o=u}else for(i=0;i<r.length;i++){if(u=(l=r[i]).instance,s=l.currentTarget,l=l.listener,u!==o&&a.isPropagationStopped())break e;Ir(a,l,s),o=u}}}if(Fe)throw e=je,Fe=!1,je=null,e}function jr(e,t){var n=t[ha];void 0===n&&(n=t[ha]=new Set);var r=e+"__bubble";n.has(r)||(Hr(t,e,2,!1),n.add(r))}function Dr(e,t,n){var r=0;t&&(r|=4),Hr(n,e,r,t)}var $r="_reactListening"+Math.random().toString(36).slice(2);function Ur(e){if(!e[$r]){e[$r]=!0,i.forEach((function(t){"selectionchange"!==t&&(Mr.has(t)||Dr(t,!1,e),Dr(t,!0,e))}));var t=9===e.nodeType?e:e.ownerDocument;null===t||t[$r]||(t[$r]=!0,Dr("selectionchange",!1,t))}}function Hr(e,t,n,r){switch(Yt(t)){case 1:var a=Vt;break;case 4:a=qt;break;default:a=Qt}n=a.bind(null,t,n,e),a=void 0,!ze||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(a=!0),r?void 0!==a?e.addEventListener(t,n,{capture:!0,passive:a}):e.addEventListener(t,n,!0):void 0!==a?e.addEventListener(t,n,{passive:a}):e.addEventListener(t,n,!1)}function Wr(e,t,n,r,a){var o=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var i=r.tag;if(3===i||4===i){var l=r.stateNode.containerInfo;if(l===a||8===l.nodeType&&l.parentNode===a)break;if(4===i)for(i=r.return;null!==i;){var u=i.tag;if((3===u||4===u)&&((u=i.stateNode.containerInfo)===a||8===u.nodeType&&u.parentNode===a))return;i=i.return}for(;null!==l;){if(null===(i=ya(l)))return;if(5===(u=i.tag)||6===u){r=o=i;continue e}l=l.parentNode}}r=r.return}Oe((function(){var r=o,a=we(n),i=[];e:{var l=Nr.get(e);if(void 0!==l){var u=cn,s=e;switch(e){case"keypress":if(0===tn(n))break e;case"keydown":case"keyup":u=Bn;break;case"focusin":s="focus",u=An;break;case"focusout":s="blur",u=An;break;case"beforeblur":case"afterblur":u=An;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":u=mn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":u=hn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":u=Pn;break;case Cr:case Br:case _r:u=gn;break;case Pr:u=Nn;break;case"scroll":u=fn;break;case"wheel":u=Tn;break;case"copy":case"cut":case"paste":u=vn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":u=_n}var c=0!=(4&t),d=!c&&"scroll"===e,f=c?null!==l?l+"Capture":null:l;c=[];for(var p,m=r;null!==m;){var h=(p=m).stateNode;if(5===p.tag&&null!==h&&(p=h,null!==f&&null!=(h=Te(m,f))&&c.push(Vr(m,h,p))),d)break;m=m.return}0<c.length&&(l=new u(l,s,null,n,a),i.push({event:l,listeners:c}))}}if(0==(7&t)){if(u="mouseout"===e||"pointerout"===e,(!(l="mouseover"===e||"pointerover"===e)||n===be||!(s=n.relatedTarget||n.fromElement)||!ya(s)&&!s[ma])&&(u||l)&&(l=a.window===a?a:(l=a.ownerDocument)?l.defaultView||l.parentWindow:window,u?(u=r,null!==(s=(s=n.relatedTarget||n.toElement)?ya(s):null)&&(s!==(d=Ue(s))||5!==s.tag&&6!==s.tag)&&(s=null)):(u=null,s=r),u!==s)){if(c=mn,h="onMouseLeave",f="onMouseEnter",m="mouse","pointerout"!==e&&"pointerover"!==e||(c=_n,h="onPointerLeave",f="onPointerEnter",m="pointer"),d=null==u?l:ba(u),p=null==s?l:ba(s),(l=new c(h,m+"leave",u,n,a)).target=d,l.relatedTarget=p,h=null,ya(a)===r&&((c=new c(f,m+"enter",s,n,a)).target=p,c.relatedTarget=d,h=c),d=h,u&&s)e:{for(f=s,m=0,p=c=u;p;p=Qr(p))m++;for(p=0,h=f;h;h=Qr(h))p++;for(;0<m-p;)c=Qr(c),m--;for(;0<p-m;)f=Qr(f),p--;for(;m--;){if(c===f||null!==f&&c===f.alternate)break e;c=Qr(c),f=Qr(f)}c=null}else c=null;null!==u&&Kr(i,l,u,c,!1),null!==s&&null!==d&&Kr(i,d,s,c,!0)}if("select"===(u=(l=r?ba(r):window).nodeName&&l.nodeName.toLowerCase())||"input"===u&&"file"===l.type)var A=Yn;else if(Wn(l))if(Zn)A=ir;else{A=ar;var g=rr}else(u=l.nodeName)&&"input"===u.toLowerCase()&&("checkbox"===l.type||"radio"===l.type)&&(A=or);switch(A&&(A=A(e,r))?Vn(i,A,n,a):(g&&g(e,l,r),"focusout"===e&&(g=l._wrapperState)&&g.controlled&&"number"===l.type&&ee(l,"number",l.value)),g=r?ba(r):window,e){case"focusin":(Wn(g)||"true"===g.contentEditable)&&(Ar=g,gr=r,yr=null);break;case"focusout":yr=gr=Ar=null;break;case"mousedown":vr=!0;break;case"contextmenu":case"mouseup":case"dragend":vr=!1,br(i,n,a);break;case"selectionchange":if(hr)break;case"keydown":case"keyup":br(i,n,a)}var y;if(Rn)e:{switch(e){case"compositionstart":var v="onCompositionStart";break e;case"compositionend":v="onCompositionEnd";break e;case"compositionupdate":v="onCompositionUpdate";break e}v=void 0}else Un?Dn(e,n)&&(v="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(v="onCompositionStart");v&&(In&&"ko"!==n.locale&&(Un||"onCompositionStart"!==v?"onCompositionEnd"===v&&Un&&(y=en()):(Xt="value"in(Zt=a)?Zt.value:Zt.textContent,Un=!0)),0<(g=qr(r,v)).length&&(v=new bn(v,e,null,n,a),i.push({event:v,listeners:g}),(y||null!==(y=$n(n)))&&(v.data=y))),(y=Mn?function(e,t){switch(e){case"compositionend":return $n(t);case"keypress":return 32!==t.which?null:(jn=!0,Fn);case"textInput":return(e=t.data)===Fn&&jn?null:e;default:return null}}(e,n):function(e,t){if(Un)return"compositionend"===e||!Rn&&Dn(e,t)?(e=en(),Jt=Xt=Zt=null,Un=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return In&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(r=qr(r,"onBeforeInput")).length&&(a=new bn("onBeforeInput","beforeinput",null,n,a),i.push({event:a,listeners:r}),a.data=y)}Fr(i,t)}))}function Vr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function qr(e,t){for(var n=t+"Capture",r=[];null!==e;){var a=e,o=a.stateNode;5===a.tag&&null!==o&&(a=o,null!=(o=Te(e,n))&&r.unshift(Vr(e,o,a)),null!=(o=Te(e,t))&&r.push(Vr(e,o,a))),e=e.return}return r}function Qr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Kr(e,t,n,r,a){for(var o=t._reactName,i=[];null!==n&&n!==r;){var l=n,u=l.alternate,s=l.stateNode;if(null!==u&&u===r)break;5===l.tag&&null!==s&&(l=s,a?null!=(u=Te(n,o))&&i.unshift(Vr(n,u,l)):a||null!=(u=Te(n,o))&&i.push(Vr(n,u,l))),n=n.return}0!==i.length&&e.push({event:t,listeners:i})}var Gr=/\r\n?/g,Yr=/\u0000|\uFFFD/g;function Zr(e){return("string"==typeof e?e:""+e).replace(Gr,"\n").replace(Yr,"")}function Xr(e,t,n){if(t=Zr(t),Zr(e)!==t&&n)throw Error(o(425))}function Jr(){}var ea=null,ta=null;function na(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var ra="function"==typeof setTimeout?setTimeout:void 0,aa="function"==typeof clearTimeout?clearTimeout:void 0,oa="function"==typeof Promise?Promise:void 0,ia="function"==typeof queueMicrotask?queueMicrotask:void 0!==oa?function(e){return oa.resolve(null).then(e).catch(la)}:ra;function la(e){setTimeout((function(){throw e}))}function ua(e,t){var n=t,r=0;do{var a=n.nextSibling;if(e.removeChild(n),a&&8===a.nodeType)if("/$"===(n=a.data)){if(0===r)return e.removeChild(a),void Ut(t);r--}else"$"!==n&&"$?"!==n&&"$!"!==n||r++;n=a}while(n);Ut(t)}function sa(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t)break;if("/$"===t)return null}}return e}function ca(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var da=Math.random().toString(36).slice(2),fa="__reactFiber$"+da,pa="__reactProps$"+da,ma="__reactContainer$"+da,ha="__reactEvents$"+da,Aa="__reactListeners$"+da,ga="__reactHandles$"+da;function ya(e){var t=e[fa];if(t)return t;for(var n=e.parentNode;n;){if(t=n[ma]||n[fa]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=ca(e);null!==e;){if(n=e[fa])return n;e=ca(e)}return t}n=(e=n).parentNode}return null}function va(e){return!(e=e[fa]||e[ma])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function ba(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(o(33))}function wa(e){return e[pa]||null}var Ea=[],xa=-1;function ka(e){return{current:e}}function Sa(e){0>xa||(e.current=Ea[xa],Ea[xa]=null,xa--)}function Ca(e,t){xa++,Ea[xa]=e.current,e.current=t}var Ba={},_a=ka(Ba),Pa=ka(!1),Na=Ba;function Oa(e,t){var n=e.type.contextTypes;if(!n)return Ba;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var a,o={};for(a in n)o[a]=t[a];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=o),o}function Ta(e){return null!=e.childContextTypes}function za(){Sa(Pa),Sa(_a)}function Ra(e,t,n){if(_a.current!==Ba)throw Error(o(168));Ca(_a,t),Ca(Pa,n)}function La(e,t,n){var r=e.stateNode;if(t=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var a in r=r.getChildContext())if(!(a in t))throw Error(o(108,H(e)||"Unknown",a));return I({},n,r)}function Ma(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||Ba,Na=_a.current,Ca(_a,e),Ca(Pa,Pa.current),!0}function Ia(e,t,n){var r=e.stateNode;if(!r)throw Error(o(169));n?(e=La(e,t,Na),r.__reactInternalMemoizedMergedChildContext=e,Sa(Pa),Sa(_a),Ca(_a,e)):Sa(Pa),Ca(Pa,n)}var Fa=null,ja=!1,Da=!1;function $a(e){null===Fa?Fa=[e]:Fa.push(e)}function Ua(){if(!Da&&null!==Fa){Da=!0;var e=0,t=vt;try{var n=Fa;for(vt=1;e<n.length;e++){var r=n[e];do{r=r(!0)}while(null!==r)}Fa=null,ja=!1}catch(t){throw null!==Fa&&(Fa=Fa.slice(e+1)),Qe(Je,Ua),t}finally{vt=t,Da=!1}}return null}var Ha=[],Wa=0,Va=null,qa=0,Qa=[],Ka=0,Ga=null,Ya=1,Za="";function Xa(e,t){Ha[Wa++]=qa,Ha[Wa++]=Va,Va=e,qa=t}function Ja(e,t,n){Qa[Ka++]=Ya,Qa[Ka++]=Za,Qa[Ka++]=Ga,Ga=e;var r=Ya;e=Za;var a=32-it(r)-1;r&=~(1<<a),n+=1;var o=32-it(t)+a;if(30<o){var i=a-a%5;o=(r&(1<<i)-1).toString(32),r>>=i,a-=i,Ya=1<<32-it(t)+a|n<<a|r,Za=o+e}else Ya=1<<o|n<<a|r,Za=e}function eo(e){null!==e.return&&(Xa(e,1),Ja(e,1,0))}function to(e){for(;e===Va;)Va=Ha[--Wa],Ha[Wa]=null,qa=Ha[--Wa],Ha[Wa]=null;for(;e===Ga;)Ga=Qa[--Ka],Qa[Ka]=null,Za=Qa[--Ka],Qa[Ka]=null,Ya=Qa[--Ka],Qa[Ka]=null}var no=null,ro=null,ao=!1,oo=null;function io(e,t){var n=Os(5,null,null,0);n.elementType="DELETED",n.stateNode=t,n.return=e,null===(t=e.deletions)?(e.deletions=[n],e.flags|=16):t.push(n)}function lo(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,no=e,ro=sa(t.firstChild),!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,no=e,ro=null,!0);case 13:return null!==(t=8!==t.nodeType?null:t)&&(n=null!==Ga?{id:Ya,overflow:Za}:null,e.memoizedState={dehydrated:t,treeContext:n,retryLane:1073741824},(n=Os(18,null,null,0)).stateNode=t,n.return=e,e.child=n,no=e,ro=null,!0);default:return!1}}function uo(e){return 0!=(1&e.mode)&&0==(128&e.flags)}function so(e){if(ao){var t=ro;if(t){var n=t;if(!lo(e,t)){if(uo(e))throw Error(o(418));t=sa(n.nextSibling);var r=no;t&&lo(e,t)?io(r,n):(e.flags=-4097&e.flags|2,ao=!1,no=e)}}else{if(uo(e))throw Error(o(418));e.flags=-4097&e.flags|2,ao=!1,no=e}}}function co(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;no=e}function fo(e){if(e!==no)return!1;if(!ao)return co(e),ao=!0,!1;var t;if((t=3!==e.tag)&&!(t=5!==e.tag)&&(t="head"!==(t=e.type)&&"body"!==t&&!na(e.type,e.memoizedProps)),t&&(t=ro)){if(uo(e))throw po(),Error(o(418));for(;t;)io(e,t),t=sa(t.nextSibling)}if(co(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(o(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){ro=sa(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}ro=null}}else ro=no?sa(e.stateNode.nextSibling):null;return!0}function po(){for(var e=ro;e;)e=sa(e.nextSibling)}function mo(){ro=no=null,ao=!1}function ho(e){null===oo?oo=[e]:oo.push(e)}var Ao=b.ReactCurrentBatchConfig;function go(e,t){if(e&&e.defaultProps){for(var n in t=I({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var yo=ka(null),vo=null,bo=null,wo=null;function Eo(){wo=bo=vo=null}function xo(e){var t=yo.current;Sa(yo),e._currentValue=t}function ko(e,t,n){for(;null!==e;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==r&&(r.childLanes|=t)):null!==r&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function So(e,t){vo=e,wo=bo=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(bl=!0),e.firstContext=null)}function Co(e){var t=e._currentValue;if(wo!==e)if(e={context:e,memoizedValue:t,next:null},null===bo){if(null===vo)throw Error(o(308));bo=e,vo.dependencies={lanes:0,firstContext:e}}else bo=bo.next=e;return t}var Bo=null;function _o(e){null===Bo?Bo=[e]:Bo.push(e)}function Po(e,t,n,r){var a=t.interleaved;return null===a?(n.next=n,_o(t)):(n.next=a.next,a.next=n),t.interleaved=n,No(e,r)}function No(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}var Oo=!1;function To(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function zo(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function Ro(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function Lo(e,t,n){var r=e.updateQueue;if(null===r)return null;if(r=r.shared,0!=(2&_u)){var a=r.pending;return null===a?t.next=t:(t.next=a.next,a.next=t),r.pending=t,No(e,n)}return null===(a=r.interleaved)?(t.next=t,_o(r)):(t.next=a.next,a.next=t),r.interleaved=t,No(e,n)}function Mo(e,t,n){if(null!==(t=t.updateQueue)&&(t=t.shared,0!=(4194240&n))){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,yt(e,n)}}function Io(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var a=null,o=null;if(null!==(n=n.firstBaseUpdate)){do{var i={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===o?a=o=i:o=o.next=i,n=n.next}while(null!==n);null===o?a=o=t:o=o.next=t}else a=o=t;return n={baseState:r.baseState,firstBaseUpdate:a,lastBaseUpdate:o,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function Fo(e,t,n,r){var a=e.updateQueue;Oo=!1;var o=a.firstBaseUpdate,i=a.lastBaseUpdate,l=a.shared.pending;if(null!==l){a.shared.pending=null;var u=l,s=u.next;u.next=null,null===i?o=s:i.next=s,i=u;var c=e.alternate;null!==c&&(l=(c=c.updateQueue).lastBaseUpdate)!==i&&(null===l?c.firstBaseUpdate=s:l.next=s,c.lastBaseUpdate=u)}if(null!==o){var d=a.baseState;for(i=0,c=s=u=null,l=o;;){var f=l.lane,p=l.eventTime;if((r&f)===f){null!==c&&(c=c.next={eventTime:p,lane:0,tag:l.tag,payload:l.payload,callback:l.callback,next:null});e:{var m=e,h=l;switch(f=t,p=n,h.tag){case 1:if("function"==typeof(m=h.payload)){d=m.call(p,d,f);break e}d=m;break e;case 3:m.flags=-65537&m.flags|128;case 0:if(null==(f="function"==typeof(m=h.payload)?m.call(p,d,f):m))break e;d=I({},d,f);break e;case 2:Oo=!0}}null!==l.callback&&0!==l.lane&&(e.flags|=64,null===(f=a.effects)?a.effects=[l]:f.push(l))}else p={eventTime:p,lane:f,tag:l.tag,payload:l.payload,callback:l.callback,next:null},null===c?(s=c=p,u=d):c=c.next=p,i|=f;if(null===(l=l.next)){if(null===(l=a.shared.pending))break;l=(f=l).next,f.next=null,a.lastBaseUpdate=f,a.shared.pending=null}}if(null===c&&(u=d),a.baseState=u,a.firstBaseUpdate=s,a.lastBaseUpdate=c,null!==(t=a.shared.interleaved)){a=t;do{i|=a.lane,a=a.next}while(a!==t)}else null===o&&(a.shared.lanes=0);Mu|=i,e.lanes=i,e.memoizedState=d}}function jo(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],a=r.callback;if(null!==a){if(r.callback=null,r=n,"function"!=typeof a)throw Error(o(191,a));a.call(r)}}}var Do=(new r.Component).refs;function $o(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:I({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var Uo={isMounted:function(e){return!!(e=e._reactInternals)&&Ue(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=es(),a=ts(e),o=Ro(r,a);o.payload=t,null!=n&&(o.callback=n),null!==(t=Lo(e,o,a))&&(ns(t,e,a,r),Mo(t,e,a))},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=es(),a=ts(e),o=Ro(r,a);o.tag=1,o.payload=t,null!=n&&(o.callback=n),null!==(t=Lo(e,o,a))&&(ns(t,e,a,r),Mo(t,e,a))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=es(),r=ts(e),a=Ro(n,r);a.tag=2,null!=t&&(a.callback=t),null!==(t=Lo(e,a,r))&&(ns(t,e,r,n),Mo(t,e,r))}};function Ho(e,t,n,r,a,o,i){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,o,i):!(t.prototype&&t.prototype.isPureReactComponent&&ur(n,r)&&ur(a,o))}function Wo(e,t,n){var r=!1,a=Ba,o=t.contextType;return"object"==typeof o&&null!==o?o=Co(o):(a=Ta(t)?Na:_a.current,o=(r=null!=(r=t.contextTypes))?Oa(e,a):Ba),t=new t(n,o),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=Uo,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=a,e.__reactInternalMemoizedMaskedChildContext=o),t}function Vo(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&Uo.enqueueReplaceState(t,t.state,null)}function qo(e,t,n,r){var a=e.stateNode;a.props=n,a.state=e.memoizedState,a.refs=Do,To(e);var o=t.contextType;"object"==typeof o&&null!==o?a.context=Co(o):(o=Ta(t)?Na:_a.current,a.context=Oa(e,o)),a.state=e.memoizedState,"function"==typeof(o=t.getDerivedStateFromProps)&&($o(e,t,o,n),a.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof a.getSnapshotBeforeUpdate||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||(t=a.state,"function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount(),t!==a.state&&Uo.enqueueReplaceState(a,a.state,null),Fo(e,n,a,r),a.state=e.memoizedState),"function"==typeof a.componentDidMount&&(e.flags|=4194308)}function Qo(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(o(309));var r=n.stateNode}if(!r)throw Error(o(147,e));var a=r,i=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===i?t.ref:(t=function(e){var t=a.refs;t===Do&&(t=a.refs={}),null===e?delete t[i]:t[i]=e},t._stringRef=i,t)}if("string"!=typeof e)throw Error(o(284));if(!n._owner)throw Error(o(290,e))}return e}function Ko(e,t){throw e=Object.prototype.toString.call(t),Error(o(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function Go(e){return(0,e._init)(e._payload)}function Yo(e){function t(t,n){if(e){var r=t.deletions;null===r?(t.deletions=[n],t.flags|=16):r.push(n)}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function a(e,t){return(e=zs(e,t)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags|=2,n):r:(t.flags|=2,n):(t.flags|=1048576,n)}function l(t){return e&&null===t.alternate&&(t.flags|=2),t}function u(e,t,n,r){return null===t||6!==t.tag?((t=Is(n,e.mode,r)).return=e,t):((t=a(t,n)).return=e,t)}function s(e,t,n,r){var o=n.type;return o===x?d(e,t,n.props.children,r,n.key):null!==t&&(t.elementType===o||"object"==typeof o&&null!==o&&o.$$typeof===T&&Go(o)===t.type)?((r=a(t,n.props)).ref=Qo(e,t,n),r.return=e,r):((r=Rs(n.type,n.key,n.props,null,e.mode,r)).ref=Qo(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Fs(n,e.mode,r)).return=e,t):((t=a(t,n.children||[])).return=e,t)}function d(e,t,n,r,o){return null===t||7!==t.tag?((t=Ls(n,e.mode,r,o)).return=e,t):((t=a(t,n)).return=e,t)}function f(e,t,n){if("string"==typeof t&&""!==t||"number"==typeof t)return(t=Is(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case w:return(n=Rs(t.type,t.key,t.props,null,e.mode,n)).ref=Qo(e,null,t),n.return=e,n;case E:return(t=Fs(t,e.mode,n)).return=e,t;case T:return f(e,(0,t._init)(t._payload),n)}if(te(t)||L(t))return(t=Ls(t,e.mode,n,null)).return=e,t;Ko(e,t)}return null}function p(e,t,n,r){var a=null!==t?t.key:null;if("string"==typeof n&&""!==n||"number"==typeof n)return null!==a?null:u(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case w:return n.key===a?s(e,t,n,r):null;case E:return n.key===a?c(e,t,n,r):null;case T:return p(e,t,(a=n._init)(n._payload),r)}if(te(n)||L(n))return null!==a?null:d(e,t,n,r,null);Ko(e,n)}return null}function m(e,t,n,r,a){if("string"==typeof r&&""!==r||"number"==typeof r)return u(t,e=e.get(n)||null,""+r,a);if("object"==typeof r&&null!==r){switch(r.$$typeof){case w:return s(t,e=e.get(null===r.key?n:r.key)||null,r,a);case E:return c(t,e=e.get(null===r.key?n:r.key)||null,r,a);case T:return m(e,t,n,(0,r._init)(r._payload),a)}if(te(r)||L(r))return d(t,e=e.get(n)||null,r,a,null);Ko(t,r)}return null}function h(a,o,l,u){for(var s=null,c=null,d=o,h=o=0,A=null;null!==d&&h<l.length;h++){d.index>h?(A=d,d=null):A=d.sibling;var g=p(a,d,l[h],u);if(null===g){null===d&&(d=A);break}e&&d&&null===g.alternate&&t(a,d),o=i(g,o,h),null===c?s=g:c.sibling=g,c=g,d=A}if(h===l.length)return n(a,d),ao&&Xa(a,h),s;if(null===d){for(;h<l.length;h++)null!==(d=f(a,l[h],u))&&(o=i(d,o,h),null===c?s=d:c.sibling=d,c=d);return ao&&Xa(a,h),s}for(d=r(a,d);h<l.length;h++)null!==(A=m(d,a,h,l[h],u))&&(e&&null!==A.alternate&&d.delete(null===A.key?h:A.key),o=i(A,o,h),null===c?s=A:c.sibling=A,c=A);return e&&d.forEach((function(e){return t(a,e)})),ao&&Xa(a,h),s}function A(a,l,u,s){var c=L(u);if("function"!=typeof c)throw Error(o(150));if(null==(u=c.call(u)))throw Error(o(151));for(var d=c=null,h=l,A=l=0,g=null,y=u.next();null!==h&&!y.done;A++,y=u.next()){h.index>A?(g=h,h=null):g=h.sibling;var v=p(a,h,y.value,s);if(null===v){null===h&&(h=g);break}e&&h&&null===v.alternate&&t(a,h),l=i(v,l,A),null===d?c=v:d.sibling=v,d=v,h=g}if(y.done)return n(a,h),ao&&Xa(a,A),c;if(null===h){for(;!y.done;A++,y=u.next())null!==(y=f(a,y.value,s))&&(l=i(y,l,A),null===d?c=y:d.sibling=y,d=y);return ao&&Xa(a,A),c}for(h=r(a,h);!y.done;A++,y=u.next())null!==(y=m(h,a,A,y.value,s))&&(e&&null!==y.alternate&&h.delete(null===y.key?A:y.key),l=i(y,l,A),null===d?c=y:d.sibling=y,d=y);return e&&h.forEach((function(e){return t(a,e)})),ao&&Xa(a,A),c}return function e(r,o,i,u){if("object"==typeof i&&null!==i&&i.type===x&&null===i.key&&(i=i.props.children),"object"==typeof i&&null!==i){switch(i.$$typeof){case w:e:{for(var s=i.key,c=o;null!==c;){if(c.key===s){if((s=i.type)===x){if(7===c.tag){n(r,c.sibling),(o=a(c,i.props.children)).return=r,r=o;break e}}else if(c.elementType===s||"object"==typeof s&&null!==s&&s.$$typeof===T&&Go(s)===c.type){n(r,c.sibling),(o=a(c,i.props)).ref=Qo(r,c,i),o.return=r,r=o;break e}n(r,c);break}t(r,c),c=c.sibling}i.type===x?((o=Ls(i.props.children,r.mode,u,i.key)).return=r,r=o):((u=Rs(i.type,i.key,i.props,null,r.mode,u)).ref=Qo(r,o,i),u.return=r,r=u)}return l(r);case E:e:{for(c=i.key;null!==o;){if(o.key===c){if(4===o.tag&&o.stateNode.containerInfo===i.containerInfo&&o.stateNode.implementation===i.implementation){n(r,o.sibling),(o=a(o,i.children||[])).return=r,r=o;break e}n(r,o);break}t(r,o),o=o.sibling}(o=Fs(i,r.mode,u)).return=r,r=o}return l(r);case T:return e(r,o,(c=i._init)(i._payload),u)}if(te(i))return h(r,o,i,u);if(L(i))return A(r,o,i,u);Ko(r,i)}return"string"==typeof i&&""!==i||"number"==typeof i?(i=""+i,null!==o&&6===o.tag?(n(r,o.sibling),(o=a(o,i)).return=r,r=o):(n(r,o),(o=Is(i,r.mode,u)).return=r,r=o),l(r)):n(r,o)}}var Zo=Yo(!0),Xo=Yo(!1),Jo={},ei=ka(Jo),ti=ka(Jo),ni=ka(Jo);function ri(e){if(e===Jo)throw Error(o(174));return e}function ai(e,t){switch(Ca(ni,t),Ca(ti,e),Ca(ei,Jo),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:ue(null,"");break;default:t=ue(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}Sa(ei),Ca(ei,t)}function oi(){Sa(ei),Sa(ti),Sa(ni)}function ii(e){ri(ni.current);var t=ri(ei.current),n=ue(t,e.type);t!==n&&(Ca(ti,e),Ca(ei,n))}function li(e){ti.current===e&&(Sa(ei),Sa(ti))}var ui=ka(0);function si(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(128&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var ci=[];function di(){for(var e=0;e<ci.length;e++)ci[e]._workInProgressVersionPrimary=null;ci.length=0}var fi=b.ReactCurrentDispatcher,pi=b.ReactCurrentBatchConfig,mi=0,hi=null,Ai=null,gi=null,yi=!1,vi=!1,bi=0,wi=0;function Ei(){throw Error(o(321))}function xi(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!lr(e[n],t[n]))return!1;return!0}function ki(e,t,n,r,a,i){if(mi=i,hi=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,fi.current=null===e||null===e.memoizedState?ll:ul,e=n(r,a),vi){i=0;do{if(vi=!1,bi=0,25<=i)throw Error(o(301));i+=1,gi=Ai=null,t.updateQueue=null,fi.current=sl,e=n(r,a)}while(vi)}if(fi.current=il,t=null!==Ai&&null!==Ai.next,mi=0,gi=Ai=hi=null,yi=!1,t)throw Error(o(300));return e}function Si(){var e=0!==bi;return bi=0,e}function Ci(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===gi?hi.memoizedState=gi=e:gi=gi.next=e,gi}function Bi(){if(null===Ai){var e=hi.alternate;e=null!==e?e.memoizedState:null}else e=Ai.next;var t=null===gi?hi.memoizedState:gi.next;if(null!==t)gi=t,Ai=e;else{if(null===e)throw Error(o(310));e={memoizedState:(Ai=e).memoizedState,baseState:Ai.baseState,baseQueue:Ai.baseQueue,queue:Ai.queue,next:null},null===gi?hi.memoizedState=gi=e:gi=gi.next=e}return gi}function _i(e,t){return"function"==typeof t?t(e):t}function Pi(e){var t=Bi(),n=t.queue;if(null===n)throw Error(o(311));n.lastRenderedReducer=e;var r=Ai,a=r.baseQueue,i=n.pending;if(null!==i){if(null!==a){var l=a.next;a.next=i.next,i.next=l}r.baseQueue=a=i,n.pending=null}if(null!==a){i=a.next,r=r.baseState;var u=l=null,s=null,c=i;do{var d=c.lane;if((mi&d)===d)null!==s&&(s=s.next={lane:0,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null}),r=c.hasEagerState?c.eagerState:e(r,c.action);else{var f={lane:d,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null};null===s?(u=s=f,l=r):s=s.next=f,hi.lanes|=d,Mu|=d}c=c.next}while(null!==c&&c!==i);null===s?l=r:s.next=u,lr(r,t.memoizedState)||(bl=!0),t.memoizedState=r,t.baseState=l,t.baseQueue=s,n.lastRenderedState=r}if(null!==(e=n.interleaved)){a=e;do{i=a.lane,hi.lanes|=i,Mu|=i,a=a.next}while(a!==e)}else null===a&&(n.lanes=0);return[t.memoizedState,n.dispatch]}function Ni(e){var t=Bi(),n=t.queue;if(null===n)throw Error(o(311));n.lastRenderedReducer=e;var r=n.dispatch,a=n.pending,i=t.memoizedState;if(null!==a){n.pending=null;var l=a=a.next;do{i=e(i,l.action),l=l.next}while(l!==a);lr(i,t.memoizedState)||(bl=!0),t.memoizedState=i,null===t.baseQueue&&(t.baseState=i),n.lastRenderedState=i}return[i,r]}function Oi(){}function Ti(e,t){var n=hi,r=Bi(),a=t(),i=!lr(r.memoizedState,a);if(i&&(r.memoizedState=a,bl=!0),r=r.queue,Wi(Li.bind(null,n,r,e),[e]),r.getSnapshot!==t||i||null!==gi&&1&gi.memoizedState.tag){if(n.flags|=2048,ji(9,Ri.bind(null,n,r,a,t),void 0,null),null===Pu)throw Error(o(349));0!=(30&mi)||zi(n,t,a)}return a}function zi(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},null===(t=hi.updateQueue)?(t={lastEffect:null,stores:null},hi.updateQueue=t,t.stores=[e]):null===(n=t.stores)?t.stores=[e]:n.push(e)}function Ri(e,t,n,r){t.value=n,t.getSnapshot=r,Mi(t)&&Ii(e)}function Li(e,t,n){return n((function(){Mi(t)&&Ii(e)}))}function Mi(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!lr(e,n)}catch(e){return!0}}function Ii(e){var t=No(e,1);null!==t&&ns(t,e,1,-1)}function Fi(e){var t=Ci();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:_i,lastRenderedState:e},t.queue=e,e=e.dispatch=nl.bind(null,hi,e),[t.memoizedState,e]}function ji(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=hi.updateQueue)?(t={lastEffect:null,stores:null},hi.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function Di(){return Bi().memoizedState}function $i(e,t,n,r){var a=Ci();hi.flags|=e,a.memoizedState=ji(1|t,n,void 0,void 0===r?null:r)}function Ui(e,t,n,r){var a=Bi();r=void 0===r?null:r;var o=void 0;if(null!==Ai){var i=Ai.memoizedState;if(o=i.destroy,null!==r&&xi(r,i.deps))return void(a.memoizedState=ji(t,n,o,r))}hi.flags|=e,a.memoizedState=ji(1|t,n,o,r)}function Hi(e,t){return $i(8390656,8,e,t)}function Wi(e,t){return Ui(2048,8,e,t)}function Vi(e,t){return Ui(4,2,e,t)}function qi(e,t){return Ui(4,4,e,t)}function Qi(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Ki(e,t,n){return n=null!=n?n.concat([e]):null,Ui(4,4,Qi.bind(null,t,e),n)}function Gi(){}function Yi(e,t){var n=Bi();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&xi(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Zi(e,t){var n=Bi();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&xi(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Xi(e,t,n){return 0==(21&mi)?(e.baseState&&(e.baseState=!1,bl=!0),e.memoizedState=n):(lr(n,t)||(n=ht(),hi.lanes|=n,Mu|=n,e.baseState=!0),t)}function Ji(e,t){var n=vt;vt=0!==n&&4>n?n:4,e(!0);var r=pi.transition;pi.transition={};try{e(!1),t()}finally{vt=n,pi.transition=r}}function el(){return Bi().memoizedState}function tl(e,t,n){var r=ts(e);n={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null},rl(e)?al(t,n):null!==(n=Po(e,t,n,r))&&(ns(n,e,r,es()),ol(n,t,r))}function nl(e,t,n){var r=ts(e),a={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null};if(rl(e))al(t,a);else{var o=e.alternate;if(0===e.lanes&&(null===o||0===o.lanes)&&null!==(o=t.lastRenderedReducer))try{var i=t.lastRenderedState,l=o(i,n);if(a.hasEagerState=!0,a.eagerState=l,lr(l,i)){var u=t.interleaved;return null===u?(a.next=a,_o(t)):(a.next=u.next,u.next=a),void(t.interleaved=a)}}catch(e){}null!==(n=Po(e,t,a,r))&&(ns(n,e,r,a=es()),ol(n,t,r))}}function rl(e){var t=e.alternate;return e===hi||null!==t&&t===hi}function al(e,t){vi=yi=!0;var n=e.pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function ol(e,t,n){if(0!=(4194240&n)){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,yt(e,n)}}var il={readContext:Co,useCallback:Ei,useContext:Ei,useEffect:Ei,useImperativeHandle:Ei,useInsertionEffect:Ei,useLayoutEffect:Ei,useMemo:Ei,useReducer:Ei,useRef:Ei,useState:Ei,useDebugValue:Ei,useDeferredValue:Ei,useTransition:Ei,useMutableSource:Ei,useSyncExternalStore:Ei,useId:Ei,unstable_isNewReconciler:!1},ll={readContext:Co,useCallback:function(e,t){return Ci().memoizedState=[e,void 0===t?null:t],e},useContext:Co,useEffect:Hi,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,$i(4194308,4,Qi.bind(null,t,e),n)},useLayoutEffect:function(e,t){return $i(4194308,4,e,t)},useInsertionEffect:function(e,t){return $i(4,2,e,t)},useMemo:function(e,t){var n=Ci();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=Ci();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},r.queue=e,e=e.dispatch=tl.bind(null,hi,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},Ci().memoizedState=e},useState:Fi,useDebugValue:Gi,useDeferredValue:function(e){return Ci().memoizedState=e},useTransition:function(){var e=Fi(!1),t=e[0];return e=Ji.bind(null,e[1]),Ci().memoizedState=e,[t,e]},useMutableSource:function(){},useSyncExternalStore:function(e,t,n){var r=hi,a=Ci();if(ao){if(void 0===n)throw Error(o(407));n=n()}else{if(n=t(),null===Pu)throw Error(o(349));0!=(30&mi)||zi(r,t,n)}a.memoizedState=n;var i={value:n,getSnapshot:t};return a.queue=i,Hi(Li.bind(null,r,i,e),[e]),r.flags|=2048,ji(9,Ri.bind(null,r,i,n,t),void 0,null),n},useId:function(){var e=Ci(),t=Pu.identifierPrefix;if(ao){var n=Za;t=":"+t+"R"+(n=(Ya&~(1<<32-it(Ya)-1)).toString(32)+n),0<(n=bi++)&&(t+="H"+n.toString(32)),t+=":"}else t=":"+t+"r"+(n=wi++).toString(32)+":";return e.memoizedState=t},unstable_isNewReconciler:!1},ul={readContext:Co,useCallback:Yi,useContext:Co,useEffect:Wi,useImperativeHandle:Ki,useInsertionEffect:Vi,useLayoutEffect:qi,useMemo:Zi,useReducer:Pi,useRef:Di,useState:function(){return Pi(_i)},useDebugValue:Gi,useDeferredValue:function(e){return Xi(Bi(),Ai.memoizedState,e)},useTransition:function(){return[Pi(_i)[0],Bi().memoizedState]},useMutableSource:Oi,useSyncExternalStore:Ti,useId:el,unstable_isNewReconciler:!1},sl={readContext:Co,useCallback:Yi,useContext:Co,useEffect:Wi,useImperativeHandle:Ki,useInsertionEffect:Vi,useLayoutEffect:qi,useMemo:Zi,useReducer:Ni,useRef:Di,useState:function(){return Ni(_i)},useDebugValue:Gi,useDeferredValue:function(e){var t=Bi();return null===Ai?t.memoizedState=e:Xi(t,Ai.memoizedState,e)},useTransition:function(){return[Ni(_i)[0],Bi().memoizedState]},useMutableSource:Oi,useSyncExternalStore:Ti,useId:el,unstable_isNewReconciler:!1};function cl(e,t){try{var n="",r=t;do{n+=$(r),r=r.return}while(r);var a=n}catch(e){a="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:a,digest:null}}function dl(e,t,n){return{value:e,source:null,stack:null!=n?n:null,digest:null!=t?t:null}}function fl(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}var pl="function"==typeof WeakMap?WeakMap:Map;function ml(e,t,n){(n=Ro(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Wu||(Wu=!0,Vu=r),fl(0,t)},n}function hl(e,t,n){(n=Ro(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var a=t.value;n.payload=function(){return r(a)},n.callback=function(){fl(0,t)}}var o=e.stateNode;return null!==o&&"function"==typeof o.componentDidCatch&&(n.callback=function(){fl(0,t),"function"!=typeof r&&(null===qu?qu=new Set([this]):qu.add(this));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}function Al(e,t,n){var r=e.pingCache;if(null===r){r=e.pingCache=new pl;var a=new Set;r.set(t,a)}else void 0===(a=r.get(t))&&(a=new Set,r.set(t,a));a.has(n)||(a.add(n),e=Ss.bind(null,e,t,n),t.then(e,e))}function gl(e){do{var t;if((t=13===e.tag)&&(t=null===(t=e.memoizedState)||null!==t.dehydrated),t)return e;e=e.return}while(null!==e);return null}function yl(e,t,n,r,a){return 0==(1&e.mode)?(e===t?e.flags|=65536:(e.flags|=128,n.flags|=131072,n.flags&=-52805,1===n.tag&&(null===n.alternate?n.tag=17:((t=Ro(-1,1)).tag=2,Lo(n,t,1))),n.lanes|=1),e):(e.flags|=65536,e.lanes=a,e)}var vl=b.ReactCurrentOwner,bl=!1;function wl(e,t,n,r){t.child=null===e?Xo(t,null,n,r):Zo(t,e.child,n,r)}function El(e,t,n,r,a){n=n.render;var o=t.ref;return So(t,a),r=ki(e,t,n,r,o,a),n=Si(),null===e||bl?(ao&&n&&eo(t),t.flags|=1,wl(e,t,r,a),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~a,Wl(e,t,a))}function xl(e,t,n,r,a){if(null===e){var o=n.type;return"function"!=typeof o||Ts(o)||void 0!==o.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Rs(n.type,null,r,t,t.mode,a)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=o,kl(e,t,o,r,a))}if(o=e.child,0==(e.lanes&a)){var i=o.memoizedProps;if((n=null!==(n=n.compare)?n:ur)(i,r)&&e.ref===t.ref)return Wl(e,t,a)}return t.flags|=1,(e=zs(o,r)).ref=t.ref,e.return=t,t.child=e}function kl(e,t,n,r,a){if(null!==e){var o=e.memoizedProps;if(ur(o,r)&&e.ref===t.ref){if(bl=!1,t.pendingProps=r=o,0==(e.lanes&a))return t.lanes=e.lanes,Wl(e,t,a);0!=(131072&e.flags)&&(bl=!0)}}return Bl(e,t,n,r,a)}function Sl(e,t,n){var r=t.pendingProps,a=r.children,o=null!==e?e.memoizedState:null;if("hidden"===r.mode)if(0==(1&t.mode))t.memoizedState={baseLanes:0,cachePool:null,transitions:null},Ca(zu,Tu),Tu|=n;else{if(0==(1073741824&n))return e=null!==o?o.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e,cachePool:null,transitions:null},t.updateQueue=null,Ca(zu,Tu),Tu|=e,null;t.memoizedState={baseLanes:0,cachePool:null,transitions:null},r=null!==o?o.baseLanes:n,Ca(zu,Tu),Tu|=r}else null!==o?(r=o.baseLanes|n,t.memoizedState=null):r=n,Ca(zu,Tu),Tu|=r;return wl(e,t,a,n),t.child}function Cl(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=512,t.flags|=2097152)}function Bl(e,t,n,r,a){var o=Ta(n)?Na:_a.current;return o=Oa(t,o),So(t,a),n=ki(e,t,n,r,o,a),r=Si(),null===e||bl?(ao&&r&&eo(t),t.flags|=1,wl(e,t,n,a),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~a,Wl(e,t,a))}function _l(e,t,n,r,a){if(Ta(n)){var o=!0;Ma(t)}else o=!1;if(So(t,a),null===t.stateNode)Hl(e,t),Wo(t,n,r),qo(t,n,r,a),r=!0;else if(null===e){var i=t.stateNode,l=t.memoizedProps;i.props=l;var u=i.context,s=n.contextType;s="object"==typeof s&&null!==s?Co(s):Oa(t,s=Ta(n)?Na:_a.current);var c=n.getDerivedStateFromProps,d="function"==typeof c||"function"==typeof i.getSnapshotBeforeUpdate;d||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==r||u!==s)&&Vo(t,i,r,s),Oo=!1;var f=t.memoizedState;i.state=f,Fo(t,r,i,a),u=t.memoizedState,l!==r||f!==u||Pa.current||Oo?("function"==typeof c&&($o(t,n,c,r),u=t.memoizedState),(l=Oo||Ho(t,n,l,r,f,u,s))?(d||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||("function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount()),"function"==typeof i.componentDidMount&&(t.flags|=4194308)):("function"==typeof i.componentDidMount&&(t.flags|=4194308),t.memoizedProps=r,t.memoizedState=u),i.props=r,i.state=u,i.context=s,r=l):("function"==typeof i.componentDidMount&&(t.flags|=4194308),r=!1)}else{i=t.stateNode,zo(e,t),l=t.memoizedProps,s=t.type===t.elementType?l:go(t.type,l),i.props=s,d=t.pendingProps,f=i.context,u="object"==typeof(u=n.contextType)&&null!==u?Co(u):Oa(t,u=Ta(n)?Na:_a.current);var p=n.getDerivedStateFromProps;(c="function"==typeof p||"function"==typeof i.getSnapshotBeforeUpdate)||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==d||f!==u)&&Vo(t,i,r,u),Oo=!1,f=t.memoizedState,i.state=f,Fo(t,r,i,a);var m=t.memoizedState;l!==d||f!==m||Pa.current||Oo?("function"==typeof p&&($o(t,n,p,r),m=t.memoizedState),(s=Oo||Ho(t,n,s,r,f,m,u)||!1)?(c||"function"!=typeof i.UNSAFE_componentWillUpdate&&"function"!=typeof i.componentWillUpdate||("function"==typeof i.componentWillUpdate&&i.componentWillUpdate(r,m,u),"function"==typeof i.UNSAFE_componentWillUpdate&&i.UNSAFE_componentWillUpdate(r,m,u)),"function"==typeof i.componentDidUpdate&&(t.flags|=4),"function"==typeof i.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&f===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=m),i.props=r,i.state=m,i.context=u,r=s):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&f===e.memoizedState||(t.flags|=1024),r=!1)}return Pl(e,t,n,r,o,a)}function Pl(e,t,n,r,a,o){Cl(e,t);var i=0!=(128&t.flags);if(!r&&!i)return a&&Ia(t,n,!1),Wl(e,t,o);r=t.stateNode,vl.current=t;var l=i&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&i?(t.child=Zo(t,e.child,null,o),t.child=Zo(t,null,l,o)):wl(e,t,l,o),t.memoizedState=r.state,a&&Ia(t,n,!0),t.child}function Nl(e){var t=e.stateNode;t.pendingContext?Ra(0,t.pendingContext,t.pendingContext!==t.context):t.context&&Ra(0,t.context,!1),ai(e,t.containerInfo)}function Ol(e,t,n,r,a){return mo(),ho(a),t.flags|=256,wl(e,t,n,r),t.child}var Tl,zl,Rl,Ll={dehydrated:null,treeContext:null,retryLane:0};function Ml(e){return{baseLanes:e,cachePool:null,transitions:null}}function Il(e,t,n){var r,a=t.pendingProps,i=ui.current,l=!1,u=0!=(128&t.flags);if((r=u)||(r=(null===e||null!==e.memoizedState)&&0!=(2&i)),r?(l=!0,t.flags&=-129):null!==e&&null===e.memoizedState||(i|=1),Ca(ui,1&i),null===e)return so(t),null!==(e=t.memoizedState)&&null!==(e=e.dehydrated)?(0==(1&t.mode)?t.lanes=1:"$!"===e.data?t.lanes=8:t.lanes=1073741824,null):(u=a.children,e=a.fallback,l?(a=t.mode,l=t.child,u={mode:"hidden",children:u},0==(1&a)&&null!==l?(l.childLanes=0,l.pendingProps=u):l=Ms(u,a,0,null),e=Ls(e,a,n,null),l.return=t,e.return=t,l.sibling=e,t.child=l,t.child.memoizedState=Ml(n),t.memoizedState=Ll,e):Fl(t,u));if(null!==(i=e.memoizedState)&&null!==(r=i.dehydrated))return function(e,t,n,r,a,i,l){if(n)return 256&t.flags?(t.flags&=-257,jl(e,t,l,r=dl(Error(o(422))))):null!==t.memoizedState?(t.child=e.child,t.flags|=128,null):(i=r.fallback,a=t.mode,r=Ms({mode:"visible",children:r.children},a,0,null),(i=Ls(i,a,l,null)).flags|=2,r.return=t,i.return=t,r.sibling=i,t.child=r,0!=(1&t.mode)&&Zo(t,e.child,null,l),t.child.memoizedState=Ml(l),t.memoizedState=Ll,i);if(0==(1&t.mode))return jl(e,t,l,null);if("$!"===a.data){if(r=a.nextSibling&&a.nextSibling.dataset)var u=r.dgst;return r=u,jl(e,t,l,r=dl(i=Error(o(419)),r,void 0))}if(u=0!=(l&e.childLanes),bl||u){if(null!==(r=Pu)){switch(l&-l){case 4:a=2;break;case 16:a=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:a=32;break;case 536870912:a=268435456;break;default:a=0}0!==(a=0!=(a&(r.suspendedLanes|l))?0:a)&&a!==i.retryLane&&(i.retryLane=a,No(e,a),ns(r,e,a,-1))}return hs(),jl(e,t,l,r=dl(Error(o(421))))}return"$?"===a.data?(t.flags|=128,t.child=e.child,t=Bs.bind(null,e),a._reactRetry=t,null):(e=i.treeContext,ro=sa(a.nextSibling),no=t,ao=!0,oo=null,null!==e&&(Qa[Ka++]=Ya,Qa[Ka++]=Za,Qa[Ka++]=Ga,Ya=e.id,Za=e.overflow,Ga=t),(t=Fl(t,r.children)).flags|=4096,t)}(e,t,u,a,r,i,n);if(l){l=a.fallback,u=t.mode,r=(i=e.child).sibling;var s={mode:"hidden",children:a.children};return 0==(1&u)&&t.child!==i?((a=t.child).childLanes=0,a.pendingProps=s,t.deletions=null):(a=zs(i,s)).subtreeFlags=14680064&i.subtreeFlags,null!==r?l=zs(r,l):(l=Ls(l,u,n,null)).flags|=2,l.return=t,a.return=t,a.sibling=l,t.child=a,a=l,l=t.child,u=null===(u=e.child.memoizedState)?Ml(n):{baseLanes:u.baseLanes|n,cachePool:null,transitions:u.transitions},l.memoizedState=u,l.childLanes=e.childLanes&~n,t.memoizedState=Ll,a}return e=(l=e.child).sibling,a=zs(l,{mode:"visible",children:a.children}),0==(1&t.mode)&&(a.lanes=n),a.return=t,a.sibling=null,null!==e&&(null===(n=t.deletions)?(t.deletions=[e],t.flags|=16):n.push(e)),t.child=a,t.memoizedState=null,a}function Fl(e,t){return(t=Ms({mode:"visible",children:t},e.mode,0,null)).return=e,e.child=t}function jl(e,t,n,r){return null!==r&&ho(r),Zo(t,e.child,null,n),(e=Fl(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function Dl(e,t,n){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t),ko(e.return,t,n)}function $l(e,t,n,r,a){var o=e.memoizedState;null===o?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:a}:(o.isBackwards=t,o.rendering=null,o.renderingStartTime=0,o.last=r,o.tail=n,o.tailMode=a)}function Ul(e,t,n){var r=t.pendingProps,a=r.revealOrder,o=r.tail;if(wl(e,t,r.children,n),0!=(2&(r=ui.current)))r=1&r|2,t.flags|=128;else{if(null!==e&&0!=(128&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Dl(e,n,t);else if(19===e.tag)Dl(e,n,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(Ca(ui,r),0==(1&t.mode))t.memoizedState=null;else switch(a){case"forwards":for(n=t.child,a=null;null!==n;)null!==(e=n.alternate)&&null===si(e)&&(a=n),n=n.sibling;null===(n=a)?(a=t.child,t.child=null):(a=n.sibling,n.sibling=null),$l(t,!1,a,n,o);break;case"backwards":for(n=null,a=t.child,t.child=null;null!==a;){if(null!==(e=a.alternate)&&null===si(e)){t.child=a;break}e=a.sibling,a.sibling=n,n=a,a=e}$l(t,!0,n,null,o);break;case"together":$l(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function Hl(e,t){0==(1&t.mode)&&null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2)}function Wl(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),Mu|=t.lanes,0==(n&t.childLanes))return null;if(null!==e&&t.child!==e.child)throw Error(o(153));if(null!==t.child){for(n=zs(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=zs(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function Vl(e,t){if(!ao)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function ql(e){var t=null!==e.alternate&&e.alternate.child===e.child,n=0,r=0;if(t)for(var a=e.child;null!==a;)n|=a.lanes|a.childLanes,r|=14680064&a.subtreeFlags,r|=14680064&a.flags,a.return=e,a=a.sibling;else for(a=e.child;null!==a;)n|=a.lanes|a.childLanes,r|=a.subtreeFlags,r|=a.flags,a.return=e,a=a.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function Ql(e,t,n){var r=t.pendingProps;switch(to(t),t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return ql(t),null;case 1:case 17:return Ta(t.type)&&za(),ql(t),null;case 3:return r=t.stateNode,oi(),Sa(Pa),Sa(_a),di(),r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(fo(t)?t.flags|=4:null===e||e.memoizedState.isDehydrated&&0==(256&t.flags)||(t.flags|=1024,null!==oo&&(is(oo),oo=null))),ql(t),null;case 5:li(t);var a=ri(ni.current);if(n=t.type,null!==e&&null!=t.stateNode)zl(e,t,n,r),e.ref!==t.ref&&(t.flags|=512,t.flags|=2097152);else{if(!r){if(null===t.stateNode)throw Error(o(166));return ql(t),null}if(e=ri(ei.current),fo(t)){r=t.stateNode,n=t.type;var i=t.memoizedProps;switch(r[fa]=t,r[pa]=i,e=0!=(1&t.mode),n){case"dialog":jr("cancel",r),jr("close",r);break;case"iframe":case"object":case"embed":jr("load",r);break;case"video":case"audio":for(a=0;a<Lr.length;a++)jr(Lr[a],r);break;case"source":jr("error",r);break;case"img":case"image":case"link":jr("error",r),jr("load",r);break;case"details":jr("toggle",r);break;case"input":Y(r,i),jr("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!i.multiple},jr("invalid",r);break;case"textarea":ae(r,i),jr("invalid",r)}for(var u in ye(n,i),a=null,i)if(i.hasOwnProperty(u)){var s=i[u];"children"===u?"string"==typeof s?r.textContent!==s&&(!0!==i.suppressHydrationWarning&&Xr(r.textContent,s,e),a=["children",s]):"number"==typeof s&&r.textContent!==""+s&&(!0!==i.suppressHydrationWarning&&Xr(r.textContent,s,e),a=["children",""+s]):l.hasOwnProperty(u)&&null!=s&&"onScroll"===u&&jr("scroll",r)}switch(n){case"input":q(r),J(r,i,!0);break;case"textarea":q(r),ie(r);break;case"select":case"option":break;default:"function"==typeof i.onClick&&(r.onclick=Jr)}r=a,t.updateQueue=r,null!==r&&(t.flags|=4)}else{u=9===a.nodeType?a:a.ownerDocument,"http://www.w3.org/1999/xhtml"===e&&(e=le(n)),"http://www.w3.org/1999/xhtml"===e?"script"===n?((e=u.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=u.createElement(n,{is:r.is}):(e=u.createElement(n),"select"===n&&(u=e,r.multiple?u.multiple=!0:r.size&&(u.size=r.size))):e=u.createElementNS(e,n),e[fa]=t,e[pa]=r,Tl(e,t),t.stateNode=e;e:{switch(u=ve(n,r),n){case"dialog":jr("cancel",e),jr("close",e),a=r;break;case"iframe":case"object":case"embed":jr("load",e),a=r;break;case"video":case"audio":for(a=0;a<Lr.length;a++)jr(Lr[a],e);a=r;break;case"source":jr("error",e),a=r;break;case"img":case"image":case"link":jr("error",e),jr("load",e),a=r;break;case"details":jr("toggle",e),a=r;break;case"input":Y(e,r),a=G(e,r),jr("invalid",e);break;case"option":default:a=r;break;case"select":e._wrapperState={wasMultiple:!!r.multiple},a=I({},r,{value:void 0}),jr("invalid",e);break;case"textarea":ae(e,r),a=re(e,r),jr("invalid",e)}for(i in ye(n,a),s=a)if(s.hasOwnProperty(i)){var c=s[i];"style"===i?Ae(e,c):"dangerouslySetInnerHTML"===i?null!=(c=c?c.__html:void 0)&&de(e,c):"children"===i?"string"==typeof c?("textarea"!==n||""!==c)&&fe(e,c):"number"==typeof c&&fe(e,""+c):"suppressContentEditableWarning"!==i&&"suppressHydrationWarning"!==i&&"autoFocus"!==i&&(l.hasOwnProperty(i)?null!=c&&"onScroll"===i&&jr("scroll",e):null!=c&&v(e,i,c,u))}switch(n){case"input":q(e),J(e,r,!1);break;case"textarea":q(e),ie(e);break;case"option":null!=r.value&&e.setAttribute("value",""+W(r.value));break;case"select":e.multiple=!!r.multiple,null!=(i=r.value)?ne(e,!!r.multiple,i,!1):null!=r.defaultValue&&ne(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof a.onClick&&(e.onclick=Jr)}switch(n){case"button":case"input":case"select":case"textarea":r=!!r.autoFocus;break e;case"img":r=!0;break e;default:r=!1}}r&&(t.flags|=4)}null!==t.ref&&(t.flags|=512,t.flags|=2097152)}return ql(t),null;case 6:if(e&&null!=t.stateNode)Rl(0,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(o(166));if(n=ri(ni.current),ri(ei.current),fo(t)){if(r=t.stateNode,n=t.memoizedProps,r[fa]=t,(i=r.nodeValue!==n)&&null!==(e=no))switch(e.tag){case 3:Xr(r.nodeValue,n,0!=(1&e.mode));break;case 5:!0!==e.memoizedProps.suppressHydrationWarning&&Xr(r.nodeValue,n,0!=(1&e.mode))}i&&(t.flags|=4)}else(r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[fa]=t,t.stateNode=r}return ql(t),null;case 13:if(Sa(ui),r=t.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(ao&&null!==ro&&0!=(1&t.mode)&&0==(128&t.flags))po(),mo(),t.flags|=98560,i=!1;else if(i=fo(t),null!==r&&null!==r.dehydrated){if(null===e){if(!i)throw Error(o(318));if(!(i=null!==(i=t.memoizedState)?i.dehydrated:null))throw Error(o(317));i[fa]=t}else mo(),0==(128&t.flags)&&(t.memoizedState=null),t.flags|=4;ql(t),i=!1}else null!==oo&&(is(oo),oo=null),i=!0;if(!i)return 65536&t.flags?t:null}return 0!=(128&t.flags)?(t.lanes=n,t):((r=null!==r)!=(null!==e&&null!==e.memoizedState)&&r&&(t.child.flags|=8192,0!=(1&t.mode)&&(null===e||0!=(1&ui.current)?0===Ru&&(Ru=3):hs())),null!==t.updateQueue&&(t.flags|=4),ql(t),null);case 4:return oi(),null===e&&Ur(t.stateNode.containerInfo),ql(t),null;case 10:return xo(t.type._context),ql(t),null;case 19:if(Sa(ui),null===(i=t.memoizedState))return ql(t),null;if(r=0!=(128&t.flags),null===(u=i.rendering))if(r)Vl(i,!1);else{if(0!==Ru||null!==e&&0!=(128&e.flags))for(e=t.child;null!==e;){if(null!==(u=si(e))){for(t.flags|=128,Vl(i,!1),null!==(r=u.updateQueue)&&(t.updateQueue=r,t.flags|=4),t.subtreeFlags=0,r=n,n=t.child;null!==n;)e=r,(i=n).flags&=14680066,null===(u=i.alternate)?(i.childLanes=0,i.lanes=e,i.child=null,i.subtreeFlags=0,i.memoizedProps=null,i.memoizedState=null,i.updateQueue=null,i.dependencies=null,i.stateNode=null):(i.childLanes=u.childLanes,i.lanes=u.lanes,i.child=u.child,i.subtreeFlags=0,i.deletions=null,i.memoizedProps=u.memoizedProps,i.memoizedState=u.memoizedState,i.updateQueue=u.updateQueue,i.type=u.type,e=u.dependencies,i.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return Ca(ui,1&ui.current|2),t.child}e=e.sibling}null!==i.tail&&Ze()>Uu&&(t.flags|=128,r=!0,Vl(i,!1),t.lanes=4194304)}else{if(!r)if(null!==(e=si(u))){if(t.flags|=128,r=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),Vl(i,!0),null===i.tail&&"hidden"===i.tailMode&&!u.alternate&&!ao)return ql(t),null}else 2*Ze()-i.renderingStartTime>Uu&&1073741824!==n&&(t.flags|=128,r=!0,Vl(i,!1),t.lanes=4194304);i.isBackwards?(u.sibling=t.child,t.child=u):(null!==(n=i.last)?n.sibling=u:t.child=u,i.last=u)}return null!==i.tail?(t=i.tail,i.rendering=t,i.tail=t.sibling,i.renderingStartTime=Ze(),t.sibling=null,n=ui.current,Ca(ui,r?1&n|2:1&n),t):(ql(t),null);case 22:case 23:return ds(),r=null!==t.memoizedState,null!==e&&null!==e.memoizedState!==r&&(t.flags|=8192),r&&0!=(1&t.mode)?0!=(1073741824&Tu)&&(ql(t),6&t.subtreeFlags&&(t.flags|=8192)):ql(t),null;case 24:case 25:return null}throw Error(o(156,t.tag))}function Kl(e,t){switch(to(t),t.tag){case 1:return Ta(t.type)&&za(),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return oi(),Sa(Pa),Sa(_a),di(),0!=(65536&(e=t.flags))&&0==(128&e)?(t.flags=-65537&e|128,t):null;case 5:return li(t),null;case 13:if(Sa(ui),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(o(340));mo()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return Sa(ui),null;case 4:return oi(),null;case 10:return xo(t.type._context),null;case 22:case 23:return ds(),null;default:return null}}Tl=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},zl=function(e,t,n,r){var a=e.memoizedProps;if(a!==r){e=t.stateNode,ri(ei.current);var o,i=null;switch(n){case"input":a=G(e,a),r=G(e,r),i=[];break;case"select":a=I({},a,{value:void 0}),r=I({},r,{value:void 0}),i=[];break;case"textarea":a=re(e,a),r=re(e,r),i=[];break;default:"function"!=typeof a.onClick&&"function"==typeof r.onClick&&(e.onclick=Jr)}for(c in ye(n,r),n=null,a)if(!r.hasOwnProperty(c)&&a.hasOwnProperty(c)&&null!=a[c])if("style"===c){var u=a[c];for(o in u)u.hasOwnProperty(o)&&(n||(n={}),n[o]="")}else"dangerouslySetInnerHTML"!==c&&"children"!==c&&"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&"autoFocus"!==c&&(l.hasOwnProperty(c)?i||(i=[]):(i=i||[]).push(c,null));for(c in r){var s=r[c];if(u=null!=a?a[c]:void 0,r.hasOwnProperty(c)&&s!==u&&(null!=s||null!=u))if("style"===c)if(u){for(o in u)!u.hasOwnProperty(o)||s&&s.hasOwnProperty(o)||(n||(n={}),n[o]="");for(o in s)s.hasOwnProperty(o)&&u[o]!==s[o]&&(n||(n={}),n[o]=s[o])}else n||(i||(i=[]),i.push(c,n)),n=s;else"dangerouslySetInnerHTML"===c?(s=s?s.__html:void 0,u=u?u.__html:void 0,null!=s&&u!==s&&(i=i||[]).push(c,s)):"children"===c?"string"!=typeof s&&"number"!=typeof s||(i=i||[]).push(c,""+s):"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&(l.hasOwnProperty(c)?(null!=s&&"onScroll"===c&&jr("scroll",e),i||u===s||(i=[])):(i=i||[]).push(c,s))}n&&(i=i||[]).push("style",n);var c=i;(t.updateQueue=c)&&(t.flags|=4)}},Rl=function(e,t,n,r){n!==r&&(t.flags|=4)};var Gl=!1,Yl=!1,Zl="function"==typeof WeakSet?WeakSet:Set,Xl=null;function Jl(e,t){var n=e.ref;if(null!==n)if("function"==typeof n)try{n(null)}catch(n){ks(e,t,n)}else n.current=null}function eu(e,t,n){try{n()}catch(n){ks(e,t,n)}}var tu=!1;function nu(e,t,n){var r=t.updateQueue;if(null!==(r=null!==r?r.lastEffect:null)){var a=r=r.next;do{if((a.tag&e)===e){var o=a.destroy;a.destroy=void 0,void 0!==o&&eu(t,n,o)}a=a.next}while(a!==r)}}function ru(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function au(e){var t=e.ref;if(null!==t){var n=e.stateNode;e.tag,e=n,"function"==typeof t?t(e):t.current=e}}function ou(e){var t=e.alternate;null!==t&&(e.alternate=null,ou(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(t=e.stateNode)&&(delete t[fa],delete t[pa],delete t[ha],delete t[Aa],delete t[ga]),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function iu(e){return 5===e.tag||3===e.tag||4===e.tag}function lu(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||iu(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function uu(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Jr));else if(4!==r&&null!==(e=e.child))for(uu(e,t,n),e=e.sibling;null!==e;)uu(e,t,n),e=e.sibling}function su(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(su(e,t,n),e=e.sibling;null!==e;)su(e,t,n),e=e.sibling}var cu=null,du=!1;function fu(e,t,n){for(n=n.child;null!==n;)pu(e,t,n),n=n.sibling}function pu(e,t,n){if(ot&&"function"==typeof ot.onCommitFiberUnmount)try{ot.onCommitFiberUnmount(at,n)}catch(e){}switch(n.tag){case 5:Yl||Jl(n,t);case 6:var r=cu,a=du;cu=null,fu(e,t,n),du=a,null!==(cu=r)&&(du?(e=cu,n=n.stateNode,8===e.nodeType?e.parentNode.removeChild(n):e.removeChild(n)):cu.removeChild(n.stateNode));break;case 18:null!==cu&&(du?(e=cu,n=n.stateNode,8===e.nodeType?ua(e.parentNode,n):1===e.nodeType&&ua(e,n),Ut(e)):ua(cu,n.stateNode));break;case 4:r=cu,a=du,cu=n.stateNode.containerInfo,du=!0,fu(e,t,n),cu=r,du=a;break;case 0:case 11:case 14:case 15:if(!Yl&&null!==(r=n.updateQueue)&&null!==(r=r.lastEffect)){a=r=r.next;do{var o=a,i=o.destroy;o=o.tag,void 0!==i&&(0!=(2&o)||0!=(4&o))&&eu(n,t,i),a=a.next}while(a!==r)}fu(e,t,n);break;case 1:if(!Yl&&(Jl(n,t),"function"==typeof(r=n.stateNode).componentWillUnmount))try{r.props=n.memoizedProps,r.state=n.memoizedState,r.componentWillUnmount()}catch(e){ks(n,t,e)}fu(e,t,n);break;case 21:fu(e,t,n);break;case 22:1&n.mode?(Yl=(r=Yl)||null!==n.memoizedState,fu(e,t,n),Yl=r):fu(e,t,n);break;default:fu(e,t,n)}}function mu(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Zl),t.forEach((function(t){var r=_s.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function hu(e,t){var n=t.deletions;if(null!==n)for(var r=0;r<n.length;r++){var a=n[r];try{var i=e,l=t,u=l;e:for(;null!==u;){switch(u.tag){case 5:cu=u.stateNode,du=!1;break e;case 3:case 4:cu=u.stateNode.containerInfo,du=!0;break e}u=u.return}if(null===cu)throw Error(o(160));pu(i,l,a),cu=null,du=!1;var s=a.alternate;null!==s&&(s.return=null),a.return=null}catch(e){ks(a,t,e)}}if(12854&t.subtreeFlags)for(t=t.child;null!==t;)Au(t,e),t=t.sibling}function Au(e,t){var n=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(hu(t,e),gu(e),4&r){try{nu(3,e,e.return),ru(3,e)}catch(t){ks(e,e.return,t)}try{nu(5,e,e.return)}catch(t){ks(e,e.return,t)}}break;case 1:hu(t,e),gu(e),512&r&&null!==n&&Jl(n,n.return);break;case 5:if(hu(t,e),gu(e),512&r&&null!==n&&Jl(n,n.return),32&e.flags){var a=e.stateNode;try{fe(a,"")}catch(t){ks(e,e.return,t)}}if(4&r&&null!=(a=e.stateNode)){var i=e.memoizedProps,l=null!==n?n.memoizedProps:i,u=e.type,s=e.updateQueue;if(e.updateQueue=null,null!==s)try{"input"===u&&"radio"===i.type&&null!=i.name&&Z(a,i),ve(u,l);var c=ve(u,i);for(l=0;l<s.length;l+=2){var d=s[l],f=s[l+1];"style"===d?Ae(a,f):"dangerouslySetInnerHTML"===d?de(a,f):"children"===d?fe(a,f):v(a,d,f,c)}switch(u){case"input":X(a,i);break;case"textarea":oe(a,i);break;case"select":var p=a._wrapperState.wasMultiple;a._wrapperState.wasMultiple=!!i.multiple;var m=i.value;null!=m?ne(a,!!i.multiple,m,!1):p!==!!i.multiple&&(null!=i.defaultValue?ne(a,!!i.multiple,i.defaultValue,!0):ne(a,!!i.multiple,i.multiple?[]:"",!1))}a[pa]=i}catch(t){ks(e,e.return,t)}}break;case 6:if(hu(t,e),gu(e),4&r){if(null===e.stateNode)throw Error(o(162));a=e.stateNode,i=e.memoizedProps;try{a.nodeValue=i}catch(t){ks(e,e.return,t)}}break;case 3:if(hu(t,e),gu(e),4&r&&null!==n&&n.memoizedState.isDehydrated)try{Ut(t.containerInfo)}catch(t){ks(e,e.return,t)}break;case 4:default:hu(t,e),gu(e);break;case 13:hu(t,e),gu(e),8192&(a=e.child).flags&&(i=null!==a.memoizedState,a.stateNode.isHidden=i,!i||null!==a.alternate&&null!==a.alternate.memoizedState||($u=Ze())),4&r&&mu(e);break;case 22:if(d=null!==n&&null!==n.memoizedState,1&e.mode?(Yl=(c=Yl)||d,hu(t,e),Yl=c):hu(t,e),gu(e),8192&r){if(c=null!==e.memoizedState,(e.stateNode.isHidden=c)&&!d&&0!=(1&e.mode))for(Xl=e,d=e.child;null!==d;){for(f=Xl=d;null!==Xl;){switch(m=(p=Xl).child,p.tag){case 0:case 11:case 14:case 15:nu(4,p,p.return);break;case 1:Jl(p,p.return);var h=p.stateNode;if("function"==typeof h.componentWillUnmount){r=p,n=p.return;try{t=r,h.props=t.memoizedProps,h.state=t.memoizedState,h.componentWillUnmount()}catch(e){ks(r,n,e)}}break;case 5:Jl(p,p.return);break;case 22:if(null!==p.memoizedState){wu(f);continue}}null!==m?(m.return=p,Xl=m):wu(f)}d=d.sibling}e:for(d=null,f=e;;){if(5===f.tag){if(null===d){d=f;try{a=f.stateNode,c?"function"==typeof(i=a.style).setProperty?i.setProperty("display","none","important"):i.display="none":(u=f.stateNode,l=null!=(s=f.memoizedProps.style)&&s.hasOwnProperty("display")?s.display:null,u.style.display=he("display",l))}catch(t){ks(e,e.return,t)}}}else if(6===f.tag){if(null===d)try{f.stateNode.nodeValue=c?"":f.memoizedProps}catch(t){ks(e,e.return,t)}}else if((22!==f.tag&&23!==f.tag||null===f.memoizedState||f===e)&&null!==f.child){f.child.return=f,f=f.child;continue}if(f===e)break e;for(;null===f.sibling;){if(null===f.return||f.return===e)break e;d===f&&(d=null),f=f.return}d===f&&(d=null),f.sibling.return=f.return,f=f.sibling}}break;case 19:hu(t,e),gu(e),4&r&&mu(e);case 21:}}function gu(e){var t=e.flags;if(2&t){try{e:{for(var n=e.return;null!==n;){if(iu(n)){var r=n;break e}n=n.return}throw Error(o(160))}switch(r.tag){case 5:var a=r.stateNode;32&r.flags&&(fe(a,""),r.flags&=-33),su(e,lu(e),a);break;case 3:case 4:var i=r.stateNode.containerInfo;uu(e,lu(e),i);break;default:throw Error(o(161))}}catch(t){ks(e,e.return,t)}e.flags&=-3}4096&t&&(e.flags&=-4097)}function yu(e,t,n){Xl=e,vu(e,t,n)}function vu(e,t,n){for(var r=0!=(1&e.mode);null!==Xl;){var a=Xl,o=a.child;if(22===a.tag&&r){var i=null!==a.memoizedState||Gl;if(!i){var l=a.alternate,u=null!==l&&null!==l.memoizedState||Yl;l=Gl;var s=Yl;if(Gl=i,(Yl=u)&&!s)for(Xl=a;null!==Xl;)u=(i=Xl).child,22===i.tag&&null!==i.memoizedState?Eu(a):null!==u?(u.return=i,Xl=u):Eu(a);for(;null!==o;)Xl=o,vu(o,t,n),o=o.sibling;Xl=a,Gl=l,Yl=s}bu(e)}else 0!=(8772&a.subtreeFlags)&&null!==o?(o.return=a,Xl=o):bu(e)}}function bu(e){for(;null!==Xl;){var t=Xl;if(0!=(8772&t.flags)){var n=t.alternate;try{if(0!=(8772&t.flags))switch(t.tag){case 0:case 11:case 15:Yl||ru(5,t);break;case 1:var r=t.stateNode;if(4&t.flags&&!Yl)if(null===n)r.componentDidMount();else{var a=t.elementType===t.type?n.memoizedProps:go(t.type,n.memoizedProps);r.componentDidUpdate(a,n.memoizedState,r.__reactInternalSnapshotBeforeUpdate)}var i=t.updateQueue;null!==i&&jo(t,i,r);break;case 3:var l=t.updateQueue;if(null!==l){if(n=null,null!==t.child)switch(t.child.tag){case 5:case 1:n=t.child.stateNode}jo(t,l,n)}break;case 5:var u=t.stateNode;if(null===n&&4&t.flags){n=u;var s=t.memoizedProps;switch(t.type){case"button":case"input":case"select":case"textarea":s.autoFocus&&n.focus();break;case"img":s.src&&(n.src=s.src)}}break;case 6:case 4:case 12:case 19:case 17:case 21:case 22:case 23:case 25:break;case 13:if(null===t.memoizedState){var c=t.alternate;if(null!==c){var d=c.memoizedState;if(null!==d){var f=d.dehydrated;null!==f&&Ut(f)}}}break;default:throw Error(o(163))}Yl||512&t.flags&&au(t)}catch(e){ks(t,t.return,e)}}if(t===e){Xl=null;break}if(null!==(n=t.sibling)){n.return=t.return,Xl=n;break}Xl=t.return}}function wu(e){for(;null!==Xl;){var t=Xl;if(t===e){Xl=null;break}var n=t.sibling;if(null!==n){n.return=t.return,Xl=n;break}Xl=t.return}}function Eu(e){for(;null!==Xl;){var t=Xl;try{switch(t.tag){case 0:case 11:case 15:var n=t.return;try{ru(4,t)}catch(e){ks(t,n,e)}break;case 1:var r=t.stateNode;if("function"==typeof r.componentDidMount){var a=t.return;try{r.componentDidMount()}catch(e){ks(t,a,e)}}var o=t.return;try{au(t)}catch(e){ks(t,o,e)}break;case 5:var i=t.return;try{au(t)}catch(e){ks(t,i,e)}}}catch(e){ks(t,t.return,e)}if(t===e){Xl=null;break}var l=t.sibling;if(null!==l){l.return=t.return,Xl=l;break}Xl=t.return}}var xu,ku=Math.ceil,Su=b.ReactCurrentDispatcher,Cu=b.ReactCurrentOwner,Bu=b.ReactCurrentBatchConfig,_u=0,Pu=null,Nu=null,Ou=0,Tu=0,zu=ka(0),Ru=0,Lu=null,Mu=0,Iu=0,Fu=0,ju=null,Du=null,$u=0,Uu=1/0,Hu=null,Wu=!1,Vu=null,qu=null,Qu=!1,Ku=null,Gu=0,Yu=0,Zu=null,Xu=-1,Ju=0;function es(){return 0!=(6&_u)?Ze():-1!==Xu?Xu:Xu=Ze()}function ts(e){return 0==(1&e.mode)?1:0!=(2&_u)&&0!==Ou?Ou&-Ou:null!==Ao.transition?(0===Ju&&(Ju=ht()),Ju):0!==(e=vt)?e:e=void 0===(e=window.event)?16:Yt(e.type)}function ns(e,t,n,r){if(50<Yu)throw Yu=0,Zu=null,Error(o(185));gt(e,n,r),0!=(2&_u)&&e===Pu||(e===Pu&&(0==(2&_u)&&(Iu|=n),4===Ru&&ls(e,Ou)),rs(e,r),1===n&&0===_u&&0==(1&t.mode)&&(Uu=Ze()+500,ja&&Ua()))}function rs(e,t){var n=e.callbackNode;!function(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,a=e.expirationTimes,o=e.pendingLanes;0<o;){var i=31-it(o),l=1<<i,u=a[i];-1===u?0!=(l&n)&&0==(l&r)||(a[i]=pt(l,t)):u<=t&&(e.expiredLanes|=l),o&=~l}}(e,t);var r=ft(e,e===Pu?Ou:0);if(0===r)null!==n&&Ke(n),e.callbackNode=null,e.callbackPriority=0;else if(t=r&-r,e.callbackPriority!==t){if(null!=n&&Ke(n),1===t)0===e.tag?function(e){ja=!0,$a(e)}(us.bind(null,e)):$a(us.bind(null,e)),ia((function(){0==(6&_u)&&Ua()})),n=null;else{switch(bt(r)){case 1:n=Je;break;case 4:n=et;break;case 16:default:n=tt;break;case 536870912:n=rt}n=Ps(n,as.bind(null,e))}e.callbackPriority=t,e.callbackNode=n}}function as(e,t){if(Xu=-1,Ju=0,0!=(6&_u))throw Error(o(327));var n=e.callbackNode;if(Es()&&e.callbackNode!==n)return null;var r=ft(e,e===Pu?Ou:0);if(0===r)return null;if(0!=(30&r)||0!=(r&e.expiredLanes)||t)t=As(e,r);else{t=r;var a=_u;_u|=2;var i=ms();for(Pu===e&&Ou===t||(Hu=null,Uu=Ze()+500,fs(e,t));;)try{ys();break}catch(t){ps(e,t)}Eo(),Su.current=i,_u=a,null!==Nu?t=0:(Pu=null,Ou=0,t=Ru)}if(0!==t){if(2===t&&0!==(a=mt(e))&&(r=a,t=os(e,a)),1===t)throw n=Lu,fs(e,0),ls(e,r),rs(e,Ze()),n;if(6===t)ls(e,r);else{if(a=e.current.alternate,0==(30&r)&&!function(e){for(var t=e;;){if(16384&t.flags){var n=t.updateQueue;if(null!==n&&null!==(n=n.stores))for(var r=0;r<n.length;r++){var a=n[r],o=a.getSnapshot;a=a.value;try{if(!lr(o(),a))return!1}catch(e){return!1}}}if(n=t.child,16384&t.subtreeFlags&&null!==n)n.return=t,t=n;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}(a)&&(2===(t=As(e,r))&&0!==(i=mt(e))&&(r=i,t=os(e,i)),1===t))throw n=Lu,fs(e,0),ls(e,r),rs(e,Ze()),n;switch(e.finishedWork=a,e.finishedLanes=r,t){case 0:case 1:throw Error(o(345));case 2:case 5:ws(e,Du,Hu);break;case 3:if(ls(e,r),(130023424&r)===r&&10<(t=$u+500-Ze())){if(0!==ft(e,0))break;if(((a=e.suspendedLanes)&r)!==r){es(),e.pingedLanes|=e.suspendedLanes&a;break}e.timeoutHandle=ra(ws.bind(null,e,Du,Hu),t);break}ws(e,Du,Hu);break;case 4:if(ls(e,r),(4194240&r)===r)break;for(t=e.eventTimes,a=-1;0<r;){var l=31-it(r);i=1<<l,(l=t[l])>a&&(a=l),r&=~i}if(r=a,10<(r=(120>(r=Ze()-r)?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*ku(r/1960))-r)){e.timeoutHandle=ra(ws.bind(null,e,Du,Hu),r);break}ws(e,Du,Hu);break;default:throw Error(o(329))}}}return rs(e,Ze()),e.callbackNode===n?as.bind(null,e):null}function os(e,t){var n=ju;return e.current.memoizedState.isDehydrated&&(fs(e,t).flags|=256),2!==(e=As(e,t))&&(t=Du,Du=n,null!==t&&is(t)),e}function is(e){null===Du?Du=e:Du.push.apply(Du,e)}function ls(e,t){for(t&=~Fu,t&=~Iu,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-it(t),r=1<<n;e[n]=-1,t&=~r}}function us(e){if(0!=(6&_u))throw Error(o(327));Es();var t=ft(e,0);if(0==(1&t))return rs(e,Ze()),null;var n=As(e,t);if(0!==e.tag&&2===n){var r=mt(e);0!==r&&(t=r,n=os(e,r))}if(1===n)throw n=Lu,fs(e,0),ls(e,t),rs(e,Ze()),n;if(6===n)throw Error(o(345));return e.finishedWork=e.current.alternate,e.finishedLanes=t,ws(e,Du,Hu),rs(e,Ze()),null}function ss(e,t){var n=_u;_u|=1;try{return e(t)}finally{0===(_u=n)&&(Uu=Ze()+500,ja&&Ua())}}function cs(e){null!==Ku&&0===Ku.tag&&0==(6&_u)&&Es();var t=_u;_u|=1;var n=Bu.transition,r=vt;try{if(Bu.transition=null,vt=1,e)return e()}finally{vt=r,Bu.transition=n,0==(6&(_u=t))&&Ua()}}function ds(){Tu=zu.current,Sa(zu)}function fs(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,aa(n)),null!==Nu)for(n=Nu.return;null!==n;){var r=n;switch(to(r),r.tag){case 1:null!=(r=r.type.childContextTypes)&&za();break;case 3:oi(),Sa(Pa),Sa(_a),di();break;case 5:li(r);break;case 4:oi();break;case 13:case 19:Sa(ui);break;case 10:xo(r.type._context);break;case 22:case 23:ds()}n=n.return}if(Pu=e,Nu=e=zs(e.current,null),Ou=Tu=t,Ru=0,Lu=null,Fu=Iu=Mu=0,Du=ju=null,null!==Bo){for(t=0;t<Bo.length;t++)if(null!==(r=(n=Bo[t]).interleaved)){n.interleaved=null;var a=r.next,o=n.pending;if(null!==o){var i=o.next;o.next=a,r.next=i}n.pending=r}Bo=null}return e}function ps(e,t){for(;;){var n=Nu;try{if(Eo(),fi.current=il,yi){for(var r=hi.memoizedState;null!==r;){var a=r.queue;null!==a&&(a.pending=null),r=r.next}yi=!1}if(mi=0,gi=Ai=hi=null,vi=!1,bi=0,Cu.current=null,null===n||null===n.return){Ru=1,Lu=t,Nu=null;break}e:{var i=e,l=n.return,u=n,s=t;if(t=Ou,u.flags|=32768,null!==s&&"object"==typeof s&&"function"==typeof s.then){var c=s,d=u,f=d.tag;if(0==(1&d.mode)&&(0===f||11===f||15===f)){var p=d.alternate;p?(d.updateQueue=p.updateQueue,d.memoizedState=p.memoizedState,d.lanes=p.lanes):(d.updateQueue=null,d.memoizedState=null)}var m=gl(l);if(null!==m){m.flags&=-257,yl(m,l,u,0,t),1&m.mode&&Al(i,c,t),s=c;var h=(t=m).updateQueue;if(null===h){var A=new Set;A.add(s),t.updateQueue=A}else h.add(s);break e}if(0==(1&t)){Al(i,c,t),hs();break e}s=Error(o(426))}else if(ao&&1&u.mode){var g=gl(l);if(null!==g){0==(65536&g.flags)&&(g.flags|=256),yl(g,l,u,0,t),ho(cl(s,u));break e}}i=s=cl(s,u),4!==Ru&&(Ru=2),null===ju?ju=[i]:ju.push(i),i=l;do{switch(i.tag){case 3:i.flags|=65536,t&=-t,i.lanes|=t,Io(i,ml(0,s,t));break e;case 1:u=s;var y=i.type,v=i.stateNode;if(0==(128&i.flags)&&("function"==typeof y.getDerivedStateFromError||null!==v&&"function"==typeof v.componentDidCatch&&(null===qu||!qu.has(v)))){i.flags|=65536,t&=-t,i.lanes|=t,Io(i,hl(i,u,t));break e}}i=i.return}while(null!==i)}bs(n)}catch(e){t=e,Nu===n&&null!==n&&(Nu=n=n.return);continue}break}}function ms(){var e=Su.current;return Su.current=il,null===e?il:e}function hs(){0!==Ru&&3!==Ru&&2!==Ru||(Ru=4),null===Pu||0==(268435455&Mu)&&0==(268435455&Iu)||ls(Pu,Ou)}function As(e,t){var n=_u;_u|=2;var r=ms();for(Pu===e&&Ou===t||(Hu=null,fs(e,t));;)try{gs();break}catch(t){ps(e,t)}if(Eo(),_u=n,Su.current=r,null!==Nu)throw Error(o(261));return Pu=null,Ou=0,Ru}function gs(){for(;null!==Nu;)vs(Nu)}function ys(){for(;null!==Nu&&!Ge();)vs(Nu)}function vs(e){var t=xu(e.alternate,e,Tu);e.memoizedProps=e.pendingProps,null===t?bs(e):Nu=t,Cu.current=null}function bs(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(32768&t.flags)){if(null!==(n=Ql(n,t,Tu)))return void(Nu=n)}else{if(null!==(n=Kl(n,t)))return n.flags&=32767,void(Nu=n);if(null===e)return Ru=6,void(Nu=null);e.flags|=32768,e.subtreeFlags=0,e.deletions=null}if(null!==(t=t.sibling))return void(Nu=t);Nu=t=e}while(null!==t);0===Ru&&(Ru=5)}function ws(e,t,n){var r=vt,a=Bu.transition;try{Bu.transition=null,vt=1,function(e,t,n,r){do{Es()}while(null!==Ku);if(0!=(6&_u))throw Error(o(327));n=e.finishedWork;var a=e.finishedLanes;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(o(177));e.callbackNode=null,e.callbackPriority=0;var i=n.lanes|n.childLanes;if(function(e,t){var n=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t,t=e.entanglements;var r=e.eventTimes;for(e=e.expirationTimes;0<n;){var a=31-it(n),o=1<<a;t[a]=0,r[a]=-1,e[a]=-1,n&=~o}}(e,i),e===Pu&&(Nu=Pu=null,Ou=0),0==(2064&n.subtreeFlags)&&0==(2064&n.flags)||Qu||(Qu=!0,Ps(tt,(function(){return Es(),null}))),i=0!=(15990&n.flags),0!=(15990&n.subtreeFlags)||i){i=Bu.transition,Bu.transition=null;var l=vt;vt=1;var u=_u;_u|=4,Cu.current=null,function(e,t){if(ea=Wt,pr(e=fr())){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(n=(n=e.ownerDocument)&&n.defaultView||window).getSelection&&n.getSelection();if(r&&0!==r.rangeCount){n=r.anchorNode;var a=r.anchorOffset,i=r.focusNode;r=r.focusOffset;try{n.nodeType,i.nodeType}catch(e){n=null;break e}var l=0,u=-1,s=-1,c=0,d=0,f=e,p=null;t:for(;;){for(var m;f!==n||0!==a&&3!==f.nodeType||(u=l+a),f!==i||0!==r&&3!==f.nodeType||(s=l+r),3===f.nodeType&&(l+=f.nodeValue.length),null!==(m=f.firstChild);)p=f,f=m;for(;;){if(f===e)break t;if(p===n&&++c===a&&(u=l),p===i&&++d===r&&(s=l),null!==(m=f.nextSibling))break;p=(f=p).parentNode}f=m}n=-1===u||-1===s?null:{start:u,end:s}}else n=null}n=n||{start:0,end:0}}else n=null;for(ta={focusedElem:e,selectionRange:n},Wt=!1,Xl=t;null!==Xl;)if(e=(t=Xl).child,0!=(1028&t.subtreeFlags)&&null!==e)e.return=t,Xl=e;else for(;null!==Xl;){t=Xl;try{var h=t.alternate;if(0!=(1024&t.flags))switch(t.tag){case 0:case 11:case 15:case 5:case 6:case 4:case 17:break;case 1:if(null!==h){var A=h.memoizedProps,g=h.memoizedState,y=t.stateNode,v=y.getSnapshotBeforeUpdate(t.elementType===t.type?A:go(t.type,A),g);y.__reactInternalSnapshotBeforeUpdate=v}break;case 3:var b=t.stateNode.containerInfo;1===b.nodeType?b.textContent="":9===b.nodeType&&b.documentElement&&b.removeChild(b.documentElement);break;default:throw Error(o(163))}}catch(e){ks(t,t.return,e)}if(null!==(e=t.sibling)){e.return=t.return,Xl=e;break}Xl=t.return}h=tu,tu=!1}(e,n),Au(n,e),mr(ta),Wt=!!ea,ta=ea=null,e.current=n,yu(n,e,a),Ye(),_u=u,vt=l,Bu.transition=i}else e.current=n;if(Qu&&(Qu=!1,Ku=e,Gu=a),0===(i=e.pendingLanes)&&(qu=null),function(e){if(ot&&"function"==typeof ot.onCommitFiberRoot)try{ot.onCommitFiberRoot(at,e,void 0,128==(128&e.current.flags))}catch(e){}}(n.stateNode),rs(e,Ze()),null!==t)for(r=e.onRecoverableError,n=0;n<t.length;n++)r((a=t[n]).value,{componentStack:a.stack,digest:a.digest});if(Wu)throw Wu=!1,e=Vu,Vu=null,e;0!=(1&Gu)&&0!==e.tag&&Es(),0!=(1&(i=e.pendingLanes))?e===Zu?Yu++:(Yu=0,Zu=e):Yu=0,Ua()}(e,t,n,r)}finally{Bu.transition=a,vt=r}return null}function Es(){if(null!==Ku){var e=bt(Gu),t=Bu.transition,n=vt;try{if(Bu.transition=null,vt=16>e?16:e,null===Ku)var r=!1;else{if(e=Ku,Ku=null,Gu=0,0!=(6&_u))throw Error(o(331));var a=_u;for(_u|=4,Xl=e.current;null!==Xl;){var i=Xl,l=i.child;if(0!=(16&Xl.flags)){var u=i.deletions;if(null!==u){for(var s=0;s<u.length;s++){var c=u[s];for(Xl=c;null!==Xl;){var d=Xl;switch(d.tag){case 0:case 11:case 15:nu(8,d,i)}var f=d.child;if(null!==f)f.return=d,Xl=f;else for(;null!==Xl;){var p=(d=Xl).sibling,m=d.return;if(ou(d),d===c){Xl=null;break}if(null!==p){p.return=m,Xl=p;break}Xl=m}}}var h=i.alternate;if(null!==h){var A=h.child;if(null!==A){h.child=null;do{var g=A.sibling;A.sibling=null,A=g}while(null!==A)}}Xl=i}}if(0!=(2064&i.subtreeFlags)&&null!==l)l.return=i,Xl=l;else e:for(;null!==Xl;){if(0!=(2048&(i=Xl).flags))switch(i.tag){case 0:case 11:case 15:nu(9,i,i.return)}var y=i.sibling;if(null!==y){y.return=i.return,Xl=y;break e}Xl=i.return}}var v=e.current;for(Xl=v;null!==Xl;){var b=(l=Xl).child;if(0!=(2064&l.subtreeFlags)&&null!==b)b.return=l,Xl=b;else e:for(l=v;null!==Xl;){if(0!=(2048&(u=Xl).flags))try{switch(u.tag){case 0:case 11:case 15:ru(9,u)}}catch(e){ks(u,u.return,e)}if(u===l){Xl=null;break e}var w=u.sibling;if(null!==w){w.return=u.return,Xl=w;break e}Xl=u.return}}if(_u=a,Ua(),ot&&"function"==typeof ot.onPostCommitFiberRoot)try{ot.onPostCommitFiberRoot(at,e)}catch(e){}r=!0}return r}finally{vt=n,Bu.transition=t}}return!1}function xs(e,t,n){e=Lo(e,t=ml(0,t=cl(n,t),1),1),t=es(),null!==e&&(gt(e,1,t),rs(e,t))}function ks(e,t,n){if(3===e.tag)xs(e,e,n);else for(;null!==t;){if(3===t.tag){xs(t,e,n);break}if(1===t.tag){var r=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===qu||!qu.has(r))){t=Lo(t,e=hl(t,e=cl(n,e),1),1),e=es(),null!==t&&(gt(t,1,e),rs(t,e));break}}t=t.return}}function Ss(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=es(),e.pingedLanes|=e.suspendedLanes&n,Pu===e&&(Ou&n)===n&&(4===Ru||3===Ru&&(130023424&Ou)===Ou&&500>Ze()-$u?fs(e,0):Fu|=n),rs(e,t)}function Cs(e,t){0===t&&(0==(1&e.mode)?t=1:(t=ct,0==(130023424&(ct<<=1))&&(ct=4194304)));var n=es();null!==(e=No(e,t))&&(gt(e,t,n),rs(e,n))}function Bs(e){var t=e.memoizedState,n=0;null!==t&&(n=t.retryLane),Cs(e,n)}function _s(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,a=e.memoizedState;null!==a&&(n=a.retryLane);break;case 19:r=e.stateNode;break;default:throw Error(o(314))}null!==r&&r.delete(t),Cs(e,n)}function Ps(e,t){return Qe(e,t)}function Ns(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Os(e,t,n,r){return new Ns(e,t,n,r)}function Ts(e){return!(!(e=e.prototype)||!e.isReactComponent)}function zs(e,t){var n=e.alternate;return null===n?((n=Os(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=14680064&e.flags,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Rs(e,t,n,r,a,i){var l=2;if(r=e,"function"==typeof e)Ts(e)&&(l=1);else if("string"==typeof e)l=5;else e:switch(e){case x:return Ls(n.children,a,i,t);case k:l=8,a|=8;break;case S:return(e=Os(12,n,t,2|a)).elementType=S,e.lanes=i,e;case P:return(e=Os(13,n,t,a)).elementType=P,e.lanes=i,e;case N:return(e=Os(19,n,t,a)).elementType=N,e.lanes=i,e;case z:return Ms(n,a,i,t);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case C:l=10;break e;case B:l=9;break e;case _:l=11;break e;case O:l=14;break e;case T:l=16,r=null;break e}throw Error(o(130,null==e?e:typeof e,""))}return(t=Os(l,n,t,a)).elementType=e,t.type=r,t.lanes=i,t}function Ls(e,t,n,r){return(e=Os(7,e,r,t)).lanes=n,e}function Ms(e,t,n,r){return(e=Os(22,e,r,t)).elementType=z,e.lanes=n,e.stateNode={isHidden:!1},e}function Is(e,t,n){return(e=Os(6,e,null,t)).lanes=n,e}function Fs(e,t,n){return(t=Os(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function js(e,t,n,r,a){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=At(0),this.expirationTimes=At(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=At(0),this.identifierPrefix=r,this.onRecoverableError=a,this.mutableSourceEagerHydrationData=null}function Ds(e,t,n,r,a,o,i,l,u){return e=new js(e,t,n,l,u),1===t?(t=1,!0===o&&(t|=8)):t=0,o=Os(3,null,null,t),e.current=o,o.stateNode=e,o.memoizedState={element:r,isDehydrated:n,cache:null,transitions:null,pendingSuspenseBoundaries:null},To(o),e}function $s(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:E,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function Us(e){if(!e)return Ba;e:{if(Ue(e=e._reactInternals)!==e||1!==e.tag)throw Error(o(170));var t=e;do{switch(t.tag){case 3:t=t.stateNode.context;break e;case 1:if(Ta(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(null!==t);throw Error(o(171))}if(1===e.tag){var n=e.type;if(Ta(n))return La(e,n,t)}return t}function Hs(e,t,n,r,a,o,i,l,u){return(e=Ds(n,r,!0,e,0,o,0,l,u)).context=Us(null),n=e.current,(o=Ro(r=es(),a=ts(n))).callback=null!=t?t:null,Lo(n,o,a),e.current.lanes=a,gt(e,a,r),rs(e,r),e}function Ws(e,t,n,r){var a=t.current,o=es(),i=ts(a);return n=Us(n),null===t.context?t.context=n:t.pendingContext=n,(t=Ro(o,i)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),null!==(e=Lo(a,t,i))&&(ns(e,a,i,o),Mo(e,a,i)),i}function Vs(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function qs(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Qs(e,t){qs(e,t),(e=e.alternate)&&qs(e,t)}xu=function(e,t,n){if(null!==e)if(e.memoizedProps!==t.pendingProps||Pa.current)bl=!0;else{if(0==(e.lanes&n)&&0==(128&t.flags))return bl=!1,function(e,t,n){switch(t.tag){case 3:Nl(t),mo();break;case 5:ii(t);break;case 1:Ta(t.type)&&Ma(t);break;case 4:ai(t,t.stateNode.containerInfo);break;case 10:var r=t.type._context,a=t.memoizedProps.value;Ca(yo,r._currentValue),r._currentValue=a;break;case 13:if(null!==(r=t.memoizedState))return null!==r.dehydrated?(Ca(ui,1&ui.current),t.flags|=128,null):0!=(n&t.child.childLanes)?Il(e,t,n):(Ca(ui,1&ui.current),null!==(e=Wl(e,t,n))?e.sibling:null);Ca(ui,1&ui.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(128&e.flags)){if(r)return Ul(e,t,n);t.flags|=128}if(null!==(a=t.memoizedState)&&(a.rendering=null,a.tail=null,a.lastEffect=null),Ca(ui,ui.current),r)break;return null;case 22:case 23:return t.lanes=0,Sl(e,t,n)}return Wl(e,t,n)}(e,t,n);bl=0!=(131072&e.flags)}else bl=!1,ao&&0!=(1048576&t.flags)&&Ja(t,qa,t.index);switch(t.lanes=0,t.tag){case 2:var r=t.type;Hl(e,t),e=t.pendingProps;var a=Oa(t,_a.current);So(t,n),a=ki(null,t,r,e,a,n);var i=Si();return t.flags|=1,"object"==typeof a&&null!==a&&"function"==typeof a.render&&void 0===a.$$typeof?(t.tag=1,t.memoizedState=null,t.updateQueue=null,Ta(r)?(i=!0,Ma(t)):i=!1,t.memoizedState=null!==a.state&&void 0!==a.state?a.state:null,To(t),a.updater=Uo,t.stateNode=a,a._reactInternals=t,qo(t,r,e,n),t=Pl(null,t,r,!0,i,n)):(t.tag=0,ao&&i&&eo(t),wl(null,t,a,n),t=t.child),t;case 16:r=t.elementType;e:{switch(Hl(e,t),e=t.pendingProps,r=(a=r._init)(r._payload),t.type=r,a=t.tag=function(e){if("function"==typeof e)return Ts(e)?1:0;if(null!=e){if((e=e.$$typeof)===_)return 11;if(e===O)return 14}return 2}(r),e=go(r,e),a){case 0:t=Bl(null,t,r,e,n);break e;case 1:t=_l(null,t,r,e,n);break e;case 11:t=El(null,t,r,e,n);break e;case 14:t=xl(null,t,r,go(r.type,e),n);break e}throw Error(o(306,r,""))}return t;case 0:return r=t.type,a=t.pendingProps,Bl(e,t,r,a=t.elementType===r?a:go(r,a),n);case 1:return r=t.type,a=t.pendingProps,_l(e,t,r,a=t.elementType===r?a:go(r,a),n);case 3:e:{if(Nl(t),null===e)throw Error(o(387));r=t.pendingProps,a=(i=t.memoizedState).element,zo(e,t),Fo(t,r,null,n);var l=t.memoizedState;if(r=l.element,i.isDehydrated){if(i={element:r,isDehydrated:!1,cache:l.cache,pendingSuspenseBoundaries:l.pendingSuspenseBoundaries,transitions:l.transitions},t.updateQueue.baseState=i,t.memoizedState=i,256&t.flags){t=Ol(e,t,r,n,a=cl(Error(o(423)),t));break e}if(r!==a){t=Ol(e,t,r,n,a=cl(Error(o(424)),t));break e}for(ro=sa(t.stateNode.containerInfo.firstChild),no=t,ao=!0,oo=null,n=Xo(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|4096,n=n.sibling}else{if(mo(),r===a){t=Wl(e,t,n);break e}wl(e,t,r,n)}t=t.child}return t;case 5:return ii(t),null===e&&so(t),r=t.type,a=t.pendingProps,i=null!==e?e.memoizedProps:null,l=a.children,na(r,a)?l=null:null!==i&&na(r,i)&&(t.flags|=32),Cl(e,t),wl(e,t,l,n),t.child;case 6:return null===e&&so(t),null;case 13:return Il(e,t,n);case 4:return ai(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Zo(t,null,r,n):wl(e,t,r,n),t.child;case 11:return r=t.type,a=t.pendingProps,El(e,t,r,a=t.elementType===r?a:go(r,a),n);case 7:return wl(e,t,t.pendingProps,n),t.child;case 8:case 12:return wl(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,a=t.pendingProps,i=t.memoizedProps,l=a.value,Ca(yo,r._currentValue),r._currentValue=l,null!==i)if(lr(i.value,l)){if(i.children===a.children&&!Pa.current){t=Wl(e,t,n);break e}}else for(null!==(i=t.child)&&(i.return=t);null!==i;){var u=i.dependencies;if(null!==u){l=i.child;for(var s=u.firstContext;null!==s;){if(s.context===r){if(1===i.tag){(s=Ro(-1,n&-n)).tag=2;var c=i.updateQueue;if(null!==c){var d=(c=c.shared).pending;null===d?s.next=s:(s.next=d.next,d.next=s),c.pending=s}}i.lanes|=n,null!==(s=i.alternate)&&(s.lanes|=n),ko(i.return,n,t),u.lanes|=n;break}s=s.next}}else if(10===i.tag)l=i.type===t.type?null:i.child;else if(18===i.tag){if(null===(l=i.return))throw Error(o(341));l.lanes|=n,null!==(u=l.alternate)&&(u.lanes|=n),ko(l,n,t),l=i.sibling}else l=i.child;if(null!==l)l.return=i;else for(l=i;null!==l;){if(l===t){l=null;break}if(null!==(i=l.sibling)){i.return=l.return,l=i;break}l=l.return}i=l}wl(e,t,a.children,n),t=t.child}return t;case 9:return a=t.type,r=t.pendingProps.children,So(t,n),r=r(a=Co(a)),t.flags|=1,wl(e,t,r,n),t.child;case 14:return a=go(r=t.type,t.pendingProps),xl(e,t,r,a=go(r.type,a),n);case 15:return kl(e,t,t.type,t.pendingProps,n);case 17:return r=t.type,a=t.pendingProps,a=t.elementType===r?a:go(r,a),Hl(e,t),t.tag=1,Ta(r)?(e=!0,Ma(t)):e=!1,So(t,n),Wo(t,r,a),qo(t,r,a,n),Pl(null,t,r,!0,e,n);case 19:return Ul(e,t,n);case 22:return Sl(e,t,n)}throw Error(o(156,t.tag))};var Ks="function"==typeof reportError?reportError:function(e){console.error(e)};function Gs(e){this._internalRoot=e}function Ys(e){this._internalRoot=e}function Zs(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function Xs(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Js(){}function ec(e,t,n,r,a){var o=n._reactRootContainer;if(o){var i=o;if("function"==typeof a){var l=a;a=function(){var e=Vs(i);l.call(e)}}Ws(t,i,e,a)}else i=function(e,t,n,r,a){if(a){if("function"==typeof r){var o=r;r=function(){var e=Vs(i);o.call(e)}}var i=Hs(t,r,e,0,null,!1,0,"",Js);return e._reactRootContainer=i,e[ma]=i.current,Ur(8===e.nodeType?e.parentNode:e),cs(),i}for(;a=e.lastChild;)e.removeChild(a);if("function"==typeof r){var l=r;r=function(){var e=Vs(u);l.call(e)}}var u=Ds(e,0,!1,null,0,!1,0,"",Js);return e._reactRootContainer=u,e[ma]=u.current,Ur(8===e.nodeType?e.parentNode:e),cs((function(){Ws(t,u,n,r)})),u}(n,t,e,a,r);return Vs(i)}Ys.prototype.render=Gs.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(o(409));Ws(e,t,null,null)},Ys.prototype.unmount=Gs.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;cs((function(){Ws(null,e,null,null)})),t[ma]=null}},Ys.prototype.unstable_scheduleHydration=function(e){if(e){var t=kt();e={blockedOn:null,target:e,priority:t};for(var n=0;n<zt.length&&0!==t&&t<zt[n].priority;n++);zt.splice(n,0,e),0===n&&It(e)}},wt=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.current.memoizedState.isDehydrated){var n=dt(t.pendingLanes);0!==n&&(yt(t,1|n),rs(t,Ze()),0==(6&_u)&&(Uu=Ze()+500,Ua()))}break;case 13:cs((function(){var t=No(e,1);if(null!==t){var n=es();ns(t,e,1,n)}})),Qs(e,1)}},Et=function(e){if(13===e.tag){var t=No(e,134217728);null!==t&&ns(t,e,134217728,es()),Qs(e,134217728)}},xt=function(e){if(13===e.tag){var t=ts(e),n=No(e,t);null!==n&&ns(n,e,t,es()),Qs(e,t)}},kt=function(){return vt},St=function(e,t){var n=vt;try{return vt=e,t()}finally{vt=n}},Ee=function(e,t,n){switch(t){case"input":if(X(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var a=wa(r);if(!a)throw Error(o(90));Q(r),X(r,a)}}}break;case"textarea":oe(e,n);break;case"select":null!=(t=n.value)&&ne(e,!!n.multiple,t,!1)}},_e=ss,Pe=cs;var tc={usingClientEntryPoint:!1,Events:[va,ba,wa,Ce,Be,ss]},nc={findFiberByHostInstance:ya,bundleType:0,version:"18.2.0",rendererPackageName:"react-dom"},rc={bundleType:nc.bundleType,version:nc.version,rendererPackageName:nc.rendererPackageName,rendererConfig:nc.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:b.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=Ve(e))?null:e.stateNode},findFiberByHostInstance:nc.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.2.0-next-9e3b772b8-20220608"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var ac=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!ac.isDisabled&&ac.supportsFiber)try{at=ac.inject(rc),ot=ac}catch(ce){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=tc,t.createPortal=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Zs(t))throw Error(o(200));return $s(e,t,null,n)},t.createRoot=function(e,t){if(!Zs(e))throw Error(o(299));var n=!1,r="",a=Ks;return null!=t&&(!0===t.unstable_strictMode&&(n=!0),void 0!==t.identifierPrefix&&(r=t.identifierPrefix),void 0!==t.onRecoverableError&&(a=t.onRecoverableError)),t=Ds(e,1,!1,null,0,n,0,r,a),e[ma]=t.current,Ur(8===e.nodeType?e.parentNode:e),new Gs(t)},t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(o(188));throw e=Object.keys(e).join(","),Error(o(268,e))}return null===(e=Ve(t))?null:e.stateNode},t.flushSync=function(e){return cs(e)},t.hydrate=function(e,t,n){if(!Xs(t))throw Error(o(200));return ec(null,e,t,!0,n)},t.hydrateRoot=function(e,t,n){if(!Zs(e))throw Error(o(405));var r=null!=n&&n.hydratedSources||null,a=!1,i="",l=Ks;if(null!=n&&(!0===n.unstable_strictMode&&(a=!0),void 0!==n.identifierPrefix&&(i=n.identifierPrefix),void 0!==n.onRecoverableError&&(l=n.onRecoverableError)),t=Hs(t,null,e,1,null!=n?n:null,a,0,i,l),e[ma]=t.current,Ur(e),r)for(e=0;e<r.length;e++)a=(a=(n=r[e])._getVersion)(n._source),null==t.mutableSourceEagerHydrationData?t.mutableSourceEagerHydrationData=[n,a]:t.mutableSourceEagerHydrationData.push(n,a);return new Ys(t)},t.render=function(e,t,n){if(!Xs(t))throw Error(o(200));return ec(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Xs(e))throw Error(o(40));return!!e._reactRootContainer&&(cs((function(){ec(null,null,e,!1,(function(){e._reactRootContainer=null,e[ma]=null}))})),!0)},t.unstable_batchedUpdates=ss,t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Xs(n))throw Error(o(200));if(null==e||void 0===e._reactInternals)throw Error(o(38));return ec(e,t,n,!1,r)},t.version="18.2.0-next-9e3b772b8-20220608"},745:(e,t,n)=>{"use strict";var r=n(935);t.createRoot=r.createRoot,t.hydrateRoot=r.hydrateRoot},935:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(448)},251:(e,t,n)=>{"use strict";var r=n(294),a=Symbol.for("react.element"),o=Symbol.for("react.fragment"),i=Object.prototype.hasOwnProperty,l=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,u={key:!0,ref:!0,__self:!0,__source:!0};function s(e,t,n){var r,o={},s=null,c=null;for(r in void 0!==n&&(s=""+n),void 0!==t.key&&(s=""+t.key),void 0!==t.ref&&(c=t.ref),t)i.call(t,r)&&!u.hasOwnProperty(r)&&(o[r]=t[r]);if(e&&e.defaultProps)for(r in t=e.defaultProps)void 0===o[r]&&(o[r]=t[r]);return{$$typeof:a,type:e,key:s,ref:c,props:o,_owner:l.current}}t.Fragment=o,t.jsx=s,t.jsxs=s},408:(e,t)=>{"use strict";var n=Symbol.for("react.element"),r=Symbol.for("react.portal"),a=Symbol.for("react.fragment"),o=Symbol.for("react.strict_mode"),i=Symbol.for("react.profiler"),l=Symbol.for("react.provider"),u=Symbol.for("react.context"),s=Symbol.for("react.forward_ref"),c=Symbol.for("react.suspense"),d=Symbol.for("react.memo"),f=Symbol.for("react.lazy"),p=Symbol.iterator,m={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},h=Object.assign,A={};function g(e,t,n){this.props=e,this.context=t,this.refs=A,this.updater=n||m}function y(){}function v(e,t,n){this.props=e,this.context=t,this.refs=A,this.updater=n||m}g.prototype.isReactComponent={},g.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},g.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},y.prototype=g.prototype;var b=v.prototype=new y;b.constructor=v,h(b,g.prototype),b.isPureReactComponent=!0;var w=Array.isArray,E=Object.prototype.hasOwnProperty,x={current:null},k={key:!0,ref:!0,__self:!0,__source:!0};function S(e,t,r){var a,o={},i=null,l=null;if(null!=t)for(a in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(i=""+t.key),t)E.call(t,a)&&!k.hasOwnProperty(a)&&(o[a]=t[a]);var u=arguments.length-2;if(1===u)o.children=r;else if(1<u){for(var s=Array(u),c=0;c<u;c++)s[c]=arguments[c+2];o.children=s}if(e&&e.defaultProps)for(a in u=e.defaultProps)void 0===o[a]&&(o[a]=u[a]);return{$$typeof:n,type:e,key:i,ref:l,props:o,_owner:x.current}}function C(e){return"object"==typeof e&&null!==e&&e.$$typeof===n}var B=/\/+/g;function _(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function P(e,t,a,o,i){var l=typeof e;"undefined"!==l&&"boolean"!==l||(e=null);var u=!1;if(null===e)u=!0;else switch(l){case"string":case"number":u=!0;break;case"object":switch(e.$$typeof){case n:case r:u=!0}}if(u)return i=i(u=e),e=""===o?"."+_(u,0):o,w(i)?(a="",null!=e&&(a=e.replace(B,"$&/")+"/"),P(i,t,a,"",(function(e){return e}))):null!=i&&(C(i)&&(i=function(e,t){return{$$typeof:n,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(i,a+(!i.key||u&&u.key===i.key?"":(""+i.key).replace(B,"$&/")+"/")+e)),t.push(i)),1;if(u=0,o=""===o?".":o+":",w(e))for(var s=0;s<e.length;s++){var c=o+_(l=e[s],s);u+=P(l,t,a,c,i)}else if(c=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=p&&e[p]||e["@@iterator"])?e:null}(e),"function"==typeof c)for(e=c.call(e),s=0;!(l=e.next()).done;)u+=P(l=l.value,t,a,c=o+_(l,s++),i);else if("object"===l)throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return u}function N(e,t,n){if(null==e)return e;var r=[],a=0;return P(e,r,"","",(function(e){return t.call(n,e,a++)})),r}function O(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var T={current:null},z={transition:null},R={ReactCurrentDispatcher:T,ReactCurrentBatchConfig:z,ReactCurrentOwner:x};t.Children={map:N,forEach:function(e,t,n){N(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return N(e,(function(){t++})),t},toArray:function(e){return N(e,(function(e){return e}))||[]},only:function(e){if(!C(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=g,t.Fragment=a,t.Profiler=i,t.PureComponent=v,t.StrictMode=o,t.Suspense=c,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=R,t.cloneElement=function(e,t,r){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var a=h({},e.props),o=e.key,i=e.ref,l=e._owner;if(null!=t){if(void 0!==t.ref&&(i=t.ref,l=x.current),void 0!==t.key&&(o=""+t.key),e.type&&e.type.defaultProps)var u=e.type.defaultProps;for(s in t)E.call(t,s)&&!k.hasOwnProperty(s)&&(a[s]=void 0===t[s]&&void 0!==u?u[s]:t[s])}var s=arguments.length-2;if(1===s)a.children=r;else if(1<s){u=Array(s);for(var c=0;c<s;c++)u[c]=arguments[c+2];a.children=u}return{$$typeof:n,type:e.type,key:o,ref:i,props:a,_owner:l}},t.createContext=function(e){return(e={$$typeof:u,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:l,_context:e},e.Consumer=e},t.createElement=S,t.createFactory=function(e){var t=S.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:s,render:e}},t.isValidElement=C,t.lazy=function(e){return{$$typeof:f,_payload:{_status:-1,_result:e},_init:O}},t.memo=function(e,t){return{$$typeof:d,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=z.transition;z.transition={};try{e()}finally{z.transition=t}},t.unstable_act=function(){throw Error("act(...) is not supported in production builds of React.")},t.useCallback=function(e,t){return T.current.useCallback(e,t)},t.useContext=function(e){return T.current.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e){return T.current.useDeferredValue(e)},t.useEffect=function(e,t){return T.current.useEffect(e,t)},t.useId=function(){return T.current.useId()},t.useImperativeHandle=function(e,t,n){return T.current.useImperativeHandle(e,t,n)},t.useInsertionEffect=function(e,t){return T.current.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return T.current.useLayoutEffect(e,t)},t.useMemo=function(e,t){return T.current.useMemo(e,t)},t.useReducer=function(e,t,n){return T.current.useReducer(e,t,n)},t.useRef=function(e){return T.current.useRef(e)},t.useState=function(e){return T.current.useState(e)},t.useSyncExternalStore=function(e,t,n){return T.current.useSyncExternalStore(e,t,n)},t.useTransition=function(){return T.current.useTransition()},t.version="18.2.0"},294:(e,t,n)=>{"use strict";e.exports=n(408)},893:(e,t,n)=>{"use strict";e.exports=n(251)},53:(e,t)=>{"use strict";function n(e,t){var n=e.length;e.push(t);e:for(;0<n;){var r=n-1>>>1,a=e[r];if(!(0<o(a,t)))break e;e[r]=t,e[n]=a,n=r}}function r(e){return 0===e.length?null:e[0]}function a(e){if(0===e.length)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,a=e.length,i=a>>>1;r<i;){var l=2*(r+1)-1,u=e[l],s=l+1,c=e[s];if(0>o(u,n))s<a&&0>o(c,u)?(e[r]=c,e[s]=n,r=s):(e[r]=u,e[l]=n,r=l);else{if(!(s<a&&0>o(c,n)))break e;e[r]=c,e[s]=n,r=s}}}return t}function o(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}if("object"==typeof performance&&"function"==typeof performance.now){var i=performance;t.unstable_now=function(){return i.now()}}else{var l=Date,u=l.now();t.unstable_now=function(){return l.now()-u}}var s=[],c=[],d=1,f=null,p=3,m=!1,h=!1,A=!1,g="function"==typeof setTimeout?setTimeout:null,y="function"==typeof clearTimeout?clearTimeout:null,v="undefined"!=typeof setImmediate?setImmediate:null;function b(e){for(var t=r(c);null!==t;){if(null===t.callback)a(c);else{if(!(t.startTime<=e))break;a(c),t.sortIndex=t.expirationTime,n(s,t)}t=r(c)}}function w(e){if(A=!1,b(e),!h)if(null!==r(s))h=!0,z(E);else{var t=r(c);null!==t&&R(w,t.startTime-e)}}function E(e,n){h=!1,A&&(A=!1,y(C),C=-1),m=!0;var o=p;try{for(b(n),f=r(s);null!==f&&(!(f.expirationTime>n)||e&&!P());){var i=f.callback;if("function"==typeof i){f.callback=null,p=f.priorityLevel;var l=i(f.expirationTime<=n);n=t.unstable_now(),"function"==typeof l?f.callback=l:f===r(s)&&a(s),b(n)}else a(s);f=r(s)}if(null!==f)var u=!0;else{var d=r(c);null!==d&&R(w,d.startTime-n),u=!1}return u}finally{f=null,p=o,m=!1}}"undefined"!=typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);var x,k=!1,S=null,C=-1,B=5,_=-1;function P(){return!(t.unstable_now()-_<B)}function N(){if(null!==S){var e=t.unstable_now();_=e;var n=!0;try{n=S(!0,e)}finally{n?x():(k=!1,S=null)}}else k=!1}if("function"==typeof v)x=function(){v(N)};else if("undefined"!=typeof MessageChannel){var O=new MessageChannel,T=O.port2;O.port1.onmessage=N,x=function(){T.postMessage(null)}}else x=function(){g(N,0)};function z(e){S=e,k||(k=!0,x())}function R(e,n){C=g((function(){e(t.unstable_now())}),n)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){h||m||(h=!0,z(E))},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):B=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return p},t.unstable_getFirstCallbackNode=function(){return r(s)},t.unstable_next=function(e){switch(p){case 1:case 2:case 3:var t=3;break;default:t=p}var n=p;p=t;try{return e()}finally{p=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=function(){},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=p;p=e;try{return t()}finally{p=n}},t.unstable_scheduleCallback=function(e,a,o){var i=t.unstable_now();switch(o="object"==typeof o&&null!==o&&"number"==typeof(o=o.delay)&&0<o?i+o:i,e){case 1:var l=-1;break;case 2:l=250;break;case 5:l=1073741823;break;case 4:l=1e4;break;default:l=5e3}return e={id:d++,callback:a,priorityLevel:e,startTime:o,expirationTime:l=o+l,sortIndex:-1},o>i?(e.sortIndex=o,n(c,e),null===r(s)&&e===r(c)&&(A?(y(C),C=-1):A=!0,R(w,o-i))):(e.sortIndex=l,n(s,e),h||m||(h=!0,z(E))),e},t.unstable_shouldYield=P,t.unstable_wrapCallback=function(e){var t=p;return function(){var n=p;p=t;try{return e.apply(this,arguments)}finally{p=n}}}},840:(e,t,n)=>{"use strict";e.exports=n(53)},379:e=>{"use strict";var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var o={},i=[],l=0;l<e.length;l++){var u=e[l],s=r.base?u[0]+r.base:u[0],c=o[s]||0,d="".concat(s," ").concat(c);o[s]=c+1;var f=n(d),p={css:u[1],media:u[2],sourceMap:u[3],supports:u[4],layer:u[5]};if(-1!==f)t[f].references++,t[f].updater(p);else{var m=a(p,r);r.byIndex=l,t.splice(l,0,{identifier:d,updater:m,references:1})}i.push(d)}return i}function a(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,a){var o=r(e=e||[],a=a||{});return function(e){e=e||[];for(var i=0;i<o.length;i++){var l=n(o[i]);t[l].references--}for(var u=r(e,a),s=0;s<o.length;s++){var c=n(o[s]);0===t[c].references&&(t[c].updater(),t.splice(c,1))}o=u}}},569:e=>{"use strict";var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:e=>{"use strict";e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{"use strict";e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{"use strict";e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var a=void 0!==n.layer;a&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,a&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var o=n.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{"use strict";e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},836:e=>{e.exports=function(e){return e&&e.__esModule?e:{default:e}},e.exports.__esModule=!0,e.exports.default=e.exports}},r={};function a(e){var t=r[e];if(void 0!==t)return t.exports;var o=r[e]={id:e,exports:{}};return n[e](o,o.exports,a),o.exports}a.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return a.d(t,{a:t}),t},t=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,a.t=function(n,r){if(1&r&&(n=this(n)),8&r)return n;if("object"==typeof n&&n){if(4&r&&n.__esModule)return n;if(16&r&&"function"==typeof n.then)return n}var o=Object.create(null);a.r(o);var i={};e=e||[null,t({}),t([]),t(t)];for(var l=2&r&&n;"object"==typeof l&&!~e.indexOf(l);l=t(l))Object.getOwnPropertyNames(l).forEach((e=>i[e]=()=>n[e]));return i.default=()=>n,a.d(o,i),o},a.d=(e,t)=>{for(var n in t)a.o(t,n)&&!a.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},a.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),a.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},a.nc=void 0,(()=>{"use strict";var e,t=a(294),n=a.t(t,2),r=a(745);function o(){return o=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o.apply(this,arguments)}!function(e){e.Pop="POP",e.Push="PUSH",e.Replace="REPLACE"}(e||(e={}));const i="popstate";function l(e){return{usr:e.state,key:e.key}}function u(e,t,n,r){return void 0===n&&(n=null),o({pathname:"string"==typeof e?e:e.pathname,search:"",hash:""},"string"==typeof t?c(t):t,{state:n,key:t&&t.key||r||Math.random().toString(36).substr(2,8)})}function s(e){let{pathname:t="/",search:n="",hash:r=""}=e;return n&&"?"!==n&&(t+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(t+="#"===r.charAt(0)?r:"#"+r),t}function c(e){let t={};if(e){let n=e.indexOf("#");n>=0&&(t.hash=e.substr(n),e=e.substr(0,n));let r=e.indexOf("?");r>=0&&(t.search=e.substr(r),e=e.substr(0,r)),e&&(t.pathname=e)}return t}function d(e){let t="undefined"!=typeof window&&void 0!==window.location&&"null"!==window.location.origin?window.location.origin:"unknown://unknown",n="string"==typeof e?e:s(e);return new URL(n,t)}var f;function p(e,t,n){void 0===n&&(n="/");let r=w(("string"==typeof t?c(t):t).pathname||"/",n);if(null==r)return null;let a=m(e);!function(e){e.sort(((e,t)=>e.score!==t.score?t.score-e.score:function(e,t){let n=e.length===t.length&&e.slice(0,-1).every(((e,n)=>e===t[n]));return n?e[e.length-1]-t[t.length-1]:0}(e.routesMeta.map((e=>e.childrenIndex)),t.routesMeta.map((e=>e.childrenIndex)))))}(a);let o=null;for(let e=0;null==o&&e<a.length;++e)o=y(a[e],b(r));return o}function m(e,t,n,r){return void 0===t&&(t=[]),void 0===n&&(n=[]),void 0===r&&(r=""),e.forEach(((e,a)=>{let o={relativePath:e.path||"",caseSensitive:!0===e.caseSensitive,childrenIndex:a,route:e};o.relativePath.startsWith("/")&&(E(o.relativePath.startsWith(r),'Absolute route path "'+o.relativePath+'" nested under path "'+r+'" is not valid. An absolute child route path must start with the combined path of all its parent routes.'),o.relativePath=o.relativePath.slice(r.length));let i=B([r,o.relativePath]),l=n.concat(o);e.children&&e.children.length>0&&(E(!0!==e.index,'Index routes must not have child routes. Please remove all child routes from route path "'+i+'".'),m(e.children,t,l,i)),(null!=e.path||e.index)&&t.push({path:i,score:g(i,e.index),routesMeta:l})})),t}!function(e){e.data="data",e.deferred="deferred",e.redirect="redirect",e.error="error"}(f||(f={}));const h=/^:\w+$/,A=e=>"*"===e;function g(e,t){let n=e.split("/"),r=n.length;return n.some(A)&&(r+=-2),t&&(r+=2),n.filter((e=>!A(e))).reduce(((e,t)=>e+(h.test(t)?3:""===t?1:10)),r)}function y(e,t){let{routesMeta:n}=e,r={},a="/",o=[];for(let e=0;e<n.length;++e){let i=n[e],l=e===n.length-1,u="/"===a?t:t.slice(a.length)||"/",s=v({path:i.relativePath,caseSensitive:i.caseSensitive,end:l},u);if(!s)return null;Object.assign(r,s.params);let c=i.route;o.push({params:r,pathname:B([a,s.pathname]),pathnameBase:_(B([a,s.pathnameBase])),route:c}),"/"!==s.pathnameBase&&(a=B([a,s.pathnameBase]))}return o}function v(e,t){"string"==typeof e&&(e={path:e,caseSensitive:!1,end:!0});let[n,r]=function(e,t,n){void 0===t&&(t=!1),void 0===n&&(n=!0),x("*"===e||!e.endsWith("*")||e.endsWith("/*"),'Route path "'+e+'" will be treated as if it were "'+e.replace(/\*$/,"/*")+'" because the `*` character must always follow a `/` in the pattern. To get rid of this warning, please change the route path to "'+e.replace(/\*$/,"/*")+'".');let r=[],a="^"+e.replace(/\/*\*?$/,"").replace(/^\/*/,"/").replace(/[\\.*+^$?{}|()[\]]/g,"\\$&").replace(/:(\w+)/g,((e,t)=>(r.push(t),"([^\\/]+)")));return e.endsWith("*")?(r.push("*"),a+="*"===e||"/*"===e?"(.*)$":"(?:\\/(.+)|\\/*)$"):n?a+="\\/*$":""!==e&&"/"!==e&&(a+="(?:(?=\\/|$))"),[new RegExp(a,t?void 0:"i"),r]}(e.path,e.caseSensitive,e.end),a=t.match(n);if(!a)return null;let o=a[0],i=o.replace(/(.)\/+$/,"$1"),l=a.slice(1);return{params:r.reduce(((e,t,n)=>{if("*"===t){let e=l[n]||"";i=o.slice(0,o.length-e.length).replace(/(.)\/+$/,"$1")}return e[t]=function(e,t){try{return decodeURIComponent(e)}catch(n){return x(!1,'The value for the URL param "'+t+'" will not be decoded because the string "'+e+'" is a malformed URL segment. This is probably due to a bad percent encoding ('+n+")."),e}}(l[n]||"",t),e}),{}),pathname:o,pathnameBase:i,pattern:e}}function b(e){try{return decodeURI(e)}catch(t){return x(!1,'The URL path "'+e+'" could not be decoded because it is is a malformed URL segment. This is probably due to a bad percent encoding ('+t+")."),e}}function w(e,t){if("/"===t)return e;if(!e.toLowerCase().startsWith(t.toLowerCase()))return null;let n=t.endsWith("/")?t.length-1:t.length,r=e.charAt(n);return r&&"/"!==r?null:e.slice(n)||"/"}function E(e,t){if(!1===e||null==e)throw new Error(t)}function x(e,t){if(!e){"undefined"!=typeof console&&console.warn(t);try{throw new Error(t)}catch(e){}}}function k(e,t,n,r){return"Cannot include a '"+e+"' character in a manually specified `to."+t+"` field ["+JSON.stringify(r)+"].  Please separate it out to the `to."+n+'` field. Alternatively you may provide the full path as a string in <Link to="..."> and the router will parse it for you.'}function S(e){return e.filter(((e,t)=>0===t||e.route.path&&e.route.path.length>0))}function C(e,t,n,r){let a;void 0===r&&(r=!1),"string"==typeof e?a=c(e):(a=o({},e),E(!a.pathname||!a.pathname.includes("?"),k("?","pathname","search",a)),E(!a.pathname||!a.pathname.includes("#"),k("#","pathname","hash",a)),E(!a.search||!a.search.includes("#"),k("#","search","hash",a)));let i,l=""===e||""===a.pathname,u=l?"/":a.pathname;if(r||null==u)i=n;else{let e=t.length-1;if(u.startsWith("..")){let t=u.split("/");for(;".."===t[0];)t.shift(),e-=1;a.pathname=t.join("/")}i=e>=0?t[e]:"/"}let s=function(e,t){void 0===t&&(t="/");let{pathname:n,search:r="",hash:a=""}="string"==typeof e?c(e):e,o=n?n.startsWith("/")?n:function(e,t){let n=t.replace(/\/+$/,"").split("/");return e.split("/").forEach((e=>{".."===e?n.length>1&&n.pop():"."!==e&&n.push(e)})),n.length>1?n.join("/"):"/"}(n,t):t;return{pathname:o,search:P(r),hash:N(a)}}(a,i),d=u&&"/"!==u&&u.endsWith("/"),f=(l||"."===u)&&n.endsWith("/");return s.pathname.endsWith("/")||!d&&!f||(s.pathname+="/"),s}const B=e=>e.join("/").replace(/\/\/+/g,"/"),_=e=>e.replace(/\/+$/,"").replace(/^\/*/,"/"),P=e=>e&&"?"!==e?e.startsWith("?")?e:"?"+e:"",N=e=>e&&"#"!==e?e.startsWith("#")?e:"#"+e:"";class O extends Error{}class T{constructor(e,t,n){this.status=e,this.statusText=t||"",this.data=n}}"undefined"!=typeof window&&void 0!==window.document&&window.document.createElement;const z=new Set(["POST","PUT","PATCH","DELETE"]);function R(){return R=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},R.apply(this,arguments)}new Set(["GET","HEAD",...z]);"function"==typeof Object.is&&Object.is;const{useState:L,useEffect:M,useLayoutEffect:I,useDebugValue:F}=n;"undefined"==typeof window||void 0===window.document||window.document.createElement,n.useSyncExternalStore;const j=t.createContext(null),D=t.createContext(null),$=t.createContext(null),U=t.createContext(null),H=t.createContext(null),W=t.createContext({outlet:null,matches:[]}),V=t.createContext(null);function q(){return null!=t.useContext(H)}function Q(){return q()||E(!1),t.useContext(H).location}function K(){q()||E(!1);let{basename:e,navigator:n}=t.useContext(U),{matches:r}=t.useContext(W),{pathname:a}=Q(),o=JSON.stringify(S(r).map((e=>e.pathnameBase))),i=t.useRef(!1);t.useEffect((()=>{i.current=!0}));let l=t.useCallback((function(t,r){if(void 0===r&&(r={}),!i.current)return;if("number"==typeof t)return void n.go(t);let l=C(t,JSON.parse(o),a,"path"===r.relative);"/"!==e&&(l.pathname="/"===l.pathname?e:B([e,l.pathname])),(r.replace?n.replace:n.push)(l,r.state,r)}),[e,n,o,a]);return l}const G=t.createContext(null);function Y(){let{matches:e}=t.useContext(W),n=e[e.length-1];return n?n.params:{}}function Z(e,n){let{relative:r}=void 0===n?{}:n,{matches:a}=t.useContext(W),{pathname:o}=Q(),i=JSON.stringify(S(a).map((e=>e.pathnameBase)));return t.useMemo((()=>C(e,JSON.parse(i),o,"path"===r)),[e,i,o,r])}function X(){let e=function(){var e;let n=t.useContext(V),r=function(e){let n=t.useContext($);return n||E(!1),n}(ne.UseRouteError),a=t.useContext(W),o=a.matches[a.matches.length-1];return n||(a||E(!1),!o.route.id&&E(!1),null==(e=r.errors)?void 0:e[o.route.id])}(),n=e instanceof T?e.status+" "+e.statusText:e instanceof Error?e.message:JSON.stringify(e),r=e instanceof Error?e.stack:null,a="rgba(200,200,200, 0.5)",o={padding:"0.5rem",backgroundColor:a},i={padding:"2px 4px",backgroundColor:a};return t.createElement(t.Fragment,null,t.createElement("h2",null,"Unhandled Thrown Error!"),t.createElement("h3",{style:{fontStyle:"italic"}},n),r?t.createElement("pre",{style:o},r):null,t.createElement("p",null,"💿 Hey developer 👋"),t.createElement("p",null,"You can provide a way better UX than this when your app throws errors by providing your own ",t.createElement("code",{style:i},"errorElement")," props on ",t.createElement("code",{style:i},"<Route>")))}class J extends t.Component{constructor(e){super(e),this.state={location:e.location,error:e.error}}static getDerivedStateFromError(e){return{error:e}}static getDerivedStateFromProps(e,t){return t.location!==e.location?{error:e.error,location:e.location}:{error:e.error||t.error,location:t.location}}componentDidCatch(e,t){console.error("React Router caught the following error during render",e,t)}render(){return this.state.error?t.createElement(V.Provider,{value:this.state.error,children:this.props.component}):this.props.children}}function ee(e){let{routeContext:n,match:r,children:a}=e,o=t.useContext(j);return o&&r.route.errorElement&&(o._deepestRenderedBoundaryId=r.route.id),t.createElement(W.Provider,{value:n},a)}var te,ne,re;function ae(e){return function(e){let n=t.useContext(W).outlet;return n?t.createElement(G.Provider,{value:e},n):n}(e.context)}function oe(e){E(!1)}function ie(n){let{basename:r="/",children:a=null,location:o,navigationType:i=e.Pop,navigator:l,static:u=!1}=n;q()&&E(!1);let s=r.replace(/^\/*/,"/"),d=t.useMemo((()=>({basename:s,navigator:l,static:u})),[s,l,u]);"string"==typeof o&&(o=c(o));let{pathname:f="/",search:p="",hash:m="",state:h=null,key:A="default"}=o,g=t.useMemo((()=>{let e=w(f,s);return null==e?null:{pathname:e,search:p,hash:m,state:h,key:A}}),[s,f,p,m,h,A]);return null==g?null:t.createElement(U.Provider,{value:d},t.createElement(H.Provider,{children:a,value:{location:g,navigationType:i}}))}function le(n){let{children:r,location:a}=n,o=t.useContext(D);return function(n,r){q()||E(!1);let a=t.useContext($),{matches:o}=t.useContext(W),i=o[o.length-1],l=i?i.params:{},u=(i&&i.pathname,i?i.pathnameBase:"/");i&&i.route;let s,d=Q();if(r){var f;let e="string"==typeof r?c(r):r;"/"===u||(null==(f=e.pathname)?void 0:f.startsWith(u))||E(!1),s=e}else s=d;let m=s.pathname||"/",h=p(n,{pathname:"/"===u?m:m.slice(u.length)||"/"}),A=function(e,n,r){if(void 0===n&&(n=[]),null==e){if(null==r||!r.errors)return null;e=r.matches}let a=e,o=null==r?void 0:r.errors;if(null!=o){let e=a.findIndex((e=>e.route.id&&(null==o?void 0:o[e.route.id])));e>=0||E(!1),a=a.slice(0,Math.min(a.length,e+1))}return a.reduceRight(((e,i,l)=>{let u=i.route.id?null==o?void 0:o[i.route.id]:null,s=r?i.route.errorElement||t.createElement(X,null):null,c=()=>t.createElement(ee,{match:i,routeContext:{outlet:e,matches:n.concat(a.slice(0,l+1))}},u?s:void 0!==i.route.element?i.route.element:e);return r&&(i.route.errorElement||0===l)?t.createElement(J,{location:r.location,component:s,error:u,children:c()}):c()}),null)}(h&&h.map((e=>Object.assign({},e,{params:Object.assign({},l,e.params),pathname:B([u,e.pathname]),pathnameBase:"/"===e.pathnameBase?u:B([u,e.pathnameBase])}))),o,a||void 0);return r&&A?t.createElement(H.Provider,{value:{location:R({pathname:"/",search:"",hash:"",state:null,key:"default"},s),navigationType:e.Pop}},A):A}(o&&!r?o.router.routes:se(r),a)}!function(e){e.UseRevalidator="useRevalidator"}(te||(te={})),function(e){e.UseLoaderData="useLoaderData",e.UseActionData="useActionData",e.UseRouteError="useRouteError",e.UseNavigation="useNavigation",e.UseRouteLoaderData="useRouteLoaderData",e.UseMatches="useMatches",e.UseRevalidator="useRevalidator"}(ne||(ne={})),function(e){e[e.pending=0]="pending",e[e.success=1]="success",e[e.error=2]="error"}(re||(re={})),new Promise((()=>{}));class ue extends t.Component{constructor(e){super(e),this.state={error:null}}static getDerivedStateFromError(e){return{error:e}}componentDidCatch(e,t){console.error("<Await> caught the following error during render",e,t)}render(){let{children:e,errorElement:t,resolve:n}=this.props,r=null,a=re.pending;if(n instanceof Promise)if(this.state.error){re.error;let e=this.state.error;Promise.reject().catch((()=>{})),Object.defineProperty(r,"_tracked",{get:()=>!0}),Object.defineProperty(r,"_error",{get:()=>e})}else n._tracked?void 0!==r._error?re.error:void 0!==r._data?re.success:re.pending:(re.pending,Object.defineProperty(n,"_tracked",{get:()=>!0}),n.then((e=>Object.defineProperty(n,"_data",{get:()=>e})),(e=>Object.defineProperty(n,"_error",{get:()=>e}))));else re.success,Promise.resolve(),Object.defineProperty(r,"_tracked",{get:()=>!0}),Object.defineProperty(r,"_data",{get:()=>n});if(a===re.error&&r._error instanceof AbortedDeferredError)throw neverSettledPromise;if(a===re.error&&!t)throw r._error;if(a===re.error)return React.createElement(AwaitContext.Provider,{value:r,children:t});if(a===re.success)return React.createElement(AwaitContext.Provider,{value:r,children:e});throw r}}function se(e,n){void 0===n&&(n=[]);let r=[];return t.Children.forEach(e,((e,a)=>{if(!t.isValidElement(e))return;if(e.type===t.Fragment)return void r.push.apply(r,se(e.props.children,n));e.type!==oe&&E(!1),e.props.index&&e.props.children&&E(!1);let o=[...n,a],i={id:e.props.id||o.join("-"),caseSensitive:e.props.caseSensitive,element:e.props.element,index:e.props.index,path:e.props.path,loader:e.props.loader,action:e.props.action,errorElement:e.props.errorElement,hasErrorBoundary:null!=e.props.errorElement,shouldRevalidate:e.props.shouldRevalidate,handle:e.props.handle};e.props.children&&(i.children=se(e.props.children,o)),r.push(i)})),r}function ce(){return ce=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},ce.apply(this,arguments)}function de(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}function fe(e){return void 0===e&&(e=""),new URLSearchParams("string"==typeof e||Array.isArray(e)||e instanceof URLSearchParams?e:Object.keys(e).reduce(((t,n)=>{let r=e[n];return t.concat(Array.isArray(r)?r.map((e=>[n,e])):[[n,r]])}),[]))}const pe=["onClick","relative","reloadDocument","replace","state","target","to","preventScrollReset"],me=["aria-current","caseSensitive","className","end","style","to","children"];function he(n){let{basename:r,children:a,window:c}=n,f=t.useRef();null==f.current&&(f.current=function(t){return void 0===t&&(t={}),function(t,n,r,a){void 0===a&&(a={});let{window:c=document.defaultView,v5Compat:f=!1}=a,p=c.history,m=e.Pop,h=null;function A(){m=e.Pop,h&&h({action:m,location:g.location})}let g={get action(){return m},get location(){return t(c,p)},listen(e){if(h)throw new Error("A history only accepts one active listener");return c.addEventListener(i,A),h=e,()=>{c.removeEventListener(i,A),h=null}},createHref:e=>n(c,e),encodeLocation(e){let t=d(s(e));return o({},e,{pathname:t.pathname,search:t.search,hash:t.hash})},push:function(t,n){m=e.Push;let a=u(g.location,t,n);r&&r(a,t);let o=l(a),i=g.createHref(a);try{p.pushState(o,"",i)}catch(e){c.location.assign(i)}f&&h&&h({action:m,location:g.location})},replace:function(t,n){m=e.Replace;let a=u(g.location,t,n);r&&r(a,t);let o=l(a),i=g.createHref(a);p.replaceState(o,"",i),f&&h&&h({action:m,location:g.location})},go:e=>p.go(e)};return g}((function(e,t){let{pathname:n,search:r,hash:a}=e.location;return u("",{pathname:n,search:r,hash:a},t.state&&t.state.usr||null,t.state&&t.state.key||"default")}),(function(e,t){return"string"==typeof t?t:s(t)}),null,t)}({window:c,v5Compat:!0}));let p=f.current,[m,h]=t.useState({action:p.action,location:p.location});return t.useLayoutEffect((()=>p.listen(h)),[p]),t.createElement(ie,{basename:r,children:a,location:m.location,navigationType:m.action,navigator:p})}const Ae=t.forwardRef((function(e,n){let{onClick:r,relative:a,reloadDocument:o,replace:i,state:l,target:u,to:c,preventScrollReset:d}=e,f=de(e,pe),p=function(e,n){let{relative:r}=void 0===n?{}:n;q()||E(!1);let{basename:a,navigator:o}=t.useContext(U),{hash:i,pathname:l,search:u}=Z(e,{relative:r}),s=l;return"/"!==a&&(s="/"===l?a:B([a,l])),o.createHref({pathname:s,search:u,hash:i})}(c,{relative:a}),m=function(e,n){let{target:r,replace:a,state:o,preventScrollReset:i,relative:l}=void 0===n?{}:n,u=K(),c=Q(),d=Z(e,{relative:l});return t.useCallback((t=>{if(function(e,t){return!(0!==e.button||t&&"_self"!==t||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(e))}(t,r)){t.preventDefault();let n=void 0!==a?a:s(c)===s(d);u(e,{replace:n,state:o,preventScrollReset:i,relative:l})}}),[c,u,d,a,o,r,e,i,l])}(c,{replace:i,state:l,target:u,preventScrollReset:d,relative:a});return t.createElement("a",ce({},f,{href:p,onClick:o?r:function(e){r&&r(e),e.defaultPrevented||m(e)},ref:n,target:u}))})),ge=t.forwardRef((function(e,n){let{"aria-current":r="page",caseSensitive:a=!1,className:o="",end:i=!1,style:l,to:u,children:s}=e,c=de(e,me),d=Z(u,{relative:c.relative}),f=Q(),p=t.useContext($),m=d.pathname,h=f.pathname,A=p&&p.navigation&&p.navigation.location?p.navigation.location.pathname:null;a||(h=h.toLowerCase(),A=A?A.toLowerCase():null,m=m.toLowerCase());let g,y=h===m||!i&&h.startsWith(m)&&"/"===h.charAt(m.length),v=null!=A&&(A===m||!i&&A.startsWith(m)&&"/"===A.charAt(m.length)),b=y?r:void 0;g="function"==typeof o?o({isActive:y,isPending:v}):[o,y?"active":null,v?"pending":null].filter(Boolean).join(" ");let w="function"==typeof l?l({isActive:y,isPending:v}):l;return t.createElement(Ae,ce({},c,{"aria-current":b,className:g,ref:n,style:w,to:u}),"function"==typeof s?s({isActive:y,isPending:v}):s)}));var ye,ve;function be(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,o=[],i=!0,l=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(o.push(r.value),!t||o.length!==t);i=!0);}catch(e){l=!0,a=e}finally{try{i||null==n.return||n.return()}finally{if(l)throw a}}return o}}(e,t)||function(e,t){if(e){if("string"==typeof e)return we(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?we(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function we(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}(function(e){e.UseScrollRestoration="useScrollRestoration",e.UseSubmitImpl="useSubmitImpl",e.UseFetcher="useFetcher"})(ye||(ye={})),function(e){e.UseFetchers="useFetchers",e.UseScrollRestoration="useScrollRestoration"}(ve||(ve={}));var Ee=t.createContext();function xe(e){var n=e.children,r=be((0,t.useState)({}),2),a=r[0],o=r[1],i=be((0,t.useState)([]),2),l=i[0],u=i[1];return t.createElement(Ee.Provider,{value:{thisPatient:a,setThisPatient:o,events:l,setEvents:u,getAge:function(e){var t=new Date,n=new Date(e),r=t.getFullYear()-n.getFullYear(),a=t.getMonth()-n.getMonth();return(a<0||0===a&&t.getDate()<n.getDate())&&r--,"".concat(r," ano(s)")},formatDate:function(e,t){var n,r,a=new Date(e);return"short"===t?(n={weekday:"long",year:"numeric",month:"long",day:"numeric"},r=a.toLocaleString("pt-BR")):"long"===t&&(n={weekday:"long",year:"numeric",month:"long",day:"numeric"},r=a.toLocaleDateString("pt-BR",n)),r}}},n)}var ke=a(379),Se=a.n(ke),Ce=a(795),Be=a.n(Ce),_e=a(569),Pe=a.n(_e),Ne=a(565),Oe=a.n(Ne),Te=a(216),ze=a.n(Te),Re=a(589),Le=a.n(Re),Me=a(383),Ie={};Ie.styleTagTransform=Le(),Ie.setAttributes=Oe(),Ie.insert=Pe().bind(null,"head"),Ie.domAPI=Be(),Ie.insertStyleElement=ze(),Se()(Me.Z,Ie),Me.Z&&Me.Z.locals&&Me.Z.locals;var Fe=a(571);function je(){return t.createElement("header",{className:""},t.createElement("div",{className:"bg-slate-800 flex justify-between items-stretch"},t.createElement("nav",{className:"flex items-stretch ml-2"},t.createElement("div",{className:"uppercase font-bold text-sm bg-slate-700 rounded-t mt-2 mr-1 text-white px-5 pr-3 flex items-center"},t.createElement("a",{href:""},"Paciente"),t.createElement("a",{href:"",className:"font-normal ml-2 text-[8px]"},"✕")),t.createElement("div",{className:"uppercase font-bold text-sm rounded-t mt-2 mr-1 text-white px-5 flex items-center"},t.createElement("a",{href:""},"Emergência"))),t.createElement("h1",{id:"logo",className:"text-xl font-serif my-2 mx-4 mr-4"},t.createElement("a",{href:"/",className:"text-white flex"},t.createElement(Fe.Z,{className:"mr-1"}),"PRONTUÁRIO EW"))))}var De=Object.defineProperty,$e=Object.defineProperties,Ue=Object.getOwnPropertyDescriptors,He=Object.getOwnPropertySymbols,We=Object.prototype.hasOwnProperty,Ve=Object.prototype.propertyIsEnumerable,qe=(e,t,n)=>t in e?De(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,Qe=(e,t)=>{for(var n in t||(t={}))We.call(t,n)&&qe(e,n,t[n]);if(He)for(var n of He(t))Ve.call(t,n)&&qe(e,n,t[n]);return e},Ke=(e,t)=>$e(e,Ue(t)),Ge={exports:{}};function Ye(){}function Ze(){}Ze.resetWarningCache=Ye,Ge.exports=function(){function e(e,t,n,r,a,o){if("SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"!==o){var i=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw i.name="Invariant Violation",i}}function t(){return e}e.isRequired=e;var n={array:e,bigint:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:Ze,resetWarningCache:Ye};return n.PropTypes=n,n}();var Xe=Ge.exports;const Je="SET_QUERY",et="SET_ITEMS",tt="SET_ITEMS_ERROR",nt="CLEAR",rt="SET_HIGHLIGHTED",at="NEXT_HIGHLIGHTED",ot="PREV_HIGHLIGHTED",it="SET_SELECTED",lt=void 0;function ut(e){return e===lt}const st=(e,t)=>t[e]?{index:e,text:t[e].text}:lt,ct=(e,t)=>{const n=(()=>{let n,r;switch(t.type){case Je:return n={itemsError:!1,query:t.query,selected:lt},t.query.length<e.props.minQueryLength&&(n.canShowListbox=!1),0===t.query.length&&e.props.defaultListbox&&(n.canShowListbox=!0),n;case et:return n={items:t.items,itemsError:!1,highlighted:t.items.length&&e.query.length?st(0,t.items):lt},(e.query.length||t.items.length)&&(n.canShowListbox=!0),n;case nt:return{query:"",items:[],itemsError:!1,canShowListbox:!1,highlighted:lt,selected:lt};case tt:return{items:[],itemsError:!0,canShowListbox:!1};case rt:return{highlighted:st(t.index,e.items)};case"CLEAR_HIGHLIGHTED":return{highlighted:lt};case ot:return e.highlighted&&e.highlighted.index>0?{highlighted:st(e.highlighted.index-1,e.items)}:{};case at:return e.highlighted&&e.highlighted.index<e.items.length-1?{highlighted:st(e.highlighted.index+1,e.items)}:{};case it:return r=ut(t.index)?t.item:e.items[t.index],{selected:r,query:r?r.text:lt};default:throw new Error("Invalid action type passed to reducer")}})();return Qe(Qe({},e),n)},dt=e=>({type:Je,query:e}),ft=e=>({type:rt,index:e}),pt=e=>"object"==typeof e?{type:it,item:e}:{type:it,index:e};var mt={exports:{}},ht={};Object.getOwnPropertySymbols,Object.prototype.hasOwnProperty,Object.prototype.propertyIsEnumerable,!function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()||Object.assign;var At=t,gt=60103;if(ht.Fragment=60107,"function"==typeof Symbol&&Symbol.for){var yt=Symbol.for;gt=yt("react.element"),ht.Fragment=yt("react.fragment")}var vt=At.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,bt=Object.prototype.hasOwnProperty,wt={key:!0,ref:!0,__self:!0,__source:!0};function Et(e,t,n){var r,a={},o=null,i=null;for(r in void 0!==n&&(o=""+n),void 0!==t.key&&(o=""+t.key),void 0!==t.ref&&(i=t.ref),t)bt.call(t,r)&&!wt.hasOwnProperty(r)&&(a[r]=t[r]);if(e&&e.defaultProps)for(r in t=e.defaultProps)void 0===a[r]&&(a[r]=t[r]);return{$$typeof:gt,type:e,key:o,ref:i,props:a,_owner:vt.current}}ht.jsx=Et,ht.jsxs=Et,mt.exports=ht;const xt=mt.exports.jsx,kt=mt.exports.jsxs,St=mt.exports.Fragment,Ct=(0,t.createContext)(),Bt=e=>{const{text:n="",items:r=[]}=e,a=e,{children:o}=a,i=((e,t)=>{var n={};for(var r in e)We.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&He)for(var r of He(e))t.indexOf(r)<0&&Ve.call(e,r)&&(n[r]=e[r]);return n})(a,["children"]),[l,u]=(0,t.useReducer)(ct,{query:n,items:r,itemsError:!1,canShowListbox:!1,highlighted:lt,selected:lt,props:i});return(0,t.useEffect)((()=>u(dt(n))),[n]),xt(Ct.Provider,{value:{state:l,dispatch:u},children:o})},_t={listbox:{position:"absolute",zIndex:4}};function Pt(e){const{text:n,match:r,global:a,styles:o}=e,i=`${a?"":"^"}(${function(e){if("string"!=typeof e)throw new TypeError("Expected a string");return e.replace(/[|\\{}()[\]^$+*?.]/g,"\\$&").replace(/-/g,"\\x2d")}(r)})`,l=new RegExp(i,"i"),u=r?n.split(l).filter((e=>e.length)):[n],s=u.map(((e,n)=>e.toLowerCase()===r.toLowerCase()?xt("strong",{className:o.match,children:u[n]},`part${n}`):xt(t.Fragment,{children:u[n]},`part${n}`)));return xt(St,{children:s})}function Nt(e){const{index:n,item:r,styles:a}=e,{state:o,dispatch:i}=(0,t.useContext)(Ct),{highlighted:l,query:u}=o,s=o.props.Item,c="contains"===r.searchType,d=l&&n===l.index,f=a[d?"highlightedItem":"item"],p=s?xt(s,{appearsInDefaultListbox:r.defaultListbox,groupId:r.groupId,groupIndex:r.groupIndex,groupName:r.groupName,index:n,isHighlighted:d,item:r.value,query:u,searchType:r.searchType,setSelected:(e,t)=>{i(pt({value:e,displayField:t,text:e[t]}))},totalItems:o.items.length}):o.props.matchText&&!r.defaultListbox?xt(Pt,{text:r.text,match:u,global:c,styles:a}):xt(St,{children:r.text});return xt("div",{className:f,onMouseEnter:()=>{i(ft(n))},onMouseDown:()=>{i(pt(n))},role:"option","aria-selected":d,"aria-label":r.text,children:p})}function Ot(e){const{groupName:n,index:r,item:a,styles:o}=e,{state:i}=(0,t.useContext)(Ct),l=i.props.GroupName,u=!!n&&(l?xt(l,{id:a.groupId,index:a.groupIndex,children:n}):n);return kt(t.Fragment,{children:[!!u&&xt("div",{className:o.groupHeading,children:u}),xt(Nt,{index:r,item:a,styles:o},`item${r}`)]})}function Tt(e){const{id:n,items:r,noItemsMessage:a,styles:o}=e,{state:i}=(0,t.useContext)(Ct);return r&&r.length?xt("div",{id:n,className:o.listbox,style:_t.listbox,role:"listbox",children:r.map(((e,t)=>0===t||e.groupIndex!==r[t-1].groupIndex?xt(Ot,{groupName:e.groupName,index:t,item:e,styles:o},`item${t}`):xt(Nt,{index:t,item:e,styles:o},`item${t}`)))}):a&&i.query?xt("div",{id:n,className:o.listbox,style:_t.listbox,children:xt("div",{className:o.noItems,children:a})}):xt(t.Fragment,{})}function zt(e){const{id:t,errorMessage:n,styles:r}=e;return xt("div",{id:t,className:r.errorbox,style:_t.listbox,children:xt("div",{className:r.errorMessage,children:n})})}function Rt(e,t){return e===t}function Lt(e){return"function"==typeof e?function(){return e}:e}function Mt(e,t,n,r){return new(n||(n=Promise))((function(a,o){function i(e){try{u(r.next(e))}catch(e){o(e)}}function l(e){try{u(r.throw(e))}catch(e){o(e)}}function u(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,l)}u((r=r.apply(e,t||[])).next())}))}function It(e,t){var n,r,a,o,i={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function l(o){return function(l){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;i;)try{if(n=1,r&&(a=2&o[0]?r.return:o[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,o[1])).done)return a;switch(r=0,a&&(o=[2&o[0],a.value]),o[0]){case 0:case 1:a=o;break;case 4:return i.label++,{value:o[1],done:!1};case 5:i.label++,r=o[1],o=[0];continue;case 7:o=i.ops.pop(),i.trys.pop();continue;default:if(!((a=(a=i.trys).length>0&&a[a.length-1])||6!==o[0]&&2!==o[0])){i=0;continue}if(3===o[0]&&(!a||o[1]>a[0]&&o[1]<a[3])){i.label=o[1];break}if(6===o[0]&&i.label<a[1]){i.label=a[1],a=o;break}if(a&&i.label<a[2]){i.label=a[2],i.ops.push(o);break}a[2]&&i.ops.pop(),i.trys.pop();continue}o=t.call(e,i)}catch(e){o=[6,e],r=0}finally{n=a=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,l])}}}var Ft=function(){},jt=void 0,Dt=Object,$t=function(e){return e===jt},Ut=function(e){return"function"==typeof e},Ht=function(e,t){return Dt.assign({},e,t)},Wt="undefined",Vt=function(){return typeof window!=Wt},qt=new WeakMap,Qt=0,Kt=function(e){var t,n,r=typeof e,a=e&&e.constructor,o=a==Date;if(Dt(e)!==e||o||a==RegExp)t=o?e.toJSON():"symbol"==r?e.toString():"string"==r?JSON.stringify(e):""+e;else{if(t=qt.get(e))return t;if(t=++Qt+"~",qt.set(e,t),a==Array){for(t="@",n=0;n<e.length;n++)t+=Kt(e[n])+",";qt.set(e,t)}if(a==Dt){t="#";for(var i=Dt.keys(e).sort();!$t(n=i.pop());)$t(e[n])||(t+=n+":"+Kt(e[n])+",");qt.set(e,t)}}return t},Gt=!0,Yt=Vt(),Zt=typeof document!=Wt,Xt=Yt&&window.addEventListener?window.addEventListener.bind(window):Ft,Jt=Zt?document.addEventListener.bind(document):Ft,en=Yt&&window.removeEventListener?window.removeEventListener.bind(window):Ft,tn=Zt?document.removeEventListener.bind(document):Ft,nn={isOnline:function(){return Gt},isVisible:function(){var e=Zt&&document.visibilityState;return $t(e)||"hidden"!==e}},rn={initFocus:function(e){return Jt("visibilitychange",e),Xt("focus",e),function(){tn("visibilitychange",e),en("focus",e)}},initReconnect:function(e){var t=function(){Gt=!0,e()},n=function(){Gt=!1};return Xt("online",t),Xt("offline",n),function(){en("online",t),en("offline",n)}}},an=!Vt()||"Deno"in window,on=an?t.useEffect:t.useLayoutEffect,ln="undefined"!=typeof navigator&&navigator.connection,un=!an&&ln&&(["slow-2g","2g"].includes(ln.effectiveType)||ln.saveData),sn=function(e){if(Ut(e))try{e=e()}catch(t){e=""}var t=[].concat(e);return[e="string"==typeof e?e:(Array.isArray(e)?e.length:e)?Kt(e):"",t,e?"$swr$"+e:""]},cn=new WeakMap,dn=function(e,t,n,r,a,o,i){void 0===i&&(i=!0);var l=cn.get(e),u=l[0],s=l[1],c=l[3],d=u[t],f=s[t];if(i&&f)for(var p=0;p<f.length;++p)f[p](n,r,a);return o&&(delete c[t],d&&d[0])?d[0](2).then((function(){return e.get(t)})):e.get(t)},fn=0,pn=function(){return++fn},mn=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return Mt(void 0,void 0,void 0,(function(){var t,n,r,a,o,i,l,u,s,c,d,f,p,m,h,A,g,y,v,b;return It(this,(function(w){switch(w.label){case 0:if(t=e[0],n=e[1],r=e[2],a=e[3],i=!!$t((o="boolean"==typeof a?{revalidate:a}:a||{}).populateCache)||o.populateCache,l=!1!==o.revalidate,u=!1!==o.rollbackOnError,s=o.optimisticData,c=sn(n),d=c[0],f=c[2],!d)return[2];if(p=cn.get(t),m=p[2],e.length<3)return[2,dn(t,d,t.get(d),jt,jt,l,!0)];if(h=r,g=pn(),m[d]=[g,0],y=!$t(s),v=t.get(d),y&&(t.set(d,s),dn(t,d,s)),Ut(h))try{h=h(t.get(d))}catch(e){A=e}return h&&Ut(h.then)?[4,h.catch((function(e){A=e}))]:[3,2];case 1:if(h=w.sent(),g!==m[d][0]){if(A)throw A;return[2,h]}A&&y&&u&&(i=!0,h=v,t.set(d,v)),w.label=2;case 2:return i&&(A||(Ut(i)&&(h=i(h,v)),t.set(d,h)),t.set(f,Ht(t.get(f),{error:A}))),m[d][1]=pn(),[4,dn(t,d,h,A,jt,l,!!i)];case 3:if(b=w.sent(),A)throw A;return[2,i?b:h]}}))}))},hn=function(e,t){for(var n in e)e[n][0]&&e[n][0](t)},An=function(e,t){if(!cn.has(e)){var n=Ht(rn,t),r={},a=mn.bind(jt,e),o=Ft;if(cn.set(e,[r,{},{},{},a]),!an){var i=n.initFocus(setTimeout.bind(jt,hn.bind(jt,r,0))),l=n.initReconnect(setTimeout.bind(jt,hn.bind(jt,r,1)));o=function(){i&&i(),l&&l(),cn.delete(e)}}return[e,a,o]}return[e,cn.get(e)[4]]},gn=An(new Map),yn=gn[0],vn=gn[1],bn=Ht({onLoadingSlow:Ft,onSuccess:Ft,onError:Ft,onErrorRetry:function(e,t,n,r,a){var o=n.errorRetryCount,i=a.retryCount,l=~~((Math.random()+.5)*(1<<(i<8?i:8)))*n.errorRetryInterval;!$t(o)&&i>o||setTimeout(r,l,a)},onDiscarded:Ft,revalidateOnFocus:!0,revalidateOnReconnect:!0,revalidateIfStale:!0,shouldRetryOnError:!0,errorRetryInterval:un?1e4:5e3,focusThrottleInterval:5e3,dedupingInterval:2e3,loadingTimeout:un?5e3:3e3,compare:function(e,t){return Kt(e)==Kt(t)},isPaused:function(){return!1},cache:yn,mutate:vn,fallback:{}},nn),wn=function(e,t){var n=Ht(e,t);if(t){var r=e.use,a=e.fallback,o=t.use,i=t.fallback;r&&o&&(n.use=r.concat(o)),a&&i&&(n.fallback=Ht(a,i))}return n},En=(0,t.createContext)({}),xn=function(e){return Ut(e[1])?[e[0],e[1],e[2]||{}]:[e[0],null,(null===e[1]?e[2]:e[1])||{}]},kn=function(){return Ht(bn,(0,t.useContext)(En))},Sn=function(e,t,n){var r=t[e]||(t[e]=[]);return r.push(n),function(){var e=r.indexOf(n);e>=0&&(r[e]=r[r.length-1],r.pop())}},Cn={dedupe:!0};Dt.defineProperty((function(e){var n=e.value,r=wn((0,t.useContext)(En),n),a=n&&n.provider,o=(0,t.useState)((function(){return a?An(a(r.cache||yn),n):jt}))[0];return o&&(r.cache=o[0],r.mutate=o[1]),on((function(){return o?o[2]:jt}),[]),(0,t.createElement)(En.Provider,Ht(e,{value:r}))}),"default",{value:bn});var Bn,_n=(Bn=function(e,n,r){var a=r.cache,o=r.compare,i=r.fallbackData,l=r.suspense,u=r.revalidateOnMount,s=r.refreshInterval,c=r.refreshWhenHidden,d=r.refreshWhenOffline,f=cn.get(a),p=f[0],m=f[1],h=f[2],A=f[3],g=sn(e),y=g[0],v=g[1],b=g[2],w=(0,t.useRef)(!1),E=(0,t.useRef)(!1),x=(0,t.useRef)(y),k=(0,t.useRef)(n),S=(0,t.useRef)(r),C=function(){return S.current},B=function(){return C().isVisible()&&C().isOnline()},_=function(e){return a.set(b,Ht(a.get(b),e))},P=a.get(y),N=$t(i)?r.fallback[y]:i,O=$t(P)?N:P,T=a.get(b)||{},z=T.error,R=!w.current,L=function(){return R&&!$t(u)?u:!C().isPaused()&&(l?!$t(O):$t(O)||r.revalidateIfStale)},M=!(!y||!n)&&(!!T.isValidating||R&&L()),I=function(e,n){var r=(0,t.useState)({})[1],a=(0,t.useRef)(e),o=(0,t.useRef)({data:!1,error:!1,isValidating:!1}),i=(0,t.useCallback)((function(e){var t=!1,i=a.current;for(var l in e){var u=l;i[u]!==e[u]&&(i[u]=e[u],o.current[u]&&(t=!0))}t&&!n.current&&r({})}),[]);return on((function(){a.current=e})),[a,o.current,i]}({data:O,error:z,isValidating:M},E),F=I[0],j=I[1],D=I[2],$=(0,t.useCallback)((function(e){return Mt(void 0,void 0,void 0,(function(){var t,n,i,l,u,s,c,d,f,p,m,g,b;return It(this,(function(S){switch(S.label){case 0:if(t=k.current,!y||!t||E.current||C().isPaused())return[2,!1];l=!0,u=e||{},s=!A[y]||!u.dedupe,c=function(){return!E.current&&y===x.current&&w.current},d=function(){var e=A[y];e&&e[1]===i&&delete A[y]},f={isValidating:!1},p=function(){_({isValidating:!1}),c()&&D(f)},_({isValidating:!0}),D({isValidating:!0}),S.label=1;case 1:return S.trys.push([1,3,,4]),s&&(dn(a,y,F.current.data,F.current.error,!0),r.loadingTimeout&&!a.get(y)&&setTimeout((function(){l&&c()&&C().onLoadingSlow(y,r)}),r.loadingTimeout),A[y]=[t.apply(void 0,v),pn()]),b=A[y],n=b[0],i=b[1],[4,n];case 2:return n=S.sent(),s&&setTimeout(d,r.dedupingInterval),A[y]&&A[y][1]===i?(_({error:jt}),f.error=jt,m=h[y],!$t(m)&&(i<=m[0]||i<=m[1]||0===m[1])?(p(),s&&c()&&C().onDiscarded(y),[2,!1]):(o(F.current.data,n)?f.data=F.current.data:f.data=n,o(a.get(y),n)||a.set(y,n),s&&c()&&C().onSuccess(n,y,r),[3,4])):(s&&c()&&C().onDiscarded(y),[2,!1]);case 3:return g=S.sent(),d(),C().isPaused()||(_({error:g}),f.error=g,s&&c()&&(C().onError(g,y,r),("boolean"==typeof r.shouldRetryOnError&&r.shouldRetryOnError||Ut(r.shouldRetryOnError)&&r.shouldRetryOnError(g))&&B()&&C().onErrorRetry(g,y,r,$,{retryCount:(u.retryCount||0)+1,dedupe:!0}))),[3,4];case 4:return l=!1,p(),c()&&s&&dn(a,y,f.data,f.error,!1),[2,!0]}}))}))}),[y]),U=(0,t.useCallback)(mn.bind(jt,a,(function(){return x.current})),[]);if(on((function(){k.current=n,S.current=r})),on((function(){if(y){var e=y!==x.current,t=$.bind(jt,Cn),n=0,r=Sn(y,m,(function(e,t,n){D(Ht({error:t,isValidating:n},o(F.current.data,e)?jt:{data:e}))})),a=Sn(y,p,(function(e){if(0==e){var r=Date.now();C().revalidateOnFocus&&r>n&&B()&&(n=r+C().focusThrottleInterval,t())}else if(1==e)C().revalidateOnReconnect&&B()&&t();else if(2==e)return $()}));return E.current=!1,x.current=y,w.current=!0,e&&D({data:O,error:z,isValidating:M}),L()&&($t(O)||an?t():(i=t,Vt()&&typeof window.requestAnimationFrame!=Wt?window.requestAnimationFrame(i):setTimeout(i,1))),function(){E.current=!0,r(),a()}}var i}),[y,$]),on((function(){var e;function t(){var t=Ut(s)?s(O):s;t&&-1!==e&&(e=setTimeout(n,t))}function n(){F.current.error||!c&&!C().isVisible()||!d&&!C().isOnline()?t():$(Cn).then(t)}return t(),function(){e&&(clearTimeout(e),e=-1)}}),[s,c,d,$]),(0,t.useDebugValue)(O),l&&$t(O)&&y)throw k.current=n,S.current=r,E.current=!1,$t(z)?$(Cn):z;return{mutate:U,get data(){return j.data=!0,O},get error(){return j.error=!0,z},get isValidating(){return j.isValidating=!0,M}}},function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=kn(),r=xn(e),a=r[0],o=r[1],i=r[2],l=wn(n,i),u=Bn,s=l.use;if(s)for(var c=s.length;c-- >0;)u=s[c](u);return u(a,o||l.fetcher,l)}),Pn={};Object.defineProperty(Pn,"__esModule",{value:!0});var Nn=Pn.default=function(e,t){for(const n in e)if(typeof e[n]===t)return e[n]};function On(e){return(n,r,a)=>{const o=(0,t.useRef)(),i=e(n,r,a);(0,t.useEffect)((()=>{void 0!==i.data&&(o.current=i.data)}),[i.data]);const l=(0,t.useCallback)((()=>{o.current=void 0}),[]),u=void 0===i.data?o.current:i.data,s=void 0===i.data&&void 0!==o.current;return Object.assign({},i,{data:u,isLagging:s,resetLaggy:l})}}const Tn=(e,t)=>{const n="string"==typeof e&&ut(t)?e:e[t];return ut(n)?Nn(e,"string")||"":n},zn=(e,t,n,r,a,o)=>{const i=_n([e.toLowerCase(),"X"],(e=>((e,t,n,r,a)=>{if(n&&e.length>0&&e.length<r)return[];if(!n&&e.length<r)return[];const o=n&&!e.length,i=((e,t)=>"function"==typeof e?e:()=>Promise.resolve(Array.isArray(e)?e:[Qe(Qe({},e),{name:"",ratio:t})]))(o?n:t,a)(e);return i.then((t=>{const n=t.map((t=>"function"==typeof t.data?t.data(e):Promise.resolve(((e,t)=>{const{data:n,displayField:r,searchType:a}=e;switch(a?a.toLowerCase():a){case"startswith":return n.filter((e=>Tn(e,r).toLowerCase().startsWith(t.toLowerCase())));case"contains":return n.filter((e=>Tn(e,r).toLowerCase().includes(t.toLowerCase())));default:return n}})(t,e))));return Promise.all(n).then((e=>((e=e.reduce(((e,n,r)=>{const{id:a,name:i,displayField:l,searchType:u}=t[r];return[...e,n.map((e=>({value:e,text:Tn(e,l),groupIndex:r,groupId:a,groupName:i,searchType:u,displayField:l,defaultListbox:o})))]}),[])).length&&(e=((e,t,n)=>{const r=t.map((e=>e.ratio||1)),a=n/r.reduce(((e,t)=>e+t),0),o=e.flat().length,i=[];let l=o<n?o:n;for(;l>0;)e=e.map(((e,t)=>(i[t]?i[t]<e.length&&(l-=++i[t]):(i[t]=Math.round(r[t]*a),i[t]>e.length&&(i[t]=e.length),l-=i[t]),e)));return e.map(((e,t)=>e.slice(0,i[t])))})(e,t,a)),e.flat())))}))})(e,n,r,a,o)),(e=>{const t={use:[On]};return e?Ke(Qe({},t),{revalidateIfStale:!1,revalidateOnFocus:!1,revalidateOnReconnect:!1}):t})(t));return i},Rn={container:{position:"relative",textAlign:"left"},containerFocus:{position:"relative",textAlign:"left"},query:{position:"relative",zIndex:1,backgroundColor:"transparent"},queryNoTypeahead:{position:"relative"},typeahead:{position:"absolute",zIndex:0,top:0,left:0},clearButton:{zIndex:2},cancelButton:{zIndex:3}};var Ln=["textarea","text","search","tel","url","password"],Mn=function(e,t){if(function(e){return!(!e.setSelectionRange||!~Ln.indexOf(e.type))}(e)&&e===document.activeElement){var n=e.selectionStart,r=e.selectionEnd;e.value=t,e.setSelectionRange(n,r)}else e.value=t};const In=t.forwardRef(((e,n)=>{const{autoFocus:r,cancelButton:a,cancelButtonAriaLabel:o,clearButton:i,clearButtonAriaLabel:l,debounceWait:u,defaultListbox:s,defaultListboxIsImmutable:c,disabled:d,enterKeyHint:f,errorMessage:p,id:m,listbox:h,listboxIsImmutable:A,maxItems:g,minQueryLength:y,name:v,noItemsMessage:b,onBlur:w,onChange:E,onEnter:x,onFocus:k,onSelect:S,onTab:C,placeholder:B,styles:_,tabIndex:P,text:N,typeahead:O,Cancel:T,Clear:z}=e,R=`${m}-listbox`,L=`${m}-errorbox`,{state:M,dispatch:I}=(0,t.useContext)(Ct),[F]=function(e,n,r){var a=r&&r.equalityFn||Rt,o=function(e){var n=(0,t.useState)(Lt(e)),r=n[0],a=n[1];return[r,(0,t.useCallback)((function(e){return a(Lt(e))}),[])]}(e),i=o[0],l=o[1],u=function(e,n,r){var a=this,o=(0,t.useRef)(null),i=(0,t.useRef)(0),l=(0,t.useRef)(null),u=(0,t.useRef)([]),s=(0,t.useRef)(),c=(0,t.useRef)(),d=(0,t.useRef)(e),f=(0,t.useRef)(!0);d.current=e;var p=!n&&0!==n&&"undefined"!=typeof window;if("function"!=typeof e)throw new TypeError("Expected a function");n=+n||0;var m=!!(r=r||{}).leading,h=!("trailing"in r)||!!r.trailing,A="maxWait"in r,g=A?Math.max(+r.maxWait||0,n):null;(0,t.useEffect)((function(){return f.current=!0,function(){f.current=!1}}),[]);var y=(0,t.useMemo)((function(){var e=function(e){var t=u.current,n=s.current;return u.current=s.current=null,i.current=e,c.current=d.current.apply(n,t)},t=function(e,t){p&&cancelAnimationFrame(l.current),l.current=p?requestAnimationFrame(e):setTimeout(e,t)},r=function(e){if(!f.current)return!1;var t=e-o.current,r=e-i.current;return!o.current||t>=n||t<0||A&&r>=g},y=function(t){return l.current=null,h&&u.current?e(t):(u.current=s.current=null,c.current)},v=function(){var e=Date.now();if(r(e))return y(e);if(f.current){var a=e-o.current,l=e-i.current,u=n-a,s=A?Math.min(u,g-l):u;t(v,s)}},b=function(){for(var d=[],p=0;p<arguments.length;p++)d[p]=arguments[p];var h=Date.now(),g=r(h);if(u.current=d,s.current=a,o.current=h,g){if(!l.current&&f.current)return i.current=o.current,t(v,n),m?e(o.current):c.current;if(A)return t(v,n),e(o.current)}return l.current||t(v,n),c.current};return b.cancel=function(){l.current&&(p?cancelAnimationFrame(l.current):clearTimeout(l.current)),i.current=0,u.current=o.current=s.current=l.current=null},b.isPending=function(){return!!l.current},b.flush=function(){return l.current?y(Date.now()):c.current},b}),[m,A,n,g,h,p]);return y}((0,t.useCallback)((function(e){return l(e)}),[l]),n,r),s=(0,t.useRef)(e);return a(s.current,e)||(u(e),s.current=e),[i,u]}(M.query,u),[j,D]=(0,t.useState)(!1),[$,U]=(0,t.useState)(!1),[H,W]=(0,t.useState)(!!N),V=(0,t.useRef)(null),q=(0,t.useRef)(null),Q=O&&M.items.length>1,K=i&&!!M.query,G=a&&j,Y=j&&M.canShowListbox,Z=!!e.errorMessage&&M.itemsError,X=j?"containerFocus":"container",J=_[X]||_.container,ee=_[X]?lt:Rn[X],te=_[j?"inputFocus":"input"]||_.input,ne=Q?Rn.query:Rn.queryNoTypeahead,re=A&&!(s&&!c&&0===F.length),ae=zn(F?F.toLowerCase():"",re,h,s,y,g);(e=>{const{dispatch:n}=(0,t.useContext)(Ct);(0,t.useEffect)((()=>{n({type:et,items:e||[]})}),[e,n])})(ae.data),(0,t.useEffect)((()=>{var e;H&&ae.data&&(null==(e=ae.data[0])?void 0:e.text)===N&&(I(pt(ae.data[0])),W(!1))}),[H,ae.data,N,I]),(e=>{const{dispatch:n}=(0,t.useContext)(Ct);(0,t.useEffect)((()=>{e&&n({type:tt})}),[e,n])})(ae.error),((e,n,r,a)=>{const o=(0,t.useRef)(!0);(0,t.useEffect)((()=>{const t=!!r.current,i=(()=>{const n=t?r.current.value:"";return e&&n.startsWith(e)?n:""})();t&&(r.current.value=i),Mn(n.current,e),o.current&&!e||"function"==typeof a&&a(e),o.current=!1}),[e,a,n,r])})(M.query,V,q,E),((e,n,r,a)=>{(0,t.useEffect)((()=>{const t=e&&n&&r.current.value.length>0&&(o=e.text,i=r.current.value,"string"==typeof o&&"string"==typeof i&&o.toLowerCase().startsWith(i.toLowerCase()))?e.text:"";var o,i;const l=((e,t)=>{const n=t.substring(0,e.length);return n.length>0&&e.toLowerCase()===n.toLowerCase()&&e!==n?n:e})(r.current.value,t);a.current&&(a.current.value=t),Mn(r.current,l)}),[e,n,r,a])})(M.highlighted,j,V,q),((e,n,r,a)=>{const o=(0,t.useRef)(!0);(0,t.useEffect)((()=>{let t,i;ut(e)?(t=lt,i=lt):(r.current&&(r.current.value=""),n.current.blur(),t=e.value,i=e.displayField),o.current&&ut(e)||"function"==typeof a&&a(t,i),o.current=!1}),[e,a,n,r])})(M.selected,V,q,S);const oe=e=>{const t=M.highlighted&&M.highlighted.index,n=ut(t)?lt:M.items[t],r="enter"===e.toLowerCase()?x:C;n&&I(pt(t)),"function"==typeof r&&r(V.current.value,n)},ie=()=>{I(dt(V.current.value))},le=()=>{V.current.value="",O&&q.current&&(q.current.value=""),I({type:nt}),V.current.focus()};return(0,t.useImperativeHandle)(n,(()=>({focus:()=>{V.current.focus()},blur:()=>{V.current.blur()},select:()=>{V.current.select()},clear:()=>{le()},query:e=>{"string"==typeof e&&(V.current.value=e,V.current.focus(),ie())}}))),xt(t.Fragment,{children:kt("div",{className:J,style:ee,role:"combobox","aria-expanded":Y,"aria-owns":R,"aria-haspopup":"listbox",children:[xt("input",{id:m,name:v,className:`${te||""} ${_.query||""}`.trim(),style:ne,disabled:d,placeholder:B,type:"text",autoFocus:r,autoComplete:"off",autoCorrect:"off",autoCapitalize:"off",spellCheck:"false",tabIndex:P,enterKeyHint:f,ref:V,onKeyDown:e=>{switch(e.keyCode){case 40:I({type:at});break;case 38:I({type:ot});break;case 13:oe("enter");break;case 9:oe("tab");break;case 27:le()}},onInput:ie,onFocus:()=>{j||(D(!0),M.items&&M.items.length>0&&I(ft(0)),"function"==typeof k&&k())},onBlur:()=>{$?V.current.focus():(D(!1),"function"==typeof w&&w()),U(!1)},"aria-autocomplete":"both","aria-controls":R}),Q&&xt("input",{className:`${te||""} ${_.typeahead||""}`.trim(),style:Rn.typeahead,disabled:d,type:"text",autoComplete:"off",autoCorrect:"off",autoCapitalize:"off",spellCheck:"false",tabIndex:"-1",readOnly:"readonly","aria-hidden":"true",ref:q}),K&&xt("button",{className:_.clearButton,style:Rn.clearButton,onMouseDown:()=>{U(!0),le()},tabIndex:-1,"aria-label":l,children:xt(z,{})}),G&&xt("button",{className:_.cancelButton,style:Rn.cancelButton,onMouseDown:()=>{le()},tabIndex:-1,"aria-label":o,children:xt(T,{})}),Y&&xt(Tt,{id:R,items:M.items,noItemsMessage:b,styles:_}),Z&&xt(zt,{id:L,errorMessage:p,styles:_})]})})}));In.displayName="Container";const Fn={autoFocus:!1,cancelButton:!1,cancelButtonAriaLabel:"Cancel",clearButton:!1,clearButtonAriaLabel:"Clear contents",debounceWait:250,defaultListboxIsImmutable:!0,disabled:!1,id:`turnstone-${(0|604e5*Math.random()).toString(36)}`,listboxIsImmutable:!0,matchText:!1,maxItems:10,minQueryLength:1,placeholder:"",styles:{},typeahead:!0,Cancel:()=>"Cancel",Clear:()=>"×"},jn=(e,t,n,r)=>{const a=Array.isArray(t.plugins)&&t.plugins[n];if(a){const[o,i]=Array.isArray(a)?a:[a];return xt(o,Ke(Qe({ref:r},i),{Component:e,componentProps:t,pluginIndex:n,render:jn}))}return xt(e,Qe({ref:r},t))},Dn=t.forwardRef(((e,n)=>{const r=Qe(Qe({},Fn),e);return xt(t.StrictMode,{children:xt(Bt,Ke(Qe({},r),{children:jn(In,r,0,n)}))})}));Dn.displayName="Turnstone";const $n=["startswith","contains"],Un=Xe.oneOfType([Xe.arrayOf(Xe.exact({data:Xe.oneOfType([Xe.func,Xe.array]).isRequired,searchType:Xe.oneOf($n),displayField:Xe.oneOfType([Xe.number,Xe.string]),id:Xe.string,name:Xe.string.isRequired,ratio:Xe.number})),Xe.exact({data:Xe.oneOfType([Xe.func,Xe.array]).isRequired,searchType:Xe.oneOf($n),displayField:Xe.oneOfType([Xe.number,Xe.string])}),Xe.func]);function Hn(){var e=K(),n={data:function(e){return fetch("/api/search/patients?q=".concat(encodeURIComponent(e),"&limit=10")).then((function(e){return e.json()}))},searchType:"contains",displayField:"fullName"},r={data:function(){return fetch("/api/patients/popular").then((function(e){return e.json()}))},displayField:"fullName"};return t.createElement(Dn,{autoFocus:!1,cancelButton:!1,clearButton:!0,debounceWait:250,id:"search-patient",listbox:n,listboxIsImmutable:!0,matchText:!0,maxItems:"20",noItemsMessage:"Não encontramos nenhum paciente com esse nome",placeholder:"Digite o nome do paciente",styles:{container:"",containerFocus:"",input:"w-full border border-gray-300 py-2 px-4 rounded-md text-lg",inputFocus:"w-full border border-gray-300 border-b-0 outline-none py-2 px-4 rounded-t-md  text-lg",query:"",typeahead:"",cancelButton:"",clearButton:"absolute inset-y-0 right-0 w-8 inline-flex items-center justify-center",listbox:"bg-white w-full border border-t-0 border-gray-300 shadow rounded-b-md pt-2 pb-3",noItems:"py-1 px-4 text-gray-500",errorbox:"",errorMessage:"",groupHeading:"",item:"py-1 px-4",highlightedItem:"py-1 px-4 bg-gray-200 cursor-pointer",match:""},onSelect:function(t,n){t&&e("/patients/".concat(t._id,"/"))},typeahead:!0,defaultListbox:r})}function Wn(){return t.createElement("div",{className:"flex flex-col justify-center m-20 p-10 text-xl"},t.createElement(Hn,null))}Dn.propTypes={autoFocus:Xe.bool,cancelButton:Xe.bool,cancelButtonAriaLabel:Xe.string,cancelButtonText:Xe.string,clearButton:Xe.bool,clearButtonAriaLabel:Xe.string,clearButtonText:Xe.string,debounceWait:Xe.number,defaultListbox:Un,defaultListboxIsImmutable:Xe.bool,disabled:Xe.bool,enterKeyHint:Xe.oneOf(["enter","done","go","next","previous","search","send"]),errorMessage:Xe.string,id:Xe.string,listbox:Un.isRequired,listboxIsImmutable:Xe.bool,matchText:Xe.bool,maxItems:Xe.number,minQueryLength:e=>{if(Xe.checkPropTypes({minQueryLength:Xe.number},{minQueryLength:e.minQueryLength},"prop","Turnstone"),e.minQueryLength<Fn.minQueryLength)return new Error('Prop "minQueryLength" must be a number greater than '+(Fn.minQueryLength-1))},name:Xe.string,noItemsMessage:Xe.string,onBlur:Xe.func,onChange:Xe.func,onEnter:Xe.func,onFocus:Xe.func,onSelect:Xe.func,onTab:Xe.func,placeholder:Xe.string,plugins:Xe.array,styles:Xe.object,tabIndex:Xe.number,text:Xe.string,typeahead:Xe.bool,Cancel:Xe.elementType,Clear:Xe.elementType,Item:Xe.elementType,GroupName:Xe.elementType};var Vn=a(989),qn=a(570),Qn=a(503),Kn=a(211);function Gn(e){var n=(0,t.useContext)(Ee).thisPatient,r="/patients/".concat(n._id);return t.createElement("nav",{className:"bg-slate-600 h-screen text-white pt-4"},t.createElement("ul",null,t.createElement("li",{className:"flex flex-col"},t.createElement(ge,{to:"".concat(r,"/events/timeline?n=1"),className:function(e){return e.isActive?"bg-slate-100 text-sky-700 font-bold py-2 px-4 border-l-8 border-sky-700":"py-2 px-4"}},t.createElement(Qn.Z,{className:"mr-1"}),"Eventos recentes")),t.createElement("li",{className:"flex flex-col"},t.createElement(ge,{to:"".concat(r,"/diagnosis"),className:function(e){return e.isActive?"bg-slate-100 text-sky-700 font-bold py-2 px-4 border-l-8 border-sky-700":"py-2 px-4"}},t.createElement(Vn.Z,{className:"mr-1"}),"Diagnósticos atuais")),t.createElement("li",{className:"flex flex-col"},t.createElement(ge,{to:"".concat(r,"/categories/636ab44fbf294dd0321dee27"),className:function(e){return e.isActive?"bg-slate-100 text-sky-700 font-bold py-2 px-4 border-l-8 border-sky-700":"py-2 px-4"}},t.createElement(Kn.Z,{className:"mr-1"}),"Ambulatório")),t.createElement("li",{className:"flex flex-col mt-4"},t.createElement(ge,{to:"".concat(r,"/profile"),className:function(e){return e.isActive?"bg-slate-100 text-sky-700 font-bold py-2 px-4 border-l-8 border-sky-700":"py-2 px-4"}},t.createElement(qn.Z,{className:"mr-1"}),"Dados pessoais"))))}var Yn=a(833);function Zn(e){var n,r=(0,t.useContext)(Ee),a=r.thisPatient,o=r.getAge,i=null===(n=a.currentDiagnosis)||void 0===n?void 0:n.map((function(e){return t.createElement(Ae,{to:"",key:e._id,className:"underline"},e.name)})).reduce((function(e,t){return[e,", ",t]}));return t.createElement("div",{className:"bg-slate-700 text-white"},t.createElement("div",{id:"patient-info",className:"pt-2 pb-3 px-4 flex items-baseline"},t.createElement("h2",{id:"patient-name",className:"text-2xl mr-3 font-serif"},t.createElement(Yn.Z,{className:"mb-1 mr-2"}),a.fullName),t.createElement("div",{className:"flex text-sm"},t.createElement("div",{className:"mr-3"},t.createElement("span",{className:"text-gray-300 font-serif"},"Registro: "),t.createElement("span",{className:""},a._id)),t.createElement("div",{className:"mr-3"},t.createElement("span",{className:"text-gray-300 font-serif"},"Idade: "),t.createElement("span",{className:""},o(a.dateOfBirth))),t.createElement("div",{className:""},t.createElement("span",{className:"text-gray-300 font-serif"},"Diagnósticos: "),t.createElement("span",{className:""},i)))))}function Xn(){var e=(0,t.useContext)(Ee).setThisPatient,n=Y().patientId;return(0,t.useEffect)((function(){fetch("/api/patients/".concat(n)).then((function(e){return e.json()})).then((function(t){e(t)}))}),[n]),t.createElement("div",{className:""},t.createElement("div",{className:""},t.createElement(Zn,null)),t.createElement("div",{className:"flex"},t.createElement("div",{className:"w-1/6"},t.createElement(Gn,null)),t.createElement("div",{className:"w-full"},t.createElement(ae,null))))}function Jn(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,o=[],i=!0,l=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(o.push(r.value),!t||o.length!==t);i=!0);}catch(e){l=!0,a=e}finally{try{i||null==n.return||n.return()}finally{if(l)throw a}}return o}}(e,t)||function(e,t){if(e){if("string"==typeof e)return er(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?er(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function er(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function tr(){var e=(0,t.useContext)(Ee),n=e.formatDate,r=(e.thisPatient,Jn((0,t.useState)([]),2)),a=r[0],o=r[1],i=Y().patientId,l=Jn(function(e){let n=t.useRef(fe(e)),r=Q(),a=t.useMemo((()=>function(e,t){let n=fe(e);for(let e of t.keys())n.has(e)||t.getAll(e).forEach((t=>{n.append(e,t)}));return n}(r.search,n.current)),[r.search]),o=K(),i=t.useCallback(((e,t)=>{const n=fe("function"==typeof e?e(a):e);o("?"+n,t)}),[o,a]);return[a,i]}(),2),u=l[0],s=(l[1],u.get("n"));(0,t.useEffect)((function(){fetch("/api/patients/".concat(i,"/events?n=").concat(s)).then((function(e){return e.json()})).then((function(e){return o(e)})).catch((function(e){console.log(e)}))}),[]),console.log(a);var c=null==a?void 0:a.map((function(e){return t.createElement("div",{className:"items-start mb-5",key:e._id},t.createElement("div",{className:"flex justify-between items-center bg-gray-100 px-2 py-1 rounded-full"},t.createElement("div",null,t.createElement(Ae,{to:"outpatient",className:"flex items-center"},t.createElement("span",{className:"grow font-bold uppercase text-sm ml-1"},e.category.name," de ",e.specialty))),t.createElement("div",{className:"text-sm"},n(e.date,"short"))),t.createElement("div",{className:"pl-2"},e.exam&&t.createElement("div",null,t.createElement("span",{className:"text-gray-500 font-bold uppercase text-sm"},"Exame: "),e.exam.join(", ")),e.diagnosis.length>0&&t.createElement("div",null,t.createElement("span",{className:"text-gray-500 font-bold uppercase text-sm"},"HD: "),e.diagnosis.join(", "))))}));return t.createElement("div",{className:"p-4"},c)}var nr=a(617),rr=a(79),ar=a(109);function or(){var e=(0,t.useContext)(Ee),n=e.formatDate,r=e.events,a=e.setEvents,o=Y(),i=o.patientId,l=o.categoryId;(0,t.useEffect)((function(){fetch("/api/patients/".concat(i,"/categories/").concat(l)).then((function(e){return e.json()})).then((function(e){return a(e)}))}),[]);var u=r.map((function(e){return t.createElement(ge,{to:"events/".concat(e._id),className:function(e){return e.isActive?"py-3 px-4 block border-b bg-white":"py-3 px-4 block border-b"},key:e._id},t.createElement("div",{className:"text-sky-700 font-semibold text-sm uppercase mb-1"},e.specialty),t.createElement("div",{className:"flex text-sm items-center"},t.createElement(nr.Z,{viewBox:"0 0 22 22",className:"w-4 h-4 text-slate-500 mr-1"}),t.createElement("span",null,n(e.updatedAt,"short"))),t.createElement("div",{className:"flex text-sm"},t.createElement(rr.Z,{viewBox:"0 0 22 22",className:"w-4 h-4 text-slate-500 mr-1"}),t.createElement("span",null,e.doctor)),t.createElement("div",{className:"flex text-sm"},t.createElement(ar.Z,{viewBox:"0 0 22 22",className:"w-4 h-4 text-slate-500 mr-1"}),t.createElement("span",null,e.diagnosis.join(", "))))}));return t.createElement("div",{className:"flex h-full"},t.createElement("div",{className:"w-1/5 bg-slate-100"},u),t.createElement("div",{className:"w-full"},t.createElement(ae,{context:[r]})))}function ir(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function lr(){var e,n,r=(e=t.useContext(G),n=1,function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,o=[],i=!0,l=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(o.push(r.value),!t||o.length!==t);i=!0);}catch(e){l=!0,a=e}finally{try{i||null==n.return||n.return()}finally{if(l)throw a}}return o}}(e,n)||function(e,t){if(e){if("string"==typeof e)return ir(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?ir(e,t):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}())[0],a=Y().eventId,o=r.find((function(e){return e._id===a}));return t.createElement("div",{className:"p-4"},t.createElement("h2",{className:"text-xl uppercase mb-7 font-serif"},o&&o.category.name," de ",o&&o.specialty))}function ur(){return t.createElement("h1",{className:"text-2xl uppercase mb-7 font-serif"},"Dados pessoais")}function sr(){var e,n=null===(e=(0,t.useContext)(Ee).thisPatient.currentDiagnosis)||void 0===e?void 0:e.map((function(e){return t.createElement("div",{className:"mb-4",key:e._id},t.createElement("h3",{className:"text-md font-bold text-sky-700 uppercase"},e.name),t.createElement("p",null,e.body))}));return t.createElement("div",{className:"p-4"},t.createElement("h2",{className:"text-xl uppercase mb-4 font-serif"},"Diagnósticos atuais"),n)}function cr(){return t.createElement("div",null,t.createElement(je,null),t.createElement("div",{className:"flex"},t.createElement("div",{className:"w-screen bg-white h-screen"},t.createElement(le,null,t.createElement(oe,{path:"/",element:t.createElement(Wn,null)}),t.createElement(oe,{path:"/patients/:patientId",element:t.createElement(Xn,null)},t.createElement(oe,{path:"events/timeline",element:t.createElement(tr,null)}),t.createElement(oe,{path:"diagnosis",element:t.createElement(sr,null)}),t.createElement(oe,{path:"profile",element:t.createElement(ur,null)}),t.createElement(oe,{path:"categories/:categoryId",element:t.createElement(or,null)},t.createElement(oe,{path:"events/:eventId",element:t.createElement(lr,null)})))))))}r.createRoot(document.getElementById("root")).render(t.createElement(xe,null,t.createElement(he,null,t.createElement(cr,null))))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJQSxHQUFhLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJQSxHQUFhLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJQSxHQUFhLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJQSxHQUFhLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJQSxHQUFhLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJQSxHQUFhLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJQSxHQUFhLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJQSxHQUFhLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJQSxHQUFhLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJQSxHQUFhLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJQSxHQUFhLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJQSxHQUFhLEVBQUcsRUFBRyxJQUFLLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJQSxHQUFhLEVBQUcsRUFBRyxJQUFLLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJ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UixNQUMvRCx5QkFBSTdSLEVBQUt3M0IsTUFDTixJQUdULE9BQ0csdUJBQUtqWCxVQUFVLE9BQ1osc0JBQUlBLFVBQVUscUNBQW1DLHVCQUNoRHVsRSxFQUdWLENDUGUsU0FBUzRDLEtBQ3JCLE9BQ0csMkJBQ0csZ0JBQUN0ZixHQUFNLE1BQ1AsdUJBQUs3b0QsVUFBVSxRQUNaLHVCQUFLQSxVQUFVLDhCQUNaLGdCQUFDd2lELEdBQU0sS0FFSixnQkFBQ1YsR0FBSyxDQUFDemdFLEtBQUssSUFBSThWLFFBQVMsZ0JBQUMwdEUsR0FBSSxRQUU5QixnQkFBQy9pQixHQUFLLENBQUN6Z0UsS0FBSyx1QkFBdUI4VixRQUFTLGdCQUFDMHVFLEdBQU8sT0FDakQsZ0JBQUMvakIsR0FBSyxDQUFDemdFLEtBQUssa0JBQWtCOFYsUUFBUyxnQkFBQzR1RSxHQUFRLFFBQ2hELGdCQUFDamtCLEdBQUssQ0FBQ3pnRSxLQUFLLFlBQVk4VixRQUFTLGdCQUFDK3dFLEdBQWdCLFFBQ2xELGdCQUFDcG1CLEdBQUssQ0FBQ3pnRSxLQUFLLFVBQVU4VixRQUFTLGdCQUFDOHdFLEdBQU8sUUFDdkMsZ0JBQUNubUIsR0FBSyxDQUFDemdFLEtBQUsseUJBQXlCOFYsUUFBUyxnQkFBQ2t3RSxHQUFnQixPQUM1RCxnQkFBQ3ZsQixHQUFLLENBQUN6Z0UsS0FBSyxrQkFBa0I4VixRQUFTLGdCQUFDMHdFLEdBQVksYUFRNUUsQ0M5QkFPLEVBQUFBLFdBQW9CbjBFLFNBQVNvMEUsZUFBZSxTQUFTdnlELE9BQ2xELGdCQUFDMHhDLEdBQWUsS0FDYixnQkFBQ3pDLEdBQWEsS0FDWCxnQkFBQ29qQixHQUFHIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvd2VicGFjay9ydW50aW1lL2NyZWF0ZSBmYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQG11aS9pY29ucy1tYXRlcmlhbC9Bc3NpZ25tZW50TGF0ZU91dGxpbmVkLmpzIiwid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0BtdWkvaWNvbnMtbWF0ZXJpYWwvQ2FsZW5kYXJNb250aE91dGxpbmVkLmpzIiwid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0BtdWkvaWNvbnMtbWF0ZXJpYWwvQ2hhaXJPdXRsaW5lZC5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9AbXVpL2ljb25zLW1hdGVyaWFsL0NyZWF0ZU5ld0ZvbGRlck91dGxpbmVkLmpzIiwid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0BtdWkvaWNvbnMtbWF0ZXJpYWwvRm9sZGVyU2hhcmVkT3V0bGluZWQuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQG11aS9pY29ucy1tYXRlcmlhbC9Gb3JtYXRMaXN0QnVsbGV0ZWRPdXRsaW5lZC5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9AbXVpL2ljb25zLW1hdGVyaWFsL01lbnVPdXRsaW5lZC5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9AbXVpL2ljb25zLW1hdGVyaWFsL1BlcnNvbk91dGxpbmVPdXRsaW5lZC5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9AbXVpL2ljb25zLW1hdGVyaWFsL1NwYS5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9AbXVpL2ljb25zLW1hdGVyaWFsL3V0aWxzL2NyZWF0ZVN2Z0ljb24uanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQG11aS91dGlscy9lc20vQ2xhc3NOYW1lR2VuZXJhdG9yL0NsYXNzTmFtZUdlbmVyYXRvci5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9AbXVpL3V0aWxzL2VzbS9mb3JtYXRNdWlFcnJvck1lc3NhZ2UuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQG11aS91dGlscy9lc20vY2FwaXRhbGl6ZS5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL2VzbS91dGlscy9jYXBpdGFsaXplLmpzIiwid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvZXNtL3V0aWxzL2NyZWF0ZUNoYWluZWRGdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9AbXVpL3V0aWxzL2VzbS9jcmVhdGVDaGFpbmVkRnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcy5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlLmpzIiwid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2Nsc3gvZGlzdC9jbHN4Lm0uanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQG11aS91dGlscy9lc20vZGVlcG1lcmdlLmpzIiwid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9jcmVhdGVUaGVtZS9jcmVhdGVCcmVha3BvaW50cy5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vY3JlYXRlVGhlbWUvc2hhcGUuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL2JyZWFrcG9pbnRzLmpzIiwid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9zdHlsZS5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vbWVyZ2UuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL3NwYWNpbmcuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL21lbW9pemUuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL2NyZWF0ZVRoZW1lL2NyZWF0ZVRoZW1lLmpzIiwid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9jcmVhdGVUaGVtZS9jcmVhdGVTcGFjaW5nLmpzIiwid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0BtdWkvcHJpdmF0ZS10aGVtaW5nL3VzZVRoZW1lL1RoZW1lQ29udGV4dC5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vdXNlVGhlbWUuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL3VzZVRoZW1lV2l0aG91dERlZmF1bHQuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQG11aS9wcml2YXRlLXRoZW1pbmcvdXNlVGhlbWUvdXNlVGhlbWUuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL2NvbG9yTWFuaXB1bGF0b3IuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9lc20vY29sb3JzL2NvbW1vbi5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL2VzbS9jb2xvcnMvZ3JleS5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL2VzbS9jb2xvcnMvcHVycGxlLmpzIiwid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvZXNtL2NvbG9ycy9yZWQuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9lc20vY29sb3JzL29yYW5nZS5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL2VzbS9jb2xvcnMvYmx1ZS5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL2VzbS9jb2xvcnMvbGlnaHRCbHVlLmpzIiwid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvZXNtL2NvbG9ycy9ncmVlbi5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL2VzbS9zdHlsZXMvY3JlYXRlUGFsZXR0ZS5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL2VzbS9zdHlsZXMvY3JlYXRlVHlwb2dyYXBoeS5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL2VzbS9zdHlsZXMvc2hhZG93cy5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL2VzbS9zdHlsZXMvY3JlYXRlVHJhbnNpdGlvbnMuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9lc20vc3R5bGVzL3pJbmRleC5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL2VzbS9zdHlsZXMvY3JlYXRlVGhlbWUuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9lc20vc3R5bGVzL2RlZmF1bHRUaGVtZS5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL2VzbS9zdHlsZXMvY3JlYXRlTWl4aW5zLmpzIiwid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvZXNtL3N0eWxlcy91c2VUaGVtZVByb3BzLmpzIiwid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS91c2VUaGVtZVByb3BzL3VzZVRoZW1lUHJvcHMuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL3VzZVRoZW1lUHJvcHMvZ2V0VGhlbWVQcm9wcy5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9AbXVpL3V0aWxzL2VzbS9yZXNvbHZlUHJvcHMuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vbWVtb2l6ZS9kaXN0L2Vtb3Rpb24tbWVtb2l6ZS5lc20uanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vaXMtcHJvcC12YWxpZC9kaXN0L2Vtb3Rpb24taXMtcHJvcC12YWxpZC5lc20uanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vc2hlZXQvZGlzdC9lbW90aW9uLXNoZWV0LmJyb3dzZXIuZXNtLmpzIiwid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL3N0eWxpcy9zcmMvVXRpbGl0eS5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9zdHlsaXMvc3JjL1Rva2VuaXplci5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9zdHlsaXMvc3JjL0VudW0uanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvc3R5bGlzL3NyYy9TZXJpYWxpemVyLmpzIiwid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL3N0eWxpcy9zcmMvUGFyc2VyLmpzIiwid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL2NhY2hlL2Rpc3QvZW1vdGlvbi1jYWNoZS5icm93c2VyLmVzbS5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9zdHlsaXMvc3JjL01pZGRsZXdhcmUuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vaGFzaC9kaXN0L2Vtb3Rpb24taGFzaC5lc20uanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vdW5pdGxlc3MvZGlzdC9lbW90aW9uLXVuaXRsZXNzLmVzbS5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi9zZXJpYWxpemUvZGlzdC9lbW90aW9uLXNlcmlhbGl6ZS5icm93c2VyLmVzbS5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi91c2UtaW5zZXJ0aW9uLWVmZmVjdC13aXRoLWZhbGxiYWNrcy9kaXN0L2Vtb3Rpb24tdXNlLWluc2VydGlvbi1lZmZlY3Qtd2l0aC1mYWxsYmFja3MuYnJvd3Nlci5lc20uanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vcmVhY3QvZGlzdC9lbW90aW9uLWVsZW1lbnQtNmE4ODNkYTkuYnJvd3Nlci5lc20uanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vdXRpbHMvZGlzdC9lbW90aW9uLXV0aWxzLmJyb3dzZXIuZXNtLmpzIiwid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL3N0eWxlZC9iYXNlL2Rpc3QvZW1vdGlvbi1zdHlsZWQtYmFzZS5icm93c2VyLmVzbS5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi9zdHlsZWQvZGlzdC9lbW90aW9uLXN0eWxlZC5icm93c2VyLmVzbS5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vcHJvcHNUb0NsYXNzS2V5LmpzIiwid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9jb21wb3NlLmpzIiwid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9ib3JkZXJzLmpzIiwid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9kaXNwbGF5LmpzIiwid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9mbGV4Ym94LmpzIiwid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9jc3NHcmlkLmpzIiwid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9wb3NpdGlvbnMuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL3BhbGV0dGUuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL3NoYWRvd3MuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL3NpemluZy5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vdHlwb2dyYXBoeS5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vZ2V0VGhlbWVWYWx1ZS5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vc3R5bGVGdW5jdGlvblN4L3N0eWxlRnVuY3Rpb25TeC5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vY3JlYXRlU3R5bGVkLmpzIiwid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvZXNtL3N0eWxlcy9zdHlsZWQuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQG11aS9zdHlsZWQtZW5naW5lL2luZGV4LmpzIiwid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvZXNtL2dlbmVyYXRlVXRpbGl0eUNsYXNzL2dlbmVyYXRlVXRpbGl0eUNsYXNzLmpzIiwid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvZXNtL1N2Z0ljb24vc3ZnSWNvbkNsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQG11aS91dGlscy9lc20vZ2VuZXJhdGVVdGlsaXR5Q2xhc3Nlcy9nZW5lcmF0ZVV0aWxpdHlDbGFzc2VzLmpzIiwid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvZXNtL1N2Z0ljb24vU3ZnSWNvbi5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9AbXVpL3V0aWxzL2VzbS9jb21wb3NlQ2xhc3Nlcy9jb21wb3NlQ2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL2VzbS91dGlscy9jcmVhdGVTdmdJY29uLmpzIiwid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvZXNtL3V0aWxzL2RlYm91bmNlLmpzIiwid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvZXNtL2RlYm91bmNlLmpzIiwid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvZXNtL3V0aWxzL2RlcHJlY2F0ZWRQcm9wVHlwZS5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9AbXVpL3V0aWxzL2VzbS9kZXByZWNhdGVkUHJvcFR5cGUuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9lc20vdXRpbHMvaXNNdWlFbGVtZW50LmpzIiwid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvZXNtL2lzTXVpRWxlbWVudC5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9AbXVpL3V0aWxzL2VzbS9vd25lckRvY3VtZW50LmpzIiwid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvZXNtL3V0aWxzL293bmVyRG9jdW1lbnQuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9lc20vdXRpbHMvb3duZXJXaW5kb3cuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQG11aS91dGlscy9lc20vb3duZXJXaW5kb3cuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9lc20vdXRpbHMvcmVxdWlyZVByb3BGYWN0b3J5LmpzIiwid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvZXNtL3JlcXVpcmVQcm9wRmFjdG9yeS5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9AbXVpL3V0aWxzL2VzbS9zZXRSZWYuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9lc20vdXRpbHMvc2V0UmVmLmpzIiwid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvZXNtL3VzZUVuaGFuY2VkRWZmZWN0LmpzIiwid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvZXNtL3V0aWxzL3VzZUVuaGFuY2VkRWZmZWN0LmpzIiwid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvZXNtL3VzZUlkLmpzIiwid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvZXNtL3V0aWxzL3VzZUlkLmpzIiwid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvZXNtL3V0aWxzL3Vuc3VwcG9ydGVkUHJvcC5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9AbXVpL3V0aWxzL2VzbS91bnN1cHBvcnRlZFByb3AuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9lc20vdXRpbHMvdXNlQ29udHJvbGxlZC5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9AbXVpL3V0aWxzL2VzbS91c2VDb250cm9sbGVkLmpzIiwid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvZXNtL3V0aWxzL3VzZUV2ZW50Q2FsbGJhY2suanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQG11aS91dGlscy9lc20vdXNlRXZlbnRDYWxsYmFjay5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL2VzbS91dGlscy91c2VGb3JrUmVmLmpzIiwid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvZXNtL3VzZUZvcmtSZWYuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQG11aS91dGlscy9lc20vdXNlSXNGb2N1c1Zpc2libGUuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9lc20vdXRpbHMvdXNlSXNGb2N1c1Zpc2libGUuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9lc20vdXRpbHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9zcmMvaW5kZXguY3NzIiwid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzIiwid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9jbGllbnQuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2luZGV4LmpzIiwid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2Nqcy9yZWFjdC1qc3gtcnVudGltZS5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9yZWFjdC9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvcmVhY3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvcmVhY3QvanN4LXJ1bnRpbWUuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2luZGV4LmpzIiwid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzIiwid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzIiwid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHQuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQvd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL2Zyb250ZW5kL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQvd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly9mcm9udGVuZC93ZWJwYWNrL3J1bnRpbWUvbm9uY2UiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQHJlbWl4LXJ1bi9yb3V0ZXIvZGlzdC9yb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2Rpc3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9kaXN0L2luZGV4LmpzIiwid2VicGFjazovL2Zyb250ZW5kLy4vc3JjL0NvbnRleHQuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9zcmMvaW5kZXguY3NzPzA1MzgiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9zcmMvY29tcG9uZW50cy9IZWFkZXIuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvdHVybnN0b25lL2Rpc3QvdHVybnN0b25lLmVzLmpzIiwid2VicGFjazovL2Zyb250ZW5kLy4vc3JjL2NvbXBvbmVudHMvU2VhcmNoUGF0aWVudC5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC8uL3NyYy9wYWdlcy9Ib21lLmpzIiwid2VicGFjazovL2Zyb250ZW5kLy4vc3JjL2NvbXBvbmVudHMvUGF0aWVudFNpZGViYXIuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9zcmMvY29tcG9uZW50cy9QYXRpZW50SW5mby5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC8uL3NyYy9wYWdlcy9wYXRpZW50cy9QYXRpZW50LmpzIiwid2VicGFjazovL2Zyb250ZW5kLy4vc3JjL3BhZ2VzL3BhdGllbnRzL1RpbWVsaW5lLmpzIiwid2VicGFjazovL2Zyb250ZW5kLy4vc3JjL3BhZ2VzL3BhdGllbnRzL0V2ZW50c0J5Q2F0ZWdvcnkuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9zcmMvcGFnZXMvcGF0aWVudHMvRXZlbnREZXRhaWxzLmpzIiwid2VicGFjazovL2Zyb250ZW5kLy4vc3JjL3BhZ2VzL3BhdGllbnRzL1Byb2ZpbGUuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9zcmMvcGFnZXMvcGF0aWVudHMvQ3VycmVudERpYWdub3Npcy5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC8uL3NyYy9BcHAuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9zcmMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mID8gKG9iaikgPT4gKE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmopKSA6IChvYmopID0+IChvYmouX19wcm90b19fKTtcbnZhciBsZWFmUHJvdG90eXBlcztcbi8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuLy8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4vLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbi8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuLy8gbW9kZSAmIDE2OiByZXR1cm4gdmFsdWUgd2hlbiBpdCdzIFByb21pc2UtbGlrZVxuLy8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuX193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcblx0aWYobW9kZSAmIDEpIHZhbHVlID0gdGhpcyh2YWx1ZSk7XG5cdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG5cdGlmKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUpIHtcblx0XHRpZigobW9kZSAmIDQpICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcblx0XHRpZigobW9kZSAmIDE2KSAmJiB0eXBlb2YgdmFsdWUudGhlbiA9PT0gJ2Z1bmN0aW9uJykgcmV0dXJuIHZhbHVlO1xuXHR9XG5cdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG5cdHZhciBkZWYgPSB7fTtcblx0bGVhZlByb3RvdHlwZXMgPSBsZWFmUHJvdG90eXBlcyB8fCBbbnVsbCwgZ2V0UHJvdG8oe30pLCBnZXRQcm90byhbXSksIGdldFByb3RvKGdldFByb3RvKV07XG5cdGZvcih2YXIgY3VycmVudCA9IG1vZGUgJiAyICYmIHZhbHVlOyB0eXBlb2YgY3VycmVudCA9PSAnb2JqZWN0JyAmJiAhfmxlYWZQcm90b3R5cGVzLmluZGV4T2YoY3VycmVudCk7IGN1cnJlbnQgPSBnZXRQcm90byhjdXJyZW50KSkge1xuXHRcdE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGN1cnJlbnQpLmZvckVhY2goKGtleSkgPT4gKGRlZltrZXldID0gKCkgPT4gKHZhbHVlW2tleV0pKSk7XG5cdH1cblx0ZGVmWydkZWZhdWx0J10gPSAoKSA9PiAodmFsdWUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGRlZik7XG5cdHJldHVybiBucztcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX2NyZWF0ZVN2Z0ljb24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWxzL2NyZWF0ZVN2Z0ljb25cIikpO1xuXG52YXIgX2pzeFJ1bnRpbWUgPSByZXF1aXJlKFwicmVhY3QvanN4LXJ1bnRpbWVcIik7XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfY3JlYXRlU3ZnSWNvbi5kZWZhdWx0KSggLyojX19QVVJFX18qLygwLCBfanN4UnVudGltZS5qc3gpKFwicGF0aFwiLCB7XG4gIGQ6IFwiTTExIDE1aDJ2MmgtMnptMC04aDJ2NmgtMnptOC00aC00LjE4QzE0LjQgMS44NCAxMy4zIDEgMTIgMWMtMS4zIDAtMi40Ljg0LTIuODIgMkg1Yy0uMTQgMC0uMjcuMDEtLjQuMDQtLjM5LjA4LS43NC4yOC0xLjAxLjU1LS4xOC4xOC0uMzMuNC0uNDMuNjQtLjEuMjMtLjE2LjQ5LS4xNi43N3YxNGMwIC4yNy4wNi41NC4xNi43OHMuMjUuNDUuNDMuNjRjLjI3LjI3LjYyLjQ3IDEuMDEuNTUuMTMuMDIuMjYuMDMuNC4wM2gxNGMxLjEgMCAyLS45IDItMlY1YzAtMS4xLS45LTItMi0yem0tNy0uMjVjLjQxIDAgLjc1LjM0Ljc1Ljc1cy0uMzQuNzUtLjc1Ljc1LS43NS0uMzQtLjc1LS43NS4zNC0uNzUuNzUtLjc1ek0xOSAxOUg1VjVoMTR2MTR6XCJcbn0pLCAnQXNzaWdubWVudExhdGVPdXRsaW5lZCcpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfY3JlYXRlU3ZnSWNvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbHMvY3JlYXRlU3ZnSWNvblwiKSk7XG5cbnZhciBfanN4UnVudGltZSA9IHJlcXVpcmUoXCJyZWFjdC9qc3gtcnVudGltZVwiKTtcblxudmFyIF9kZWZhdWx0ID0gKDAsIF9jcmVhdGVTdmdJY29uLmRlZmF1bHQpKCAvKiNfX1BVUkVfXyovKDAsIF9qc3hSdW50aW1lLmpzeCkoXCJwYXRoXCIsIHtcbiAgZDogXCJNMTkgNGgtMVYyaC0ydjJIOFYySDZ2Mkg1Yy0xLjExIDAtMS45OS45LTEuOTkgMkwzIDIwYzAgMS4xLjg5IDIgMiAyaDE0YzEuMSAwIDItLjkgMi0yVjZjMC0xLjEtLjktMi0yLTJ6bTAgMTZINVYxMGgxNHYxMHptMC0xMkg1VjZoMTR2MnpNOSAxNEg3di0yaDJ2MnptNCAwaC0ydi0yaDJ2MnptNCAwaC0ydi0yaDJ2MnptLTggNEg3di0yaDJ2MnptNCAwaC0ydi0yaDJ2MnptNCAwaC0ydi0yaDJ2MnpcIlxufSksICdDYWxlbmRhck1vbnRoT3V0bGluZWQnKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX2NyZWF0ZVN2Z0ljb24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWxzL2NyZWF0ZVN2Z0ljb25cIikpO1xuXG52YXIgX2pzeFJ1bnRpbWUgPSByZXF1aXJlKFwicmVhY3QvanN4LXJ1bnRpbWVcIik7XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfY3JlYXRlU3ZnSWNvbi5kZWZhdWx0KSggLyojX19QVVJFX18qLygwLCBfanN4UnVudGltZS5qc3gpKFwicGF0aFwiLCB7XG4gIGQ6IFwiTTIwIDhWNmMwLTEuNjUtMS4zNS0zLTMtM0g3QzUuMzUgMyA0IDQuMzUgNCA2djJjLTEuNjUgMC0zIDEuMzUtMyAzdjVjMCAxLjY1IDEuMzUgMyAzIDN2MWMwIC41NS40NSAxIDEgMXMxLS40NSAxLTF2LTFoMTJ2MWMwIC41NS40NSAxIDEgMXMxLS40NSAxLTF2LTFjMS42NSAwIDMtMS4zNSAzLTN2LTVjMC0xLjY1LTEuMzUtMy0zLTN6TTYgNmMwLS41NS40NS0xIDEtMWgxMGMuNTUgMCAxIC40NSAxIDF2Mi43OGMtLjYxLjU1LTEgMS4zNC0xIDIuMjJ2Mkg3di0yYzAtLjg4LS4zOS0xLjY3LTEtMi4yMlY2em0xNSAxMGMwIC41NS0uNDUgMS0xIDFINGMtLjU1IDAtMS0uNDUtMS0xdi01YzAtLjU1LjQ1LTEgMS0xczEgLjQ1IDEgMXY0aDE0di00YzAtLjU1LjQ1LTEgMS0xczEgLjQ1IDEgMXY1elwiXG59KSwgJ0NoYWlyT3V0bGluZWQnKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX2NyZWF0ZVN2Z0ljb24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWxzL2NyZWF0ZVN2Z0ljb25cIikpO1xuXG52YXIgX2pzeFJ1bnRpbWUgPSByZXF1aXJlKFwicmVhY3QvanN4LXJ1bnRpbWVcIik7XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfY3JlYXRlU3ZnSWNvbi5kZWZhdWx0KSggLyojX19QVVJFX18qLygwLCBfanN4UnVudGltZS5qc3gpKFwicGF0aFwiLCB7XG4gIGQ6IFwiTTIwIDZoLThsLTItMkg0Yy0xLjExIDAtMS45OS44OS0xLjk5IDJMMiAxOGMwIDEuMTEuODkgMiAyIDJoMTZjMS4xMSAwIDItLjg5IDItMlY4YzAtMS4xMS0uODktMi0yLTJ6bTAgMTJINFY2aDUuMTdsMiAySDIwdjEwem0tOC00aDJ2Mmgydi0yaDJ2LTJoLTJ2LTJoLTJ2MmgtMnpcIlxufSksICdDcmVhdGVOZXdGb2xkZXJPdXRsaW5lZCcpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfY3JlYXRlU3ZnSWNvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbHMvY3JlYXRlU3ZnSWNvblwiKSk7XG5cbnZhciBfanN4UnVudGltZSA9IHJlcXVpcmUoXCJyZWFjdC9qc3gtcnVudGltZVwiKTtcblxudmFyIF9kZWZhdWx0ID0gKDAsIF9jcmVhdGVTdmdJY29uLmRlZmF1bHQpKCAvKiNfX1BVUkVfXyovKDAsIF9qc3hSdW50aW1lLmpzeCkoXCJwYXRoXCIsIHtcbiAgZDogXCJNMjAgNmgtOGwtMi0ySDRjLTEuMSAwLTEuOTkuOS0xLjk5IDJMMiAxOGMwIDEuMS45IDIgMiAyaDE2YzEuMSAwIDItLjkgMi0yVjhjMC0xLjEtLjktMi0yLTJ6bTAgMTJINFY2aDUuMTdsMiAySDIwdjEwem0tNS01YzEuMSAwIDItLjkgMi0ycy0uOS0yLTItMi0yIC45LTIgMiAuOSAyIDIgMnptLTQgNGg4di0xYzAtMS4zMy0yLjY3LTItNC0ycy00IC42Ny00IDJ2MXpcIlxufSksICdGb2xkZXJTaGFyZWRPdXRsaW5lZCcpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfY3JlYXRlU3ZnSWNvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbHMvY3JlYXRlU3ZnSWNvblwiKSk7XG5cbnZhciBfanN4UnVudGltZSA9IHJlcXVpcmUoXCJyZWFjdC9qc3gtcnVudGltZVwiKTtcblxudmFyIF9kZWZhdWx0ID0gKDAsIF9jcmVhdGVTdmdJY29uLmRlZmF1bHQpKCAvKiNfX1BVUkVfXyovKDAsIF9qc3hSdW50aW1lLmpzeCkoXCJwYXRoXCIsIHtcbiAgZDogXCJNNCAxMC41Yy0uODMgMC0xLjUuNjctMS41IDEuNXMuNjcgMS41IDEuNSAxLjUgMS41LS42NyAxLjUtMS41LS42Ny0xLjUtMS41LTEuNXptMC02Yy0uODMgMC0xLjUuNjctMS41IDEuNVMzLjE3IDcuNSA0IDcuNSA1LjUgNi44MyA1LjUgNiA0LjgzIDQuNSA0IDQuNXptMCAxMmMtLjgzIDAtMS41LjY4LTEuNSAxLjVzLjY4IDEuNSAxLjUgMS41IDEuNS0uNjggMS41LTEuNS0uNjctMS41LTEuNS0xLjV6TTcgMTloMTR2LTJIN3Yyem0wLTZoMTR2LTJIN3Yyem0wLTh2MmgxNFY1SDd6XCJcbn0pLCAnRm9ybWF0TGlzdEJ1bGxldGVkT3V0bGluZWQnKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX2NyZWF0ZVN2Z0ljb24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWxzL2NyZWF0ZVN2Z0ljb25cIikpO1xuXG52YXIgX2pzeFJ1bnRpbWUgPSByZXF1aXJlKFwicmVhY3QvanN4LXJ1bnRpbWVcIik7XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfY3JlYXRlU3ZnSWNvbi5kZWZhdWx0KSggLyojX19QVVJFX18qLygwLCBfanN4UnVudGltZS5qc3gpKFwicGF0aFwiLCB7XG4gIGQ6IFwiTTMgMThoMTh2LTJIM3Yyem0wLTVoMTh2LTJIM3Yyem0wLTd2MmgxOFY2SDN6XCJcbn0pLCAnTWVudU91dGxpbmVkJyk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9jcmVhdGVTdmdJY29uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlscy9jcmVhdGVTdmdJY29uXCIpKTtcblxudmFyIF9qc3hSdW50aW1lID0gcmVxdWlyZShcInJlYWN0L2pzeC1ydW50aW1lXCIpO1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX2NyZWF0ZVN2Z0ljb24uZGVmYXVsdCkoIC8qI19fUFVSRV9fKi8oMCwgX2pzeFJ1bnRpbWUuanN4KShcInBhdGhcIiwge1xuICBkOiBcIk0xMiA1LjljMS4xNiAwIDIuMS45NCAyLjEgMi4xcy0uOTQgMi4xLTIuMSAyLjFTOS45IDkuMTYgOS45IDhzLjk0LTIuMSAyLjEtMi4xbTAgOWMyLjk3IDAgNi4xIDEuNDYgNi4xIDIuMXYxLjFINS45VjE3YzAtLjY0IDMuMTMtMi4xIDYuMS0yLjFNMTIgNEM5Ljc5IDQgOCA1Ljc5IDggOHMxLjc5IDQgNCA0IDQtMS43OSA0LTQtMS43OS00LTQtNHptMCA5Yy0yLjY3IDAtOCAxLjM0LTggNHYzaDE2di0zYzAtMi42Ni01LjMzLTQtOC00elwiXG59KSwgJ1BlcnNvbk91dGxpbmVPdXRsaW5lZCcpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfY3JlYXRlU3ZnSWNvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbHMvY3JlYXRlU3ZnSWNvblwiKSk7XG5cbnZhciBfanN4UnVudGltZSA9IHJlcXVpcmUoXCJyZWFjdC9qc3gtcnVudGltZVwiKTtcblxudmFyIF9kZWZhdWx0ID0gKDAsIF9jcmVhdGVTdmdJY29uLmRlZmF1bHQpKFsvKiNfX1BVUkVfXyovKDAsIF9qc3hSdW50aW1lLmpzeCkoXCJwYXRoXCIsIHtcbiAgZDogXCJNOC41NSAxMmMtMS4wNy0uNzEtMi4yNS0xLjI3LTMuNTMtMS42MSAxLjI4LjM0IDIuNDYuOSAzLjUzIDEuNjF6bTEwLjQzLTEuNjFjLTEuMjkuMzQtMi40OS45MS0zLjU3IDEuNjQgMS4wOC0uNzMgMi4yOC0xLjMgMy41Ny0xLjY0elwiXG59LCBcIjBcIiksIC8qI19fUFVSRV9fKi8oMCwgX2pzeFJ1bnRpbWUuanN4KShcInBhdGhcIiwge1xuICBkOiBcIk0xNS40OSA5LjYzYy0uMTgtMi43OS0xLjMxLTUuNTEtMy40My03LjYzLTIuMTQgMi4xNC0zLjMyIDQuODYtMy41NSA3LjYzIDEuMjguNjggMi40NiAxLjU2IDMuNDkgMi42MyAxLjAzLTEuMDYgMi4yMS0xLjk0IDMuNDktMi42M3ptLTYuNSAyLjY1Yy0uMTQtLjEtLjMtLjE5LS40NS0uMjkuMTUuMTEuMzEuMTkuNDUuMjl6bTYuNDItLjI1Yy0uMTMuMDktLjI3LjE2LS40LjI2LjEzLS4xLjI3LS4xNy40LS4yNnpNMTIgMTUuNDVDOS44NSAxMi4xNyA2LjE4IDEwIDIgMTBjMCA1LjMyIDMuMzYgOS44MiA4LjAzIDExLjQ5LjYzLjIzIDEuMjkuNCAxLjk3LjUxLjY4LS4xMiAxLjMzLS4yOSAxLjk3LS41MUMxOC42NCAxOS44MiAyMiAxNS4zMiAyMiAxMGMtNC4xOCAwLTcuODUgMi4xNy0xMCA1LjQ1elwiXG59LCBcIjFcIildLCAnU3BhJyk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVmYXVsdFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfdXRpbHMuY3JlYXRlU3ZnSWNvbjtcbiAgfVxufSk7XG5cbnZhciBfdXRpbHMgPSByZXF1aXJlKFwiQG11aS9tYXRlcmlhbC91dGlsc1wiKTsiLCJjb25zdCBkZWZhdWx0R2VuZXJhdG9yID0gY29tcG9uZW50TmFtZSA9PiBjb21wb25lbnROYW1lO1xuXG5jb25zdCBjcmVhdGVDbGFzc05hbWVHZW5lcmF0b3IgPSAoKSA9PiB7XG4gIGxldCBnZW5lcmF0ZSA9IGRlZmF1bHRHZW5lcmF0b3I7XG4gIHJldHVybiB7XG4gICAgY29uZmlndXJlKGdlbmVyYXRvcikge1xuICAgICAgZ2VuZXJhdGUgPSBnZW5lcmF0b3I7XG4gICAgfSxcblxuICAgIGdlbmVyYXRlKGNvbXBvbmVudE5hbWUpIHtcbiAgICAgIHJldHVybiBnZW5lcmF0ZShjb21wb25lbnROYW1lKTtcbiAgICB9LFxuXG4gICAgcmVzZXQoKSB7XG4gICAgICBnZW5lcmF0ZSA9IGRlZmF1bHRHZW5lcmF0b3I7XG4gICAgfVxuXG4gIH07XG59O1xuXG5jb25zdCBDbGFzc05hbWVHZW5lcmF0b3IgPSBjcmVhdGVDbGFzc05hbWVHZW5lcmF0b3IoKTtcbmV4cG9ydCBkZWZhdWx0IENsYXNzTmFtZUdlbmVyYXRvcjsiLCIvKipcbiAqIFdBUk5JTkc6IERvbid0IGltcG9ydCB0aGlzIGRpcmVjdGx5LlxuICogVXNlIGBNdWlFcnJvcmAgZnJvbSBgQG11aS91dGlscy9tYWNyb3MvTXVpRXJyb3IubWFjcm9gIGluc3RlYWQuXG4gKiBAcGFyYW0ge251bWJlcn0gY29kZVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmb3JtYXRNdWlFcnJvck1lc3NhZ2UoY29kZSkge1xuICAvLyBBcHBseSBiYWJlbC1wbHVnaW4tdHJhbnNmb3JtLXRlbXBsYXRlLWxpdGVyYWxzIGluIGxvb3NlIG1vZGVcbiAgLy8gbG9vc2UgbW9kZSBpcyBzYWZlIGlmZiB3ZSdyZSBjb25jYXRlbmF0aW5nIHByaW1pdGl2ZXNcbiAgLy8gc2VlIGh0dHBzOi8vYmFiZWxqcy5pby9kb2NzL2VuL2JhYmVsLXBsdWdpbi10cmFuc2Zvcm0tdGVtcGxhdGUtbGl0ZXJhbHMjbG9vc2VcblxuICAvKiBlc2xpbnQtZGlzYWJsZSBwcmVmZXItdGVtcGxhdGUgKi9cbiAgbGV0IHVybCA9ICdodHRwczovL211aS5jb20vcHJvZHVjdGlvbi1lcnJvci8/Y29kZT0nICsgY29kZTtcblxuICBmb3IgKGxldCBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIC8vIHJlc3QgcGFyYW1zIG92ZXItdHJhbnNwaWxlIGZvciB0aGlzIGNhc2VcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLXJlc3QtcGFyYW1zXG4gICAgdXJsICs9ICcmYXJnc1tdPScgKyBlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2ldKTtcbiAgfVxuXG4gIHJldHVybiAnTWluaWZpZWQgTVVJIGVycm9yICMnICsgY29kZSArICc7IHZpc2l0ICcgKyB1cmwgKyAnIGZvciB0aGUgZnVsbCBtZXNzYWdlLic7XG4gIC8qIGVzbGludC1lbmFibGUgcHJlZmVyLXRlbXBsYXRlICovXG59IiwiaW1wb3J0IF9mb3JtYXRNdWlFcnJvck1lc3NhZ2UgZnJvbSBcIi4vZm9ybWF0TXVpRXJyb3JNZXNzYWdlXCI7XG4vLyBJdCBzaG91bGQgdG8gYmUgbm90ZWQgdGhhdCB0aGlzIGZ1bmN0aW9uIGlzbid0IGVxdWl2YWxlbnQgdG8gYHRleHQtdHJhbnNmb3JtOiBjYXBpdGFsaXplYC5cbi8vXG4vLyBBIHN0cmljdCBjYXBpdGFsaXphdGlvbiBzaG91bGQgdXBwZXJjYXNlIHRoZSBmaXJzdCBsZXR0ZXIgb2YgZWFjaCB3b3JkIGluIHRoZSBzZW50ZW5jZS5cbi8vIFdlIG9ubHkgaGFuZGxlIHRoZSBmaXJzdCB3b3JkLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY2FwaXRhbGl6ZShzdHJpbmcpIHtcbiAgaWYgKHR5cGVvZiBzdHJpbmcgIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGBNVUk6IFxcYGNhcGl0YWxpemUoc3RyaW5nKVxcYCBleHBlY3RzIGEgc3RyaW5nIGFyZ3VtZW50LmAgOiBfZm9ybWF0TXVpRXJyb3JNZXNzYWdlKDcpKTtcbiAgfVxuXG4gIHJldHVybiBzdHJpbmcuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzdHJpbmcuc2xpY2UoMSk7XG59IiwiaW1wb3J0IHsgdW5zdGFibGVfY2FwaXRhbGl6ZSBhcyBjYXBpdGFsaXplIH0gZnJvbSAnQG11aS91dGlscyc7XG5leHBvcnQgZGVmYXVsdCBjYXBpdGFsaXplOyIsImltcG9ydCB7IHVuc3RhYmxlX2NyZWF0ZUNoYWluZWRGdW5jdGlvbiBhcyBjcmVhdGVDaGFpbmVkRnVuY3Rpb24gfSBmcm9tICdAbXVpL3V0aWxzJztcbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUNoYWluZWRGdW5jdGlvbjsiLCIvKipcbiAqIFNhZmUgY2hhaW5lZCBmdW5jdGlvbi5cbiAqXG4gKiBXaWxsIG9ubHkgY3JlYXRlIGEgbmV3IGZ1bmN0aW9uIGlmIG5lZWRlZCxcbiAqIG90aGVyd2lzZSB3aWxsIHBhc3MgYmFjayBleGlzdGluZyBmdW5jdGlvbnMgb3IgbnVsbC5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uKC4uLmZ1bmNzKSB7XG4gIHJldHVybiBmdW5jcy5yZWR1Y2UoKGFjYywgZnVuYykgPT4ge1xuICAgIGlmIChmdW5jID09IG51bGwpIHtcbiAgICAgIHJldHVybiBhY2M7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGNoYWluZWRGdW5jdGlvbiguLi5hcmdzKSB7XG4gICAgICBhY2MuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICBmdW5jLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIH07XG4gIH0sICgpID0+IHt9KTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduID8gT2JqZWN0LmFzc2lnbi5iaW5kKCkgOiBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKSB7XG4gIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9O1xuICB2YXIgdGFyZ2V0ID0ge307XG4gIHZhciBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcbiAgdmFyIGtleSwgaTtcbiAgZm9yIChpID0gMDsgaSA8IHNvdXJjZUtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBrZXkgPSBzb3VyY2VLZXlzW2ldO1xuICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgfVxuICByZXR1cm4gdGFyZ2V0O1xufSIsImZ1bmN0aW9uIHIoZSl7dmFyIHQsZixuPVwiXCI7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGV8fFwibnVtYmVyXCI9PXR5cGVvZiBlKW4rPWU7ZWxzZSBpZihcIm9iamVjdFwiPT10eXBlb2YgZSlpZihBcnJheS5pc0FycmF5KGUpKWZvcih0PTA7dDxlLmxlbmd0aDt0KyspZVt0XSYmKGY9cihlW3RdKSkmJihuJiYobis9XCIgXCIpLG4rPWYpO2Vsc2UgZm9yKHQgaW4gZSllW3RdJiYobiYmKG4rPVwiIFwiKSxuKz10KTtyZXR1cm4gbn1leHBvcnQgZnVuY3Rpb24gY2xzeCgpe2Zvcih2YXIgZSx0LGY9MCxuPVwiXCI7Zjxhcmd1bWVudHMubGVuZ3RoOykoZT1hcmd1bWVudHNbZisrXSkmJih0PXIoZSkpJiYobiYmKG4rPVwiIFwiKSxuKz10KTtyZXR1cm4gbn1leHBvcnQgZGVmYXVsdCBjbHN4OyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIGlzUGxhaW5PYmplY3QoaXRlbSkge1xuICByZXR1cm4gaXRlbSAhPT0gbnVsbCAmJiB0eXBlb2YgaXRlbSA9PT0gJ29iamVjdCcgJiYgaXRlbS5jb25zdHJ1Y3RvciA9PT0gT2JqZWN0O1xufVxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGVlcG1lcmdlKHRhcmdldCwgc291cmNlLCBvcHRpb25zID0ge1xuICBjbG9uZTogdHJ1ZVxufSkge1xuICBjb25zdCBvdXRwdXQgPSBvcHRpb25zLmNsb25lID8gX2V4dGVuZHMoe30sIHRhcmdldCkgOiB0YXJnZXQ7XG5cbiAgaWYgKGlzUGxhaW5PYmplY3QodGFyZ2V0KSAmJiBpc1BsYWluT2JqZWN0KHNvdXJjZSkpIHtcbiAgICBPYmplY3Qua2V5cyhzb3VyY2UpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgIC8vIEF2b2lkIHByb3RvdHlwZSBwb2xsdXRpb25cbiAgICAgIGlmIChrZXkgPT09ICdfX3Byb3RvX18nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzUGxhaW5PYmplY3Qoc291cmNlW2tleV0pICYmIGtleSBpbiB0YXJnZXQgJiYgaXNQbGFpbk9iamVjdCh0YXJnZXRba2V5XSkpIHtcbiAgICAgICAgLy8gU2luY2UgYG91dHB1dGAgaXMgYSBjbG9uZSBvZiBgdGFyZ2V0YCBhbmQgd2UgaGF2ZSBuYXJyb3dlZCBgdGFyZ2V0YCBpbiB0aGlzIGJsb2NrIHdlIGNhbiBjYXN0IHRvIHRoZSBzYW1lIHR5cGUuXG4gICAgICAgIG91dHB1dFtrZXldID0gZGVlcG1lcmdlKHRhcmdldFtrZXldLCBzb3VyY2Vba2V5XSwgb3B0aW9ucyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvdXRwdXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIG91dHB1dDtcbn0iLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1widmFsdWVzXCIsIFwidW5pdFwiLCBcInN0ZXBcIl07XG4vLyBTb3J0ZWQgQVNDIGJ5IHNpemUuIFRoYXQncyBpbXBvcnRhbnQuXG4vLyBJdCBjYW4ndCBiZSBjb25maWd1cmVkIGFzIGl0J3MgdXNlZCBzdGF0aWNhbGx5IGZvciBwcm9wVHlwZXMuXG5leHBvcnQgY29uc3QgYnJlYWtwb2ludEtleXMgPSBbJ3hzJywgJ3NtJywgJ21kJywgJ2xnJywgJ3hsJ107XG5cbmNvbnN0IHNvcnRCcmVha3BvaW50c1ZhbHVlcyA9IHZhbHVlcyA9PiB7XG4gIGNvbnN0IGJyZWFrcG9pbnRzQXNBcnJheSA9IE9iamVjdC5rZXlzKHZhbHVlcykubWFwKGtleSA9PiAoe1xuICAgIGtleSxcbiAgICB2YWw6IHZhbHVlc1trZXldXG4gIH0pKSB8fCBbXTsgLy8gU29ydCBpbiBhc2NlbmRpbmcgb3JkZXJcblxuICBicmVha3BvaW50c0FzQXJyYXkuc29ydCgoYnJlYWtwb2ludDEsIGJyZWFrcG9pbnQyKSA9PiBicmVha3BvaW50MS52YWwgLSBicmVha3BvaW50Mi52YWwpO1xuICByZXR1cm4gYnJlYWtwb2ludHNBc0FycmF5LnJlZHVjZSgoYWNjLCBvYmopID0+IHtcbiAgICByZXR1cm4gX2V4dGVuZHMoe30sIGFjYywge1xuICAgICAgW29iai5rZXldOiBvYmoudmFsXG4gICAgfSk7XG4gIH0sIHt9KTtcbn07IC8vIEtlZXAgaW4gbWluZCB0aGF0IEBtZWRpYSBpcyBpbmNsdXNpdmUgYnkgdGhlIENTUyBzcGVjaWZpY2F0aW9uLlxuXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZUJyZWFrcG9pbnRzKGJyZWFrcG9pbnRzKSB7XG4gIGNvbnN0IHtcbiAgICAvLyBUaGUgYnJlYWtwb2ludCAqKnN0YXJ0KiogYXQgdGhpcyB2YWx1ZS5cbiAgICAvLyBGb3IgaW5zdGFuY2Ugd2l0aCB0aGUgZmlyc3QgYnJlYWtwb2ludCB4czogW3hzLCBzbSkuXG4gICAgdmFsdWVzID0ge1xuICAgICAgeHM6IDAsXG4gICAgICAvLyBwaG9uZVxuICAgICAgc206IDYwMCxcbiAgICAgIC8vIHRhYmxldFxuICAgICAgbWQ6IDkwMCxcbiAgICAgIC8vIHNtYWxsIGxhcHRvcFxuICAgICAgbGc6IDEyMDAsXG4gICAgICAvLyBkZXNrdG9wXG4gICAgICB4bDogMTUzNiAvLyBsYXJnZSBzY3JlZW5cblxuICAgIH0sXG4gICAgdW5pdCA9ICdweCcsXG4gICAgc3RlcCA9IDVcbiAgfSA9IGJyZWFrcG9pbnRzLFxuICAgICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKGJyZWFrcG9pbnRzLCBfZXhjbHVkZWQpO1xuXG4gIGNvbnN0IHNvcnRlZFZhbHVlcyA9IHNvcnRCcmVha3BvaW50c1ZhbHVlcyh2YWx1ZXMpO1xuICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoc29ydGVkVmFsdWVzKTtcblxuICBmdW5jdGlvbiB1cChrZXkpIHtcbiAgICBjb25zdCB2YWx1ZSA9IHR5cGVvZiB2YWx1ZXNba2V5XSA9PT0gJ251bWJlcicgPyB2YWx1ZXNba2V5XSA6IGtleTtcbiAgICByZXR1cm4gYEBtZWRpYSAobWluLXdpZHRoOiR7dmFsdWV9JHt1bml0fSlgO1xuICB9XG5cbiAgZnVuY3Rpb24gZG93bihrZXkpIHtcbiAgICBjb25zdCB2YWx1ZSA9IHR5cGVvZiB2YWx1ZXNba2V5XSA9PT0gJ251bWJlcicgPyB2YWx1ZXNba2V5XSA6IGtleTtcbiAgICByZXR1cm4gYEBtZWRpYSAobWF4LXdpZHRoOiR7dmFsdWUgLSBzdGVwIC8gMTAwfSR7dW5pdH0pYDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGJldHdlZW4oc3RhcnQsIGVuZCkge1xuICAgIGNvbnN0IGVuZEluZGV4ID0ga2V5cy5pbmRleE9mKGVuZCk7XG4gICAgcmV0dXJuIGBAbWVkaWEgKG1pbi13aWR0aDoke3R5cGVvZiB2YWx1ZXNbc3RhcnRdID09PSAnbnVtYmVyJyA/IHZhbHVlc1tzdGFydF0gOiBzdGFydH0ke3VuaXR9KSBhbmQgYCArIGAobWF4LXdpZHRoOiR7KGVuZEluZGV4ICE9PSAtMSAmJiB0eXBlb2YgdmFsdWVzW2tleXNbZW5kSW5kZXhdXSA9PT0gJ251bWJlcicgPyB2YWx1ZXNba2V5c1tlbmRJbmRleF1dIDogZW5kKSAtIHN0ZXAgLyAxMDB9JHt1bml0fSlgO1xuICB9XG5cbiAgZnVuY3Rpb24gb25seShrZXkpIHtcbiAgICBpZiAoa2V5cy5pbmRleE9mKGtleSkgKyAxIDwga2V5cy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBiZXR3ZWVuKGtleSwga2V5c1trZXlzLmluZGV4T2Yoa2V5KSArIDFdKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdXAoa2V5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG5vdChrZXkpIHtcbiAgICAvLyBoYW5kbGUgZmlyc3QgYW5kIGxhc3Qga2V5IHNlcGFyYXRlbHksIGZvciBiZXR0ZXIgcmVhZGFiaWxpdHlcbiAgICBjb25zdCBrZXlJbmRleCA9IGtleXMuaW5kZXhPZihrZXkpO1xuXG4gICAgaWYgKGtleUluZGV4ID09PSAwKSB7XG4gICAgICByZXR1cm4gdXAoa2V5c1sxXSk7XG4gICAgfVxuXG4gICAgaWYgKGtleUluZGV4ID09PSBrZXlzLmxlbmd0aCAtIDEpIHtcbiAgICAgIHJldHVybiBkb3duKGtleXNba2V5SW5kZXhdKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYmV0d2VlbihrZXksIGtleXNba2V5cy5pbmRleE9mKGtleSkgKyAxXSkucmVwbGFjZSgnQG1lZGlhJywgJ0BtZWRpYSBub3QgYWxsIGFuZCcpO1xuICB9XG5cbiAgcmV0dXJuIF9leHRlbmRzKHtcbiAgICBrZXlzLFxuICAgIHZhbHVlczogc29ydGVkVmFsdWVzLFxuICAgIHVwLFxuICAgIGRvd24sXG4gICAgYmV0d2VlbixcbiAgICBvbmx5LFxuICAgIG5vdCxcbiAgICB1bml0XG4gIH0sIG90aGVyKTtcbn0iLCJjb25zdCBzaGFwZSA9IHtcbiAgYm9yZGVyUmFkaXVzOiA0XG59O1xuZXhwb3J0IGRlZmF1bHQgc2hhcGU7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgZGVlcG1lcmdlIH0gZnJvbSAnQG11aS91dGlscyc7XG5pbXBvcnQgbWVyZ2UgZnJvbSAnLi9tZXJnZSc7IC8vIFRoZSBicmVha3BvaW50ICoqc3RhcnQqKiBhdCB0aGlzIHZhbHVlLlxuLy8gRm9yIGluc3RhbmNlIHdpdGggdGhlIGZpcnN0IGJyZWFrcG9pbnQgeHM6IFt4cywgc21bLlxuXG5leHBvcnQgY29uc3QgdmFsdWVzID0ge1xuICB4czogMCxcbiAgLy8gcGhvbmVcbiAgc206IDYwMCxcbiAgLy8gdGFibGV0XG4gIG1kOiA5MDAsXG4gIC8vIHNtYWxsIGxhcHRvcFxuICBsZzogMTIwMCxcbiAgLy8gZGVza3RvcFxuICB4bDogMTUzNiAvLyBsYXJnZSBzY3JlZW5cblxufTtcbmNvbnN0IGRlZmF1bHRCcmVha3BvaW50cyA9IHtcbiAgLy8gU29ydGVkIEFTQyBieSBzaXplLiBUaGF0J3MgaW1wb3J0YW50LlxuICAvLyBJdCBjYW4ndCBiZSBjb25maWd1cmVkIGFzIGl0J3MgdXNlZCBzdGF0aWNhbGx5IGZvciBwcm9wVHlwZXMuXG4gIGtleXM6IFsneHMnLCAnc20nLCAnbWQnLCAnbGcnLCAneGwnXSxcbiAgdXA6IGtleSA9PiBgQG1lZGlhIChtaW4td2lkdGg6JHt2YWx1ZXNba2V5XX1weClgXG59O1xuZXhwb3J0IGZ1bmN0aW9uIGhhbmRsZUJyZWFrcG9pbnRzKHByb3BzLCBwcm9wVmFsdWUsIHN0eWxlRnJvbVByb3BWYWx1ZSkge1xuICBjb25zdCB0aGVtZSA9IHByb3BzLnRoZW1lIHx8IHt9O1xuXG4gIGlmIChBcnJheS5pc0FycmF5KHByb3BWYWx1ZSkpIHtcbiAgICBjb25zdCB0aGVtZUJyZWFrcG9pbnRzID0gdGhlbWUuYnJlYWtwb2ludHMgfHwgZGVmYXVsdEJyZWFrcG9pbnRzO1xuICAgIHJldHVybiBwcm9wVmFsdWUucmVkdWNlKChhY2MsIGl0ZW0sIGluZGV4KSA9PiB7XG4gICAgICBhY2NbdGhlbWVCcmVha3BvaW50cy51cCh0aGVtZUJyZWFrcG9pbnRzLmtleXNbaW5kZXhdKV0gPSBzdHlsZUZyb21Qcm9wVmFsdWUocHJvcFZhbHVlW2luZGV4XSk7XG4gICAgICByZXR1cm4gYWNjO1xuICAgIH0sIHt9KTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgcHJvcFZhbHVlID09PSAnb2JqZWN0Jykge1xuICAgIGNvbnN0IHRoZW1lQnJlYWtwb2ludHMgPSB0aGVtZS5icmVha3BvaW50cyB8fCBkZWZhdWx0QnJlYWtwb2ludHM7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKHByb3BWYWx1ZSkucmVkdWNlKChhY2MsIGJyZWFrcG9pbnQpID0+IHtcbiAgICAgIC8vIGtleSBpcyBicmVha3BvaW50XG4gICAgICBpZiAoT2JqZWN0LmtleXModGhlbWVCcmVha3BvaW50cy52YWx1ZXMgfHwgdmFsdWVzKS5pbmRleE9mKGJyZWFrcG9pbnQpICE9PSAtMSkge1xuICAgICAgICBjb25zdCBtZWRpYUtleSA9IHRoZW1lQnJlYWtwb2ludHMudXAoYnJlYWtwb2ludCk7XG4gICAgICAgIGFjY1ttZWRpYUtleV0gPSBzdHlsZUZyb21Qcm9wVmFsdWUocHJvcFZhbHVlW2JyZWFrcG9pbnRdLCBicmVha3BvaW50KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IGNzc0tleSA9IGJyZWFrcG9pbnQ7XG4gICAgICAgIGFjY1tjc3NLZXldID0gcHJvcFZhbHVlW2Nzc0tleV07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBhY2M7XG4gICAgfSwge30pO1xuICB9XG5cbiAgY29uc3Qgb3V0cHV0ID0gc3R5bGVGcm9tUHJvcFZhbHVlKHByb3BWYWx1ZSk7XG4gIHJldHVybiBvdXRwdXQ7XG59XG5cbmZ1bmN0aW9uIGJyZWFrcG9pbnRzKHN0eWxlRnVuY3Rpb24pIHtcbiAgY29uc3QgbmV3U3R5bGVGdW5jdGlvbiA9IHByb3BzID0+IHtcbiAgICBjb25zdCB0aGVtZSA9IHByb3BzLnRoZW1lIHx8IHt9O1xuICAgIGNvbnN0IGJhc2UgPSBzdHlsZUZ1bmN0aW9uKHByb3BzKTtcbiAgICBjb25zdCB0aGVtZUJyZWFrcG9pbnRzID0gdGhlbWUuYnJlYWtwb2ludHMgfHwgZGVmYXVsdEJyZWFrcG9pbnRzO1xuICAgIGNvbnN0IGV4dGVuZGVkID0gdGhlbWVCcmVha3BvaW50cy5rZXlzLnJlZHVjZSgoYWNjLCBrZXkpID0+IHtcbiAgICAgIGlmIChwcm9wc1trZXldKSB7XG4gICAgICAgIGFjYyA9IGFjYyB8fCB7fTtcbiAgICAgICAgYWNjW3RoZW1lQnJlYWtwb2ludHMudXAoa2V5KV0gPSBzdHlsZUZ1bmN0aW9uKF9leHRlbmRzKHtcbiAgICAgICAgICB0aGVtZVxuICAgICAgICB9LCBwcm9wc1trZXldKSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBhY2M7XG4gICAgfSwgbnVsbCk7XG4gICAgcmV0dXJuIG1lcmdlKGJhc2UsIGV4dGVuZGVkKTtcbiAgfTtcblxuICBuZXdTdHlsZUZ1bmN0aW9uLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBfZXh0ZW5kcyh7fSwgc3R5bGVGdW5jdGlvbi5wcm9wVHlwZXMsIHtcbiAgICB4czogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBzbTogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBtZDogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBsZzogUHJvcFR5cGVzLm9iamVjdCxcbiAgICB4bDogUHJvcFR5cGVzLm9iamVjdFxuICB9KSA6IHt9O1xuICBuZXdTdHlsZUZ1bmN0aW9uLmZpbHRlclByb3BzID0gWyd4cycsICdzbScsICdtZCcsICdsZycsICd4bCcsIC4uLnN0eWxlRnVuY3Rpb24uZmlsdGVyUHJvcHNdO1xuICByZXR1cm4gbmV3U3R5bGVGdW5jdGlvbjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUVtcHR5QnJlYWtwb2ludE9iamVjdChicmVha3BvaW50c0lucHV0ID0ge30pIHtcbiAgdmFyIF9icmVha3BvaW50c0lucHV0JGtleTtcblxuICBjb25zdCBicmVha3BvaW50c0luT3JkZXIgPSAoX2JyZWFrcG9pbnRzSW5wdXQka2V5ID0gYnJlYWtwb2ludHNJbnB1dC5rZXlzKSA9PSBudWxsID8gdm9pZCAwIDogX2JyZWFrcG9pbnRzSW5wdXQka2V5LnJlZHVjZSgoYWNjLCBrZXkpID0+IHtcbiAgICBjb25zdCBicmVha3BvaW50U3R5bGVLZXkgPSBicmVha3BvaW50c0lucHV0LnVwKGtleSk7XG4gICAgYWNjW2JyZWFrcG9pbnRTdHlsZUtleV0gPSB7fTtcbiAgICByZXR1cm4gYWNjO1xuICB9LCB7fSk7XG4gIHJldHVybiBicmVha3BvaW50c0luT3JkZXIgfHwge307XG59XG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlVW51c2VkQnJlYWtwb2ludHMoYnJlYWtwb2ludEtleXMsIHN0eWxlKSB7XG4gIHJldHVybiBicmVha3BvaW50S2V5cy5yZWR1Y2UoKGFjYywga2V5KSA9PiB7XG4gICAgY29uc3QgYnJlYWtwb2ludE91dHB1dCA9IGFjY1trZXldO1xuICAgIGNvbnN0IGlzQnJlYWtwb2ludFVudXNlZCA9ICFicmVha3BvaW50T3V0cHV0IHx8IE9iamVjdC5rZXlzKGJyZWFrcG9pbnRPdXRwdXQpLmxlbmd0aCA9PT0gMDtcblxuICAgIGlmIChpc0JyZWFrcG9pbnRVbnVzZWQpIHtcbiAgICAgIGRlbGV0ZSBhY2Nba2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWNjO1xuICB9LCBzdHlsZSk7XG59XG5leHBvcnQgZnVuY3Rpb24gbWVyZ2VCcmVha3BvaW50c0luT3JkZXIoYnJlYWtwb2ludHNJbnB1dCwgLi4uc3R5bGVzKSB7XG4gIGNvbnN0IGVtcHR5QnJlYWtwb2ludHMgPSBjcmVhdGVFbXB0eUJyZWFrcG9pbnRPYmplY3QoYnJlYWtwb2ludHNJbnB1dCk7XG4gIGNvbnN0IG1lcmdlZE91dHB1dCA9IFtlbXB0eUJyZWFrcG9pbnRzLCAuLi5zdHlsZXNdLnJlZHVjZSgocHJldiwgbmV4dCkgPT4gZGVlcG1lcmdlKHByZXYsIG5leHQpLCB7fSk7XG4gIHJldHVybiByZW1vdmVVbnVzZWRCcmVha3BvaW50cyhPYmplY3Qua2V5cyhlbXB0eUJyZWFrcG9pbnRzKSwgbWVyZ2VkT3V0cHV0KTtcbn0gLy8gY29tcHV0ZSBiYXNlIGZvciByZXNwb25zaXZlIHZhbHVlczsgZS5nLixcbi8vIFsxLDIsM10gPT4ge3hzOiB0cnVlLCBzbTogdHJ1ZSwgbWQ6IHRydWV9XG4vLyB7eHM6IDEsIHNtOiAyLCBtZDogM30gPT4ge3hzOiB0cnVlLCBzbTogdHJ1ZSwgbWQ6IHRydWV9XG5cbmV4cG9ydCBmdW5jdGlvbiBjb21wdXRlQnJlYWtwb2ludHNCYXNlKGJyZWFrcG9pbnRWYWx1ZXMsIHRoZW1lQnJlYWtwb2ludHMpIHtcbiAgLy8gZml4ZWQgdmFsdWVcbiAgaWYgKHR5cGVvZiBicmVha3BvaW50VmFsdWVzICE9PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiB7fTtcbiAgfVxuXG4gIGNvbnN0IGJhc2UgPSB7fTtcbiAgY29uc3QgYnJlYWtwb2ludHNLZXlzID0gT2JqZWN0LmtleXModGhlbWVCcmVha3BvaW50cyk7XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkoYnJlYWtwb2ludFZhbHVlcykpIHtcbiAgICBicmVha3BvaW50c0tleXMuZm9yRWFjaCgoYnJlYWtwb2ludCwgaSkgPT4ge1xuICAgICAgaWYgKGkgPCBicmVha3BvaW50VmFsdWVzLmxlbmd0aCkge1xuICAgICAgICBiYXNlW2JyZWFrcG9pbnRdID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBicmVha3BvaW50c0tleXMuZm9yRWFjaChicmVha3BvaW50ID0+IHtcbiAgICAgIGlmIChicmVha3BvaW50VmFsdWVzW2JyZWFrcG9pbnRdICE9IG51bGwpIHtcbiAgICAgICAgYmFzZVticmVha3BvaW50XSA9IHRydWU7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gYmFzZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiByZXNvbHZlQnJlYWtwb2ludFZhbHVlcyh7XG4gIHZhbHVlczogYnJlYWtwb2ludFZhbHVlcyxcbiAgYnJlYWtwb2ludHM6IHRoZW1lQnJlYWtwb2ludHMsXG4gIGJhc2U6IGN1c3RvbUJhc2Vcbn0pIHtcbiAgY29uc3QgYmFzZSA9IGN1c3RvbUJhc2UgfHwgY29tcHV0ZUJyZWFrcG9pbnRzQmFzZShicmVha3BvaW50VmFsdWVzLCB0aGVtZUJyZWFrcG9pbnRzKTtcbiAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKGJhc2UpO1xuXG4gIGlmIChrZXlzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBicmVha3BvaW50VmFsdWVzO1xuICB9XG5cbiAgbGV0IHByZXZpb3VzO1xuICByZXR1cm4ga2V5cy5yZWR1Y2UoKGFjYywgYnJlYWtwb2ludCwgaSkgPT4ge1xuICAgIGlmIChBcnJheS5pc0FycmF5KGJyZWFrcG9pbnRWYWx1ZXMpKSB7XG4gICAgICBhY2NbYnJlYWtwb2ludF0gPSBicmVha3BvaW50VmFsdWVzW2ldICE9IG51bGwgPyBicmVha3BvaW50VmFsdWVzW2ldIDogYnJlYWtwb2ludFZhbHVlc1twcmV2aW91c107XG4gICAgICBwcmV2aW91cyA9IGk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgYnJlYWtwb2ludFZhbHVlcyA9PT0gJ29iamVjdCcpIHtcbiAgICAgIGFjY1ticmVha3BvaW50XSA9IGJyZWFrcG9pbnRWYWx1ZXNbYnJlYWtwb2ludF0gIT0gbnVsbCA/IGJyZWFrcG9pbnRWYWx1ZXNbYnJlYWtwb2ludF0gOiBicmVha3BvaW50VmFsdWVzW3ByZXZpb3VzXTtcbiAgICAgIHByZXZpb3VzID0gYnJlYWtwb2ludDtcbiAgICB9IGVsc2Uge1xuICAgICAgYWNjW2JyZWFrcG9pbnRdID0gYnJlYWtwb2ludFZhbHVlcztcbiAgICB9XG5cbiAgICByZXR1cm4gYWNjO1xuICB9LCB7fSk7XG59XG5leHBvcnQgZGVmYXVsdCBicmVha3BvaW50czsiLCJpbXBvcnQgeyB1bnN0YWJsZV9jYXBpdGFsaXplIGFzIGNhcGl0YWxpemUgfSBmcm9tICdAbXVpL3V0aWxzJztcbmltcG9ydCByZXNwb25zaXZlUHJvcFR5cGUgZnJvbSAnLi9yZXNwb25zaXZlUHJvcFR5cGUnO1xuaW1wb3J0IHsgaGFuZGxlQnJlYWtwb2ludHMgfSBmcm9tICcuL2JyZWFrcG9pbnRzJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRQYXRoKG9iaiwgcGF0aCwgY2hlY2tWYXJzID0gdHJ1ZSkge1xuICBpZiAoIXBhdGggfHwgdHlwZW9mIHBhdGggIT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH0gLy8gQ2hlY2sgaWYgQ1NTIHZhcmlhYmxlcyBhcmUgdXNlZFxuXG5cbiAgaWYgKG9iaiAmJiBvYmoudmFycyAmJiBjaGVja1ZhcnMpIHtcbiAgICBjb25zdCB2YWwgPSBgdmFycy4ke3BhdGh9YC5zcGxpdCgnLicpLnJlZHVjZSgoYWNjLCBpdGVtKSA9PiBhY2MgJiYgYWNjW2l0ZW1dID8gYWNjW2l0ZW1dIDogbnVsbCwgb2JqKTtcblxuICAgIGlmICh2YWwgIT0gbnVsbCkge1xuICAgICAgcmV0dXJuIHZhbDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcGF0aC5zcGxpdCgnLicpLnJlZHVjZSgoYWNjLCBpdGVtKSA9PiB7XG4gICAgaWYgKGFjYyAmJiBhY2NbaXRlbV0gIT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGFjY1tpdGVtXTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfSwgb2JqKTtcbn1cblxuZnVuY3Rpb24gZ2V0VmFsdWUodGhlbWVNYXBwaW5nLCB0cmFuc2Zvcm0sIHByb3BWYWx1ZUZpbmFsLCB1c2VyVmFsdWUgPSBwcm9wVmFsdWVGaW5hbCkge1xuICBsZXQgdmFsdWU7XG5cbiAgaWYgKHR5cGVvZiB0aGVtZU1hcHBpbmcgPT09ICdmdW5jdGlvbicpIHtcbiAgICB2YWx1ZSA9IHRoZW1lTWFwcGluZyhwcm9wVmFsdWVGaW5hbCk7XG4gIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheSh0aGVtZU1hcHBpbmcpKSB7XG4gICAgdmFsdWUgPSB0aGVtZU1hcHBpbmdbcHJvcFZhbHVlRmluYWxdIHx8IHVzZXJWYWx1ZTtcbiAgfSBlbHNlIHtcbiAgICB2YWx1ZSA9IGdldFBhdGgodGhlbWVNYXBwaW5nLCBwcm9wVmFsdWVGaW5hbCkgfHwgdXNlclZhbHVlO1xuICB9XG5cbiAgaWYgKHRyYW5zZm9ybSkge1xuICAgIHZhbHVlID0gdHJhbnNmb3JtKHZhbHVlLCB1c2VyVmFsdWUpO1xuICB9XG5cbiAgcmV0dXJuIHZhbHVlO1xufVxuXG5mdW5jdGlvbiBzdHlsZShvcHRpb25zKSB7XG4gIGNvbnN0IHtcbiAgICBwcm9wLFxuICAgIGNzc1Byb3BlcnR5ID0gb3B0aW9ucy5wcm9wLFxuICAgIHRoZW1lS2V5LFxuICAgIHRyYW5zZm9ybVxuICB9ID0gb3B0aW9ucztcblxuICBjb25zdCBmbiA9IHByb3BzID0+IHtcbiAgICBpZiAocHJvcHNbcHJvcF0gPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgY29uc3QgcHJvcFZhbHVlID0gcHJvcHNbcHJvcF07XG4gICAgY29uc3QgdGhlbWUgPSBwcm9wcy50aGVtZTtcbiAgICBjb25zdCB0aGVtZU1hcHBpbmcgPSBnZXRQYXRoKHRoZW1lLCB0aGVtZUtleSkgfHwge307XG5cbiAgICBjb25zdCBzdHlsZUZyb21Qcm9wVmFsdWUgPSBwcm9wVmFsdWVGaW5hbCA9PiB7XG4gICAgICBsZXQgdmFsdWUgPSBnZXRWYWx1ZSh0aGVtZU1hcHBpbmcsIHRyYW5zZm9ybSwgcHJvcFZhbHVlRmluYWwpO1xuXG4gICAgICBpZiAocHJvcFZhbHVlRmluYWwgPT09IHZhbHVlICYmIHR5cGVvZiBwcm9wVmFsdWVGaW5hbCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgLy8gSGF2ZW4ndCBmb3VuZCB2YWx1ZVxuICAgICAgICB2YWx1ZSA9IGdldFZhbHVlKHRoZW1lTWFwcGluZywgdHJhbnNmb3JtLCBgJHtwcm9wfSR7cHJvcFZhbHVlRmluYWwgPT09ICdkZWZhdWx0JyA/ICcnIDogY2FwaXRhbGl6ZShwcm9wVmFsdWVGaW5hbCl9YCwgcHJvcFZhbHVlRmluYWwpO1xuICAgICAgfVxuXG4gICAgICBpZiAoY3NzUHJvcGVydHkgPT09IGZhbHNlKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgW2Nzc1Byb3BlcnR5XTogdmFsdWVcbiAgICAgIH07XG4gICAgfTtcblxuICAgIHJldHVybiBoYW5kbGVCcmVha3BvaW50cyhwcm9wcywgcHJvcFZhbHVlLCBzdHlsZUZyb21Qcm9wVmFsdWUpO1xuICB9O1xuXG4gIGZuLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB7XG4gICAgW3Byb3BdOiByZXNwb25zaXZlUHJvcFR5cGVcbiAgfSA6IHt9O1xuICBmbi5maWx0ZXJQcm9wcyA9IFtwcm9wXTtcbiAgcmV0dXJuIGZuO1xufVxuXG5leHBvcnQgZGVmYXVsdCBzdHlsZTsiLCJpbXBvcnQgeyBkZWVwbWVyZ2UgfSBmcm9tICdAbXVpL3V0aWxzJztcblxuZnVuY3Rpb24gbWVyZ2UoYWNjLCBpdGVtKSB7XG4gIGlmICghaXRlbSkge1xuICAgIHJldHVybiBhY2M7XG4gIH1cblxuICByZXR1cm4gZGVlcG1lcmdlKGFjYywgaXRlbSwge1xuICAgIGNsb25lOiBmYWxzZSAvLyBObyBuZWVkIHRvIGNsb25lIGRlZXAsIGl0J3Mgd2F5IGZhc3Rlci5cblxuICB9KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbWVyZ2U7IiwiaW1wb3J0IHJlc3BvbnNpdmVQcm9wVHlwZSBmcm9tICcuL3Jlc3BvbnNpdmVQcm9wVHlwZSc7XG5pbXBvcnQgeyBoYW5kbGVCcmVha3BvaW50cyB9IGZyb20gJy4vYnJlYWtwb2ludHMnO1xuaW1wb3J0IHsgZ2V0UGF0aCB9IGZyb20gJy4vc3R5bGUnO1xuaW1wb3J0IG1lcmdlIGZyb20gJy4vbWVyZ2UnO1xuaW1wb3J0IG1lbW9pemUgZnJvbSAnLi9tZW1vaXplJztcbmNvbnN0IHByb3BlcnRpZXMgPSB7XG4gIG06ICdtYXJnaW4nLFxuICBwOiAncGFkZGluZydcbn07XG5jb25zdCBkaXJlY3Rpb25zID0ge1xuICB0OiAnVG9wJyxcbiAgcjogJ1JpZ2h0JyxcbiAgYjogJ0JvdHRvbScsXG4gIGw6ICdMZWZ0JyxcbiAgeDogWydMZWZ0JywgJ1JpZ2h0J10sXG4gIHk6IFsnVG9wJywgJ0JvdHRvbSddXG59O1xuY29uc3QgYWxpYXNlcyA9IHtcbiAgbWFyZ2luWDogJ214JyxcbiAgbWFyZ2luWTogJ215JyxcbiAgcGFkZGluZ1g6ICdweCcsXG4gIHBhZGRpbmdZOiAncHknXG59OyAvLyBtZW1vaXplKCkgaW1wYWN0OlxuLy8gRnJvbSAzMDAsMDAwIG9wcy9zZWNcbi8vIFRvIDM1MCwwMDAgb3BzL3NlY1xuXG5jb25zdCBnZXRDc3NQcm9wZXJ0aWVzID0gbWVtb2l6ZShwcm9wID0+IHtcbiAgLy8gSXQncyBub3QgYSBzaG9ydGhhbmQgbm90YXRpb24uXG4gIGlmIChwcm9wLmxlbmd0aCA+IDIpIHtcbiAgICBpZiAoYWxpYXNlc1twcm9wXSkge1xuICAgICAgcHJvcCA9IGFsaWFzZXNbcHJvcF07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBbcHJvcF07XG4gICAgfVxuICB9XG5cbiAgY29uc3QgW2EsIGJdID0gcHJvcC5zcGxpdCgnJyk7XG4gIGNvbnN0IHByb3BlcnR5ID0gcHJvcGVydGllc1thXTtcbiAgY29uc3QgZGlyZWN0aW9uID0gZGlyZWN0aW9uc1tiXSB8fCAnJztcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkoZGlyZWN0aW9uKSA/IGRpcmVjdGlvbi5tYXAoZGlyID0+IHByb3BlcnR5ICsgZGlyKSA6IFtwcm9wZXJ0eSArIGRpcmVjdGlvbl07XG59KTtcbmNvbnN0IG1hcmdpbktleXMgPSBbJ20nLCAnbXQnLCAnbXInLCAnbWInLCAnbWwnLCAnbXgnLCAnbXknLCAnbWFyZ2luJywgJ21hcmdpblRvcCcsICdtYXJnaW5SaWdodCcsICdtYXJnaW5Cb3R0b20nLCAnbWFyZ2luTGVmdCcsICdtYXJnaW5YJywgJ21hcmdpblknLCAnbWFyZ2luSW5saW5lJywgJ21hcmdpbklubGluZVN0YXJ0JywgJ21hcmdpbklubGluZUVuZCcsICdtYXJnaW5CbG9jaycsICdtYXJnaW5CbG9ja1N0YXJ0JywgJ21hcmdpbkJsb2NrRW5kJ107XG5jb25zdCBwYWRkaW5nS2V5cyA9IFsncCcsICdwdCcsICdwcicsICdwYicsICdwbCcsICdweCcsICdweScsICdwYWRkaW5nJywgJ3BhZGRpbmdUb3AnLCAncGFkZGluZ1JpZ2h0JywgJ3BhZGRpbmdCb3R0b20nLCAncGFkZGluZ0xlZnQnLCAncGFkZGluZ1gnLCAncGFkZGluZ1knLCAncGFkZGluZ0lubGluZScsICdwYWRkaW5nSW5saW5lU3RhcnQnLCAncGFkZGluZ0lubGluZUVuZCcsICdwYWRkaW5nQmxvY2snLCAncGFkZGluZ0Jsb2NrU3RhcnQnLCAncGFkZGluZ0Jsb2NrRW5kJ107XG5jb25zdCBzcGFjaW5nS2V5cyA9IFsuLi5tYXJnaW5LZXlzLCAuLi5wYWRkaW5nS2V5c107XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlVW5hcnlVbml0KHRoZW1lLCB0aGVtZUtleSwgZGVmYXVsdFZhbHVlLCBwcm9wTmFtZSkge1xuICB2YXIgX2dldFBhdGg7XG5cbiAgY29uc3QgdGhlbWVTcGFjaW5nID0gKF9nZXRQYXRoID0gZ2V0UGF0aCh0aGVtZSwgdGhlbWVLZXksIGZhbHNlKSkgIT0gbnVsbCA/IF9nZXRQYXRoIDogZGVmYXVsdFZhbHVlO1xuXG4gIGlmICh0eXBlb2YgdGhlbWVTcGFjaW5nID09PSAnbnVtYmVyJykge1xuICAgIHJldHVybiBhYnMgPT4ge1xuICAgICAgaWYgKHR5cGVvZiBhYnMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiBhYnM7XG4gICAgICB9XG5cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGlmICh0eXBlb2YgYWJzICE9PSAnbnVtYmVyJykge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYE1VSTogRXhwZWN0ZWQgJHtwcm9wTmFtZX0gYXJndW1lbnQgdG8gYmUgYSBudW1iZXIgb3IgYSBzdHJpbmcsIGdvdCAke2Fic30uYCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoZW1lU3BhY2luZyAqIGFicztcbiAgICB9O1xuICB9XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkodGhlbWVTcGFjaW5nKSkge1xuICAgIHJldHVybiBhYnMgPT4ge1xuICAgICAgaWYgKHR5cGVvZiBhYnMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiBhYnM7XG4gICAgICB9XG5cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGlmICghTnVtYmVyLmlzSW50ZWdlcihhYnMpKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihbYE1VSTogVGhlIFxcYHRoZW1lLiR7dGhlbWVLZXl9XFxgIGFycmF5IHR5cGUgY2Fubm90IGJlIGNvbWJpbmVkIHdpdGggbm9uIGludGVnZXIgdmFsdWVzLmAgKyBgWW91IHNob3VsZCBlaXRoZXIgdXNlIGFuIGludGVnZXIgdmFsdWUgdGhhdCBjYW4gYmUgdXNlZCBhcyBpbmRleCwgb3IgZGVmaW5lIHRoZSBcXGB0aGVtZS4ke3RoZW1lS2V5fVxcYCBhcyBhIG51bWJlci5gXS5qb2luKCdcXG4nKSk7XG4gICAgICAgIH0gZWxzZSBpZiAoYWJzID4gdGhlbWVTcGFjaW5nLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKFtgTVVJOiBUaGUgdmFsdWUgcHJvdmlkZWQgKCR7YWJzfSkgb3ZlcmZsb3dzLmAsIGBUaGUgc3VwcG9ydGVkIHZhbHVlcyBhcmU6ICR7SlNPTi5zdHJpbmdpZnkodGhlbWVTcGFjaW5nKX0uYCwgYCR7YWJzfSA+ICR7dGhlbWVTcGFjaW5nLmxlbmd0aCAtIDF9LCB5b3UgbmVlZCB0byBhZGQgdGhlIG1pc3NpbmcgdmFsdWVzLmBdLmpvaW4oJ1xcbicpKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhlbWVTcGFjaW5nW2Fic107XG4gICAgfTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgdGhlbWVTcGFjaW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIHRoZW1lU3BhY2luZztcbiAgfVxuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgY29uc29sZS5lcnJvcihbYE1VSTogVGhlIFxcYHRoZW1lLiR7dGhlbWVLZXl9XFxgIHZhbHVlICgke3RoZW1lU3BhY2luZ30pIGlzIGludmFsaWQuYCwgJ0l0IHNob3VsZCBiZSBhIG51bWJlciwgYW4gYXJyYXkgb3IgYSBmdW5jdGlvbi4nXS5qb2luKCdcXG4nKSk7XG4gIH1cblxuICByZXR1cm4gKCkgPT4gdW5kZWZpbmVkO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVVuYXJ5U3BhY2luZyh0aGVtZSkge1xuICByZXR1cm4gY3JlYXRlVW5hcnlVbml0KHRoZW1lLCAnc3BhY2luZycsIDgsICdzcGFjaW5nJyk7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0VmFsdWUodHJhbnNmb3JtZXIsIHByb3BWYWx1ZSkge1xuICBpZiAodHlwZW9mIHByb3BWYWx1ZSA9PT0gJ3N0cmluZycgfHwgcHJvcFZhbHVlID09IG51bGwpIHtcbiAgICByZXR1cm4gcHJvcFZhbHVlO1xuICB9XG5cbiAgY29uc3QgYWJzID0gTWF0aC5hYnMocHJvcFZhbHVlKTtcbiAgY29uc3QgdHJhbnNmb3JtZWQgPSB0cmFuc2Zvcm1lcihhYnMpO1xuXG4gIGlmIChwcm9wVmFsdWUgPj0gMCkge1xuICAgIHJldHVybiB0cmFuc2Zvcm1lZDtcbiAgfVxuXG4gIGlmICh0eXBlb2YgdHJhbnNmb3JtZWQgPT09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuIC10cmFuc2Zvcm1lZDtcbiAgfVxuXG4gIHJldHVybiBgLSR7dHJhbnNmb3JtZWR9YDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRTdHlsZUZyb21Qcm9wVmFsdWUoY3NzUHJvcGVydGllcywgdHJhbnNmb3JtZXIpIHtcbiAgcmV0dXJuIHByb3BWYWx1ZSA9PiBjc3NQcm9wZXJ0aWVzLnJlZHVjZSgoYWNjLCBjc3NQcm9wZXJ0eSkgPT4ge1xuICAgIGFjY1tjc3NQcm9wZXJ0eV0gPSBnZXRWYWx1ZSh0cmFuc2Zvcm1lciwgcHJvcFZhbHVlKTtcbiAgICByZXR1cm4gYWNjO1xuICB9LCB7fSk7XG59XG5cbmZ1bmN0aW9uIHJlc29sdmVDc3NQcm9wZXJ0eShwcm9wcywga2V5cywgcHJvcCwgdHJhbnNmb3JtZXIpIHtcbiAgLy8gVXNpbmcgYSBoYXNoIGNvbXB1dGF0aW9uIG92ZXIgYW4gYXJyYXkgaXRlcmF0aW9uIGNvdWxkIGJlIGZhc3RlciwgYnV0IHdpdGggb25seSAyOCBpdGVtcyxcbiAgLy8gaXQncyBkb2Vzbid0IHdvcnRoIHRoZSBidW5kbGUgc2l6ZS5cbiAgaWYgKGtleXMuaW5kZXhPZihwcm9wKSA9PT0gLTEpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGNvbnN0IGNzc1Byb3BlcnRpZXMgPSBnZXRDc3NQcm9wZXJ0aWVzKHByb3ApO1xuICBjb25zdCBzdHlsZUZyb21Qcm9wVmFsdWUgPSBnZXRTdHlsZUZyb21Qcm9wVmFsdWUoY3NzUHJvcGVydGllcywgdHJhbnNmb3JtZXIpO1xuICBjb25zdCBwcm9wVmFsdWUgPSBwcm9wc1twcm9wXTtcbiAgcmV0dXJuIGhhbmRsZUJyZWFrcG9pbnRzKHByb3BzLCBwcm9wVmFsdWUsIHN0eWxlRnJvbVByb3BWYWx1ZSk7XG59XG5cbmZ1bmN0aW9uIHN0eWxlKHByb3BzLCBrZXlzKSB7XG4gIGNvbnN0IHRyYW5zZm9ybWVyID0gY3JlYXRlVW5hcnlTcGFjaW5nKHByb3BzLnRoZW1lKTtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKHByb3BzKS5tYXAocHJvcCA9PiByZXNvbHZlQ3NzUHJvcGVydHkocHJvcHMsIGtleXMsIHByb3AsIHRyYW5zZm9ybWVyKSkucmVkdWNlKG1lcmdlLCB7fSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtYXJnaW4ocHJvcHMpIHtcbiAgcmV0dXJuIHN0eWxlKHByb3BzLCBtYXJnaW5LZXlzKTtcbn1cbm1hcmdpbi5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gbWFyZ2luS2V5cy5yZWR1Y2UoKG9iaiwga2V5KSA9PiB7XG4gIG9ialtrZXldID0gcmVzcG9uc2l2ZVByb3BUeXBlO1xuICByZXR1cm4gb2JqO1xufSwge30pIDoge307XG5tYXJnaW4uZmlsdGVyUHJvcHMgPSBtYXJnaW5LZXlzO1xuZXhwb3J0IGZ1bmN0aW9uIHBhZGRpbmcocHJvcHMpIHtcbiAgcmV0dXJuIHN0eWxlKHByb3BzLCBwYWRkaW5nS2V5cyk7XG59XG5wYWRkaW5nLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBwYWRkaW5nS2V5cy5yZWR1Y2UoKG9iaiwga2V5KSA9PiB7XG4gIG9ialtrZXldID0gcmVzcG9uc2l2ZVByb3BUeXBlO1xuICByZXR1cm4gb2JqO1xufSwge30pIDoge307XG5wYWRkaW5nLmZpbHRlclByb3BzID0gcGFkZGluZ0tleXM7XG5cbmZ1bmN0aW9uIHNwYWNpbmcocHJvcHMpIHtcbiAgcmV0dXJuIHN0eWxlKHByb3BzLCBzcGFjaW5nS2V5cyk7XG59XG5cbnNwYWNpbmcucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHNwYWNpbmdLZXlzLnJlZHVjZSgob2JqLCBrZXkpID0+IHtcbiAgb2JqW2tleV0gPSByZXNwb25zaXZlUHJvcFR5cGU7XG4gIHJldHVybiBvYmo7XG59LCB7fSkgOiB7fTtcbnNwYWNpbmcuZmlsdGVyUHJvcHMgPSBzcGFjaW5nS2V5cztcbmV4cG9ydCBkZWZhdWx0IHNwYWNpbmc7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWVtb2l6ZShmbikge1xuICBjb25zdCBjYWNoZSA9IHt9O1xuICByZXR1cm4gYXJnID0+IHtcbiAgICBpZiAoY2FjaGVbYXJnXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBjYWNoZVthcmddID0gZm4oYXJnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2FjaGVbYXJnXTtcbiAgfTtcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiYnJlYWtwb2ludHNcIiwgXCJwYWxldHRlXCIsIFwic3BhY2luZ1wiLCBcInNoYXBlXCJdO1xuaW1wb3J0IHsgZGVlcG1lcmdlIH0gZnJvbSAnQG11aS91dGlscyc7XG5pbXBvcnQgY3JlYXRlQnJlYWtwb2ludHMgZnJvbSAnLi9jcmVhdGVCcmVha3BvaW50cyc7XG5pbXBvcnQgc2hhcGUgZnJvbSAnLi9zaGFwZSc7XG5pbXBvcnQgY3JlYXRlU3BhY2luZyBmcm9tICcuL2NyZWF0ZVNwYWNpbmcnO1xuXG5mdW5jdGlvbiBjcmVhdGVUaGVtZShvcHRpb25zID0ge30sIC4uLmFyZ3MpIHtcbiAgY29uc3Qge1xuICAgIGJyZWFrcG9pbnRzOiBicmVha3BvaW50c0lucHV0ID0ge30sXG4gICAgcGFsZXR0ZTogcGFsZXR0ZUlucHV0ID0ge30sXG4gICAgc3BhY2luZzogc3BhY2luZ0lucHV0LFxuICAgIHNoYXBlOiBzaGFwZUlucHV0ID0ge31cbiAgfSA9IG9wdGlvbnMsXG4gICAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uob3B0aW9ucywgX2V4Y2x1ZGVkKTtcblxuICBjb25zdCBicmVha3BvaW50cyA9IGNyZWF0ZUJyZWFrcG9pbnRzKGJyZWFrcG9pbnRzSW5wdXQpO1xuICBjb25zdCBzcGFjaW5nID0gY3JlYXRlU3BhY2luZyhzcGFjaW5nSW5wdXQpO1xuICBsZXQgbXVpVGhlbWUgPSBkZWVwbWVyZ2Uoe1xuICAgIGJyZWFrcG9pbnRzLFxuICAgIGRpcmVjdGlvbjogJ2x0cicsXG4gICAgY29tcG9uZW50czoge30sXG4gICAgLy8gSW5qZWN0IGNvbXBvbmVudCBkZWZpbml0aW9ucy5cbiAgICBwYWxldHRlOiBfZXh0ZW5kcyh7XG4gICAgICBtb2RlOiAnbGlnaHQnXG4gICAgfSwgcGFsZXR0ZUlucHV0KSxcbiAgICBzcGFjaW5nLFxuICAgIHNoYXBlOiBfZXh0ZW5kcyh7fSwgc2hhcGUsIHNoYXBlSW5wdXQpXG4gIH0sIG90aGVyKTtcbiAgbXVpVGhlbWUgPSBhcmdzLnJlZHVjZSgoYWNjLCBhcmd1bWVudCkgPT4gZGVlcG1lcmdlKGFjYywgYXJndW1lbnQpLCBtdWlUaGVtZSk7XG4gIHJldHVybiBtdWlUaGVtZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlVGhlbWU7IiwiaW1wb3J0IHsgY3JlYXRlVW5hcnlTcGFjaW5nIH0gZnJvbSAnLi4vc3BhY2luZyc7XG5cbi8qIHRzbGludDplbmFibGU6dW5pZmllZC1zaWduYXR1cmVzICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVTcGFjaW5nKHNwYWNpbmdJbnB1dCA9IDgpIHtcbiAgLy8gQWxyZWFkeSB0cmFuc2Zvcm1lZC5cbiAgaWYgKHNwYWNpbmdJbnB1dC5tdWkpIHtcbiAgICByZXR1cm4gc3BhY2luZ0lucHV0O1xuICB9IC8vIE1hdGVyaWFsIERlc2lnbiBsYXlvdXRzIGFyZSB2aXN1YWxseSBiYWxhbmNlZC4gTW9zdCBtZWFzdXJlbWVudHMgYWxpZ24gdG8gYW4gOGRwIGdyaWQsIHdoaWNoIGFsaWducyBib3RoIHNwYWNpbmcgYW5kIHRoZSBvdmVyYWxsIGxheW91dC5cbiAgLy8gU21hbGxlciBjb21wb25lbnRzLCBzdWNoIGFzIGljb25zLCBjYW4gYWxpZ24gdG8gYSA0ZHAgZ3JpZC5cbiAgLy8gaHR0cHM6Ly9tMi5tYXRlcmlhbC5pby9kZXNpZ24vbGF5b3V0L3VuZGVyc3RhbmRpbmctbGF5b3V0Lmh0bWxcblxuXG4gIGNvbnN0IHRyYW5zZm9ybSA9IGNyZWF0ZVVuYXJ5U3BhY2luZyh7XG4gICAgc3BhY2luZzogc3BhY2luZ0lucHV0XG4gIH0pO1xuXG4gIGNvbnN0IHNwYWNpbmcgPSAoLi4uYXJnc0lucHV0KSA9PiB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmICghKGFyZ3NJbnB1dC5sZW5ndGggPD0gNCkpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihgTVVJOiBUb28gbWFueSBhcmd1bWVudHMgcHJvdmlkZWQsIGV4cGVjdGVkIGJldHdlZW4gMCBhbmQgNCwgZ290ICR7YXJnc0lucHV0Lmxlbmd0aH1gKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBhcmdzID0gYXJnc0lucHV0Lmxlbmd0aCA9PT0gMCA/IFsxXSA6IGFyZ3NJbnB1dDtcbiAgICByZXR1cm4gYXJncy5tYXAoYXJndW1lbnQgPT4ge1xuICAgICAgY29uc3Qgb3V0cHV0ID0gdHJhbnNmb3JtKGFyZ3VtZW50KTtcbiAgICAgIHJldHVybiB0eXBlb2Ygb3V0cHV0ID09PSAnbnVtYmVyJyA/IGAke291dHB1dH1weGAgOiBvdXRwdXQ7XG4gICAgfSkuam9pbignICcpO1xuICB9O1xuXG4gIHNwYWNpbmcubXVpID0gdHJ1ZTtcbiAgcmV0dXJuIHNwYWNpbmc7XG59IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuY29uc3QgVGhlbWVDb250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIFRoZW1lQ29udGV4dC5kaXNwbGF5TmFtZSA9ICdUaGVtZUNvbnRleHQnO1xufVxuXG5leHBvcnQgZGVmYXVsdCBUaGVtZUNvbnRleHQ7IiwiaW1wb3J0IGNyZWF0ZVRoZW1lIGZyb20gJy4vY3JlYXRlVGhlbWUnO1xuaW1wb3J0IHVzZVRoZW1lV2l0aG91dERlZmF1bHQgZnJvbSAnLi91c2VUaGVtZVdpdGhvdXREZWZhdWx0JztcbmV4cG9ydCBjb25zdCBzeXN0ZW1EZWZhdWx0VGhlbWUgPSBjcmVhdGVUaGVtZSgpO1xuXG5mdW5jdGlvbiB1c2VUaGVtZShkZWZhdWx0VGhlbWUgPSBzeXN0ZW1EZWZhdWx0VGhlbWUpIHtcbiAgcmV0dXJuIHVzZVRoZW1lV2l0aG91dERlZmF1bHQoZGVmYXVsdFRoZW1lKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgdXNlVGhlbWU7IiwiaW1wb3J0IHsgdXNlVGhlbWUgYXMgbXVpVXNlVGhlbWUgfSBmcm9tICdAbXVpL3ByaXZhdGUtdGhlbWluZyc7XG5cbmZ1bmN0aW9uIGlzT2JqZWN0RW1wdHkob2JqKSB7XG4gIHJldHVybiBPYmplY3Qua2V5cyhvYmopLmxlbmd0aCA9PT0gMDtcbn1cblxuZnVuY3Rpb24gdXNlVGhlbWUoZGVmYXVsdFRoZW1lID0gbnVsbCkge1xuICBjb25zdCBjb250ZXh0VGhlbWUgPSBtdWlVc2VUaGVtZSgpO1xuICByZXR1cm4gIWNvbnRleHRUaGVtZSB8fCBpc09iamVjdEVtcHR5KGNvbnRleHRUaGVtZSkgPyBkZWZhdWx0VGhlbWUgOiBjb250ZXh0VGhlbWU7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHVzZVRoZW1lOyIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBUaGVtZUNvbnRleHQgZnJvbSAnLi9UaGVtZUNvbnRleHQnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlVGhlbWUoKSB7XG4gIGNvbnN0IHRoZW1lID0gUmVhY3QudXNlQ29udGV4dChUaGVtZUNvbnRleHQpO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL3J1bGVzLW9mLWhvb2tzXG4gICAgUmVhY3QudXNlRGVidWdWYWx1ZSh0aGVtZSk7XG4gIH1cblxuICByZXR1cm4gdGhlbWU7XG59IiwiaW1wb3J0IHsgZm9ybWF0TXVpRXJyb3JNZXNzYWdlIGFzIF9mb3JtYXRNdWlFcnJvck1lc3NhZ2UgfSBmcm9tIFwiQG11aS91dGlsc1wiO1xuXG4vKipcbiAqIFJldHVybnMgYSBudW1iZXIgd2hvc2UgdmFsdWUgaXMgbGltaXRlZCB0byB0aGUgZ2l2ZW4gcmFuZ2UuXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgVGhlIHZhbHVlIHRvIGJlIGNsYW1wZWRcbiAqIEBwYXJhbSB7bnVtYmVyfSBtaW4gVGhlIGxvd2VyIGJvdW5kYXJ5IG9mIHRoZSBvdXRwdXQgcmFuZ2VcbiAqIEBwYXJhbSB7bnVtYmVyfSBtYXggVGhlIHVwcGVyIGJvdW5kYXJ5IG9mIHRoZSBvdXRwdXQgcmFuZ2VcbiAqIEByZXR1cm5zIHtudW1iZXJ9IEEgbnVtYmVyIGluIHRoZSByYW5nZSBbbWluLCBtYXhdXG4gKi9cbmZ1bmN0aW9uIGNsYW1wKHZhbHVlLCBtaW4gPSAwLCBtYXggPSAxKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKHZhbHVlIDwgbWluIHx8IHZhbHVlID4gbWF4KSB7XG4gICAgICBjb25zb2xlLmVycm9yKGBNVUk6IFRoZSB2YWx1ZSBwcm92aWRlZCAke3ZhbHVlfSBpcyBvdXQgb2YgcmFuZ2UgWyR7bWlufSwgJHttYXh9XS5gKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gTWF0aC5taW4oTWF0aC5tYXgobWluLCB2YWx1ZSksIG1heCk7XG59XG4vKipcbiAqIENvbnZlcnRzIGEgY29sb3IgZnJvbSBDU1MgaGV4IGZvcm1hdCB0byBDU1MgcmdiIGZvcm1hdC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIEhleCBjb2xvciwgaS5lLiAjbm5uIG9yICNubm5ubm5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IEEgQ1NTIHJnYiBjb2xvciBzdHJpbmdcbiAqL1xuXG5cbmV4cG9ydCBmdW5jdGlvbiBoZXhUb1JnYihjb2xvcikge1xuICBjb2xvciA9IGNvbG9yLnNsaWNlKDEpO1xuICBjb25zdCByZSA9IG5ldyBSZWdFeHAoYC57MSwke2NvbG9yLmxlbmd0aCA+PSA2ID8gMiA6IDF9fWAsICdnJyk7XG4gIGxldCBjb2xvcnMgPSBjb2xvci5tYXRjaChyZSk7XG5cbiAgaWYgKGNvbG9ycyAmJiBjb2xvcnNbMF0ubGVuZ3RoID09PSAxKSB7XG4gICAgY29sb3JzID0gY29sb3JzLm1hcChuID0+IG4gKyBuKTtcbiAgfVxuXG4gIHJldHVybiBjb2xvcnMgPyBgcmdiJHtjb2xvcnMubGVuZ3RoID09PSA0ID8gJ2EnIDogJyd9KCR7Y29sb3JzLm1hcCgobiwgaW5kZXgpID0+IHtcbiAgICByZXR1cm4gaW5kZXggPCAzID8gcGFyc2VJbnQobiwgMTYpIDogTWF0aC5yb3VuZChwYXJzZUludChuLCAxNikgLyAyNTUgKiAxMDAwKSAvIDEwMDA7XG4gIH0pLmpvaW4oJywgJyl9KWAgOiAnJztcbn1cblxuZnVuY3Rpb24gaW50VG9IZXgoaW50KSB7XG4gIGNvbnN0IGhleCA9IGludC50b1N0cmluZygxNik7XG4gIHJldHVybiBoZXgubGVuZ3RoID09PSAxID8gYDAke2hleH1gIDogaGV4O1xufVxuLyoqXG4gKiBSZXR1cm5zIGFuIG9iamVjdCB3aXRoIHRoZSB0eXBlIGFuZCB2YWx1ZXMgb2YgYSBjb2xvci5cbiAqXG4gKiBOb3RlOiBEb2VzIG5vdCBzdXBwb3J0IHJnYiAlIHZhbHVlcy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIENTUyBjb2xvciwgaS5lLiBvbmUgb2Y6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKCksIGNvbG9yKClcbiAqIEByZXR1cm5zIHtvYmplY3R9IC0gQSBNVUkgY29sb3Igb2JqZWN0OiB7dHlwZTogc3RyaW5nLCB2YWx1ZXM6IG51bWJlcltdfVxuICovXG5cblxuZXhwb3J0IGZ1bmN0aW9uIGRlY29tcG9zZUNvbG9yKGNvbG9yKSB7XG4gIC8vIElkZW1wb3RlbnRcbiAgaWYgKGNvbG9yLnR5cGUpIHtcbiAgICByZXR1cm4gY29sb3I7XG4gIH1cblxuICBpZiAoY29sb3IuY2hhckF0KDApID09PSAnIycpIHtcbiAgICByZXR1cm4gZGVjb21wb3NlQ29sb3IoaGV4VG9SZ2IoY29sb3IpKTtcbiAgfVxuXG4gIGNvbnN0IG1hcmtlciA9IGNvbG9yLmluZGV4T2YoJygnKTtcbiAgY29uc3QgdHlwZSA9IGNvbG9yLnN1YnN0cmluZygwLCBtYXJrZXIpO1xuXG4gIGlmIChbJ3JnYicsICdyZ2JhJywgJ2hzbCcsICdoc2xhJywgJ2NvbG9yJ10uaW5kZXhPZih0eXBlKSA9PT0gLTEpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gYE1VSTogVW5zdXBwb3J0ZWQgXFxgJHtjb2xvcn1cXGAgY29sb3IuXG5UaGUgZm9sbG93aW5nIGZvcm1hdHMgYXJlIHN1cHBvcnRlZDogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKSwgY29sb3IoKS5gIDogX2Zvcm1hdE11aUVycm9yTWVzc2FnZSg5LCBjb2xvcikpO1xuICB9XG5cbiAgbGV0IHZhbHVlcyA9IGNvbG9yLnN1YnN0cmluZyhtYXJrZXIgKyAxLCBjb2xvci5sZW5ndGggLSAxKTtcbiAgbGV0IGNvbG9yU3BhY2U7XG5cbiAgaWYgKHR5cGUgPT09ICdjb2xvcicpIHtcbiAgICB2YWx1ZXMgPSB2YWx1ZXMuc3BsaXQoJyAnKTtcbiAgICBjb2xvclNwYWNlID0gdmFsdWVzLnNoaWZ0KCk7XG5cbiAgICBpZiAodmFsdWVzLmxlbmd0aCA9PT0gNCAmJiB2YWx1ZXNbM10uY2hhckF0KDApID09PSAnLycpIHtcbiAgICAgIHZhbHVlc1szXSA9IHZhbHVlc1szXS5zbGljZSgxKTtcbiAgICB9XG5cbiAgICBpZiAoWydzcmdiJywgJ2Rpc3BsYXktcDMnLCAnYTk4LXJnYicsICdwcm9waG90by1yZ2InLCAncmVjLTIwMjAnXS5pbmRleE9mKGNvbG9yU3BhY2UpID09PSAtMSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGBNVUk6IHVuc3VwcG9ydGVkIFxcYCR7Y29sb3JTcGFjZX1cXGAgY29sb3Igc3BhY2UuXG5UaGUgZm9sbG93aW5nIGNvbG9yIHNwYWNlcyBhcmUgc3VwcG9ydGVkOiBzcmdiLCBkaXNwbGF5LXAzLCBhOTgtcmdiLCBwcm9waG90by1yZ2IsIHJlYy0yMDIwLmAgOiBfZm9ybWF0TXVpRXJyb3JNZXNzYWdlKDEwLCBjb2xvclNwYWNlKSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhbHVlcyA9IHZhbHVlcy5zcGxpdCgnLCcpO1xuICB9XG5cbiAgdmFsdWVzID0gdmFsdWVzLm1hcCh2YWx1ZSA9PiBwYXJzZUZsb2F0KHZhbHVlKSk7XG4gIHJldHVybiB7XG4gICAgdHlwZSxcbiAgICB2YWx1ZXMsXG4gICAgY29sb3JTcGFjZVxuICB9O1xufVxuLyoqXG4gKiBSZXR1cm5zIGEgY2hhbm5lbCBjcmVhdGVkIGZyb20gdGhlIGlucHV0IGNvbG9yLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIENTUyBjb2xvciwgaS5lLiBvbmUgb2Y6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKCksIGNvbG9yKClcbiAqIEByZXR1cm5zIHtzdHJpbmd9IC0gVGhlIGNoYW5uZWwgZm9yIHRoZSBjb2xvciwgdGhhdCBjYW4gYmUgdXNlZCBpbiByZ2JhIG9yIGhzbGEgY29sb3JzXG4gKi9cblxuZXhwb3J0IGNvbnN0IGNvbG9yQ2hhbm5lbCA9IGNvbG9yID0+IHtcbiAgY29uc3QgZGVjb21wb3NlZENvbG9yID0gZGVjb21wb3NlQ29sb3IoY29sb3IpO1xuICByZXR1cm4gZGVjb21wb3NlZENvbG9yLnZhbHVlcy5zbGljZSgwLCAzKS5tYXAoKHZhbCwgaWR4KSA9PiBkZWNvbXBvc2VkQ29sb3IudHlwZS5pbmRleE9mKCdoc2wnKSAhPT0gLTEgJiYgaWR4ICE9PSAwID8gYCR7dmFsfSVgIDogdmFsKS5qb2luKCcgJyk7XG59O1xuLyoqXG4gKiBDb252ZXJ0cyBhIGNvbG9yIG9iamVjdCB3aXRoIHR5cGUgYW5kIHZhbHVlcyB0byBhIHN0cmluZy5cbiAqIEBwYXJhbSB7b2JqZWN0fSBjb2xvciAtIERlY29tcG9zZWQgY29sb3JcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvci50eXBlIC0gT25lIG9mOiAncmdiJywgJ3JnYmEnLCAnaHNsJywgJ2hzbGEnLCAnY29sb3InXG4gKiBAcGFyYW0ge2FycmF5fSBjb2xvci52YWx1ZXMgLSBbbixuLG5dIG9yIFtuLG4sbixuXVxuICogQHJldHVybnMge3N0cmluZ30gQSBDU1MgY29sb3Igc3RyaW5nXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHJlY29tcG9zZUNvbG9yKGNvbG9yKSB7XG4gIGNvbnN0IHtcbiAgICB0eXBlLFxuICAgIGNvbG9yU3BhY2VcbiAgfSA9IGNvbG9yO1xuICBsZXQge1xuICAgIHZhbHVlc1xuICB9ID0gY29sb3I7XG5cbiAgaWYgKHR5cGUuaW5kZXhPZigncmdiJykgIT09IC0xKSB7XG4gICAgLy8gT25seSBjb252ZXJ0IHRoZSBmaXJzdCAzIHZhbHVlcyB0byBpbnQgKGkuZS4gbm90IGFscGhhKVxuICAgIHZhbHVlcyA9IHZhbHVlcy5tYXAoKG4sIGkpID0+IGkgPCAzID8gcGFyc2VJbnQobiwgMTApIDogbik7XG4gIH0gZWxzZSBpZiAodHlwZS5pbmRleE9mKCdoc2wnKSAhPT0gLTEpIHtcbiAgICB2YWx1ZXNbMV0gPSBgJHt2YWx1ZXNbMV19JWA7XG4gICAgdmFsdWVzWzJdID0gYCR7dmFsdWVzWzJdfSVgO1xuICB9XG5cbiAgaWYgKHR5cGUuaW5kZXhPZignY29sb3InKSAhPT0gLTEpIHtcbiAgICB2YWx1ZXMgPSBgJHtjb2xvclNwYWNlfSAke3ZhbHVlcy5qb2luKCcgJyl9YDtcbiAgfSBlbHNlIHtcbiAgICB2YWx1ZXMgPSBgJHt2YWx1ZXMuam9pbignLCAnKX1gO1xuICB9XG5cbiAgcmV0dXJuIGAke3R5cGV9KCR7dmFsdWVzfSlgO1xufVxuLyoqXG4gKiBDb252ZXJ0cyBhIGNvbG9yIGZyb20gQ1NTIHJnYiBmb3JtYXQgdG8gQ1NTIGhleCBmb3JtYXQuXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBSR0IgY29sb3IsIGkuZS4gcmdiKG4sIG4sIG4pXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIENTUyByZ2IgY29sb3Igc3RyaW5nLCBpLmUuICNubm5ubm5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gcmdiVG9IZXgoY29sb3IpIHtcbiAgLy8gSWRlbXBvdGVudFxuICBpZiAoY29sb3IuaW5kZXhPZignIycpID09PSAwKSB7XG4gICAgcmV0dXJuIGNvbG9yO1xuICB9XG5cbiAgY29uc3Qge1xuICAgIHZhbHVlc1xuICB9ID0gZGVjb21wb3NlQ29sb3IoY29sb3IpO1xuICByZXR1cm4gYCMke3ZhbHVlcy5tYXAoKG4sIGkpID0+IGludFRvSGV4KGkgPT09IDMgPyBNYXRoLnJvdW5kKDI1NSAqIG4pIDogbikpLmpvaW4oJycpfWA7XG59XG4vKipcbiAqIENvbnZlcnRzIGEgY29sb3IgZnJvbSBoc2wgZm9ybWF0IHRvIHJnYiBmb3JtYXQuXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBIU0wgY29sb3IgdmFsdWVzXG4gKiBAcmV0dXJucyB7c3RyaW5nfSByZ2IgY29sb3IgdmFsdWVzXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGhzbFRvUmdiKGNvbG9yKSB7XG4gIGNvbG9yID0gZGVjb21wb3NlQ29sb3IoY29sb3IpO1xuICBjb25zdCB7XG4gICAgdmFsdWVzXG4gIH0gPSBjb2xvcjtcbiAgY29uc3QgaCA9IHZhbHVlc1swXTtcbiAgY29uc3QgcyA9IHZhbHVlc1sxXSAvIDEwMDtcbiAgY29uc3QgbCA9IHZhbHVlc1syXSAvIDEwMDtcbiAgY29uc3QgYSA9IHMgKiBNYXRoLm1pbihsLCAxIC0gbCk7XG5cbiAgY29uc3QgZiA9IChuLCBrID0gKG4gKyBoIC8gMzApICUgMTIpID0+IGwgLSBhICogTWF0aC5tYXgoTWF0aC5taW4oayAtIDMsIDkgLSBrLCAxKSwgLTEpO1xuXG4gIGxldCB0eXBlID0gJ3JnYic7XG4gIGNvbnN0IHJnYiA9IFtNYXRoLnJvdW5kKGYoMCkgKiAyNTUpLCBNYXRoLnJvdW5kKGYoOCkgKiAyNTUpLCBNYXRoLnJvdW5kKGYoNCkgKiAyNTUpXTtcblxuICBpZiAoY29sb3IudHlwZSA9PT0gJ2hzbGEnKSB7XG4gICAgdHlwZSArPSAnYSc7XG4gICAgcmdiLnB1c2godmFsdWVzWzNdKTtcbiAgfVxuXG4gIHJldHVybiByZWNvbXBvc2VDb2xvcih7XG4gICAgdHlwZSxcbiAgICB2YWx1ZXM6IHJnYlxuICB9KTtcbn1cbi8qKlxuICogVGhlIHJlbGF0aXZlIGJyaWdodG5lc3Mgb2YgYW55IHBvaW50IGluIGEgY29sb3Igc3BhY2UsXG4gKiBub3JtYWxpemVkIHRvIDAgZm9yIGRhcmtlc3QgYmxhY2sgYW5kIDEgZm9yIGxpZ2h0ZXN0IHdoaXRlLlxuICpcbiAqIEZvcm11bGE6IGh0dHBzOi8vd3d3LnczLm9yZy9UUi9XQ0FHMjAtVEVDSFMvRzE3Lmh0bWwjRzE3LXRlc3RzXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBDU1MgY29sb3IsIGkuZS4gb25lIG9mOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpLCBjb2xvcigpXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBUaGUgcmVsYXRpdmUgYnJpZ2h0bmVzcyBvZiB0aGUgY29sb3IgaW4gdGhlIHJhbmdlIDAgLSAxXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEx1bWluYW5jZShjb2xvcikge1xuICBjb2xvciA9IGRlY29tcG9zZUNvbG9yKGNvbG9yKTtcbiAgbGV0IHJnYiA9IGNvbG9yLnR5cGUgPT09ICdoc2wnIHx8IGNvbG9yLnR5cGUgPT09ICdoc2xhJyA/IGRlY29tcG9zZUNvbG9yKGhzbFRvUmdiKGNvbG9yKSkudmFsdWVzIDogY29sb3IudmFsdWVzO1xuICByZ2IgPSByZ2IubWFwKHZhbCA9PiB7XG4gICAgaWYgKGNvbG9yLnR5cGUgIT09ICdjb2xvcicpIHtcbiAgICAgIHZhbCAvPSAyNTU7IC8vIG5vcm1hbGl6ZWRcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsIDw9IDAuMDM5MjggPyB2YWwgLyAxMi45MiA6ICgodmFsICsgMC4wNTUpIC8gMS4wNTUpICoqIDIuNDtcbiAgfSk7IC8vIFRydW5jYXRlIGF0IDMgZGlnaXRzXG5cbiAgcmV0dXJuIE51bWJlcigoMC4yMTI2ICogcmdiWzBdICsgMC43MTUyICogcmdiWzFdICsgMC4wNzIyICogcmdiWzJdKS50b0ZpeGVkKDMpKTtcbn1cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgY29udHJhc3QgcmF0aW8gYmV0d2VlbiB0d28gY29sb3JzLlxuICpcbiAqIEZvcm11bGE6IGh0dHBzOi8vd3d3LnczLm9yZy9UUi9XQ0FHMjAtVEVDSFMvRzE3Lmh0bWwjRzE3LXRlc3RzXG4gKiBAcGFyYW0ge3N0cmluZ30gZm9yZWdyb3VuZCAtIENTUyBjb2xvciwgaS5lLiBvbmUgb2Y6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKClcbiAqIEBwYXJhbSB7c3RyaW5nfSBiYWNrZ3JvdW5kIC0gQ1NTIGNvbG9yLCBpLmUuIG9uZSBvZjogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKVxuICogQHJldHVybnMge251bWJlcn0gQSBjb250cmFzdCByYXRpbyB2YWx1ZSBpbiB0aGUgcmFuZ2UgMCAtIDIxLlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRDb250cmFzdFJhdGlvKGZvcmVncm91bmQsIGJhY2tncm91bmQpIHtcbiAgY29uc3QgbHVtQSA9IGdldEx1bWluYW5jZShmb3JlZ3JvdW5kKTtcbiAgY29uc3QgbHVtQiA9IGdldEx1bWluYW5jZShiYWNrZ3JvdW5kKTtcbiAgcmV0dXJuIChNYXRoLm1heChsdW1BLCBsdW1CKSArIDAuMDUpIC8gKE1hdGgubWluKGx1bUEsIGx1bUIpICsgMC4wNSk7XG59XG4vKipcbiAqIFNldHMgdGhlIGFic29sdXRlIHRyYW5zcGFyZW5jeSBvZiBhIGNvbG9yLlxuICogQW55IGV4aXN0aW5nIGFscGhhIHZhbHVlcyBhcmUgb3ZlcndyaXR0ZW4uXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBDU1MgY29sb3IsIGkuZS4gb25lIG9mOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpLCBjb2xvcigpXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgLSB2YWx1ZSB0byBzZXQgdGhlIGFscGhhIGNoYW5uZWwgdG8gaW4gdGhlIHJhbmdlIDAgLSAxXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIENTUyBjb2xvciBzdHJpbmcuIEhleCBpbnB1dCB2YWx1ZXMgYXJlIHJldHVybmVkIGFzIHJnYlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBhbHBoYShjb2xvciwgdmFsdWUpIHtcbiAgY29sb3IgPSBkZWNvbXBvc2VDb2xvcihjb2xvcik7XG4gIHZhbHVlID0gY2xhbXAodmFsdWUpO1xuXG4gIGlmIChjb2xvci50eXBlID09PSAncmdiJyB8fCBjb2xvci50eXBlID09PSAnaHNsJykge1xuICAgIGNvbG9yLnR5cGUgKz0gJ2EnO1xuICB9XG5cbiAgaWYgKGNvbG9yLnR5cGUgPT09ICdjb2xvcicpIHtcbiAgICBjb2xvci52YWx1ZXNbM10gPSBgLyR7dmFsdWV9YDtcbiAgfSBlbHNlIHtcbiAgICBjb2xvci52YWx1ZXNbM10gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiByZWNvbXBvc2VDb2xvcihjb2xvcik7XG59XG4vKipcbiAqIERhcmtlbnMgYSBjb2xvci5cbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIENTUyBjb2xvciwgaS5lLiBvbmUgb2Y6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKCksIGNvbG9yKClcbiAqIEBwYXJhbSB7bnVtYmVyfSBjb2VmZmljaWVudCAtIG11bHRpcGxpZXIgaW4gdGhlIHJhbmdlIDAgLSAxXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIENTUyBjb2xvciBzdHJpbmcuIEhleCBpbnB1dCB2YWx1ZXMgYXJlIHJldHVybmVkIGFzIHJnYlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBkYXJrZW4oY29sb3IsIGNvZWZmaWNpZW50KSB7XG4gIGNvbG9yID0gZGVjb21wb3NlQ29sb3IoY29sb3IpO1xuICBjb2VmZmljaWVudCA9IGNsYW1wKGNvZWZmaWNpZW50KTtcblxuICBpZiAoY29sb3IudHlwZS5pbmRleE9mKCdoc2wnKSAhPT0gLTEpIHtcbiAgICBjb2xvci52YWx1ZXNbMl0gKj0gMSAtIGNvZWZmaWNpZW50O1xuICB9IGVsc2UgaWYgKGNvbG9yLnR5cGUuaW5kZXhPZigncmdiJykgIT09IC0xIHx8IGNvbG9yLnR5cGUuaW5kZXhPZignY29sb3InKSAhPT0gLTEpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDM7IGkgKz0gMSkge1xuICAgICAgY29sb3IudmFsdWVzW2ldICo9IDEgLSBjb2VmZmljaWVudDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVjb21wb3NlQ29sb3IoY29sb3IpO1xufVxuLyoqXG4gKiBMaWdodGVucyBhIGNvbG9yLlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIC0gQ1NTIGNvbG9yLCBpLmUuIG9uZSBvZjogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKSwgY29sb3IoKVxuICogQHBhcmFtIHtudW1iZXJ9IGNvZWZmaWNpZW50IC0gbXVsdGlwbGllciBpbiB0aGUgcmFuZ2UgMCAtIDFcbiAqIEByZXR1cm5zIHtzdHJpbmd9IEEgQ1NTIGNvbG9yIHN0cmluZy4gSGV4IGlucHV0IHZhbHVlcyBhcmUgcmV0dXJuZWQgYXMgcmdiXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGxpZ2h0ZW4oY29sb3IsIGNvZWZmaWNpZW50KSB7XG4gIGNvbG9yID0gZGVjb21wb3NlQ29sb3IoY29sb3IpO1xuICBjb2VmZmljaWVudCA9IGNsYW1wKGNvZWZmaWNpZW50KTtcblxuICBpZiAoY29sb3IudHlwZS5pbmRleE9mKCdoc2wnKSAhPT0gLTEpIHtcbiAgICBjb2xvci52YWx1ZXNbMl0gKz0gKDEwMCAtIGNvbG9yLnZhbHVlc1syXSkgKiBjb2VmZmljaWVudDtcbiAgfSBlbHNlIGlmIChjb2xvci50eXBlLmluZGV4T2YoJ3JnYicpICE9PSAtMSkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMzsgaSArPSAxKSB7XG4gICAgICBjb2xvci52YWx1ZXNbaV0gKz0gKDI1NSAtIGNvbG9yLnZhbHVlc1tpXSkgKiBjb2VmZmljaWVudDtcbiAgICB9XG4gIH0gZWxzZSBpZiAoY29sb3IudHlwZS5pbmRleE9mKCdjb2xvcicpICE9PSAtMSkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMzsgaSArPSAxKSB7XG4gICAgICBjb2xvci52YWx1ZXNbaV0gKz0gKDEgLSBjb2xvci52YWx1ZXNbaV0pICogY29lZmZpY2llbnQ7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlY29tcG9zZUNvbG9yKGNvbG9yKTtcbn1cbi8qKlxuICogRGFya2VuIG9yIGxpZ2h0ZW4gYSBjb2xvciwgZGVwZW5kaW5nIG9uIGl0cyBsdW1pbmFuY2UuXG4gKiBMaWdodCBjb2xvcnMgYXJlIGRhcmtlbmVkLCBkYXJrIGNvbG9ycyBhcmUgbGlnaHRlbmVkLlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIC0gQ1NTIGNvbG9yLCBpLmUuIG9uZSBvZjogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKSwgY29sb3IoKVxuICogQHBhcmFtIHtudW1iZXJ9IGNvZWZmaWNpZW50PTAuMTUgLSBtdWx0aXBsaWVyIGluIHRoZSByYW5nZSAwIC0gMVxuICogQHJldHVybnMge3N0cmluZ30gQSBDU1MgY29sb3Igc3RyaW5nLiBIZXggaW5wdXQgdmFsdWVzIGFyZSByZXR1cm5lZCBhcyByZ2JcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZW1waGFzaXplKGNvbG9yLCBjb2VmZmljaWVudCA9IDAuMTUpIHtcbiAgcmV0dXJuIGdldEx1bWluYW5jZShjb2xvcikgPiAwLjUgPyBkYXJrZW4oY29sb3IsIGNvZWZmaWNpZW50KSA6IGxpZ2h0ZW4oY29sb3IsIGNvZWZmaWNpZW50KTtcbn0iLCJjb25zdCBjb21tb24gPSB7XG4gIGJsYWNrOiAnIzAwMCcsXG4gIHdoaXRlOiAnI2ZmZidcbn07XG5leHBvcnQgZGVmYXVsdCBjb21tb247IiwiY29uc3QgZ3JleSA9IHtcbiAgNTA6ICcjZmFmYWZhJyxcbiAgMTAwOiAnI2Y1ZjVmNScsXG4gIDIwMDogJyNlZWVlZWUnLFxuICAzMDA6ICcjZTBlMGUwJyxcbiAgNDAwOiAnI2JkYmRiZCcsXG4gIDUwMDogJyM5ZTllOWUnLFxuICA2MDA6ICcjNzU3NTc1JyxcbiAgNzAwOiAnIzYxNjE2MScsXG4gIDgwMDogJyM0MjQyNDInLFxuICA5MDA6ICcjMjEyMTIxJyxcbiAgQTEwMDogJyNmNWY1ZjUnLFxuICBBMjAwOiAnI2VlZWVlZScsXG4gIEE0MDA6ICcjYmRiZGJkJyxcbiAgQTcwMDogJyM2MTYxNjEnXG59O1xuZXhwb3J0IGRlZmF1bHQgZ3JleTsiLCJjb25zdCBwdXJwbGUgPSB7XG4gIDUwOiAnI2YzZTVmNScsXG4gIDEwMDogJyNlMWJlZTcnLFxuICAyMDA6ICcjY2U5M2Q4JyxcbiAgMzAwOiAnI2JhNjhjOCcsXG4gIDQwMDogJyNhYjQ3YmMnLFxuICA1MDA6ICcjOWMyN2IwJyxcbiAgNjAwOiAnIzhlMjRhYScsXG4gIDcwMDogJyM3YjFmYTInLFxuICA4MDA6ICcjNmExYjlhJyxcbiAgOTAwOiAnIzRhMTQ4YycsXG4gIEExMDA6ICcjZWE4MGZjJyxcbiAgQTIwMDogJyNlMDQwZmInLFxuICBBNDAwOiAnI2Q1MDBmOScsXG4gIEE3MDA6ICcjYWEwMGZmJ1xufTtcbmV4cG9ydCBkZWZhdWx0IHB1cnBsZTsiLCJjb25zdCByZWQgPSB7XG4gIDUwOiAnI2ZmZWJlZScsXG4gIDEwMDogJyNmZmNkZDInLFxuICAyMDA6ICcjZWY5YTlhJyxcbiAgMzAwOiAnI2U1NzM3MycsXG4gIDQwMDogJyNlZjUzNTAnLFxuICA1MDA6ICcjZjQ0MzM2JyxcbiAgNjAwOiAnI2U1MzkzNScsXG4gIDcwMDogJyNkMzJmMmYnLFxuICA4MDA6ICcjYzYyODI4JyxcbiAgOTAwOiAnI2I3MWMxYycsXG4gIEExMDA6ICcjZmY4YTgwJyxcbiAgQTIwMDogJyNmZjUyNTInLFxuICBBNDAwOiAnI2ZmMTc0NCcsXG4gIEE3MDA6ICcjZDUwMDAwJ1xufTtcbmV4cG9ydCBkZWZhdWx0IHJlZDsiLCJjb25zdCBvcmFuZ2UgPSB7XG4gIDUwOiAnI2ZmZjNlMCcsXG4gIDEwMDogJyNmZmUwYjInLFxuICAyMDA6ICcjZmZjYzgwJyxcbiAgMzAwOiAnI2ZmYjc0ZCcsXG4gIDQwMDogJyNmZmE3MjYnLFxuICA1MDA6ICcjZmY5ODAwJyxcbiAgNjAwOiAnI2ZiOGMwMCcsXG4gIDcwMDogJyNmNTdjMDAnLFxuICA4MDA6ICcjZWY2YzAwJyxcbiAgOTAwOiAnI2U2NTEwMCcsXG4gIEExMDA6ICcjZmZkMTgwJyxcbiAgQTIwMDogJyNmZmFiNDAnLFxuICBBNDAwOiAnI2ZmOTEwMCcsXG4gIEE3MDA6ICcjZmY2ZDAwJ1xufTtcbmV4cG9ydCBkZWZhdWx0IG9yYW5nZTsiLCJjb25zdCBibHVlID0ge1xuICA1MDogJyNlM2YyZmQnLFxuICAxMDA6ICcjYmJkZWZiJyxcbiAgMjAwOiAnIzkwY2FmOScsXG4gIDMwMDogJyM2NGI1ZjYnLFxuICA0MDA6ICcjNDJhNWY1JyxcbiAgNTAwOiAnIzIxOTZmMycsXG4gIDYwMDogJyMxZTg4ZTUnLFxuICA3MDA6ICcjMTk3NmQyJyxcbiAgODAwOiAnIzE1NjVjMCcsXG4gIDkwMDogJyMwZDQ3YTEnLFxuICBBMTAwOiAnIzgyYjFmZicsXG4gIEEyMDA6ICcjNDQ4YWZmJyxcbiAgQTQwMDogJyMyOTc5ZmYnLFxuICBBNzAwOiAnIzI5NjJmZidcbn07XG5leHBvcnQgZGVmYXVsdCBibHVlOyIsImNvbnN0IGxpZ2h0Qmx1ZSA9IHtcbiAgNTA6ICcjZTFmNWZlJyxcbiAgMTAwOiAnI2IzZTVmYycsXG4gIDIwMDogJyM4MWQ0ZmEnLFxuICAzMDA6ICcjNGZjM2Y3JyxcbiAgNDAwOiAnIzI5YjZmNicsXG4gIDUwMDogJyMwM2E5ZjQnLFxuICA2MDA6ICcjMDM5YmU1JyxcbiAgNzAwOiAnIzAyODhkMScsXG4gIDgwMDogJyMwMjc3YmQnLFxuICA5MDA6ICcjMDE1NzliJyxcbiAgQTEwMDogJyM4MGQ4ZmYnLFxuICBBMjAwOiAnIzQwYzRmZicsXG4gIEE0MDA6ICcjMDBiMGZmJyxcbiAgQTcwMDogJyMwMDkxZWEnXG59O1xuZXhwb3J0IGRlZmF1bHQgbGlnaHRCbHVlOyIsImNvbnN0IGdyZWVuID0ge1xuICA1MDogJyNlOGY1ZTknLFxuICAxMDA6ICcjYzhlNmM5JyxcbiAgMjAwOiAnI2E1ZDZhNycsXG4gIDMwMDogJyM4MWM3ODQnLFxuICA0MDA6ICcjNjZiYjZhJyxcbiAgNTAwOiAnIzRjYWY1MCcsXG4gIDYwMDogJyM0M2EwNDcnLFxuICA3MDA6ICcjMzg4ZTNjJyxcbiAgODAwOiAnIzJlN2QzMicsXG4gIDkwMDogJyMxYjVlMjAnLFxuICBBMTAwOiAnI2I5ZjZjYScsXG4gIEEyMDA6ICcjNjlmMGFlJyxcbiAgQTQwMDogJyMwMGU2NzYnLFxuICBBNzAwOiAnIzAwYzg1Mydcbn07XG5leHBvcnQgZGVmYXVsdCBncmVlbjsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IHsgZm9ybWF0TXVpRXJyb3JNZXNzYWdlIGFzIF9mb3JtYXRNdWlFcnJvck1lc3NhZ2UgfSBmcm9tIFwiQG11aS91dGlsc1wiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wibW9kZVwiLCBcImNvbnRyYXN0VGhyZXNob2xkXCIsIFwidG9uYWxPZmZzZXRcIl07XG5pbXBvcnQgeyBkZWVwbWVyZ2UgfSBmcm9tICdAbXVpL3V0aWxzJztcbmltcG9ydCB7IGRhcmtlbiwgZ2V0Q29udHJhc3RSYXRpbywgbGlnaHRlbiB9IGZyb20gJ0BtdWkvc3lzdGVtJztcbmltcG9ydCBjb21tb24gZnJvbSAnLi4vY29sb3JzL2NvbW1vbic7XG5pbXBvcnQgZ3JleSBmcm9tICcuLi9jb2xvcnMvZ3JleSc7XG5pbXBvcnQgcHVycGxlIGZyb20gJy4uL2NvbG9ycy9wdXJwbGUnO1xuaW1wb3J0IHJlZCBmcm9tICcuLi9jb2xvcnMvcmVkJztcbmltcG9ydCBvcmFuZ2UgZnJvbSAnLi4vY29sb3JzL29yYW5nZSc7XG5pbXBvcnQgYmx1ZSBmcm9tICcuLi9jb2xvcnMvYmx1ZSc7XG5pbXBvcnQgbGlnaHRCbHVlIGZyb20gJy4uL2NvbG9ycy9saWdodEJsdWUnO1xuaW1wb3J0IGdyZWVuIGZyb20gJy4uL2NvbG9ycy9ncmVlbic7XG5leHBvcnQgY29uc3QgbGlnaHQgPSB7XG4gIC8vIFRoZSBjb2xvcnMgdXNlZCB0byBzdHlsZSB0aGUgdGV4dC5cbiAgdGV4dDoge1xuICAgIC8vIFRoZSBtb3N0IGltcG9ydGFudCB0ZXh0LlxuICAgIHByaW1hcnk6ICdyZ2JhKDAsIDAsIDAsIDAuODcpJyxcbiAgICAvLyBTZWNvbmRhcnkgdGV4dC5cbiAgICBzZWNvbmRhcnk6ICdyZ2JhKDAsIDAsIDAsIDAuNiknLFxuICAgIC8vIERpc2FibGVkIHRleHQgaGF2ZSBldmVuIGxvd2VyIHZpc3VhbCBwcm9taW5lbmNlLlxuICAgIGRpc2FibGVkOiAncmdiYSgwLCAwLCAwLCAwLjM4KSdcbiAgfSxcbiAgLy8gVGhlIGNvbG9yIHVzZWQgdG8gZGl2aWRlIGRpZmZlcmVudCBlbGVtZW50cy5cbiAgZGl2aWRlcjogJ3JnYmEoMCwgMCwgMCwgMC4xMiknLFxuICAvLyBUaGUgYmFja2dyb3VuZCBjb2xvcnMgdXNlZCB0byBzdHlsZSB0aGUgc3VyZmFjZXMuXG4gIC8vIENvbnNpc3RlbmN5IGJldHdlZW4gdGhlc2UgdmFsdWVzIGlzIGltcG9ydGFudC5cbiAgYmFja2dyb3VuZDoge1xuICAgIHBhcGVyOiBjb21tb24ud2hpdGUsXG4gICAgZGVmYXVsdDogY29tbW9uLndoaXRlXG4gIH0sXG4gIC8vIFRoZSBjb2xvcnMgdXNlZCB0byBzdHlsZSB0aGUgYWN0aW9uIGVsZW1lbnRzLlxuICBhY3Rpb246IHtcbiAgICAvLyBUaGUgY29sb3Igb2YgYW4gYWN0aXZlIGFjdGlvbiBsaWtlIGFuIGljb24gYnV0dG9uLlxuICAgIGFjdGl2ZTogJ3JnYmEoMCwgMCwgMCwgMC41NCknLFxuICAgIC8vIFRoZSBjb2xvciBvZiBhbiBob3ZlcmVkIGFjdGlvbi5cbiAgICBob3ZlcjogJ3JnYmEoMCwgMCwgMCwgMC4wNCknLFxuICAgIGhvdmVyT3BhY2l0eTogMC4wNCxcbiAgICAvLyBUaGUgY29sb3Igb2YgYSBzZWxlY3RlZCBhY3Rpb24uXG4gICAgc2VsZWN0ZWQ6ICdyZ2JhKDAsIDAsIDAsIDAuMDgpJyxcbiAgICBzZWxlY3RlZE9wYWNpdHk6IDAuMDgsXG4gICAgLy8gVGhlIGNvbG9yIG9mIGEgZGlzYWJsZWQgYWN0aW9uLlxuICAgIGRpc2FibGVkOiAncmdiYSgwLCAwLCAwLCAwLjI2KScsXG4gICAgLy8gVGhlIGJhY2tncm91bmQgY29sb3Igb2YgYSBkaXNhYmxlZCBhY3Rpb24uXG4gICAgZGlzYWJsZWRCYWNrZ3JvdW5kOiAncmdiYSgwLCAwLCAwLCAwLjEyKScsXG4gICAgZGlzYWJsZWRPcGFjaXR5OiAwLjM4LFxuICAgIGZvY3VzOiAncmdiYSgwLCAwLCAwLCAwLjEyKScsXG4gICAgZm9jdXNPcGFjaXR5OiAwLjEyLFxuICAgIGFjdGl2YXRlZE9wYWNpdHk6IDAuMTJcbiAgfVxufTtcbmV4cG9ydCBjb25zdCBkYXJrID0ge1xuICB0ZXh0OiB7XG4gICAgcHJpbWFyeTogY29tbW9uLndoaXRlLFxuICAgIHNlY29uZGFyeTogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC43KScsXG4gICAgZGlzYWJsZWQ6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNSknLFxuICAgIGljb246ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNSknXG4gIH0sXG4gIGRpdmlkZXI6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMTIpJyxcbiAgYmFja2dyb3VuZDoge1xuICAgIHBhcGVyOiAnIzEyMTIxMicsXG4gICAgZGVmYXVsdDogJyMxMjEyMTInXG4gIH0sXG4gIGFjdGlvbjoge1xuICAgIGFjdGl2ZTogY29tbW9uLndoaXRlLFxuICAgIGhvdmVyOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjA4KScsXG4gICAgaG92ZXJPcGFjaXR5OiAwLjA4LFxuICAgIHNlbGVjdGVkOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjE2KScsXG4gICAgc2VsZWN0ZWRPcGFjaXR5OiAwLjE2LFxuICAgIGRpc2FibGVkOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjMpJyxcbiAgICBkaXNhYmxlZEJhY2tncm91bmQ6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMTIpJyxcbiAgICBkaXNhYmxlZE9wYWNpdHk6IDAuMzgsXG4gICAgZm9jdXM6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMTIpJyxcbiAgICBmb2N1c09wYWNpdHk6IDAuMTIsXG4gICAgYWN0aXZhdGVkT3BhY2l0eTogMC4yNFxuICB9XG59O1xuXG5mdW5jdGlvbiBhZGRMaWdodE9yRGFyayhpbnRlbnQsIGRpcmVjdGlvbiwgc2hhZGUsIHRvbmFsT2Zmc2V0KSB7XG4gIGNvbnN0IHRvbmFsT2Zmc2V0TGlnaHQgPSB0b25hbE9mZnNldC5saWdodCB8fCB0b25hbE9mZnNldDtcbiAgY29uc3QgdG9uYWxPZmZzZXREYXJrID0gdG9uYWxPZmZzZXQuZGFyayB8fCB0b25hbE9mZnNldCAqIDEuNTtcblxuICBpZiAoIWludGVudFtkaXJlY3Rpb25dKSB7XG4gICAgaWYgKGludGVudC5oYXNPd25Qcm9wZXJ0eShzaGFkZSkpIHtcbiAgICAgIGludGVudFtkaXJlY3Rpb25dID0gaW50ZW50W3NoYWRlXTtcbiAgICB9IGVsc2UgaWYgKGRpcmVjdGlvbiA9PT0gJ2xpZ2h0Jykge1xuICAgICAgaW50ZW50LmxpZ2h0ID0gbGlnaHRlbihpbnRlbnQubWFpbiwgdG9uYWxPZmZzZXRMaWdodCk7XG4gICAgfSBlbHNlIGlmIChkaXJlY3Rpb24gPT09ICdkYXJrJykge1xuICAgICAgaW50ZW50LmRhcmsgPSBkYXJrZW4oaW50ZW50Lm1haW4sIHRvbmFsT2Zmc2V0RGFyayk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGdldERlZmF1bHRQcmltYXJ5KG1vZGUgPSAnbGlnaHQnKSB7XG4gIGlmIChtb2RlID09PSAnZGFyaycpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbWFpbjogYmx1ZVsyMDBdLFxuICAgICAgbGlnaHQ6IGJsdWVbNTBdLFxuICAgICAgZGFyazogYmx1ZVs0MDBdXG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgbWFpbjogYmx1ZVs3MDBdLFxuICAgIGxpZ2h0OiBibHVlWzQwMF0sXG4gICAgZGFyazogYmx1ZVs4MDBdXG4gIH07XG59XG5cbmZ1bmN0aW9uIGdldERlZmF1bHRTZWNvbmRhcnkobW9kZSA9ICdsaWdodCcpIHtcbiAgaWYgKG1vZGUgPT09ICdkYXJrJykge1xuICAgIHJldHVybiB7XG4gICAgICBtYWluOiBwdXJwbGVbMjAwXSxcbiAgICAgIGxpZ2h0OiBwdXJwbGVbNTBdLFxuICAgICAgZGFyazogcHVycGxlWzQwMF1cbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBtYWluOiBwdXJwbGVbNTAwXSxcbiAgICBsaWdodDogcHVycGxlWzMwMF0sXG4gICAgZGFyazogcHVycGxlWzcwMF1cbiAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0RGVmYXVsdEVycm9yKG1vZGUgPSAnbGlnaHQnKSB7XG4gIGlmIChtb2RlID09PSAnZGFyaycpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbWFpbjogcmVkWzUwMF0sXG4gICAgICBsaWdodDogcmVkWzMwMF0sXG4gICAgICBkYXJrOiByZWRbNzAwXVxuICAgIH07XG4gIH1cblxuICByZXR1cm4ge1xuICAgIG1haW46IHJlZFs3MDBdLFxuICAgIGxpZ2h0OiByZWRbNDAwXSxcbiAgICBkYXJrOiByZWRbODAwXVxuICB9O1xufVxuXG5mdW5jdGlvbiBnZXREZWZhdWx0SW5mbyhtb2RlID0gJ2xpZ2h0Jykge1xuICBpZiAobW9kZSA9PT0gJ2RhcmsnKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG1haW46IGxpZ2h0Qmx1ZVs0MDBdLFxuICAgICAgbGlnaHQ6IGxpZ2h0Qmx1ZVszMDBdLFxuICAgICAgZGFyazogbGlnaHRCbHVlWzcwMF1cbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBtYWluOiBsaWdodEJsdWVbNzAwXSxcbiAgICBsaWdodDogbGlnaHRCbHVlWzUwMF0sXG4gICAgZGFyazogbGlnaHRCbHVlWzkwMF1cbiAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0RGVmYXVsdFN1Y2Nlc3MobW9kZSA9ICdsaWdodCcpIHtcbiAgaWYgKG1vZGUgPT09ICdkYXJrJykge1xuICAgIHJldHVybiB7XG4gICAgICBtYWluOiBncmVlbls0MDBdLFxuICAgICAgbGlnaHQ6IGdyZWVuWzMwMF0sXG4gICAgICBkYXJrOiBncmVlbls3MDBdXG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgbWFpbjogZ3JlZW5bODAwXSxcbiAgICBsaWdodDogZ3JlZW5bNTAwXSxcbiAgICBkYXJrOiBncmVlbls5MDBdXG4gIH07XG59XG5cbmZ1bmN0aW9uIGdldERlZmF1bHRXYXJuaW5nKG1vZGUgPSAnbGlnaHQnKSB7XG4gIGlmIChtb2RlID09PSAnZGFyaycpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbWFpbjogb3JhbmdlWzQwMF0sXG4gICAgICBsaWdodDogb3JhbmdlWzMwMF0sXG4gICAgICBkYXJrOiBvcmFuZ2VbNzAwXVxuICAgIH07XG4gIH1cblxuICByZXR1cm4ge1xuICAgIG1haW46ICcjZWQ2YzAyJyxcbiAgICAvLyBjbG9zZXN0IHRvIG9yYW5nZVs4MDBdIHRoYXQgcGFzcyAzOjEuXG4gICAgbGlnaHQ6IG9yYW5nZVs1MDBdLFxuICAgIGRhcms6IG9yYW5nZVs5MDBdXG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZVBhbGV0dGUocGFsZXR0ZSkge1xuICBjb25zdCB7XG4gICAgbW9kZSA9ICdsaWdodCcsXG4gICAgY29udHJhc3RUaHJlc2hvbGQgPSAzLFxuICAgIHRvbmFsT2Zmc2V0ID0gMC4yXG4gIH0gPSBwYWxldHRlLFxuICAgICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHBhbGV0dGUsIF9leGNsdWRlZCk7XG5cbiAgY29uc3QgcHJpbWFyeSA9IHBhbGV0dGUucHJpbWFyeSB8fCBnZXREZWZhdWx0UHJpbWFyeShtb2RlKTtcbiAgY29uc3Qgc2Vjb25kYXJ5ID0gcGFsZXR0ZS5zZWNvbmRhcnkgfHwgZ2V0RGVmYXVsdFNlY29uZGFyeShtb2RlKTtcbiAgY29uc3QgZXJyb3IgPSBwYWxldHRlLmVycm9yIHx8IGdldERlZmF1bHRFcnJvcihtb2RlKTtcbiAgY29uc3QgaW5mbyA9IHBhbGV0dGUuaW5mbyB8fCBnZXREZWZhdWx0SW5mbyhtb2RlKTtcbiAgY29uc3Qgc3VjY2VzcyA9IHBhbGV0dGUuc3VjY2VzcyB8fCBnZXREZWZhdWx0U3VjY2Vzcyhtb2RlKTtcbiAgY29uc3Qgd2FybmluZyA9IHBhbGV0dGUud2FybmluZyB8fCBnZXREZWZhdWx0V2FybmluZyhtb2RlKTsgLy8gVXNlIHRoZSBzYW1lIGxvZ2ljIGFzXG4gIC8vIEJvb3RzdHJhcDogaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvMWQ2ZTM3MTBkZDQ0N2RlMWEyMDBmMjllOGZhNTIxZjhhMDkwOGY3MC9zY3NzL19mdW5jdGlvbnMuc2NzcyNMNTlcbiAgLy8gYW5kIG1hdGVyaWFsLWNvbXBvbmVudHMtd2ViIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXRlcmlhbC1jb21wb25lbnRzL21hdGVyaWFsLWNvbXBvbmVudHMtd2ViL2Jsb2IvYWM0NmI4ODYzYzRkYWI5ZmMyMmM0YzY2MmRjNmJkMWI2NWRkNjUyZi9wYWNrYWdlcy9tZGMtdGhlbWUvX2Z1bmN0aW9ucy5zY3NzI0w1NFxuXG4gIGZ1bmN0aW9uIGdldENvbnRyYXN0VGV4dChiYWNrZ3JvdW5kKSB7XG4gICAgY29uc3QgY29udHJhc3RUZXh0ID0gZ2V0Q29udHJhc3RSYXRpbyhiYWNrZ3JvdW5kLCBkYXJrLnRleHQucHJpbWFyeSkgPj0gY29udHJhc3RUaHJlc2hvbGQgPyBkYXJrLnRleHQucHJpbWFyeSA6IGxpZ2h0LnRleHQucHJpbWFyeTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBjb25zdCBjb250cmFzdCA9IGdldENvbnRyYXN0UmF0aW8oYmFja2dyb3VuZCwgY29udHJhc3RUZXh0KTtcblxuICAgICAgaWYgKGNvbnRyYXN0IDwgMykge1xuICAgICAgICBjb25zb2xlLmVycm9yKFtgTVVJOiBUaGUgY29udHJhc3QgcmF0aW8gb2YgJHtjb250cmFzdH06MSBmb3IgJHtjb250cmFzdFRleHR9IG9uICR7YmFja2dyb3VuZH1gLCAnZmFsbHMgYmVsb3cgdGhlIFdDQUcgcmVjb21tZW5kZWQgYWJzb2x1dGUgbWluaW11bSBjb250cmFzdCByYXRpbyBvZiAzOjEuJywgJ2h0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDA4L1JFQy1XQ0FHMjAtMjAwODEyMTEvI3Zpc3VhbC1hdWRpby1jb250cmFzdC1jb250cmFzdCddLmpvaW4oJ1xcbicpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gY29udHJhc3RUZXh0O1xuICB9XG5cbiAgY29uc3QgYXVnbWVudENvbG9yID0gKHtcbiAgICBjb2xvcixcbiAgICBuYW1lLFxuICAgIG1haW5TaGFkZSA9IDUwMCxcbiAgICBsaWdodFNoYWRlID0gMzAwLFxuICAgIGRhcmtTaGFkZSA9IDcwMFxuICB9KSA9PiB7XG4gICAgY29sb3IgPSBfZXh0ZW5kcyh7fSwgY29sb3IpO1xuXG4gICAgaWYgKCFjb2xvci5tYWluICYmIGNvbG9yW21haW5TaGFkZV0pIHtcbiAgICAgIGNvbG9yLm1haW4gPSBjb2xvclttYWluU2hhZGVdO1xuICAgIH1cblxuICAgIGlmICghY29sb3IuaGFzT3duUHJvcGVydHkoJ21haW4nKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGBNVUk6IFRoZSBjb2xvciR7bmFtZSA/IGAgKCR7bmFtZX0pYCA6ICcnfSBwcm92aWRlZCB0byBhdWdtZW50Q29sb3IoY29sb3IpIGlzIGludmFsaWQuXG5UaGUgY29sb3Igb2JqZWN0IG5lZWRzIHRvIGhhdmUgYSBcXGBtYWluXFxgIHByb3BlcnR5IG9yIGEgXFxgJHttYWluU2hhZGV9XFxgIHByb3BlcnR5LmAgOiBfZm9ybWF0TXVpRXJyb3JNZXNzYWdlKDExLCBuYW1lID8gYCAoJHtuYW1lfSlgIDogJycsIG1haW5TaGFkZSkpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgY29sb3IubWFpbiAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBgTVVJOiBUaGUgY29sb3Ike25hbWUgPyBgICgke25hbWV9KWAgOiAnJ30gcHJvdmlkZWQgdG8gYXVnbWVudENvbG9yKGNvbG9yKSBpcyBpbnZhbGlkLlxuXFxgY29sb3IubWFpblxcYCBzaG91bGQgYmUgYSBzdHJpbmcsIGJ1dCBcXGAke0pTT04uc3RyaW5naWZ5KGNvbG9yLm1haW4pfVxcYCB3YXMgcHJvdmlkZWQgaW5zdGVhZC5cblxuRGlkIHlvdSBpbnRlbmQgdG8gdXNlIG9uZSBvZiB0aGUgZm9sbG93aW5nIGFwcHJvYWNoZXM/XG5cbmltcG9ydCB7IGdyZWVuIH0gZnJvbSBcIkBtdWkvbWF0ZXJpYWwvY29sb3JzXCI7XG5cbmNvbnN0IHRoZW1lMSA9IGNyZWF0ZVRoZW1lKHsgcGFsZXR0ZToge1xuICBwcmltYXJ5OiBncmVlbixcbn0gfSk7XG5cbmNvbnN0IHRoZW1lMiA9IGNyZWF0ZVRoZW1lKHsgcGFsZXR0ZToge1xuICBwcmltYXJ5OiB7IG1haW46IGdyZWVuWzUwMF0gfSxcbn0gfSk7YCA6IF9mb3JtYXRNdWlFcnJvck1lc3NhZ2UoMTIsIG5hbWUgPyBgICgke25hbWV9KWAgOiAnJywgSlNPTi5zdHJpbmdpZnkoY29sb3IubWFpbikpKTtcbiAgICB9XG5cbiAgICBhZGRMaWdodE9yRGFyayhjb2xvciwgJ2xpZ2h0JywgbGlnaHRTaGFkZSwgdG9uYWxPZmZzZXQpO1xuICAgIGFkZExpZ2h0T3JEYXJrKGNvbG9yLCAnZGFyaycsIGRhcmtTaGFkZSwgdG9uYWxPZmZzZXQpO1xuXG4gICAgaWYgKCFjb2xvci5jb250cmFzdFRleHQpIHtcbiAgICAgIGNvbG9yLmNvbnRyYXN0VGV4dCA9IGdldENvbnRyYXN0VGV4dChjb2xvci5tYWluKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY29sb3I7XG4gIH07XG5cbiAgY29uc3QgbW9kZXMgPSB7XG4gICAgZGFyayxcbiAgICBsaWdodFxuICB9O1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKCFtb2Rlc1ttb2RlXSkge1xuICAgICAgY29uc29sZS5lcnJvcihgTVVJOiBUaGUgcGFsZXR0ZSBtb2RlIFxcYCR7bW9kZX1cXGAgaXMgbm90IHN1cHBvcnRlZC5gKTtcbiAgICB9XG4gIH1cblxuICBjb25zdCBwYWxldHRlT3V0cHV0ID0gZGVlcG1lcmdlKF9leHRlbmRzKHtcbiAgICAvLyBBIGNvbGxlY3Rpb24gb2YgY29tbW9uIGNvbG9ycy5cbiAgICBjb21tb246IF9leHRlbmRzKHt9LCBjb21tb24pLFxuICAgIC8vIHByZXZlbnQgbXV0YWJsZSBvYmplY3QuXG4gICAgLy8gVGhlIHBhbGV0dGUgbW9kZSwgY2FuIGJlIGxpZ2h0IG9yIGRhcmsuXG4gICAgbW9kZSxcbiAgICAvLyBUaGUgY29sb3JzIHVzZWQgdG8gcmVwcmVzZW50IHByaW1hcnkgaW50ZXJmYWNlIGVsZW1lbnRzIGZvciBhIHVzZXIuXG4gICAgcHJpbWFyeTogYXVnbWVudENvbG9yKHtcbiAgICAgIGNvbG9yOiBwcmltYXJ5LFxuICAgICAgbmFtZTogJ3ByaW1hcnknXG4gICAgfSksXG4gICAgLy8gVGhlIGNvbG9ycyB1c2VkIHRvIHJlcHJlc2VudCBzZWNvbmRhcnkgaW50ZXJmYWNlIGVsZW1lbnRzIGZvciBhIHVzZXIuXG4gICAgc2Vjb25kYXJ5OiBhdWdtZW50Q29sb3Ioe1xuICAgICAgY29sb3I6IHNlY29uZGFyeSxcbiAgICAgIG5hbWU6ICdzZWNvbmRhcnknLFxuICAgICAgbWFpblNoYWRlOiAnQTQwMCcsXG4gICAgICBsaWdodFNoYWRlOiAnQTIwMCcsXG4gICAgICBkYXJrU2hhZGU6ICdBNzAwJ1xuICAgIH0pLFxuICAgIC8vIFRoZSBjb2xvcnMgdXNlZCB0byByZXByZXNlbnQgaW50ZXJmYWNlIGVsZW1lbnRzIHRoYXQgdGhlIHVzZXIgc2hvdWxkIGJlIG1hZGUgYXdhcmUgb2YuXG4gICAgZXJyb3I6IGF1Z21lbnRDb2xvcih7XG4gICAgICBjb2xvcjogZXJyb3IsXG4gICAgICBuYW1lOiAnZXJyb3InXG4gICAgfSksXG4gICAgLy8gVGhlIGNvbG9ycyB1c2VkIHRvIHJlcHJlc2VudCBwb3RlbnRpYWxseSBkYW5nZXJvdXMgYWN0aW9ucyBvciBpbXBvcnRhbnQgbWVzc2FnZXMuXG4gICAgd2FybmluZzogYXVnbWVudENvbG9yKHtcbiAgICAgIGNvbG9yOiB3YXJuaW5nLFxuICAgICAgbmFtZTogJ3dhcm5pbmcnXG4gICAgfSksXG4gICAgLy8gVGhlIGNvbG9ycyB1c2VkIHRvIHByZXNlbnQgaW5mb3JtYXRpb24gdG8gdGhlIHVzZXIgdGhhdCBpcyBuZXV0cmFsIGFuZCBub3QgbmVjZXNzYXJpbHkgaW1wb3J0YW50LlxuICAgIGluZm86IGF1Z21lbnRDb2xvcih7XG4gICAgICBjb2xvcjogaW5mbyxcbiAgICAgIG5hbWU6ICdpbmZvJ1xuICAgIH0pLFxuICAgIC8vIFRoZSBjb2xvcnMgdXNlZCB0byBpbmRpY2F0ZSB0aGUgc3VjY2Vzc2Z1bCBjb21wbGV0aW9uIG9mIGFuIGFjdGlvbiB0aGF0IHVzZXIgdHJpZ2dlcmVkLlxuICAgIHN1Y2Nlc3M6IGF1Z21lbnRDb2xvcih7XG4gICAgICBjb2xvcjogc3VjY2VzcyxcbiAgICAgIG5hbWU6ICdzdWNjZXNzJ1xuICAgIH0pLFxuICAgIC8vIFRoZSBncmV5IGNvbG9ycy5cbiAgICBncmV5LFxuICAgIC8vIFVzZWQgYnkgYGdldENvbnRyYXN0VGV4dCgpYCB0byBtYXhpbWl6ZSB0aGUgY29udHJhc3QgYmV0d2VlblxuICAgIC8vIHRoZSBiYWNrZ3JvdW5kIGFuZCB0aGUgdGV4dC5cbiAgICBjb250cmFzdFRocmVzaG9sZCxcbiAgICAvLyBUYWtlcyBhIGJhY2tncm91bmQgY29sb3IgYW5kIHJldHVybnMgdGhlIHRleHQgY29sb3IgdGhhdCBtYXhpbWl6ZXMgdGhlIGNvbnRyYXN0LlxuICAgIGdldENvbnRyYXN0VGV4dCxcbiAgICAvLyBHZW5lcmF0ZSBhIHJpY2ggY29sb3Igb2JqZWN0LlxuICAgIGF1Z21lbnRDb2xvcixcbiAgICAvLyBVc2VkIGJ5IHRoZSBmdW5jdGlvbnMgYmVsb3cgdG8gc2hpZnQgYSBjb2xvcidzIGx1bWluYW5jZSBieSBhcHByb3hpbWF0ZWx5XG4gICAgLy8gdHdvIGluZGV4ZXMgd2l0aGluIGl0cyB0b25hbCBwYWxldHRlLlxuICAgIC8vIEUuZy4sIHNoaWZ0IGZyb20gUmVkIDUwMCB0byBSZWQgMzAwIG9yIFJlZCA3MDAuXG4gICAgdG9uYWxPZmZzZXRcbiAgfSwgbW9kZXNbbW9kZV0pLCBvdGhlcik7XG4gIHJldHVybiBwYWxldHRlT3V0cHV0O1xufSIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJmb250RmFtaWx5XCIsIFwiZm9udFNpemVcIiwgXCJmb250V2VpZ2h0TGlnaHRcIiwgXCJmb250V2VpZ2h0UmVndWxhclwiLCBcImZvbnRXZWlnaHRNZWRpdW1cIiwgXCJmb250V2VpZ2h0Qm9sZFwiLCBcImh0bWxGb250U2l6ZVwiLCBcImFsbFZhcmlhbnRzXCIsIFwicHhUb1JlbVwiXTtcbmltcG9ydCB7IGRlZXBtZXJnZSB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuXG5mdW5jdGlvbiByb3VuZCh2YWx1ZSkge1xuICByZXR1cm4gTWF0aC5yb3VuZCh2YWx1ZSAqIDFlNSkgLyAxZTU7XG59XG5cbmNvbnN0IGNhc2VBbGxDYXBzID0ge1xuICB0ZXh0VHJhbnNmb3JtOiAndXBwZXJjYXNlJ1xufTtcbmNvbnN0IGRlZmF1bHRGb250RmFtaWx5ID0gJ1wiUm9ib3RvXCIsIFwiSGVsdmV0aWNhXCIsIFwiQXJpYWxcIiwgc2Fucy1zZXJpZic7XG4vKipcbiAqIEBzZWUgQGxpbmt7aHR0cHM6Ly9tMi5tYXRlcmlhbC5pby9kZXNpZ24vdHlwb2dyYXBoeS90aGUtdHlwZS1zeXN0ZW0uaHRtbH1cbiAqIEBzZWUgQGxpbmt7aHR0cHM6Ly9tMi5tYXRlcmlhbC5pby9kZXNpZ24vdHlwb2dyYXBoeS91bmRlcnN0YW5kaW5nLXR5cG9ncmFwaHkuaHRtbH1cbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVUeXBvZ3JhcGh5KHBhbGV0dGUsIHR5cG9ncmFwaHkpIHtcbiAgY29uc3QgX3JlZiA9IHR5cGVvZiB0eXBvZ3JhcGh5ID09PSAnZnVuY3Rpb24nID8gdHlwb2dyYXBoeShwYWxldHRlKSA6IHR5cG9ncmFwaHksXG4gICAgICAgIHtcbiAgICBmb250RmFtaWx5ID0gZGVmYXVsdEZvbnRGYW1pbHksXG4gICAgLy8gVGhlIGRlZmF1bHQgZm9udCBzaXplIG9mIHRoZSBNYXRlcmlhbCBTcGVjaWZpY2F0aW9uLlxuICAgIGZvbnRTaXplID0gMTQsXG4gICAgLy8gcHhcbiAgICBmb250V2VpZ2h0TGlnaHQgPSAzMDAsXG4gICAgZm9udFdlaWdodFJlZ3VsYXIgPSA0MDAsXG4gICAgZm9udFdlaWdodE1lZGl1bSA9IDUwMCxcbiAgICBmb250V2VpZ2h0Qm9sZCA9IDcwMCxcbiAgICAvLyBUZWxsIE1VSSB3aGF0J3MgdGhlIGZvbnQtc2l6ZSBvbiB0aGUgaHRtbCBlbGVtZW50LlxuICAgIC8vIDE2cHggaXMgdGhlIGRlZmF1bHQgZm9udC1zaXplIHVzZWQgYnkgYnJvd3NlcnMuXG4gICAgaHRtbEZvbnRTaXplID0gMTYsXG4gICAgLy8gQXBwbHkgdGhlIENTUyBwcm9wZXJ0aWVzIHRvIGFsbCB0aGUgdmFyaWFudHMuXG4gICAgYWxsVmFyaWFudHMsXG4gICAgcHhUb1JlbTogcHhUb1JlbTJcbiAgfSA9IF9yZWYsXG4gICAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZiwgX2V4Y2x1ZGVkKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmICh0eXBlb2YgZm9udFNpemUgIT09ICdudW1iZXInKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdNVUk6IGBmb250U2l6ZWAgaXMgcmVxdWlyZWQgdG8gYmUgYSBudW1iZXIuJyk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBodG1sRm9udFNpemUgIT09ICdudW1iZXInKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdNVUk6IGBodG1sRm9udFNpemVgIGlzIHJlcXVpcmVkIHRvIGJlIGEgbnVtYmVyLicpO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IGNvZWYgPSBmb250U2l6ZSAvIDE0O1xuXG4gIGNvbnN0IHB4VG9SZW0gPSBweFRvUmVtMiB8fCAoc2l6ZSA9PiBgJHtzaXplIC8gaHRtbEZvbnRTaXplICogY29lZn1yZW1gKTtcblxuICBjb25zdCBidWlsZFZhcmlhbnQgPSAoZm9udFdlaWdodCwgc2l6ZSwgbGluZUhlaWdodCwgbGV0dGVyU3BhY2luZywgY2FzaW5nKSA9PiBfZXh0ZW5kcyh7XG4gICAgZm9udEZhbWlseSxcbiAgICBmb250V2VpZ2h0LFxuICAgIGZvbnRTaXplOiBweFRvUmVtKHNpemUpLFxuICAgIC8vIFVuaXRsZXNzIGZvbGxvd2luZyBodHRwczovL21leWVyd2ViLmNvbS9lcmljL3Rob3VnaHRzLzIwMDYvMDIvMDgvdW5pdGxlc3MtbGluZS1oZWlnaHRzL1xuICAgIGxpbmVIZWlnaHRcbiAgfSwgZm9udEZhbWlseSA9PT0gZGVmYXVsdEZvbnRGYW1pbHkgPyB7XG4gICAgbGV0dGVyU3BhY2luZzogYCR7cm91bmQobGV0dGVyU3BhY2luZyAvIHNpemUpfWVtYFxuICB9IDoge30sIGNhc2luZywgYWxsVmFyaWFudHMpO1xuXG4gIGNvbnN0IHZhcmlhbnRzID0ge1xuICAgIGgxOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodExpZ2h0LCA5NiwgMS4xNjcsIC0xLjUpLFxuICAgIGgyOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodExpZ2h0LCA2MCwgMS4yLCAtMC41KSxcbiAgICBoMzogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRSZWd1bGFyLCA0OCwgMS4xNjcsIDApLFxuICAgIGg0OiBidWlsZFZhcmlhbnQoZm9udFdlaWdodFJlZ3VsYXIsIDM0LCAxLjIzNSwgMC4yNSksXG4gICAgaDU6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0UmVndWxhciwgMjQsIDEuMzM0LCAwKSxcbiAgICBoNjogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRNZWRpdW0sIDIwLCAxLjYsIDAuMTUpLFxuICAgIHN1YnRpdGxlMTogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRSZWd1bGFyLCAxNiwgMS43NSwgMC4xNSksXG4gICAgc3VidGl0bGUyOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodE1lZGl1bSwgMTQsIDEuNTcsIDAuMSksXG4gICAgYm9keTE6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0UmVndWxhciwgMTYsIDEuNSwgMC4xNSksXG4gICAgYm9keTI6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0UmVndWxhciwgMTQsIDEuNDMsIDAuMTUpLFxuICAgIGJ1dHRvbjogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRNZWRpdW0sIDE0LCAxLjc1LCAwLjQsIGNhc2VBbGxDYXBzKSxcbiAgICBjYXB0aW9uOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodFJlZ3VsYXIsIDEyLCAxLjY2LCAwLjQpLFxuICAgIG92ZXJsaW5lOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodFJlZ3VsYXIsIDEyLCAyLjY2LCAxLCBjYXNlQWxsQ2FwcylcbiAgfTtcbiAgcmV0dXJuIGRlZXBtZXJnZShfZXh0ZW5kcyh7XG4gICAgaHRtbEZvbnRTaXplLFxuICAgIHB4VG9SZW0sXG4gICAgZm9udEZhbWlseSxcbiAgICBmb250U2l6ZSxcbiAgICBmb250V2VpZ2h0TGlnaHQsXG4gICAgZm9udFdlaWdodFJlZ3VsYXIsXG4gICAgZm9udFdlaWdodE1lZGl1bSxcbiAgICBmb250V2VpZ2h0Qm9sZFxuICB9LCB2YXJpYW50cyksIG90aGVyLCB7XG4gICAgY2xvbmU6IGZhbHNlIC8vIE5vIG5lZWQgdG8gY2xvbmUgZGVlcFxuXG4gIH0pO1xufSIsImNvbnN0IHNoYWRvd0tleVVtYnJhT3BhY2l0eSA9IDAuMjtcbmNvbnN0IHNoYWRvd0tleVBlbnVtYnJhT3BhY2l0eSA9IDAuMTQ7XG5jb25zdCBzaGFkb3dBbWJpZW50U2hhZG93T3BhY2l0eSA9IDAuMTI7XG5cbmZ1bmN0aW9uIGNyZWF0ZVNoYWRvdyguLi5weCkge1xuICByZXR1cm4gW2Ake3B4WzBdfXB4ICR7cHhbMV19cHggJHtweFsyXX1weCAke3B4WzNdfXB4IHJnYmEoMCwwLDAsJHtzaGFkb3dLZXlVbWJyYU9wYWNpdHl9KWAsIGAke3B4WzRdfXB4ICR7cHhbNV19cHggJHtweFs2XX1weCAke3B4WzddfXB4IHJnYmEoMCwwLDAsJHtzaGFkb3dLZXlQZW51bWJyYU9wYWNpdHl9KWAsIGAke3B4WzhdfXB4ICR7cHhbOV19cHggJHtweFsxMF19cHggJHtweFsxMV19cHggcmdiYSgwLDAsMCwke3NoYWRvd0FtYmllbnRTaGFkb3dPcGFjaXR5fSlgXS5qb2luKCcsJyk7XG59IC8vIFZhbHVlcyBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXRlcmlhbC1jb21wb25lbnRzL21hdGVyaWFsLWNvbXBvbmVudHMtd2ViL2Jsb2IvYmU4NzQ3Zjk0NTc0NjY5Y2I1ZTdhZGQxYTdjNTRmYTQxYTg5Y2VjNy9wYWNrYWdlcy9tZGMtZWxldmF0aW9uL192YXJpYWJsZXMuc2Nzc1xuXG5cbmNvbnN0IHNoYWRvd3MgPSBbJ25vbmUnLCBjcmVhdGVTaGFkb3coMCwgMiwgMSwgLTEsIDAsIDEsIDEsIDAsIDAsIDEsIDMsIDApLCBjcmVhdGVTaGFkb3coMCwgMywgMSwgLTIsIDAsIDIsIDIsIDAsIDAsIDEsIDUsIDApLCBjcmVhdGVTaGFkb3coMCwgMywgMywgLTIsIDAsIDMsIDQsIDAsIDAsIDEsIDgsIDApLCBjcmVhdGVTaGFkb3coMCwgMiwgNCwgLTEsIDAsIDQsIDUsIDAsIDAsIDEsIDEwLCAwKSwgY3JlYXRlU2hhZG93KDAsIDMsIDUsIC0xLCAwLCA1LCA4LCAwLCAwLCAxLCAxNCwgMCksIGNyZWF0ZVNoYWRvdygwLCAzLCA1LCAtMSwgMCwgNiwgMTAsIDAsIDAsIDEsIDE4LCAwKSwgY3JlYXRlU2hhZG93KDAsIDQsIDUsIC0yLCAwLCA3LCAxMCwgMSwgMCwgMiwgMTYsIDEpLCBjcmVhdGVTaGFkb3coMCwgNSwgNSwgLTMsIDAsIDgsIDEwLCAxLCAwLCAzLCAxNCwgMiksIGNyZWF0ZVNoYWRvdygwLCA1LCA2LCAtMywgMCwgOSwgMTIsIDEsIDAsIDMsIDE2LCAyKSwgY3JlYXRlU2hhZG93KDAsIDYsIDYsIC0zLCAwLCAxMCwgMTQsIDEsIDAsIDQsIDE4LCAzKSwgY3JlYXRlU2hhZG93KDAsIDYsIDcsIC00LCAwLCAxMSwgMTUsIDEsIDAsIDQsIDIwLCAzKSwgY3JlYXRlU2hhZG93KDAsIDcsIDgsIC00LCAwLCAxMiwgMTcsIDIsIDAsIDUsIDIyLCA0KSwgY3JlYXRlU2hhZG93KDAsIDcsIDgsIC00LCAwLCAxMywgMTksIDIsIDAsIDUsIDI0LCA0KSwgY3JlYXRlU2hhZG93KDAsIDcsIDksIC00LCAwLCAxNCwgMjEsIDIsIDAsIDUsIDI2LCA0KSwgY3JlYXRlU2hhZG93KDAsIDgsIDksIC01LCAwLCAxNSwgMjIsIDIsIDAsIDYsIDI4LCA1KSwgY3JlYXRlU2hhZG93KDAsIDgsIDEwLCAtNSwgMCwgMTYsIDI0LCAyLCAwLCA2LCAzMCwgNSksIGNyZWF0ZVNoYWRvdygwLCA4LCAxMSwgLTUsIDAsIDE3LCAyNiwgMiwgMCwgNiwgMzIsIDUpLCBjcmVhdGVTaGFkb3coMCwgOSwgMTEsIC01LCAwLCAxOCwgMjgsIDIsIDAsIDcsIDM0LCA2KSwgY3JlYXRlU2hhZG93KDAsIDksIDEyLCAtNiwgMCwgMTksIDI5LCAyLCAwLCA3LCAzNiwgNiksIGNyZWF0ZVNoYWRvdygwLCAxMCwgMTMsIC02LCAwLCAyMCwgMzEsIDMsIDAsIDgsIDM4LCA3KSwgY3JlYXRlU2hhZG93KDAsIDEwLCAxMywgLTYsIDAsIDIxLCAzMywgMywgMCwgOCwgNDAsIDcpLCBjcmVhdGVTaGFkb3coMCwgMTAsIDE0LCAtNiwgMCwgMjIsIDM1LCAzLCAwLCA4LCA0MiwgNyksIGNyZWF0ZVNoYWRvdygwLCAxMSwgMTQsIC03LCAwLCAyMywgMzYsIDMsIDAsIDksIDQ0LCA4KSwgY3JlYXRlU2hhZG93KDAsIDExLCAxNSwgLTcsIDAsIDI0LCAzOCwgMywgMCwgOSwgNDYsIDgpXTtcbmV4cG9ydCBkZWZhdWx0IHNoYWRvd3M7IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImR1cmF0aW9uXCIsIFwiZWFzaW5nXCIsIFwiZGVsYXlcIl07XG4vLyBGb2xsb3cgaHR0cHM6Ly9tYXRlcmlhbC5nb29nbGUuY29tL21vdGlvbi9kdXJhdGlvbi1lYXNpbmcuaHRtbCNkdXJhdGlvbi1lYXNpbmctbmF0dXJhbC1lYXNpbmctY3VydmVzXG4vLyB0byBsZWFybiB0aGUgY29udGV4dCBpbiB3aGljaCBlYWNoIGVhc2luZyBzaG91bGQgYmUgdXNlZC5cbmV4cG9ydCBjb25zdCBlYXNpbmcgPSB7XG4gIC8vIFRoaXMgaXMgdGhlIG1vc3QgY29tbW9uIGVhc2luZyBjdXJ2ZS5cbiAgZWFzZUluT3V0OiAnY3ViaWMtYmV6aWVyKDAuNCwgMCwgMC4yLCAxKScsXG4gIC8vIE9iamVjdHMgZW50ZXIgdGhlIHNjcmVlbiBhdCBmdWxsIHZlbG9jaXR5IGZyb20gb2ZmLXNjcmVlbiBhbmRcbiAgLy8gc2xvd2x5IGRlY2VsZXJhdGUgdG8gYSByZXN0aW5nIHBvaW50LlxuICBlYXNlT3V0OiAnY3ViaWMtYmV6aWVyKDAuMCwgMCwgMC4yLCAxKScsXG4gIC8vIE9iamVjdHMgbGVhdmUgdGhlIHNjcmVlbiBhdCBmdWxsIHZlbG9jaXR5LiBUaGV5IGRvIG5vdCBkZWNlbGVyYXRlIHdoZW4gb2ZmLXNjcmVlbi5cbiAgZWFzZUluOiAnY3ViaWMtYmV6aWVyKDAuNCwgMCwgMSwgMSknLFxuICAvLyBUaGUgc2hhcnAgY3VydmUgaXMgdXNlZCBieSBvYmplY3RzIHRoYXQgbWF5IHJldHVybiB0byB0aGUgc2NyZWVuIGF0IGFueSB0aW1lLlxuICBzaGFycDogJ2N1YmljLWJlemllcigwLjQsIDAsIDAuNiwgMSknXG59OyAvLyBGb2xsb3cgaHR0cHM6Ly9tMi5tYXRlcmlhbC5pby9ndWlkZWxpbmVzL21vdGlvbi9kdXJhdGlvbi1lYXNpbmcuaHRtbCNkdXJhdGlvbi1lYXNpbmctY29tbW9uLWR1cmF0aW9uc1xuLy8gdG8gbGVhcm4gd2hlbiB1c2Ugd2hhdCB0aW1pbmdcblxuZXhwb3J0IGNvbnN0IGR1cmF0aW9uID0ge1xuICBzaG9ydGVzdDogMTUwLFxuICBzaG9ydGVyOiAyMDAsXG4gIHNob3J0OiAyNTAsXG4gIC8vIG1vc3QgYmFzaWMgcmVjb21tZW5kZWQgdGltaW5nXG4gIHN0YW5kYXJkOiAzMDAsXG4gIC8vIHRoaXMgaXMgdG8gYmUgdXNlZCBpbiBjb21wbGV4IGFuaW1hdGlvbnNcbiAgY29tcGxleDogMzc1LFxuICAvLyByZWNvbW1lbmRlZCB3aGVuIHNvbWV0aGluZyBpcyBlbnRlcmluZyBzY3JlZW5cbiAgZW50ZXJpbmdTY3JlZW46IDIyNSxcbiAgLy8gcmVjb21tZW5kZWQgd2hlbiBzb21ldGhpbmcgaXMgbGVhdmluZyBzY3JlZW5cbiAgbGVhdmluZ1NjcmVlbjogMTk1XG59O1xuXG5mdW5jdGlvbiBmb3JtYXRNcyhtaWxsaXNlY29uZHMpIHtcbiAgcmV0dXJuIGAke01hdGgucm91bmQobWlsbGlzZWNvbmRzKX1tc2A7XG59XG5cbmZ1bmN0aW9uIGdldEF1dG9IZWlnaHREdXJhdGlvbihoZWlnaHQpIHtcbiAgaWYgKCFoZWlnaHQpIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIGNvbnN0IGNvbnN0YW50ID0gaGVpZ2h0IC8gMzY7IC8vIGh0dHBzOi8vd3d3LndvbGZyYW1hbHBoYS5jb20vaW5wdXQvP2k9KDQrJTJCKzE1KyorKHgrJTJGKzM2KykrKiorMC4yNSslMkIrKHgrJTJGKzM2KSslMkYrNSkrKisxMFxuXG4gIHJldHVybiBNYXRoLnJvdW5kKCg0ICsgMTUgKiBjb25zdGFudCAqKiAwLjI1ICsgY29uc3RhbnQgLyA1KSAqIDEwKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlVHJhbnNpdGlvbnMoaW5wdXRUcmFuc2l0aW9ucykge1xuICBjb25zdCBtZXJnZWRFYXNpbmcgPSBfZXh0ZW5kcyh7fSwgZWFzaW5nLCBpbnB1dFRyYW5zaXRpb25zLmVhc2luZyk7XG5cbiAgY29uc3QgbWVyZ2VkRHVyYXRpb24gPSBfZXh0ZW5kcyh7fSwgZHVyYXRpb24sIGlucHV0VHJhbnNpdGlvbnMuZHVyYXRpb24pO1xuXG4gIGNvbnN0IGNyZWF0ZSA9IChwcm9wcyA9IFsnYWxsJ10sIG9wdGlvbnMgPSB7fSkgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIGR1cmF0aW9uOiBkdXJhdGlvbk9wdGlvbiA9IG1lcmdlZER1cmF0aW9uLnN0YW5kYXJkLFxuICAgICAgZWFzaW5nOiBlYXNpbmdPcHRpb24gPSBtZXJnZWRFYXNpbmcuZWFzZUluT3V0LFxuICAgICAgZGVsYXkgPSAwXG4gICAgfSA9IG9wdGlvbnMsXG4gICAgICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShvcHRpb25zLCBfZXhjbHVkZWQpO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGNvbnN0IGlzU3RyaW5nID0gdmFsdWUgPT4gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJzsgLy8gSUUxMSBzdXBwb3J0LCByZXBsYWNlIHdpdGggTnVtYmVyLmlzTmFOXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1nbG9iYWxzXG5cblxuICAgICAgY29uc3QgaXNOdW1iZXIgPSB2YWx1ZSA9PiAhaXNOYU4ocGFyc2VGbG9hdCh2YWx1ZSkpO1xuXG4gICAgICBpZiAoIWlzU3RyaW5nKHByb3BzKSAmJiAhQXJyYXkuaXNBcnJheShwcm9wcykpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignTVVJOiBBcmd1bWVudCBcInByb3BzXCIgbXVzdCBiZSBhIHN0cmluZyBvciBBcnJheS4nKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFpc051bWJlcihkdXJhdGlvbk9wdGlvbikgJiYgIWlzU3RyaW5nKGR1cmF0aW9uT3B0aW9uKSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKGBNVUk6IEFyZ3VtZW50IFwiZHVyYXRpb25cIiBtdXN0IGJlIGEgbnVtYmVyIG9yIGEgc3RyaW5nIGJ1dCBmb3VuZCAke2R1cmF0aW9uT3B0aW9ufS5gKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFpc1N0cmluZyhlYXNpbmdPcHRpb24pKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ01VSTogQXJndW1lbnQgXCJlYXNpbmdcIiBtdXN0IGJlIGEgc3RyaW5nLicpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWlzTnVtYmVyKGRlbGF5KSAmJiAhaXNTdHJpbmcoZGVsYXkpKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ01VSTogQXJndW1lbnQgXCJkZWxheVwiIG11c3QgYmUgYSBudW1iZXIgb3IgYSBzdHJpbmcuJyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChPYmplY3Qua2V5cyhvdGhlcikubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYE1VSTogVW5yZWNvZ25pemVkIGFyZ3VtZW50KHMpIFske09iamVjdC5rZXlzKG90aGVyKS5qb2luKCcsJyl9XS5gKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gKEFycmF5LmlzQXJyYXkocHJvcHMpID8gcHJvcHMgOiBbcHJvcHNdKS5tYXAoYW5pbWF0ZWRQcm9wID0+IGAke2FuaW1hdGVkUHJvcH0gJHt0eXBlb2YgZHVyYXRpb25PcHRpb24gPT09ICdzdHJpbmcnID8gZHVyYXRpb25PcHRpb24gOiBmb3JtYXRNcyhkdXJhdGlvbk9wdGlvbil9ICR7ZWFzaW5nT3B0aW9ufSAke3R5cGVvZiBkZWxheSA9PT0gJ3N0cmluZycgPyBkZWxheSA6IGZvcm1hdE1zKGRlbGF5KX1gKS5qb2luKCcsJyk7XG4gIH07XG5cbiAgcmV0dXJuIF9leHRlbmRzKHtcbiAgICBnZXRBdXRvSGVpZ2h0RHVyYXRpb24sXG4gICAgY3JlYXRlXG4gIH0sIGlucHV0VHJhbnNpdGlvbnMsIHtcbiAgICBlYXNpbmc6IG1lcmdlZEVhc2luZyxcbiAgICBkdXJhdGlvbjogbWVyZ2VkRHVyYXRpb25cbiAgfSk7XG59IiwiLy8gV2UgbmVlZCB0byBjZW50cmFsaXplIHRoZSB6SW5kZXggZGVmaW5pdGlvbnMgYXMgdGhleSB3b3JrXG4vLyBsaWtlIGdsb2JhbCB2YWx1ZXMgaW4gdGhlIGJyb3dzZXIuXG5jb25zdCB6SW5kZXggPSB7XG4gIG1vYmlsZVN0ZXBwZXI6IDEwMDAsXG4gIGZhYjogMTA1MCxcbiAgc3BlZWREaWFsOiAxMDUwLFxuICBhcHBCYXI6IDExMDAsXG4gIGRyYXdlcjogMTIwMCxcbiAgbW9kYWw6IDEzMDAsXG4gIHNuYWNrYmFyOiAxNDAwLFxuICB0b29sdGlwOiAxNTAwXG59O1xuZXhwb3J0IGRlZmF1bHQgekluZGV4OyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgeyBmb3JtYXRNdWlFcnJvck1lc3NhZ2UgYXMgX2Zvcm1hdE11aUVycm9yTWVzc2FnZSB9IGZyb20gXCJAbXVpL3V0aWxzXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJicmVha3BvaW50c1wiLCBcIm1peGluc1wiLCBcInNwYWNpbmdcIiwgXCJwYWxldHRlXCIsIFwidHJhbnNpdGlvbnNcIiwgXCJ0eXBvZ3JhcGh5XCIsIFwic2hhcGVcIl07XG5pbXBvcnQgeyBkZWVwbWVyZ2UgfSBmcm9tICdAbXVpL3V0aWxzJztcbmltcG9ydCB7IGNyZWF0ZVRoZW1lIGFzIHN5c3RlbUNyZWF0ZVRoZW1lIH0gZnJvbSAnQG11aS9zeXN0ZW0nO1xuaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzIGZyb20gJy4uL2dlbmVyYXRlVXRpbGl0eUNsYXNzJztcbmltcG9ydCBjcmVhdGVNaXhpbnMgZnJvbSAnLi9jcmVhdGVNaXhpbnMnO1xuaW1wb3J0IGNyZWF0ZVBhbGV0dGUgZnJvbSAnLi9jcmVhdGVQYWxldHRlJztcbmltcG9ydCBjcmVhdGVUeXBvZ3JhcGh5IGZyb20gJy4vY3JlYXRlVHlwb2dyYXBoeSc7XG5pbXBvcnQgc2hhZG93cyBmcm9tICcuL3NoYWRvd3MnO1xuaW1wb3J0IGNyZWF0ZVRyYW5zaXRpb25zIGZyb20gJy4vY3JlYXRlVHJhbnNpdGlvbnMnO1xuaW1wb3J0IHpJbmRleCBmcm9tICcuL3pJbmRleCc7XG5cbmZ1bmN0aW9uIGNyZWF0ZVRoZW1lKG9wdGlvbnMgPSB7fSwgLi4uYXJncykge1xuICBjb25zdCB7XG4gICAgbWl4aW5zOiBtaXhpbnNJbnB1dCA9IHt9LFxuICAgIHBhbGV0dGU6IHBhbGV0dGVJbnB1dCA9IHt9LFxuICAgIHRyYW5zaXRpb25zOiB0cmFuc2l0aW9uc0lucHV0ID0ge30sXG4gICAgdHlwb2dyYXBoeTogdHlwb2dyYXBoeUlucHV0ID0ge31cbiAgfSA9IG9wdGlvbnMsXG4gICAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uob3B0aW9ucywgX2V4Y2x1ZGVkKTtcblxuICBpZiAob3B0aW9ucy52YXJzKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGBNVUk6IFxcYHZhcnNcXGAgaXMgYSBwcml2YXRlIGZpZWxkIHVzZWQgZm9yIENTUyB2YXJpYWJsZXMgc3VwcG9ydC5cblBsZWFzZSB1c2UgYW5vdGhlciBuYW1lLmAgOiBfZm9ybWF0TXVpRXJyb3JNZXNzYWdlKDE4KSk7XG4gIH1cblxuICBjb25zdCBwYWxldHRlID0gY3JlYXRlUGFsZXR0ZShwYWxldHRlSW5wdXQpO1xuICBjb25zdCBzeXN0ZW1UaGVtZSA9IHN5c3RlbUNyZWF0ZVRoZW1lKG9wdGlvbnMpO1xuICBsZXQgbXVpVGhlbWUgPSBkZWVwbWVyZ2Uoc3lzdGVtVGhlbWUsIHtcbiAgICBtaXhpbnM6IGNyZWF0ZU1peGlucyhzeXN0ZW1UaGVtZS5icmVha3BvaW50cywgbWl4aW5zSW5wdXQpLFxuICAgIHBhbGV0dGUsXG4gICAgLy8gRG9uJ3QgdXNlIFsuLi5zaGFkb3dzXSB1bnRpbCB5b3UndmUgdmVyaWZpZWQgaXRzIHRyYW5zcGlsZWQgY29kZSBpcyBub3QgaW52b2tpbmcgdGhlIGl0ZXJhdG9yIHByb3RvY29sLlxuICAgIHNoYWRvd3M6IHNoYWRvd3Muc2xpY2UoKSxcbiAgICB0eXBvZ3JhcGh5OiBjcmVhdGVUeXBvZ3JhcGh5KHBhbGV0dGUsIHR5cG9ncmFwaHlJbnB1dCksXG4gICAgdHJhbnNpdGlvbnM6IGNyZWF0ZVRyYW5zaXRpb25zKHRyYW5zaXRpb25zSW5wdXQpLFxuICAgIHpJbmRleDogX2V4dGVuZHMoe30sIHpJbmRleClcbiAgfSk7XG4gIG11aVRoZW1lID0gZGVlcG1lcmdlKG11aVRoZW1lLCBvdGhlcik7XG4gIG11aVRoZW1lID0gYXJncy5yZWR1Y2UoKGFjYywgYXJndW1lbnQpID0+IGRlZXBtZXJnZShhY2MsIGFyZ3VtZW50KSwgbXVpVGhlbWUpO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgY29uc3Qgc3RhdGVDbGFzc2VzID0gWydhY3RpdmUnLCAnY2hlY2tlZCcsICdjb21wbGV0ZWQnLCAnZGlzYWJsZWQnLCAnZXJyb3InLCAnZXhwYW5kZWQnLCAnZm9jdXNlZCcsICdmb2N1c1Zpc2libGUnLCAncmVxdWlyZWQnLCAnc2VsZWN0ZWQnXTtcblxuICAgIGNvbnN0IHRyYXZlcnNlID0gKG5vZGUsIGNvbXBvbmVudCkgPT4ge1xuICAgICAgbGV0IGtleTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGd1YXJkLWZvci1pbiwgbm8tcmVzdHJpY3RlZC1zeW50YXhcblxuICAgICAgZm9yIChrZXkgaW4gbm9kZSkge1xuICAgICAgICBjb25zdCBjaGlsZCA9IG5vZGVba2V5XTtcblxuICAgICAgICBpZiAoc3RhdGVDbGFzc2VzLmluZGV4T2Yoa2V5KSAhPT0gLTEgJiYgT2JqZWN0LmtleXMoY2hpbGQpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgY29uc3Qgc3RhdGVDbGFzcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzKCcnLCBrZXkpO1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihbYE1VSTogVGhlIFxcYCR7Y29tcG9uZW50fVxcYCBjb21wb25lbnQgaW5jcmVhc2VzIGAgKyBgdGhlIENTUyBzcGVjaWZpY2l0eSBvZiB0aGUgXFxgJHtrZXl9XFxgIGludGVybmFsIHN0YXRlLmAsICdZb3UgY2FuIG5vdCBvdmVycmlkZSBpdCBsaWtlIHRoaXM6ICcsIEpTT04uc3RyaW5naWZ5KG5vZGUsIG51bGwsIDIpLCAnJywgYEluc3RlYWQsIHlvdSBuZWVkIHRvIHVzZSB0aGUgJyYuJHtzdGF0ZUNsYXNzfScgc3ludGF4OmAsIEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgICAgcm9vdDoge1xuICAgICAgICAgICAgICAgIFtgJi4ke3N0YXRlQ2xhc3N9YF06IGNoaWxkXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIG51bGwsIDIpLCAnJywgJ2h0dHBzOi8vbXVpLmNvbS9yL3N0YXRlLWNsYXNzZXMtZ3VpZGUnXS5qb2luKCdcXG4nKSk7XG4gICAgICAgICAgfSAvLyBSZW1vdmUgdGhlIHN0eWxlIHRvIHByZXZlbnQgZ2xvYmFsIGNvbmZsaWN0cy5cblxuXG4gICAgICAgICAgbm9kZVtrZXldID0ge307XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgT2JqZWN0LmtleXMobXVpVGhlbWUuY29tcG9uZW50cykuZm9yRWFjaChjb21wb25lbnQgPT4ge1xuICAgICAgY29uc3Qgc3R5bGVPdmVycmlkZXMgPSBtdWlUaGVtZS5jb21wb25lbnRzW2NvbXBvbmVudF0uc3R5bGVPdmVycmlkZXM7XG5cbiAgICAgIGlmIChzdHlsZU92ZXJyaWRlcyAmJiBjb21wb25lbnQuaW5kZXhPZignTXVpJykgPT09IDApIHtcbiAgICAgICAgdHJhdmVyc2Uoc3R5bGVPdmVycmlkZXMsIGNvbXBvbmVudCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gbXVpVGhlbWU7XG59XG5cbmxldCB3YXJuZWRPbmNlID0gZmFsc2U7XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlTXVpVGhlbWUoLi4uYXJncykge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmICghd2FybmVkT25jZSkge1xuICAgICAgd2FybmVkT25jZSA9IHRydWU7XG4gICAgICBjb25zb2xlLmVycm9yKFsnTVVJOiB0aGUgY3JlYXRlTXVpVGhlbWUgZnVuY3Rpb24gd2FzIHJlbmFtZWQgdG8gY3JlYXRlVGhlbWUuJywgJycsIFwiWW91IHNob3VsZCB1c2UgYGltcG9ydCB7IGNyZWF0ZVRoZW1lIH0gZnJvbSAnQG11aS9tYXRlcmlhbC9zdHlsZXMnYFwiXS5qb2luKCdcXG4nKSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGNyZWF0ZVRoZW1lKC4uLmFyZ3MpO1xufVxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlVGhlbWU7IiwiaW1wb3J0IGNyZWF0ZVRoZW1lIGZyb20gJy4vY3JlYXRlVGhlbWUnO1xuY29uc3QgZGVmYXVsdFRoZW1lID0gY3JlYXRlVGhlbWUoKTtcbmV4cG9ydCBkZWZhdWx0IGRlZmF1bHRUaGVtZTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZU1peGlucyhicmVha3BvaW50cywgbWl4aW5zKSB7XG4gIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgdG9vbGJhcjoge1xuICAgICAgbWluSGVpZ2h0OiA1NixcbiAgICAgIFticmVha3BvaW50cy51cCgneHMnKV06IHtcbiAgICAgICAgJ0BtZWRpYSAob3JpZW50YXRpb246IGxhbmRzY2FwZSknOiB7XG4gICAgICAgICAgbWluSGVpZ2h0OiA0OFxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgW2JyZWFrcG9pbnRzLnVwKCdzbScpXToge1xuICAgICAgICBtaW5IZWlnaHQ6IDY0XG4gICAgICB9XG4gICAgfVxuICB9LCBtaXhpbnMpO1xufSIsImltcG9ydCB7IHVzZVRoZW1lUHJvcHMgYXMgc3lzdGVtVXNlVGhlbWVQcm9wcyB9IGZyb20gJ0BtdWkvc3lzdGVtJztcbmltcG9ydCBkZWZhdWx0VGhlbWUgZnJvbSAnLi9kZWZhdWx0VGhlbWUnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlVGhlbWVQcm9wcyh7XG4gIHByb3BzLFxuICBuYW1lXG59KSB7XG4gIHJldHVybiBzeXN0ZW1Vc2VUaGVtZVByb3BzKHtcbiAgICBwcm9wcyxcbiAgICBuYW1lLFxuICAgIGRlZmF1bHRUaGVtZVxuICB9KTtcbn0iLCJpbXBvcnQgZ2V0VGhlbWVQcm9wcyBmcm9tICcuL2dldFRoZW1lUHJvcHMnO1xuaW1wb3J0IHVzZVRoZW1lIGZyb20gJy4uL3VzZVRoZW1lJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZVRoZW1lUHJvcHMoe1xuICBwcm9wcyxcbiAgbmFtZSxcbiAgZGVmYXVsdFRoZW1lXG59KSB7XG4gIGNvbnN0IHRoZW1lID0gdXNlVGhlbWUoZGVmYXVsdFRoZW1lKTtcbiAgY29uc3QgbWVyZ2VkUHJvcHMgPSBnZXRUaGVtZVByb3BzKHtcbiAgICB0aGVtZSxcbiAgICBuYW1lLFxuICAgIHByb3BzXG4gIH0pO1xuICByZXR1cm4gbWVyZ2VkUHJvcHM7XG59IiwiaW1wb3J0IHsgaW50ZXJuYWxfcmVzb2x2ZVByb3BzIGFzIHJlc29sdmVQcm9wcyB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VGhlbWVQcm9wcyhwYXJhbXMpIHtcbiAgY29uc3Qge1xuICAgIHRoZW1lLFxuICAgIG5hbWUsXG4gICAgcHJvcHNcbiAgfSA9IHBhcmFtcztcblxuICBpZiAoIXRoZW1lIHx8ICF0aGVtZS5jb21wb25lbnRzIHx8ICF0aGVtZS5jb21wb25lbnRzW25hbWVdIHx8ICF0aGVtZS5jb21wb25lbnRzW25hbWVdLmRlZmF1bHRQcm9wcykge1xuICAgIHJldHVybiBwcm9wcztcbiAgfVxuXG4gIHJldHVybiByZXNvbHZlUHJvcHModGhlbWUuY29tcG9uZW50c1tuYW1lXS5kZWZhdWx0UHJvcHMsIHByb3BzKTtcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcblxuLyoqXG4gKiBBZGQga2V5cywgdmFsdWVzIG9mIGBkZWZhdWx0UHJvcHNgIHRoYXQgZG9lcyBub3QgZXhpc3QgaW4gYHByb3BzYFxuICogQHBhcmFtIHtvYmplY3R9IGRlZmF1bHRQcm9wc1xuICogQHBhcmFtIHtvYmplY3R9IHByb3BzXG4gKiBAcmV0dXJucyB7b2JqZWN0fSByZXNvbHZlZCBwcm9wc1xuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZXNvbHZlUHJvcHMoZGVmYXVsdFByb3BzLCBwcm9wcykge1xuICBjb25zdCBvdXRwdXQgPSBfZXh0ZW5kcyh7fSwgcHJvcHMpO1xuXG4gIE9iamVjdC5rZXlzKGRlZmF1bHRQcm9wcykuZm9yRWFjaChwcm9wTmFtZSA9PiB7XG4gICAgaWYgKG91dHB1dFtwcm9wTmFtZV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgb3V0cHV0W3Byb3BOYW1lXSA9IGRlZmF1bHRQcm9wc1twcm9wTmFtZV07XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIG91dHB1dDtcbn0iLCJmdW5jdGlvbiBtZW1vaXplKGZuKSB7XG4gIHZhciBjYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHJldHVybiBmdW5jdGlvbiAoYXJnKSB7XG4gICAgaWYgKGNhY2hlW2FyZ10gPT09IHVuZGVmaW5lZCkgY2FjaGVbYXJnXSA9IGZuKGFyZyk7XG4gICAgcmV0dXJuIGNhY2hlW2FyZ107XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IG1lbW9pemU7XG4iLCJpbXBvcnQgbWVtb2l6ZSBmcm9tICdAZW1vdGlvbi9tZW1vaXplJztcblxudmFyIHJlYWN0UHJvcHNSZWdleCA9IC9eKChjaGlsZHJlbnxkYW5nZXJvdXNseVNldElubmVySFRNTHxrZXl8cmVmfGF1dG9Gb2N1c3xkZWZhdWx0VmFsdWV8ZGVmYXVsdENoZWNrZWR8aW5uZXJIVE1MfHN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ3xzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmd8dmFsdWVMaW5rfGFiYnJ8YWNjZXB0fGFjY2VwdENoYXJzZXR8YWNjZXNzS2V5fGFjdGlvbnxhbGxvd3xhbGxvd1VzZXJNZWRpYXxhbGxvd1BheW1lbnRSZXF1ZXN0fGFsbG93RnVsbFNjcmVlbnxhbGxvd1RyYW5zcGFyZW5jeXxhbHR8YXN5bmN8YXV0b0NvbXBsZXRlfGF1dG9QbGF5fGNhcHR1cmV8Y2VsbFBhZGRpbmd8Y2VsbFNwYWNpbmd8Y2hhbGxlbmdlfGNoYXJTZXR8Y2hlY2tlZHxjaXRlfGNsYXNzSUR8Y2xhc3NOYW1lfGNvbHN8Y29sU3Bhbnxjb250ZW50fGNvbnRlbnRFZGl0YWJsZXxjb250ZXh0TWVudXxjb250cm9sc3xjb250cm9sc0xpc3R8Y29vcmRzfGNyb3NzT3JpZ2lufGRhdGF8ZGF0ZVRpbWV8ZGVjb2Rpbmd8ZGVmYXVsdHxkZWZlcnxkaXJ8ZGlzYWJsZWR8ZGlzYWJsZVBpY3R1cmVJblBpY3R1cmV8ZG93bmxvYWR8ZHJhZ2dhYmxlfGVuY1R5cGV8ZW50ZXJLZXlIaW50fGZvcm18Zm9ybUFjdGlvbnxmb3JtRW5jVHlwZXxmb3JtTWV0aG9kfGZvcm1Ob1ZhbGlkYXRlfGZvcm1UYXJnZXR8ZnJhbWVCb3JkZXJ8aGVhZGVyc3xoZWlnaHR8aGlkZGVufGhpZ2h8aHJlZnxocmVmTGFuZ3xodG1sRm9yfGh0dHBFcXVpdnxpZHxpbnB1dE1vZGV8aW50ZWdyaXR5fGlzfGtleVBhcmFtc3xrZXlUeXBlfGtpbmR8bGFiZWx8bGFuZ3xsaXN0fGxvYWRpbmd8bG9vcHxsb3d8bWFyZ2luSGVpZ2h0fG1hcmdpbldpZHRofG1heHxtYXhMZW5ndGh8bWVkaWF8bWVkaWFHcm91cHxtZXRob2R8bWlufG1pbkxlbmd0aHxtdWx0aXBsZXxtdXRlZHxuYW1lfG5vbmNlfG5vVmFsaWRhdGV8b3BlbnxvcHRpbXVtfHBhdHRlcm58cGxhY2Vob2xkZXJ8cGxheXNJbmxpbmV8cG9zdGVyfHByZWxvYWR8cHJvZmlsZXxyYWRpb0dyb3VwfHJlYWRPbmx5fHJlZmVycmVyUG9saWN5fHJlbHxyZXF1aXJlZHxyZXZlcnNlZHxyb2xlfHJvd3N8cm93U3BhbnxzYW5kYm94fHNjb3BlfHNjb3BlZHxzY3JvbGxpbmd8c2VhbWxlc3N8c2VsZWN0ZWR8c2hhcGV8c2l6ZXxzaXplc3xzbG90fHNwYW58c3BlbGxDaGVja3xzcmN8c3JjRG9jfHNyY0xhbmd8c3JjU2V0fHN0YXJ0fHN0ZXB8c3R5bGV8c3VtbWFyeXx0YWJJbmRleHx0YXJnZXR8dGl0bGV8dHJhbnNsYXRlfHR5cGV8dXNlTWFwfHZhbHVlfHdpZHRofHdtb2RlfHdyYXB8YWJvdXR8ZGF0YXR5cGV8aW5saXN0fHByZWZpeHxwcm9wZXJ0eXxyZXNvdXJjZXx0eXBlb2Z8dm9jYWJ8YXV0b0NhcGl0YWxpemV8YXV0b0NvcnJlY3R8YXV0b1NhdmV8Y29sb3J8aW5jcmVtZW50YWx8ZmFsbGJhY2t8aW5lcnR8aXRlbVByb3B8aXRlbVNjb3BlfGl0ZW1UeXBlfGl0ZW1JRHxpdGVtUmVmfG9ufG9wdGlvbnxyZXN1bHRzfHNlY3VyaXR5fHVuc2VsZWN0YWJsZXxhY2NlbnRIZWlnaHR8YWNjdW11bGF0ZXxhZGRpdGl2ZXxhbGlnbm1lbnRCYXNlbGluZXxhbGxvd1Jlb3JkZXJ8YWxwaGFiZXRpY3xhbXBsaXR1ZGV8YXJhYmljRm9ybXxhc2NlbnR8YXR0cmlidXRlTmFtZXxhdHRyaWJ1dGVUeXBlfGF1dG9SZXZlcnNlfGF6aW11dGh8YmFzZUZyZXF1ZW5jeXxiYXNlbGluZVNoaWZ0fGJhc2VQcm9maWxlfGJib3h8YmVnaW58Ymlhc3xieXxjYWxjTW9kZXxjYXBIZWlnaHR8Y2xpcHxjbGlwUGF0aFVuaXRzfGNsaXBQYXRofGNsaXBSdWxlfGNvbG9ySW50ZXJwb2xhdGlvbnxjb2xvckludGVycG9sYXRpb25GaWx0ZXJzfGNvbG9yUHJvZmlsZXxjb2xvclJlbmRlcmluZ3xjb250ZW50U2NyaXB0VHlwZXxjb250ZW50U3R5bGVUeXBlfGN1cnNvcnxjeHxjeXxkfGRlY2VsZXJhdGV8ZGVzY2VudHxkaWZmdXNlQ29uc3RhbnR8ZGlyZWN0aW9ufGRpc3BsYXl8ZGl2aXNvcnxkb21pbmFudEJhc2VsaW5lfGR1cnxkeHxkeXxlZGdlTW9kZXxlbGV2YXRpb258ZW5hYmxlQmFja2dyb3VuZHxlbmR8ZXhwb25lbnR8ZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZHxmaWxsfGZpbGxPcGFjaXR5fGZpbGxSdWxlfGZpbHRlcnxmaWx0ZXJSZXN8ZmlsdGVyVW5pdHN8Zmxvb2RDb2xvcnxmbG9vZE9wYWNpdHl8Zm9jdXNhYmxlfGZvbnRGYW1pbHl8Zm9udFNpemV8Zm9udFNpemVBZGp1c3R8Zm9udFN0cmV0Y2h8Zm9udFN0eWxlfGZvbnRWYXJpYW50fGZvbnRXZWlnaHR8Zm9ybWF0fGZyb218ZnJ8Znh8Znl8ZzF8ZzJ8Z2x5cGhOYW1lfGdseXBoT3JpZW50YXRpb25Ib3Jpem9udGFsfGdseXBoT3JpZW50YXRpb25WZXJ0aWNhbHxnbHlwaFJlZnxncmFkaWVudFRyYW5zZm9ybXxncmFkaWVudFVuaXRzfGhhbmdpbmd8aG9yaXpBZHZYfGhvcml6T3JpZ2luWHxpZGVvZ3JhcGhpY3xpbWFnZVJlbmRlcmluZ3xpbnxpbjJ8aW50ZXJjZXB0fGt8azF8azJ8azN8azR8a2VybmVsTWF0cml4fGtlcm5lbFVuaXRMZW5ndGh8a2VybmluZ3xrZXlQb2ludHN8a2V5U3BsaW5lc3xrZXlUaW1lc3xsZW5ndGhBZGp1c3R8bGV0dGVyU3BhY2luZ3xsaWdodGluZ0NvbG9yfGxpbWl0aW5nQ29uZUFuZ2xlfGxvY2FsfG1hcmtlckVuZHxtYXJrZXJNaWR8bWFya2VyU3RhcnR8bWFya2VySGVpZ2h0fG1hcmtlclVuaXRzfG1hcmtlcldpZHRofG1hc2t8bWFza0NvbnRlbnRVbml0c3xtYXNrVW5pdHN8bWF0aGVtYXRpY2FsfG1vZGV8bnVtT2N0YXZlc3xvZmZzZXR8b3BhY2l0eXxvcGVyYXRvcnxvcmRlcnxvcmllbnR8b3JpZW50YXRpb258b3JpZ2lufG92ZXJmbG93fG92ZXJsaW5lUG9zaXRpb258b3ZlcmxpbmVUaGlja25lc3N8cGFub3NlMXxwYWludE9yZGVyfHBhdGhMZW5ndGh8cGF0dGVybkNvbnRlbnRVbml0c3xwYXR0ZXJuVHJhbnNmb3JtfHBhdHRlcm5Vbml0c3xwb2ludGVyRXZlbnRzfHBvaW50c3xwb2ludHNBdFh8cG9pbnRzQXRZfHBvaW50c0F0WnxwcmVzZXJ2ZUFscGhhfHByZXNlcnZlQXNwZWN0UmF0aW98cHJpbWl0aXZlVW5pdHN8cnxyYWRpdXN8cmVmWHxyZWZZfHJlbmRlcmluZ0ludGVudHxyZXBlYXRDb3VudHxyZXBlYXREdXJ8cmVxdWlyZWRFeHRlbnNpb25zfHJlcXVpcmVkRmVhdHVyZXN8cmVzdGFydHxyZXN1bHR8cm90YXRlfHJ4fHJ5fHNjYWxlfHNlZWR8c2hhcGVSZW5kZXJpbmd8c2xvcGV8c3BhY2luZ3xzcGVjdWxhckNvbnN0YW50fHNwZWN1bGFyRXhwb25lbnR8c3BlZWR8c3ByZWFkTWV0aG9kfHN0YXJ0T2Zmc2V0fHN0ZERldmlhdGlvbnxzdGVtaHxzdGVtdnxzdGl0Y2hUaWxlc3xzdG9wQ29sb3J8c3RvcE9wYWNpdHl8c3RyaWtldGhyb3VnaFBvc2l0aW9ufHN0cmlrZXRocm91Z2hUaGlja25lc3N8c3RyaW5nfHN0cm9rZXxzdHJva2VEYXNoYXJyYXl8c3Ryb2tlRGFzaG9mZnNldHxzdHJva2VMaW5lY2FwfHN0cm9rZUxpbmVqb2lufHN0cm9rZU1pdGVybGltaXR8c3Ryb2tlT3BhY2l0eXxzdHJva2VXaWR0aHxzdXJmYWNlU2NhbGV8c3lzdGVtTGFuZ3VhZ2V8dGFibGVWYWx1ZXN8dGFyZ2V0WHx0YXJnZXRZfHRleHRBbmNob3J8dGV4dERlY29yYXRpb258dGV4dFJlbmRlcmluZ3x0ZXh0TGVuZ3RofHRvfHRyYW5zZm9ybXx1MXx1Mnx1bmRlcmxpbmVQb3NpdGlvbnx1bmRlcmxpbmVUaGlja25lc3N8dW5pY29kZXx1bmljb2RlQmlkaXx1bmljb2RlUmFuZ2V8dW5pdHNQZXJFbXx2QWxwaGFiZXRpY3x2SGFuZ2luZ3x2SWRlb2dyYXBoaWN8dk1hdGhlbWF0aWNhbHx2YWx1ZXN8dmVjdG9yRWZmZWN0fHZlcnNpb258dmVydEFkdll8dmVydE9yaWdpblh8dmVydE9yaWdpbll8dmlld0JveHx2aWV3VGFyZ2V0fHZpc2liaWxpdHl8d2lkdGhzfHdvcmRTcGFjaW5nfHdyaXRpbmdNb2RlfHh8eEhlaWdodHx4MXx4Mnx4Q2hhbm5lbFNlbGVjdG9yfHhsaW5rQWN0dWF0ZXx4bGlua0FyY3JvbGV8eGxpbmtIcmVmfHhsaW5rUm9sZXx4bGlua1Nob3d8eGxpbmtUaXRsZXx4bGlua1R5cGV8eG1sQmFzZXx4bWxuc3x4bWxuc1hsaW5rfHhtbExhbmd8eG1sU3BhY2V8eXx5MXx5Mnx5Q2hhbm5lbFNlbGVjdG9yfHp8em9vbUFuZFBhbnxmb3J8Y2xhc3N8YXV0b2ZvY3VzKXwoKFtEZF1bQWFdW1R0XVtBYV18W0FhXVtScl1bSWldW0FhXXx4KS0uKikpJC87IC8vIGh0dHBzOi8vZXNiZW5jaC5jb20vYmVuY2gvNWJmZWU2OGE0Y2Q3ZTYwMDllZjYxZDIzXG5cbnZhciBpc1Byb3BWYWxpZCA9IC8qICNfX1BVUkVfXyAqL21lbW9pemUoZnVuY3Rpb24gKHByb3ApIHtcbiAgcmV0dXJuIHJlYWN0UHJvcHNSZWdleC50ZXN0KHByb3ApIHx8IHByb3AuY2hhckNvZGVBdCgwKSA9PT0gMTExXG4gIC8qIG8gKi9cbiAgJiYgcHJvcC5jaGFyQ29kZUF0KDEpID09PSAxMTBcbiAgLyogbiAqL1xuICAmJiBwcm9wLmNoYXJDb2RlQXQoMikgPCA5MTtcbn1cbi8qIForMSAqL1xuKTtcblxuZXhwb3J0IGRlZmF1bHQgaXNQcm9wVmFsaWQ7XG4iLCIvKlxuXG5CYXNlZCBvZmYgZ2xhbW9yJ3MgU3R5bGVTaGVldCwgdGhhbmtzIFN1bmlsIOKdpO+4j1xuXG5oaWdoIHBlcmZvcm1hbmNlIFN0eWxlU2hlZXQgZm9yIGNzcy1pbi1qcyBzeXN0ZW1zXG5cbi0gdXNlcyBtdWx0aXBsZSBzdHlsZSB0YWdzIGJlaGluZCB0aGUgc2NlbmVzIGZvciBtaWxsaW9ucyBvZiBydWxlc1xuLSB1c2VzIGBpbnNlcnRSdWxlYCBmb3IgYXBwZW5kaW5nIGluIHByb2R1Y3Rpb24gZm9yICptdWNoKiBmYXN0ZXIgcGVyZm9ybWFuY2VcblxuLy8gdXNhZ2VcblxuaW1wb3J0IHsgU3R5bGVTaGVldCB9IGZyb20gJ0BlbW90aW9uL3NoZWV0J1xuXG5sZXQgc3R5bGVTaGVldCA9IG5ldyBTdHlsZVNoZWV0KHsga2V5OiAnJywgY29udGFpbmVyOiBkb2N1bWVudC5oZWFkIH0pXG5cbnN0eWxlU2hlZXQuaW5zZXJ0KCcjYm94IHsgYm9yZGVyOiAxcHggc29saWQgcmVkOyB9Jylcbi0gYXBwZW5kcyBhIGNzcyBydWxlIGludG8gdGhlIHN0eWxlc2hlZXRcblxuc3R5bGVTaGVldC5mbHVzaCgpXG4tIGVtcHRpZXMgdGhlIHN0eWxlc2hlZXQgb2YgYWxsIGl0cyBjb250ZW50c1xuXG4qL1xuLy8gJEZsb3dGaXhNZVxuZnVuY3Rpb24gc2hlZXRGb3JUYWcodGFnKSB7XG4gIGlmICh0YWcuc2hlZXQpIHtcbiAgICAvLyAkRmxvd0ZpeE1lXG4gICAgcmV0dXJuIHRhZy5zaGVldDtcbiAgfSAvLyB0aGlzIHdlaXJkbmVzcyBicm91Z2h0IHRvIHlvdSBieSBmaXJlZm94XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cblxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgZG9jdW1lbnQuc3R5bGVTaGVldHMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoZG9jdW1lbnQuc3R5bGVTaGVldHNbaV0ub3duZXJOb2RlID09PSB0YWcpIHtcbiAgICAgIC8vICRGbG93Rml4TWVcbiAgICAgIHJldHVybiBkb2N1bWVudC5zdHlsZVNoZWV0c1tpXTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlU3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIHRhZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gIHRhZy5zZXRBdHRyaWJ1dGUoJ2RhdGEtZW1vdGlvbicsIG9wdGlvbnMua2V5KTtcblxuICBpZiAob3B0aW9ucy5ub25jZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgdGFnLnNldEF0dHJpYnV0ZSgnbm9uY2UnLCBvcHRpb25zLm5vbmNlKTtcbiAgfVxuXG4gIHRhZy5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnJykpO1xuICB0YWcuc2V0QXR0cmlidXRlKCdkYXRhLXMnLCAnJyk7XG4gIHJldHVybiB0YWc7XG59XG5cbnZhciBTdHlsZVNoZWV0ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgLy8gVXNpbmcgTm9kZSBpbnN0ZWFkIG9mIEhUTUxFbGVtZW50IHNpbmNlIGNvbnRhaW5lciBtYXkgYmUgYSBTaGFkb3dSb290XG4gIGZ1bmN0aW9uIFN0eWxlU2hlZXQob3B0aW9ucykge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB0aGlzLl9pbnNlcnRUYWcgPSBmdW5jdGlvbiAodGFnKSB7XG4gICAgICB2YXIgYmVmb3JlO1xuXG4gICAgICBpZiAoX3RoaXMudGFncy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgaWYgKF90aGlzLmluc2VydGlvblBvaW50KSB7XG4gICAgICAgICAgYmVmb3JlID0gX3RoaXMuaW5zZXJ0aW9uUG9pbnQubmV4dFNpYmxpbmc7XG4gICAgICAgIH0gZWxzZSBpZiAoX3RoaXMucHJlcGVuZCkge1xuICAgICAgICAgIGJlZm9yZSA9IF90aGlzLmNvbnRhaW5lci5maXJzdENoaWxkO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGJlZm9yZSA9IF90aGlzLmJlZm9yZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYmVmb3JlID0gX3RoaXMudGFnc1tfdGhpcy50YWdzLmxlbmd0aCAtIDFdLm5leHRTaWJsaW5nO1xuICAgICAgfVxuXG4gICAgICBfdGhpcy5jb250YWluZXIuaW5zZXJ0QmVmb3JlKHRhZywgYmVmb3JlKTtcblxuICAgICAgX3RoaXMudGFncy5wdXNoKHRhZyk7XG4gICAgfTtcblxuICAgIHRoaXMuaXNTcGVlZHkgPSBvcHRpb25zLnNwZWVkeSA9PT0gdW5kZWZpbmVkID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJyA6IG9wdGlvbnMuc3BlZWR5O1xuICAgIHRoaXMudGFncyA9IFtdO1xuICAgIHRoaXMuY3RyID0gMDtcbiAgICB0aGlzLm5vbmNlID0gb3B0aW9ucy5ub25jZTsgLy8ga2V5IGlzIHRoZSB2YWx1ZSBvZiB0aGUgZGF0YS1lbW90aW9uIGF0dHJpYnV0ZSwgaXQncyB1c2VkIHRvIGlkZW50aWZ5IGRpZmZlcmVudCBzaGVldHNcblxuICAgIHRoaXMua2V5ID0gb3B0aW9ucy5rZXk7XG4gICAgdGhpcy5jb250YWluZXIgPSBvcHRpb25zLmNvbnRhaW5lcjtcbiAgICB0aGlzLnByZXBlbmQgPSBvcHRpb25zLnByZXBlbmQ7XG4gICAgdGhpcy5pbnNlcnRpb25Qb2ludCA9IG9wdGlvbnMuaW5zZXJ0aW9uUG9pbnQ7XG4gICAgdGhpcy5iZWZvcmUgPSBudWxsO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFN0eWxlU2hlZXQucHJvdG90eXBlO1xuXG4gIF9wcm90by5oeWRyYXRlID0gZnVuY3Rpb24gaHlkcmF0ZShub2Rlcykge1xuICAgIG5vZGVzLmZvckVhY2godGhpcy5faW5zZXJ0VGFnKTtcbiAgfTtcblxuICBfcHJvdG8uaW5zZXJ0ID0gZnVuY3Rpb24gaW5zZXJ0KHJ1bGUpIHtcbiAgICAvLyB0aGUgbWF4IGxlbmd0aCBpcyBob3cgbWFueSBydWxlcyB3ZSBoYXZlIHBlciBzdHlsZSB0YWcsIGl0J3MgNjUwMDAgaW4gc3BlZWR5IG1vZGVcbiAgICAvLyBpdCdzIDEgaW4gZGV2IGJlY2F1c2Ugd2UgaW5zZXJ0IHNvdXJjZSBtYXBzIHRoYXQgbWFwIGEgc2luZ2xlIHJ1bGUgdG8gYSBsb2NhdGlvblxuICAgIC8vIGFuZCB5b3UgY2FuIG9ubHkgaGF2ZSBvbmUgc291cmNlIG1hcCBwZXIgc3R5bGUgdGFnXG4gICAgaWYgKHRoaXMuY3RyICUgKHRoaXMuaXNTcGVlZHkgPyA2NTAwMCA6IDEpID09PSAwKSB7XG4gICAgICB0aGlzLl9pbnNlcnRUYWcoY3JlYXRlU3R5bGVFbGVtZW50KHRoaXMpKTtcbiAgICB9XG5cbiAgICB2YXIgdGFnID0gdGhpcy50YWdzW3RoaXMudGFncy5sZW5ndGggLSAxXTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgaXNJbXBvcnRSdWxlID0gcnVsZS5jaGFyQ29kZUF0KDApID09PSA2NCAmJiBydWxlLmNoYXJDb2RlQXQoMSkgPT09IDEwNTtcblxuICAgICAgaWYgKGlzSW1wb3J0UnVsZSAmJiB0aGlzLl9hbHJlYWR5SW5zZXJ0ZWRPcmRlckluc2Vuc2l0aXZlUnVsZSkge1xuICAgICAgICAvLyB0aGlzIHdvdWxkIG9ubHkgY2F1c2UgcHJvYmxlbSBpbiBzcGVlZHkgbW9kZVxuICAgICAgICAvLyBidXQgd2UgZG9uJ3Qgd2FudCBlbmFibGluZyBzcGVlZHkgdG8gYWZmZWN0IHRoZSBvYnNlcnZhYmxlIGJlaGF2aW9yXG4gICAgICAgIC8vIHNvIHdlIHJlcG9ydCB0aGlzIGVycm9yIGF0IGFsbCB0aW1lc1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiWW91J3JlIGF0dGVtcHRpbmcgdG8gaW5zZXJ0IHRoZSBmb2xsb3dpbmcgcnVsZTpcXG5cIiArIHJ1bGUgKyAnXFxuXFxuYEBpbXBvcnRgIHJ1bGVzIG11c3QgYmUgYmVmb3JlIGFsbCBvdGhlciB0eXBlcyBvZiBydWxlcyBpbiBhIHN0eWxlc2hlZXQgYnV0IG90aGVyIHJ1bGVzIGhhdmUgYWxyZWFkeSBiZWVuIGluc2VydGVkLiBQbGVhc2UgZW5zdXJlIHRoYXQgYEBpbXBvcnRgIHJ1bGVzIGFyZSBiZWZvcmUgYWxsIG90aGVyIHJ1bGVzLicpO1xuICAgICAgfVxuICAgICAgdGhpcy5fYWxyZWFkeUluc2VydGVkT3JkZXJJbnNlbnNpdGl2ZVJ1bGUgPSB0aGlzLl9hbHJlYWR5SW5zZXJ0ZWRPcmRlckluc2Vuc2l0aXZlUnVsZSB8fCAhaXNJbXBvcnRSdWxlO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmlzU3BlZWR5KSB7XG4gICAgICB2YXIgc2hlZXQgPSBzaGVldEZvclRhZyh0YWcpO1xuXG4gICAgICB0cnkge1xuICAgICAgICAvLyB0aGlzIGlzIHRoZSB1bHRyYWZhc3QgdmVyc2lvbiwgd29ya3MgYWNyb3NzIGJyb3dzZXJzXG4gICAgICAgIC8vIHRoZSBiaWcgZHJhd2JhY2sgaXMgdGhhdCB0aGUgY3NzIHdvbid0IGJlIGVkaXRhYmxlIGluIGRldnRvb2xzXG4gICAgICAgIHNoZWV0Lmluc2VydFJ1bGUocnVsZSwgc2hlZXQuY3NzUnVsZXMubGVuZ3RoKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIS86KC1tb3otcGxhY2Vob2xkZXJ8LW1vei1mb2N1cy1pbm5lcnwtbW96LWZvY3VzcmluZ3wtbXMtaW5wdXQtcGxhY2Vob2xkZXJ8LW1vei1yZWFkLXdyaXRlfC1tb3otcmVhZC1vbmx5fC1tcy1jbGVhcnwtbXMtZXhwYW5kfC1tcy1yZXZlYWwpey8udGVzdChydWxlKSkge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJUaGVyZSB3YXMgYSBwcm9ibGVtIGluc2VydGluZyB0aGUgZm9sbG93aW5nIHJ1bGU6IFxcXCJcIiArIHJ1bGUgKyBcIlxcXCJcIiwgZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGFnLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHJ1bGUpKTtcbiAgICB9XG5cbiAgICB0aGlzLmN0cisrO1xuICB9O1xuXG4gIF9wcm90by5mbHVzaCA9IGZ1bmN0aW9uIGZsdXNoKCkge1xuICAgIC8vICRGbG93Rml4TWVcbiAgICB0aGlzLnRhZ3MuZm9yRWFjaChmdW5jdGlvbiAodGFnKSB7XG4gICAgICByZXR1cm4gdGFnLnBhcmVudE5vZGUgJiYgdGFnLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGFnKTtcbiAgICB9KTtcbiAgICB0aGlzLnRhZ3MgPSBbXTtcbiAgICB0aGlzLmN0ciA9IDA7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdGhpcy5fYWxyZWFkeUluc2VydGVkT3JkZXJJbnNlbnNpdGl2ZVJ1bGUgPSBmYWxzZTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIFN0eWxlU2hlZXQ7XG59KCk7XG5cbmV4cG9ydCB7IFN0eWxlU2hlZXQgfTtcbiIsIi8qKlxuICogQHBhcmFtIHtudW1iZXJ9XG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCB2YXIgYWJzID0gTWF0aC5hYnNcblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn1cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IHZhciBmcm9tID0gU3RyaW5nLmZyb21DaGFyQ29kZVxuXG4vKipcbiAqIEBwYXJhbSB7b2JqZWN0fVxuICogQHJldHVybiB7b2JqZWN0fVxuICovXG5leHBvcnQgdmFyIGFzc2lnbiA9IE9iamVjdC5hc3NpZ25cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEBwYXJhbSB7bnVtYmVyfSBsZW5ndGhcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGhhc2ggKHZhbHVlLCBsZW5ndGgpIHtcblx0cmV0dXJuIGNoYXJhdCh2YWx1ZSwgMCkgXiA0NSA/ICgoKCgoKChsZW5ndGggPDwgMikgXiBjaGFyYXQodmFsdWUsIDApKSA8PCAyKSBeIGNoYXJhdCh2YWx1ZSwgMSkpIDw8IDIpIF4gY2hhcmF0KHZhbHVlLCAyKSkgPDwgMikgXiBjaGFyYXQodmFsdWUsIDMpIDogMFxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gdHJpbSAodmFsdWUpIHtcblx0cmV0dXJuIHZhbHVlLnRyaW0oKVxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHBhcmFtIHtSZWdFeHB9IHBhdHRlcm5cbiAqIEByZXR1cm4ge3N0cmluZz99XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtYXRjaCAodmFsdWUsIHBhdHRlcm4pIHtcblx0cmV0dXJuICh2YWx1ZSA9IHBhdHRlcm4uZXhlYyh2YWx1ZSkpID8gdmFsdWVbMF0gOiB2YWx1ZVxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHBhcmFtIHsoc3RyaW5nfFJlZ0V4cCl9IHBhdHRlcm5cbiAqIEBwYXJhbSB7c3RyaW5nfSByZXBsYWNlbWVudFxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVwbGFjZSAodmFsdWUsIHBhdHRlcm4sIHJlcGxhY2VtZW50KSB7XG5cdHJldHVybiB2YWx1ZS5yZXBsYWNlKHBhdHRlcm4sIHJlcGxhY2VtZW50KVxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHBhcmFtIHtzdHJpbmd9IHNlYXJjaFxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gaW5kZXhvZiAodmFsdWUsIHNlYXJjaCkge1xuXHRyZXR1cm4gdmFsdWUuaW5kZXhPZihzZWFyY2gpXG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcGFyYW0ge251bWJlcn0gaW5kZXhcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNoYXJhdCAodmFsdWUsIGluZGV4KSB7XG5cdHJldHVybiB2YWx1ZS5jaGFyQ29kZUF0KGluZGV4KSB8IDBcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEBwYXJhbSB7bnVtYmVyfSBiZWdpblxuICogQHBhcmFtIHtudW1iZXJ9IGVuZFxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gc3Vic3RyICh2YWx1ZSwgYmVnaW4sIGVuZCkge1xuXHRyZXR1cm4gdmFsdWUuc2xpY2UoYmVnaW4sIGVuZClcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0cmxlbiAodmFsdWUpIHtcblx0cmV0dXJuIHZhbHVlLmxlbmd0aFxufVxuXG4vKipcbiAqIEBwYXJhbSB7YW55W119IHZhbHVlXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzaXplb2YgKHZhbHVlKSB7XG5cdHJldHVybiB2YWx1ZS5sZW5ndGhcbn1cblxuLyoqXG4gKiBAcGFyYW0ge2FueX0gdmFsdWVcbiAqIEBwYXJhbSB7YW55W119IGFycmF5XG4gKiBAcmV0dXJuIHthbnl9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhcHBlbmQgKHZhbHVlLCBhcnJheSkge1xuXHRyZXR1cm4gYXJyYXkucHVzaCh2YWx1ZSksIHZhbHVlXG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmdbXX0gYXJyYXlcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb21iaW5lIChhcnJheSwgY2FsbGJhY2spIHtcblx0cmV0dXJuIGFycmF5Lm1hcChjYWxsYmFjaykuam9pbignJylcbn1cbiIsImltcG9ydCB7ZnJvbSwgdHJpbSwgY2hhcmF0LCBzdHJsZW4sIHN1YnN0ciwgYXBwZW5kLCBhc3NpZ259IGZyb20gJy4vVXRpbGl0eS5qcydcblxuZXhwb3J0IHZhciBsaW5lID0gMVxuZXhwb3J0IHZhciBjb2x1bW4gPSAxXG5leHBvcnQgdmFyIGxlbmd0aCA9IDBcbmV4cG9ydCB2YXIgcG9zaXRpb24gPSAwXG5leHBvcnQgdmFyIGNoYXJhY3RlciA9IDBcbmV4cG9ydCB2YXIgY2hhcmFjdGVycyA9ICcnXG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcGFyYW0ge29iamVjdCB8IG51bGx9IHJvb3RcbiAqIEBwYXJhbSB7b2JqZWN0IHwgbnVsbH0gcGFyZW50XG4gKiBAcGFyYW0ge3N0cmluZ30gdHlwZVxuICogQHBhcmFtIHtzdHJpbmdbXSB8IHN0cmluZ30gcHJvcHNcbiAqIEBwYXJhbSB7b2JqZWN0W10gfCBzdHJpbmd9IGNoaWxkcmVuXG4gKiBAcGFyYW0ge251bWJlcn0gbGVuZ3RoXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBub2RlICh2YWx1ZSwgcm9vdCwgcGFyZW50LCB0eXBlLCBwcm9wcywgY2hpbGRyZW4sIGxlbmd0aCkge1xuXHRyZXR1cm4ge3ZhbHVlOiB2YWx1ZSwgcm9vdDogcm9vdCwgcGFyZW50OiBwYXJlbnQsIHR5cGU6IHR5cGUsIHByb3BzOiBwcm9wcywgY2hpbGRyZW46IGNoaWxkcmVuLCBsaW5lOiBsaW5lLCBjb2x1bW46IGNvbHVtbiwgbGVuZ3RoOiBsZW5ndGgsIHJldHVybjogJyd9XG59XG5cbi8qKlxuICogQHBhcmFtIHtvYmplY3R9IHJvb3RcbiAqIEBwYXJhbSB7b2JqZWN0fSBwcm9wc1xuICogQHJldHVybiB7b2JqZWN0fVxuICovXG5leHBvcnQgZnVuY3Rpb24gY29weSAocm9vdCwgcHJvcHMpIHtcblx0cmV0dXJuIGFzc2lnbihub2RlKCcnLCBudWxsLCBudWxsLCAnJywgbnVsbCwgbnVsbCwgMCksIHJvb3QsIHtsZW5ndGg6IC1yb290Lmxlbmd0aH0sIHByb3BzKVxufVxuXG4vKipcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNoYXIgKCkge1xuXHRyZXR1cm4gY2hhcmFjdGVyXG59XG5cbi8qKlxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gcHJldiAoKSB7XG5cdGNoYXJhY3RlciA9IHBvc2l0aW9uID4gMCA/IGNoYXJhdChjaGFyYWN0ZXJzLCAtLXBvc2l0aW9uKSA6IDBcblxuXHRpZiAoY29sdW1uLS0sIGNoYXJhY3RlciA9PT0gMTApXG5cdFx0Y29sdW1uID0gMSwgbGluZS0tXG5cblx0cmV0dXJuIGNoYXJhY3RlclxufVxuXG4vKipcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG5leHQgKCkge1xuXHRjaGFyYWN0ZXIgPSBwb3NpdGlvbiA8IGxlbmd0aCA/IGNoYXJhdChjaGFyYWN0ZXJzLCBwb3NpdGlvbisrKSA6IDBcblxuXHRpZiAoY29sdW1uKyssIGNoYXJhY3RlciA9PT0gMTApXG5cdFx0Y29sdW1uID0gMSwgbGluZSsrXG5cblx0cmV0dXJuIGNoYXJhY3RlclxufVxuXG4vKipcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBlZWsgKCkge1xuXHRyZXR1cm4gY2hhcmF0KGNoYXJhY3RlcnMsIHBvc2l0aW9uKVxufVxuXG4vKipcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNhcmV0ICgpIHtcblx0cmV0dXJuIHBvc2l0aW9uXG59XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IGJlZ2luXG4gKiBAcGFyYW0ge251bWJlcn0gZW5kXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzbGljZSAoYmVnaW4sIGVuZCkge1xuXHRyZXR1cm4gc3Vic3RyKGNoYXJhY3RlcnMsIGJlZ2luLCBlbmQpXG59XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IHR5cGVcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRva2VuICh0eXBlKSB7XG5cdHN3aXRjaCAodHlwZSkge1xuXHRcdC8vIFxcMCBcXHQgXFxuIFxcciBcXHMgd2hpdGVzcGFjZSB0b2tlblxuXHRcdGNhc2UgMDogY2FzZSA5OiBjYXNlIDEwOiBjYXNlIDEzOiBjYXNlIDMyOlxuXHRcdFx0cmV0dXJuIDVcblx0XHQvLyAhICsgLCAvID4gQCB+IGlzb2xhdGUgdG9rZW5cblx0XHRjYXNlIDMzOiBjYXNlIDQzOiBjYXNlIDQ0OiBjYXNlIDQ3OiBjYXNlIDYyOiBjYXNlIDY0OiBjYXNlIDEyNjpcblx0XHQvLyA7IHsgfSBicmVha3BvaW50IHRva2VuXG5cdFx0Y2FzZSA1OTogY2FzZSAxMjM6IGNhc2UgMTI1OlxuXHRcdFx0cmV0dXJuIDRcblx0XHQvLyA6IGFjY29tcGFuaWVkIHRva2VuXG5cdFx0Y2FzZSA1ODpcblx0XHRcdHJldHVybiAzXG5cdFx0Ly8gXCIgJyAoIFsgb3BlbmluZyBkZWxpbWl0IHRva2VuXG5cdFx0Y2FzZSAzNDogY2FzZSAzOTogY2FzZSA0MDogY2FzZSA5MTpcblx0XHRcdHJldHVybiAyXG5cdFx0Ly8gKSBdIGNsb3NpbmcgZGVsaW1pdCB0b2tlblxuXHRcdGNhc2UgNDE6IGNhc2UgOTM6XG5cdFx0XHRyZXR1cm4gMVxuXHR9XG5cblx0cmV0dXJuIDBcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEByZXR1cm4ge2FueVtdfVxuICovXG5leHBvcnQgZnVuY3Rpb24gYWxsb2MgKHZhbHVlKSB7XG5cdHJldHVybiBsaW5lID0gY29sdW1uID0gMSwgbGVuZ3RoID0gc3RybGVuKGNoYXJhY3RlcnMgPSB2YWx1ZSksIHBvc2l0aW9uID0gMCwgW11cbn1cblxuLyoqXG4gKiBAcGFyYW0ge2FueX0gdmFsdWVcbiAqIEByZXR1cm4ge2FueX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlYWxsb2MgKHZhbHVlKSB7XG5cdHJldHVybiBjaGFyYWN0ZXJzID0gJycsIHZhbHVlXG59XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IHR5cGVcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlbGltaXQgKHR5cGUpIHtcblx0cmV0dXJuIHRyaW0oc2xpY2UocG9zaXRpb24gLSAxLCBkZWxpbWl0ZXIodHlwZSA9PT0gOTEgPyB0eXBlICsgMiA6IHR5cGUgPT09IDQwID8gdHlwZSArIDEgOiB0eXBlKSkpXG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcmV0dXJuIHtzdHJpbmdbXX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRva2VuaXplICh2YWx1ZSkge1xuXHRyZXR1cm4gZGVhbGxvYyh0b2tlbml6ZXIoYWxsb2ModmFsdWUpKSlcbn1cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gdHlwZVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gd2hpdGVzcGFjZSAodHlwZSkge1xuXHR3aGlsZSAoY2hhcmFjdGVyID0gcGVlaygpKVxuXHRcdGlmIChjaGFyYWN0ZXIgPCAzMylcblx0XHRcdG5leHQoKVxuXHRcdGVsc2Vcblx0XHRcdGJyZWFrXG5cblx0cmV0dXJuIHRva2VuKHR5cGUpID4gMiB8fCB0b2tlbihjaGFyYWN0ZXIpID4gMyA/ICcnIDogJyAnXG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmdbXX0gY2hpbGRyZW5cbiAqIEByZXR1cm4ge3N0cmluZ1tdfVxuICovXG5leHBvcnQgZnVuY3Rpb24gdG9rZW5pemVyIChjaGlsZHJlbikge1xuXHR3aGlsZSAobmV4dCgpKVxuXHRcdHN3aXRjaCAodG9rZW4oY2hhcmFjdGVyKSkge1xuXHRcdFx0Y2FzZSAwOiBhcHBlbmQoaWRlbnRpZmllcihwb3NpdGlvbiAtIDEpLCBjaGlsZHJlbilcblx0XHRcdFx0YnJlYWtcblx0XHRcdGNhc2UgMjogYXBwZW5kKGRlbGltaXQoY2hhcmFjdGVyKSwgY2hpbGRyZW4pXG5cdFx0XHRcdGJyZWFrXG5cdFx0XHRkZWZhdWx0OiBhcHBlbmQoZnJvbShjaGFyYWN0ZXIpLCBjaGlsZHJlbilcblx0XHR9XG5cblx0cmV0dXJuIGNoaWxkcmVuXG59XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IGluZGV4XG4gKiBAcGFyYW0ge251bWJlcn0gY291bnRcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGVzY2FwaW5nIChpbmRleCwgY291bnQpIHtcblx0d2hpbGUgKC0tY291bnQgJiYgbmV4dCgpKVxuXHRcdC8vIG5vdCAwLTkgQS1GIGEtZlxuXHRcdGlmIChjaGFyYWN0ZXIgPCA0OCB8fCBjaGFyYWN0ZXIgPiAxMDIgfHwgKGNoYXJhY3RlciA+IDU3ICYmIGNoYXJhY3RlciA8IDY1KSB8fCAoY2hhcmFjdGVyID4gNzAgJiYgY2hhcmFjdGVyIDwgOTcpKVxuXHRcdFx0YnJlYWtcblxuXHRyZXR1cm4gc2xpY2UoaW5kZXgsIGNhcmV0KCkgKyAoY291bnQgPCA2ICYmIHBlZWsoKSA9PSAzMiAmJiBuZXh0KCkgPT0gMzIpKVxufVxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSB0eXBlXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWxpbWl0ZXIgKHR5cGUpIHtcblx0d2hpbGUgKG5leHQoKSlcblx0XHRzd2l0Y2ggKGNoYXJhY3Rlcikge1xuXHRcdFx0Ly8gXSApIFwiICdcblx0XHRcdGNhc2UgdHlwZTpcblx0XHRcdFx0cmV0dXJuIHBvc2l0aW9uXG5cdFx0XHQvLyBcIiAnXG5cdFx0XHRjYXNlIDM0OiBjYXNlIDM5OlxuXHRcdFx0XHRpZiAodHlwZSAhPT0gMzQgJiYgdHlwZSAhPT0gMzkpXG5cdFx0XHRcdFx0ZGVsaW1pdGVyKGNoYXJhY3Rlcilcblx0XHRcdFx0YnJlYWtcblx0XHRcdC8vIChcblx0XHRcdGNhc2UgNDA6XG5cdFx0XHRcdGlmICh0eXBlID09PSA0MSlcblx0XHRcdFx0XHRkZWxpbWl0ZXIodHlwZSlcblx0XHRcdFx0YnJlYWtcblx0XHRcdC8vIFxcXG5cdFx0XHRjYXNlIDkyOlxuXHRcdFx0XHRuZXh0KClcblx0XHRcdFx0YnJlYWtcblx0XHR9XG5cblx0cmV0dXJuIHBvc2l0aW9uXG59XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IHR5cGVcbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleFxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gY29tbWVudGVyICh0eXBlLCBpbmRleCkge1xuXHR3aGlsZSAobmV4dCgpKVxuXHRcdC8vIC8vXG5cdFx0aWYgKHR5cGUgKyBjaGFyYWN0ZXIgPT09IDQ3ICsgMTApXG5cdFx0XHRicmVha1xuXHRcdC8vIC8qXG5cdFx0ZWxzZSBpZiAodHlwZSArIGNoYXJhY3RlciA9PT0gNDIgKyA0MiAmJiBwZWVrKCkgPT09IDQ3KVxuXHRcdFx0YnJlYWtcblxuXHRyZXR1cm4gJy8qJyArIHNsaWNlKGluZGV4LCBwb3NpdGlvbiAtIDEpICsgJyonICsgZnJvbSh0eXBlID09PSA0NyA/IHR5cGUgOiBuZXh0KCkpXG59XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IGluZGV4XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpZGVudGlmaWVyIChpbmRleCkge1xuXHR3aGlsZSAoIXRva2VuKHBlZWsoKSkpXG5cdFx0bmV4dCgpXG5cblx0cmV0dXJuIHNsaWNlKGluZGV4LCBwb3NpdGlvbilcbn1cbiIsImV4cG9ydCB2YXIgTVMgPSAnLW1zLSdcbmV4cG9ydCB2YXIgTU9aID0gJy1tb3otJ1xuZXhwb3J0IHZhciBXRUJLSVQgPSAnLXdlYmtpdC0nXG5cbmV4cG9ydCB2YXIgQ09NTUVOVCA9ICdjb21tJ1xuZXhwb3J0IHZhciBSVUxFU0VUID0gJ3J1bGUnXG5leHBvcnQgdmFyIERFQ0xBUkFUSU9OID0gJ2RlY2wnXG5cbmV4cG9ydCB2YXIgUEFHRSA9ICdAcGFnZSdcbmV4cG9ydCB2YXIgTUVESUEgPSAnQG1lZGlhJ1xuZXhwb3J0IHZhciBJTVBPUlQgPSAnQGltcG9ydCdcbmV4cG9ydCB2YXIgQ0hBUlNFVCA9ICdAY2hhcnNldCdcbmV4cG9ydCB2YXIgVklFV1BPUlQgPSAnQHZpZXdwb3J0J1xuZXhwb3J0IHZhciBTVVBQT1JUUyA9ICdAc3VwcG9ydHMnXG5leHBvcnQgdmFyIERPQ1VNRU5UID0gJ0Bkb2N1bWVudCdcbmV4cG9ydCB2YXIgTkFNRVNQQUNFID0gJ0BuYW1lc3BhY2UnXG5leHBvcnQgdmFyIEtFWUZSQU1FUyA9ICdAa2V5ZnJhbWVzJ1xuZXhwb3J0IHZhciBGT05UX0ZBQ0UgPSAnQGZvbnQtZmFjZSdcbmV4cG9ydCB2YXIgQ09VTlRFUl9TVFlMRSA9ICdAY291bnRlci1zdHlsZSdcbmV4cG9ydCB2YXIgRk9OVF9GRUFUVVJFX1ZBTFVFUyA9ICdAZm9udC1mZWF0dXJlLXZhbHVlcydcbiIsImltcG9ydCB7SU1QT1JULCBDT01NRU5ULCBSVUxFU0VULCBERUNMQVJBVElPTiwgS0VZRlJBTUVTfSBmcm9tICcuL0VudW0uanMnXG5pbXBvcnQge3N0cmxlbiwgc2l6ZW9mfSBmcm9tICcuL1V0aWxpdHkuanMnXG5cbi8qKlxuICogQHBhcmFtIHtvYmplY3RbXX0gY2hpbGRyZW5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXJpYWxpemUgKGNoaWxkcmVuLCBjYWxsYmFjaykge1xuXHR2YXIgb3V0cHV0ID0gJydcblx0dmFyIGxlbmd0aCA9IHNpemVvZihjaGlsZHJlbilcblxuXHRmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKVxuXHRcdG91dHB1dCArPSBjYWxsYmFjayhjaGlsZHJlbltpXSwgaSwgY2hpbGRyZW4sIGNhbGxiYWNrKSB8fCAnJ1xuXG5cdHJldHVybiBvdXRwdXRcbn1cblxuLyoqXG4gKiBAcGFyYW0ge29iamVjdH0gZWxlbWVudFxuICogQHBhcmFtIHtudW1iZXJ9IGluZGV4XG4gKiBAcGFyYW0ge29iamVjdFtdfSBjaGlsZHJlblxuICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0cmluZ2lmeSAoZWxlbWVudCwgaW5kZXgsIGNoaWxkcmVuLCBjYWxsYmFjaykge1xuXHRzd2l0Y2ggKGVsZW1lbnQudHlwZSkge1xuXHRcdGNhc2UgSU1QT1JUOiBjYXNlIERFQ0xBUkFUSU9OOiByZXR1cm4gZWxlbWVudC5yZXR1cm4gPSBlbGVtZW50LnJldHVybiB8fCBlbGVtZW50LnZhbHVlXG5cdFx0Y2FzZSBDT01NRU5UOiByZXR1cm4gJydcblx0XHRjYXNlIEtFWUZSQU1FUzogcmV0dXJuIGVsZW1lbnQucmV0dXJuID0gZWxlbWVudC52YWx1ZSArICd7JyArIHNlcmlhbGl6ZShlbGVtZW50LmNoaWxkcmVuLCBjYWxsYmFjaykgKyAnfSdcblx0XHRjYXNlIFJVTEVTRVQ6IGVsZW1lbnQudmFsdWUgPSBlbGVtZW50LnByb3BzLmpvaW4oJywnKVxuXHR9XG5cblx0cmV0dXJuIHN0cmxlbihjaGlsZHJlbiA9IHNlcmlhbGl6ZShlbGVtZW50LmNoaWxkcmVuLCBjYWxsYmFjaykpID8gZWxlbWVudC5yZXR1cm4gPSBlbGVtZW50LnZhbHVlICsgJ3snICsgY2hpbGRyZW4gKyAnfScgOiAnJ1xufVxuIiwiaW1wb3J0IHtDT01NRU5ULCBSVUxFU0VULCBERUNMQVJBVElPTn0gZnJvbSAnLi9FbnVtLmpzJ1xuaW1wb3J0IHthYnMsIGNoYXJhdCwgdHJpbSwgZnJvbSwgc2l6ZW9mLCBzdHJsZW4sIHN1YnN0ciwgYXBwZW5kLCByZXBsYWNlLCBpbmRleG9mfSBmcm9tICcuL1V0aWxpdHkuanMnXG5pbXBvcnQge25vZGUsIGNoYXIsIHByZXYsIG5leHQsIHBlZWssIGNhcmV0LCBhbGxvYywgZGVhbGxvYywgZGVsaW1pdCwgd2hpdGVzcGFjZSwgZXNjYXBpbmcsIGlkZW50aWZpZXIsIGNvbW1lbnRlcn0gZnJvbSAnLi9Ub2tlbml6ZXIuanMnXG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcmV0dXJuIHtvYmplY3RbXX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbXBpbGUgKHZhbHVlKSB7XG5cdHJldHVybiBkZWFsbG9jKHBhcnNlKCcnLCBudWxsLCBudWxsLCBudWxsLCBbJyddLCB2YWx1ZSA9IGFsbG9jKHZhbHVlKSwgMCwgWzBdLCB2YWx1ZSkpXG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcGFyYW0ge29iamVjdH0gcm9vdFxuICogQHBhcmFtIHtvYmplY3Q/fSBwYXJlbnRcbiAqIEBwYXJhbSB7c3RyaW5nW119IHJ1bGVcbiAqIEBwYXJhbSB7c3RyaW5nW119IHJ1bGVzXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBydWxlc2V0c1xuICogQHBhcmFtIHtudW1iZXJbXX0gcHNldWRvXG4gKiBAcGFyYW0ge251bWJlcltdfSBwb2ludHNcbiAqIEBwYXJhbSB7c3RyaW5nW119IGRlY2xhcmF0aW9uc1xuICogQHJldHVybiB7b2JqZWN0fVxuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2UgKHZhbHVlLCByb290LCBwYXJlbnQsIHJ1bGUsIHJ1bGVzLCBydWxlc2V0cywgcHNldWRvLCBwb2ludHMsIGRlY2xhcmF0aW9ucykge1xuXHR2YXIgaW5kZXggPSAwXG5cdHZhciBvZmZzZXQgPSAwXG5cdHZhciBsZW5ndGggPSBwc2V1ZG9cblx0dmFyIGF0cnVsZSA9IDBcblx0dmFyIHByb3BlcnR5ID0gMFxuXHR2YXIgcHJldmlvdXMgPSAwXG5cdHZhciB2YXJpYWJsZSA9IDFcblx0dmFyIHNjYW5uaW5nID0gMVxuXHR2YXIgYW1wZXJzYW5kID0gMVxuXHR2YXIgY2hhcmFjdGVyID0gMFxuXHR2YXIgdHlwZSA9ICcnXG5cdHZhciBwcm9wcyA9IHJ1bGVzXG5cdHZhciBjaGlsZHJlbiA9IHJ1bGVzZXRzXG5cdHZhciByZWZlcmVuY2UgPSBydWxlXG5cdHZhciBjaGFyYWN0ZXJzID0gdHlwZVxuXG5cdHdoaWxlIChzY2FubmluZylcblx0XHRzd2l0Y2ggKHByZXZpb3VzID0gY2hhcmFjdGVyLCBjaGFyYWN0ZXIgPSBuZXh0KCkpIHtcblx0XHRcdC8vIChcblx0XHRcdGNhc2UgNDA6XG5cdFx0XHRcdGlmIChwcmV2aW91cyAhPSAxMDggJiYgY2hhcmF0KGNoYXJhY3RlcnMsIGxlbmd0aCAtIDEpID09IDU4KSB7XG5cdFx0XHRcdFx0aWYgKGluZGV4b2YoY2hhcmFjdGVycyArPSByZXBsYWNlKGRlbGltaXQoY2hhcmFjdGVyKSwgJyYnLCAnJlxcZicpLCAnJlxcZicpICE9IC0xKVxuXHRcdFx0XHRcdFx0YW1wZXJzYW5kID0gLTFcblx0XHRcdFx0XHRicmVha1xuXHRcdFx0XHR9XG5cdFx0XHQvLyBcIiAnIFtcblx0XHRcdGNhc2UgMzQ6IGNhc2UgMzk6IGNhc2UgOTE6XG5cdFx0XHRcdGNoYXJhY3RlcnMgKz0gZGVsaW1pdChjaGFyYWN0ZXIpXG5cdFx0XHRcdGJyZWFrXG5cdFx0XHQvLyBcXHQgXFxuIFxcciBcXHNcblx0XHRcdGNhc2UgOTogY2FzZSAxMDogY2FzZSAxMzogY2FzZSAzMjpcblx0XHRcdFx0Y2hhcmFjdGVycyArPSB3aGl0ZXNwYWNlKHByZXZpb3VzKVxuXHRcdFx0XHRicmVha1xuXHRcdFx0Ly8gXFxcblx0XHRcdGNhc2UgOTI6XG5cdFx0XHRcdGNoYXJhY3RlcnMgKz0gZXNjYXBpbmcoY2FyZXQoKSAtIDEsIDcpXG5cdFx0XHRcdGNvbnRpbnVlXG5cdFx0XHQvLyAvXG5cdFx0XHRjYXNlIDQ3OlxuXHRcdFx0XHRzd2l0Y2ggKHBlZWsoKSkge1xuXHRcdFx0XHRcdGNhc2UgNDI6IGNhc2UgNDc6XG5cdFx0XHRcdFx0XHRhcHBlbmQoY29tbWVudChjb21tZW50ZXIobmV4dCgpLCBjYXJldCgpKSwgcm9vdCwgcGFyZW50KSwgZGVjbGFyYXRpb25zKVxuXHRcdFx0XHRcdFx0YnJlYWtcblx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0Y2hhcmFjdGVycyArPSAnLydcblx0XHRcdFx0fVxuXHRcdFx0XHRicmVha1xuXHRcdFx0Ly8ge1xuXHRcdFx0Y2FzZSAxMjMgKiB2YXJpYWJsZTpcblx0XHRcdFx0cG9pbnRzW2luZGV4KytdID0gc3RybGVuKGNoYXJhY3RlcnMpICogYW1wZXJzYW5kXG5cdFx0XHQvLyB9IDsgXFwwXG5cdFx0XHRjYXNlIDEyNSAqIHZhcmlhYmxlOiBjYXNlIDU5OiBjYXNlIDA6XG5cdFx0XHRcdHN3aXRjaCAoY2hhcmFjdGVyKSB7XG5cdFx0XHRcdFx0Ly8gXFwwIH1cblx0XHRcdFx0XHRjYXNlIDA6IGNhc2UgMTI1OiBzY2FubmluZyA9IDBcblx0XHRcdFx0XHQvLyA7XG5cdFx0XHRcdFx0Y2FzZSA1OSArIG9mZnNldDpcblx0XHRcdFx0XHRcdGlmIChwcm9wZXJ0eSA+IDAgJiYgKHN0cmxlbihjaGFyYWN0ZXJzKSAtIGxlbmd0aCkpXG5cdFx0XHRcdFx0XHRcdGFwcGVuZChwcm9wZXJ0eSA+IDMyID8gZGVjbGFyYXRpb24oY2hhcmFjdGVycyArICc7JywgcnVsZSwgcGFyZW50LCBsZW5ndGggLSAxKSA6IGRlY2xhcmF0aW9uKHJlcGxhY2UoY2hhcmFjdGVycywgJyAnLCAnJykgKyAnOycsIHJ1bGUsIHBhcmVudCwgbGVuZ3RoIC0gMiksIGRlY2xhcmF0aW9ucylcblx0XHRcdFx0XHRcdGJyZWFrXG5cdFx0XHRcdFx0Ly8gQCA7XG5cdFx0XHRcdFx0Y2FzZSA1OTogY2hhcmFjdGVycyArPSAnOydcblx0XHRcdFx0XHQvLyB7IHJ1bGUvYXQtcnVsZVxuXHRcdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0XHRhcHBlbmQocmVmZXJlbmNlID0gcnVsZXNldChjaGFyYWN0ZXJzLCByb290LCBwYXJlbnQsIGluZGV4LCBvZmZzZXQsIHJ1bGVzLCBwb2ludHMsIHR5cGUsIHByb3BzID0gW10sIGNoaWxkcmVuID0gW10sIGxlbmd0aCksIHJ1bGVzZXRzKVxuXG5cdFx0XHRcdFx0XHRpZiAoY2hhcmFjdGVyID09PSAxMjMpXG5cdFx0XHRcdFx0XHRcdGlmIChvZmZzZXQgPT09IDApXG5cdFx0XHRcdFx0XHRcdFx0cGFyc2UoY2hhcmFjdGVycywgcm9vdCwgcmVmZXJlbmNlLCByZWZlcmVuY2UsIHByb3BzLCBydWxlc2V0cywgbGVuZ3RoLCBwb2ludHMsIGNoaWxkcmVuKVxuXHRcdFx0XHRcdFx0XHRlbHNlXG5cdFx0XHRcdFx0XHRcdFx0c3dpdGNoIChhdHJ1bGUgPT09IDk5ICYmIGNoYXJhdChjaGFyYWN0ZXJzLCAzKSA9PT0gMTEwID8gMTAwIDogYXRydWxlKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBkIG0gc1xuXHRcdFx0XHRcdFx0XHRcdFx0Y2FzZSAxMDA6IGNhc2UgMTA5OiBjYXNlIDExNTpcblx0XHRcdFx0XHRcdFx0XHRcdFx0cGFyc2UodmFsdWUsIHJlZmVyZW5jZSwgcmVmZXJlbmNlLCBydWxlICYmIGFwcGVuZChydWxlc2V0KHZhbHVlLCByZWZlcmVuY2UsIHJlZmVyZW5jZSwgMCwgMCwgcnVsZXMsIHBvaW50cywgdHlwZSwgcnVsZXMsIHByb3BzID0gW10sIGxlbmd0aCksIGNoaWxkcmVuKSwgcnVsZXMsIGNoaWxkcmVuLCBsZW5ndGgsIHBvaW50cywgcnVsZSA/IHByb3BzIDogY2hpbGRyZW4pXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrXG5cdFx0XHRcdFx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRwYXJzZShjaGFyYWN0ZXJzLCByZWZlcmVuY2UsIHJlZmVyZW5jZSwgcmVmZXJlbmNlLCBbJyddLCBjaGlsZHJlbiwgMCwgcG9pbnRzLCBjaGlsZHJlbilcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpbmRleCA9IG9mZnNldCA9IHByb3BlcnR5ID0gMCwgdmFyaWFibGUgPSBhbXBlcnNhbmQgPSAxLCB0eXBlID0gY2hhcmFjdGVycyA9ICcnLCBsZW5ndGggPSBwc2V1ZG9cblx0XHRcdFx0YnJlYWtcblx0XHRcdC8vIDpcblx0XHRcdGNhc2UgNTg6XG5cdFx0XHRcdGxlbmd0aCA9IDEgKyBzdHJsZW4oY2hhcmFjdGVycyksIHByb3BlcnR5ID0gcHJldmlvdXNcblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdGlmICh2YXJpYWJsZSA8IDEpXG5cdFx0XHRcdFx0aWYgKGNoYXJhY3RlciA9PSAxMjMpXG5cdFx0XHRcdFx0XHQtLXZhcmlhYmxlXG5cdFx0XHRcdFx0ZWxzZSBpZiAoY2hhcmFjdGVyID09IDEyNSAmJiB2YXJpYWJsZSsrID09IDAgJiYgcHJldigpID09IDEyNSlcblx0XHRcdFx0XHRcdGNvbnRpbnVlXG5cblx0XHRcdFx0c3dpdGNoIChjaGFyYWN0ZXJzICs9IGZyb20oY2hhcmFjdGVyKSwgY2hhcmFjdGVyICogdmFyaWFibGUpIHtcblx0XHRcdFx0XHQvLyAmXG5cdFx0XHRcdFx0Y2FzZSAzODpcblx0XHRcdFx0XHRcdGFtcGVyc2FuZCA9IG9mZnNldCA+IDAgPyAxIDogKGNoYXJhY3RlcnMgKz0gJ1xcZicsIC0xKVxuXHRcdFx0XHRcdFx0YnJlYWtcblx0XHRcdFx0XHQvLyAsXG5cdFx0XHRcdFx0Y2FzZSA0NDpcblx0XHRcdFx0XHRcdHBvaW50c1tpbmRleCsrXSA9IChzdHJsZW4oY2hhcmFjdGVycykgLSAxKSAqIGFtcGVyc2FuZCwgYW1wZXJzYW5kID0gMVxuXHRcdFx0XHRcdFx0YnJlYWtcblx0XHRcdFx0XHQvLyBAXG5cdFx0XHRcdFx0Y2FzZSA2NDpcblx0XHRcdFx0XHRcdC8vIC1cblx0XHRcdFx0XHRcdGlmIChwZWVrKCkgPT09IDQ1KVxuXHRcdFx0XHRcdFx0XHRjaGFyYWN0ZXJzICs9IGRlbGltaXQobmV4dCgpKVxuXG5cdFx0XHRcdFx0XHRhdHJ1bGUgPSBwZWVrKCksIG9mZnNldCA9IGxlbmd0aCA9IHN0cmxlbih0eXBlID0gY2hhcmFjdGVycyArPSBpZGVudGlmaWVyKGNhcmV0KCkpKSwgY2hhcmFjdGVyKytcblx0XHRcdFx0XHRcdGJyZWFrXG5cdFx0XHRcdFx0Ly8gLVxuXHRcdFx0XHRcdGNhc2UgNDU6XG5cdFx0XHRcdFx0XHRpZiAocHJldmlvdXMgPT09IDQ1ICYmIHN0cmxlbihjaGFyYWN0ZXJzKSA9PSAyKVxuXHRcdFx0XHRcdFx0XHR2YXJpYWJsZSA9IDBcblx0XHRcdFx0fVxuXHRcdH1cblxuXHRyZXR1cm4gcnVsZXNldHNcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEBwYXJhbSB7b2JqZWN0fSByb290XG4gKiBAcGFyYW0ge29iamVjdD99IHBhcmVudFxuICogQHBhcmFtIHtudW1iZXJ9IGluZGV4XG4gKiBAcGFyYW0ge251bWJlcn0gb2Zmc2V0XG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBydWxlc1xuICogQHBhcmFtIHtudW1iZXJbXX0gcG9pbnRzXG4gKiBAcGFyYW0ge3N0cmluZ30gdHlwZVxuICogQHBhcmFtIHtzdHJpbmdbXX0gcHJvcHNcbiAqIEBwYXJhbSB7c3RyaW5nW119IGNoaWxkcmVuXG4gKiBAcGFyYW0ge251bWJlcn0gbGVuZ3RoXG4gKiBAcmV0dXJuIHtvYmplY3R9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBydWxlc2V0ICh2YWx1ZSwgcm9vdCwgcGFyZW50LCBpbmRleCwgb2Zmc2V0LCBydWxlcywgcG9pbnRzLCB0eXBlLCBwcm9wcywgY2hpbGRyZW4sIGxlbmd0aCkge1xuXHR2YXIgcG9zdCA9IG9mZnNldCAtIDFcblx0dmFyIHJ1bGUgPSBvZmZzZXQgPT09IDAgPyBydWxlcyA6IFsnJ11cblx0dmFyIHNpemUgPSBzaXplb2YocnVsZSlcblxuXHRmb3IgKHZhciBpID0gMCwgaiA9IDAsIGsgPSAwOyBpIDwgaW5kZXg7ICsraSlcblx0XHRmb3IgKHZhciB4ID0gMCwgeSA9IHN1YnN0cih2YWx1ZSwgcG9zdCArIDEsIHBvc3QgPSBhYnMoaiA9IHBvaW50c1tpXSkpLCB6ID0gdmFsdWU7IHggPCBzaXplOyArK3gpXG5cdFx0XHRpZiAoeiA9IHRyaW0oaiA+IDAgPyBydWxlW3hdICsgJyAnICsgeSA6IHJlcGxhY2UoeSwgLyZcXGYvZywgcnVsZVt4XSkpKVxuXHRcdFx0XHRwcm9wc1trKytdID0gelxuXG5cdHJldHVybiBub2RlKHZhbHVlLCByb290LCBwYXJlbnQsIG9mZnNldCA9PT0gMCA/IFJVTEVTRVQgOiB0eXBlLCBwcm9wcywgY2hpbGRyZW4sIGxlbmd0aClcbn1cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWVcbiAqIEBwYXJhbSB7b2JqZWN0fSByb290XG4gKiBAcGFyYW0ge29iamVjdD99IHBhcmVudFxuICogQHJldHVybiB7b2JqZWN0fVxuICovXG5leHBvcnQgZnVuY3Rpb24gY29tbWVudCAodmFsdWUsIHJvb3QsIHBhcmVudCkge1xuXHRyZXR1cm4gbm9kZSh2YWx1ZSwgcm9vdCwgcGFyZW50LCBDT01NRU5ULCBmcm9tKGNoYXIoKSksIHN1YnN0cih2YWx1ZSwgMiwgLTIpLCAwKVxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHBhcmFtIHtvYmplY3R9IHJvb3RcbiAqIEBwYXJhbSB7b2JqZWN0P30gcGFyZW50XG4gKiBAcGFyYW0ge251bWJlcn0gbGVuZ3RoXG4gKiBAcmV0dXJuIHtvYmplY3R9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWNsYXJhdGlvbiAodmFsdWUsIHJvb3QsIHBhcmVudCwgbGVuZ3RoKSB7XG5cdHJldHVybiBub2RlKHZhbHVlLCByb290LCBwYXJlbnQsIERFQ0xBUkFUSU9OLCBzdWJzdHIodmFsdWUsIDAsIGxlbmd0aCksIHN1YnN0cih2YWx1ZSwgbGVuZ3RoICsgMSwgLTEpLCBsZW5ndGgpXG59XG4iLCJpbXBvcnQgeyBTdHlsZVNoZWV0IH0gZnJvbSAnQGVtb3Rpb24vc2hlZXQnO1xuaW1wb3J0IHsgZGVhbGxvYywgYWxsb2MsIG5leHQsIHRva2VuLCBmcm9tLCBwZWVrLCBkZWxpbWl0LCBzbGljZSwgcG9zaXRpb24sIFJVTEVTRVQsIGNvbWJpbmUsIG1hdGNoLCBzZXJpYWxpemUsIGNvcHksIHJlcGxhY2UsIFdFQktJVCwgTU9aLCBNUywgS0VZRlJBTUVTLCBERUNMQVJBVElPTiwgaGFzaCwgY2hhcmF0LCBzdHJsZW4sIGluZGV4b2YsIHN0cmluZ2lmeSwgQ09NTUVOVCwgcnVsZXNoZWV0LCBtaWRkbGV3YXJlLCBjb21waWxlIH0gZnJvbSAnc3R5bGlzJztcbmltcG9ydCAnQGVtb3Rpb24vd2Vhay1tZW1vaXplJztcbmltcG9ydCAnQGVtb3Rpb24vbWVtb2l6ZSc7XG5cbnZhciBpZGVudGlmaWVyV2l0aFBvaW50VHJhY2tpbmcgPSBmdW5jdGlvbiBpZGVudGlmaWVyV2l0aFBvaW50VHJhY2tpbmcoYmVnaW4sIHBvaW50cywgaW5kZXgpIHtcbiAgdmFyIHByZXZpb3VzID0gMDtcbiAgdmFyIGNoYXJhY3RlciA9IDA7XG5cbiAgd2hpbGUgKHRydWUpIHtcbiAgICBwcmV2aW91cyA9IGNoYXJhY3RlcjtcbiAgICBjaGFyYWN0ZXIgPSBwZWVrKCk7IC8vICZcXGZcblxuICAgIGlmIChwcmV2aW91cyA9PT0gMzggJiYgY2hhcmFjdGVyID09PSAxMikge1xuICAgICAgcG9pbnRzW2luZGV4XSA9IDE7XG4gICAgfVxuXG4gICAgaWYgKHRva2VuKGNoYXJhY3RlcikpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIG5leHQoKTtcbiAgfVxuXG4gIHJldHVybiBzbGljZShiZWdpbiwgcG9zaXRpb24pO1xufTtcblxudmFyIHRvUnVsZXMgPSBmdW5jdGlvbiB0b1J1bGVzKHBhcnNlZCwgcG9pbnRzKSB7XG4gIC8vIHByZXRlbmQgd2UndmUgc3RhcnRlZCB3aXRoIGEgY29tbWFcbiAgdmFyIGluZGV4ID0gLTE7XG4gIHZhciBjaGFyYWN0ZXIgPSA0NDtcblxuICBkbyB7XG4gICAgc3dpdGNoICh0b2tlbihjaGFyYWN0ZXIpKSB7XG4gICAgICBjYXNlIDA6XG4gICAgICAgIC8vICZcXGZcbiAgICAgICAgaWYgKGNoYXJhY3RlciA9PT0gMzggJiYgcGVlaygpID09PSAxMikge1xuICAgICAgICAgIC8vIHRoaXMgaXMgbm90IDEwMCUgY29ycmVjdCwgd2UgZG9uJ3QgYWNjb3VudCBmb3IgbGl0ZXJhbCBzZXF1ZW5jZXMgaGVyZSAtIGxpa2UgZm9yIGV4YW1wbGUgcXVvdGVkIHN0cmluZ3NcbiAgICAgICAgICAvLyBzdHlsaXMgaW5zZXJ0cyBcXGYgYWZ0ZXIgJiB0byBrbm93IHdoZW4gJiB3aGVyZSBpdCBzaG91bGQgcmVwbGFjZSB0aGlzIHNlcXVlbmNlIHdpdGggdGhlIGNvbnRleHQgc2VsZWN0b3JcbiAgICAgICAgICAvLyBhbmQgd2hlbiBpdCBzaG91bGQganVzdCBjb25jYXRlbmF0ZSB0aGUgb3V0ZXIgYW5kIGlubmVyIHNlbGVjdG9yc1xuICAgICAgICAgIC8vIGl0J3MgdmVyeSB1bmxpa2VseSBmb3IgdGhpcyBzZXF1ZW5jZSB0byBhY3R1YWxseSBhcHBlYXIgaW4gYSBkaWZmZXJlbnQgY29udGV4dCwgc28gd2UganVzdCBsZXZlcmFnZSB0aGlzIGZhY3QgaGVyZVxuICAgICAgICAgIHBvaW50c1tpbmRleF0gPSAxO1xuICAgICAgICB9XG5cbiAgICAgICAgcGFyc2VkW2luZGV4XSArPSBpZGVudGlmaWVyV2l0aFBvaW50VHJhY2tpbmcocG9zaXRpb24gLSAxLCBwb2ludHMsIGluZGV4KTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgMjpcbiAgICAgICAgcGFyc2VkW2luZGV4XSArPSBkZWxpbWl0KGNoYXJhY3Rlcik7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIDQ6XG4gICAgICAgIC8vIGNvbW1hXG4gICAgICAgIGlmIChjaGFyYWN0ZXIgPT09IDQ0KSB7XG4gICAgICAgICAgLy8gY29sb25cbiAgICAgICAgICBwYXJzZWRbKytpbmRleF0gPSBwZWVrKCkgPT09IDU4ID8gJyZcXGYnIDogJyc7XG4gICAgICAgICAgcG9pbnRzW2luZGV4XSA9IHBhcnNlZFtpbmRleF0ubGVuZ3RoO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgIC8vIGZhbGx0aHJvdWdoXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHBhcnNlZFtpbmRleF0gKz0gZnJvbShjaGFyYWN0ZXIpO1xuICAgIH1cbiAgfSB3aGlsZSAoY2hhcmFjdGVyID0gbmV4dCgpKTtcblxuICByZXR1cm4gcGFyc2VkO1xufTtcblxudmFyIGdldFJ1bGVzID0gZnVuY3Rpb24gZ2V0UnVsZXModmFsdWUsIHBvaW50cykge1xuICByZXR1cm4gZGVhbGxvYyh0b1J1bGVzKGFsbG9jKHZhbHVlKSwgcG9pbnRzKSk7XG59OyAvLyBXZWFrU2V0IHdvdWxkIGJlIG1vcmUgYXBwcm9wcmlhdGUsIGJ1dCBvbmx5IFdlYWtNYXAgaXMgc3VwcG9ydGVkIGluIElFMTFcblxuXG52YXIgZml4ZWRFbGVtZW50cyA9IC8qICNfX1BVUkVfXyAqL25ldyBXZWFrTWFwKCk7XG52YXIgY29tcGF0ID0gZnVuY3Rpb24gY29tcGF0KGVsZW1lbnQpIHtcbiAgaWYgKGVsZW1lbnQudHlwZSAhPT0gJ3J1bGUnIHx8ICFlbGVtZW50LnBhcmVudCB8fCAvLyBwb3NpdGl2ZSAubGVuZ3RoIGluZGljYXRlcyB0aGF0IHRoaXMgcnVsZSBjb250YWlucyBwc2V1ZG9cbiAgLy8gbmVnYXRpdmUgLmxlbmd0aCBpbmRpY2F0ZXMgdGhhdCB0aGlzIHJ1bGUgaGFzIGJlZW4gYWxyZWFkeSBwcmVmaXhlZFxuICBlbGVtZW50Lmxlbmd0aCA8IDEpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgdmFsdWUgPSBlbGVtZW50LnZhbHVlLFxuICAgICAgcGFyZW50ID0gZWxlbWVudC5wYXJlbnQ7XG4gIHZhciBpc0ltcGxpY2l0UnVsZSA9IGVsZW1lbnQuY29sdW1uID09PSBwYXJlbnQuY29sdW1uICYmIGVsZW1lbnQubGluZSA9PT0gcGFyZW50LmxpbmU7XG5cbiAgd2hpbGUgKHBhcmVudC50eXBlICE9PSAncnVsZScpIHtcbiAgICBwYXJlbnQgPSBwYXJlbnQucGFyZW50O1xuICAgIGlmICghcGFyZW50KSByZXR1cm47XG4gIH0gLy8gc2hvcnQtY2lyY3VpdCBmb3IgdGhlIHNpbXBsZXN0IGNhc2VcblxuXG4gIGlmIChlbGVtZW50LnByb3BzLmxlbmd0aCA9PT0gMSAmJiB2YWx1ZS5jaGFyQ29kZUF0KDApICE9PSA1OFxuICAvKiBjb2xvbiAqL1xuICAmJiAhZml4ZWRFbGVtZW50cy5nZXQocGFyZW50KSkge1xuICAgIHJldHVybjtcbiAgfSAvLyBpZiB0aGlzIGlzIGFuIGltcGxpY2l0bHkgaW5zZXJ0ZWQgcnVsZSAodGhlIG9uZSBlYWdlcmx5IGluc2VydGVkIGF0IHRoZSBlYWNoIG5ldyBuZXN0ZWQgbGV2ZWwpXG4gIC8vIHRoZW4gdGhlIHByb3BzIGhhcyBhbHJlYWR5IGJlZW4gbWFuaXB1bGF0ZWQgYmVmb3JlaGFuZCBhcyB0aGV5IHRoYXQgYXJyYXkgaXMgc2hhcmVkIGJldHdlZW4gaXQgYW5kIGl0cyBcInJ1bGUgcGFyZW50XCJcblxuXG4gIGlmIChpc0ltcGxpY2l0UnVsZSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGZpeGVkRWxlbWVudHMuc2V0KGVsZW1lbnQsIHRydWUpO1xuICB2YXIgcG9pbnRzID0gW107XG4gIHZhciBydWxlcyA9IGdldFJ1bGVzKHZhbHVlLCBwb2ludHMpO1xuICB2YXIgcGFyZW50UnVsZXMgPSBwYXJlbnQucHJvcHM7XG5cbiAgZm9yICh2YXIgaSA9IDAsIGsgPSAwOyBpIDwgcnVsZXMubGVuZ3RoOyBpKyspIHtcbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IHBhcmVudFJ1bGVzLmxlbmd0aDsgaisrLCBrKyspIHtcbiAgICAgIGVsZW1lbnQucHJvcHNba10gPSBwb2ludHNbaV0gPyBydWxlc1tpXS5yZXBsYWNlKC8mXFxmL2csIHBhcmVudFJ1bGVzW2pdKSA6IHBhcmVudFJ1bGVzW2pdICsgXCIgXCIgKyBydWxlc1tpXTtcbiAgICB9XG4gIH1cbn07XG52YXIgcmVtb3ZlTGFiZWwgPSBmdW5jdGlvbiByZW1vdmVMYWJlbChlbGVtZW50KSB7XG4gIGlmIChlbGVtZW50LnR5cGUgPT09ICdkZWNsJykge1xuICAgIHZhciB2YWx1ZSA9IGVsZW1lbnQudmFsdWU7XG5cbiAgICBpZiAoIC8vIGNoYXJjb2RlIGZvciBsXG4gICAgdmFsdWUuY2hhckNvZGVBdCgwKSA9PT0gMTA4ICYmIC8vIGNoYXJjb2RlIGZvciBiXG4gICAgdmFsdWUuY2hhckNvZGVBdCgyKSA9PT0gOTgpIHtcbiAgICAgIC8vIHRoaXMgaWdub3JlcyBsYWJlbFxuICAgICAgZWxlbWVudFtcInJldHVyblwiXSA9ICcnO1xuICAgICAgZWxlbWVudC52YWx1ZSA9ICcnO1xuICAgIH1cbiAgfVxufTtcbnZhciBpZ25vcmVGbGFnID0gJ2Vtb3Rpb24tZGlzYWJsZS1zZXJ2ZXItcmVuZGVyaW5nLXVuc2FmZS1zZWxlY3Rvci13YXJuaW5nLXBsZWFzZS1kby1ub3QtdXNlLXRoaXMtdGhlLXdhcm5pbmctZXhpc3RzLWZvci1hLXJlYXNvbic7XG5cbnZhciBpc0lnbm9yaW5nQ29tbWVudCA9IGZ1bmN0aW9uIGlzSWdub3JpbmdDb21tZW50KGVsZW1lbnQpIHtcbiAgcmV0dXJuIGVsZW1lbnQudHlwZSA9PT0gJ2NvbW0nICYmIGVsZW1lbnQuY2hpbGRyZW4uaW5kZXhPZihpZ25vcmVGbGFnKSA+IC0xO1xufTtcblxudmFyIGNyZWF0ZVVuc2FmZVNlbGVjdG9yc0FsYXJtID0gZnVuY3Rpb24gY3JlYXRlVW5zYWZlU2VsZWN0b3JzQWxhcm0oY2FjaGUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChlbGVtZW50LCBpbmRleCwgY2hpbGRyZW4pIHtcbiAgICBpZiAoZWxlbWVudC50eXBlICE9PSAncnVsZScgfHwgY2FjaGUuY29tcGF0KSByZXR1cm47XG4gICAgdmFyIHVuc2FmZVBzZXVkb0NsYXNzZXMgPSBlbGVtZW50LnZhbHVlLm1hdGNoKC8oOmZpcnN0fDpudGh8Om50aC1sYXN0KS1jaGlsZC9nKTtcblxuICAgIGlmICh1bnNhZmVQc2V1ZG9DbGFzc2VzKSB7XG4gICAgICB2YXIgaXNOZXN0ZWQgPSBlbGVtZW50LnBhcmVudCA9PT0gY2hpbGRyZW5bMF07IC8vIGluIG5lc3RlZCBydWxlcyBjb21tZW50cyBiZWNvbWUgY2hpbGRyZW4gb2YgdGhlIFwiYXV0by1pbnNlcnRlZFwiIHJ1bGVcbiAgICAgIC8vXG4gICAgICAvLyBjb25zaWRlcmluZyB0aGlzIGlucHV0OlxuICAgICAgLy8gLmEge1xuICAgICAgLy8gICAuYiAvKiBjb21tICovIHt9XG4gICAgICAvLyAgIGNvbG9yOiBob3RwaW5rO1xuICAgICAgLy8gfVxuICAgICAgLy8gd2UgZ2V0IG91dHB1dCBjb3JyZXNwb25kaW5nIHRvIHRoaXM6XG4gICAgICAvLyAuYSB7XG4gICAgICAvLyAgICYge1xuICAgICAgLy8gICAgIC8qIGNvbW0gKi9cbiAgICAgIC8vICAgICBjb2xvcjogaG90cGluaztcbiAgICAgIC8vICAgfVxuICAgICAgLy8gICAuYiB7fVxuICAgICAgLy8gfVxuXG4gICAgICB2YXIgY29tbWVudENvbnRhaW5lciA9IGlzTmVzdGVkID8gY2hpbGRyZW5bMF0uY2hpbGRyZW4gOiAvLyBnbG9iYWwgcnVsZSBhdCB0aGUgcm9vdCBsZXZlbFxuICAgICAgY2hpbGRyZW47XG5cbiAgICAgIGZvciAodmFyIGkgPSBjb21tZW50Q29udGFpbmVyLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgIHZhciBub2RlID0gY29tbWVudENvbnRhaW5lcltpXTtcblxuICAgICAgICBpZiAobm9kZS5saW5lIDwgZWxlbWVudC5saW5lKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH0gLy8gaXQgaXMgcXVpdGUgd2VpcmQgYnV0IGNvbW1lbnRzIGFyZSAqdXN1YWxseSogcHV0IGF0IGBjb2x1bW46IGVsZW1lbnQuY29sdW1uIC0gMWBcbiAgICAgICAgLy8gc28gd2Ugc2VlayAqZnJvbSB0aGUgZW5kKiBmb3IgdGhlIG5vZGUgdGhhdCBpcyBlYXJsaWVyIHRoYW4gdGhlIHJ1bGUncyBgZWxlbWVudGAgYW5kIGNoZWNrIHRoYXRcbiAgICAgICAgLy8gdGhpcyB3aWxsIGFsc28gbWF0Y2ggaW5wdXRzIGxpa2UgdGhpczpcbiAgICAgICAgLy8gLmEge1xuICAgICAgICAvLyAgIC8qIGNvbW0gKi9cbiAgICAgICAgLy8gICAuYiB7fVxuICAgICAgICAvLyB9XG4gICAgICAgIC8vXG4gICAgICAgIC8vIGJ1dCB0aGF0IGlzIGZpbmVcbiAgICAgICAgLy9cbiAgICAgICAgLy8gaXQgd291bGQgYmUgdGhlIGVhc2llc3QgdG8gY2hhbmdlIHRoZSBwbGFjZW1lbnQgb2YgdGhlIGNvbW1lbnQgdG8gYmUgdGhlIGZpcnN0IGNoaWxkIG9mIHRoZSBydWxlOlxuICAgICAgICAvLyAuYSB7XG4gICAgICAgIC8vICAgLmIgeyAvKiBjb21tICovIH1cbiAgICAgICAgLy8gfVxuICAgICAgICAvLyB3aXRoIHN1Y2ggaW5wdXRzIHdlIHdvdWxkbid0IGhhdmUgdG8gc2VhcmNoIGZvciB0aGUgY29tbWVudCBhdCBhbGxcbiAgICAgICAgLy8gVE9ETzogY29uc2lkZXIgY2hhbmdpbmcgdGhpcyBjb21tZW50IHBsYWNlbWVudCBpbiB0aGUgbmV4dCBtYWpvciB2ZXJzaW9uXG5cblxuICAgICAgICBpZiAobm9kZS5jb2x1bW4gPCBlbGVtZW50LmNvbHVtbikge1xuICAgICAgICAgIGlmIChpc0lnbm9yaW5nQ29tbWVudChub2RlKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHVuc2FmZVBzZXVkb0NsYXNzZXMuZm9yRWFjaChmdW5jdGlvbiAodW5zYWZlUHNldWRvQ2xhc3MpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIlRoZSBwc2V1ZG8gY2xhc3MgXFxcIlwiICsgdW5zYWZlUHNldWRvQ2xhc3MgKyBcIlxcXCIgaXMgcG90ZW50aWFsbHkgdW5zYWZlIHdoZW4gZG9pbmcgc2VydmVyLXNpZGUgcmVuZGVyaW5nLiBUcnkgY2hhbmdpbmcgaXQgdG8gXFxcIlwiICsgdW5zYWZlUHNldWRvQ2xhc3Muc3BsaXQoJy1jaGlsZCcpWzBdICsgXCItb2YtdHlwZVxcXCIuXCIpO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xufTtcblxudmFyIGlzSW1wb3J0UnVsZSA9IGZ1bmN0aW9uIGlzSW1wb3J0UnVsZShlbGVtZW50KSB7XG4gIHJldHVybiBlbGVtZW50LnR5cGUuY2hhckNvZGVBdCgxKSA9PT0gMTA1ICYmIGVsZW1lbnQudHlwZS5jaGFyQ29kZUF0KDApID09PSA2NDtcbn07XG5cbnZhciBpc1ByZXBlbmRlZFdpdGhSZWd1bGFyUnVsZXMgPSBmdW5jdGlvbiBpc1ByZXBlbmRlZFdpdGhSZWd1bGFyUnVsZXMoaW5kZXgsIGNoaWxkcmVuKSB7XG4gIGZvciAodmFyIGkgPSBpbmRleCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgaWYgKCFpc0ltcG9ydFJ1bGUoY2hpbGRyZW5baV0pKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59OyAvLyB1c2UgdGhpcyB0byByZW1vdmUgaW5jb3JyZWN0IGVsZW1lbnRzIGZyb20gZnVydGhlciBwcm9jZXNzaW5nXG4vLyBzbyB0aGV5IGRvbid0IGdldCBoYW5kZWQgdG8gdGhlIGBzaGVldGAgKG9yIGFueXRoaW5nIGVsc2UpXG4vLyBhcyB0aGF0IGNvdWxkIHBvdGVudGlhbGx5IGxlYWQgdG8gYWRkaXRpb25hbCBsb2dzIHdoaWNoIGluIHR1cm4gY291bGQgYmUgb3ZlcmhlbG1pbmcgdG8gdGhlIHVzZXJcblxuXG52YXIgbnVsbGlmeUVsZW1lbnQgPSBmdW5jdGlvbiBudWxsaWZ5RWxlbWVudChlbGVtZW50KSB7XG4gIGVsZW1lbnQudHlwZSA9ICcnO1xuICBlbGVtZW50LnZhbHVlID0gJyc7XG4gIGVsZW1lbnRbXCJyZXR1cm5cIl0gPSAnJztcbiAgZWxlbWVudC5jaGlsZHJlbiA9ICcnO1xuICBlbGVtZW50LnByb3BzID0gJyc7XG59O1xuXG52YXIgaW5jb3JyZWN0SW1wb3J0QWxhcm0gPSBmdW5jdGlvbiBpbmNvcnJlY3RJbXBvcnRBbGFybShlbGVtZW50LCBpbmRleCwgY2hpbGRyZW4pIHtcbiAgaWYgKCFpc0ltcG9ydFJ1bGUoZWxlbWVudCkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoZWxlbWVudC5wYXJlbnQpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiYEBpbXBvcnRgIHJ1bGVzIGNhbid0IGJlIG5lc3RlZCBpbnNpZGUgb3RoZXIgcnVsZXMuIFBsZWFzZSBtb3ZlIGl0IHRvIHRoZSB0b3AgbGV2ZWwgYW5kIHB1dCBpdCBiZWZvcmUgcmVndWxhciBydWxlcy4gS2VlcCBpbiBtaW5kIHRoYXQgdGhleSBjYW4gb25seSBiZSB1c2VkIHdpdGhpbiBnbG9iYWwgc3R5bGVzLlwiKTtcbiAgICBudWxsaWZ5RWxlbWVudChlbGVtZW50KTtcbiAgfSBlbHNlIGlmIChpc1ByZXBlbmRlZFdpdGhSZWd1bGFyUnVsZXMoaW5kZXgsIGNoaWxkcmVuKSkge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJgQGltcG9ydGAgcnVsZXMgY2FuJ3QgYmUgYWZ0ZXIgb3RoZXIgcnVsZXMuIFBsZWFzZSBwdXQgeW91ciBgQGltcG9ydGAgcnVsZXMgYmVmb3JlIHlvdXIgb3RoZXIgcnVsZXMuXCIpO1xuICAgIG51bGxpZnlFbGVtZW50KGVsZW1lbnQpO1xuICB9XG59O1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1mYWxsdGhyb3VnaCAqL1xuXG5mdW5jdGlvbiBwcmVmaXgodmFsdWUsIGxlbmd0aCkge1xuICBzd2l0Y2ggKGhhc2godmFsdWUsIGxlbmd0aCkpIHtcbiAgICAvLyBjb2xvci1hZGp1c3RcbiAgICBjYXNlIDUxMDM6XG4gICAgICByZXR1cm4gV0VCS0lUICsgJ3ByaW50LScgKyB2YWx1ZSArIHZhbHVlO1xuICAgIC8vIGFuaW1hdGlvbiwgYW5pbWF0aW9uLShkZWxheXxkaXJlY3Rpb258ZHVyYXRpb258ZmlsbC1tb2RlfGl0ZXJhdGlvbi1jb3VudHxuYW1lfHBsYXktc3RhdGV8dGltaW5nLWZ1bmN0aW9uKVxuXG4gICAgY2FzZSA1NzM3OlxuICAgIGNhc2UgNDIwMTpcbiAgICBjYXNlIDMxNzc6XG4gICAgY2FzZSAzNDMzOlxuICAgIGNhc2UgMTY0MTpcbiAgICBjYXNlIDQ0NTc6XG4gICAgY2FzZSAyOTIxOiAvLyB0ZXh0LWRlY29yYXRpb24sIGZpbHRlciwgY2xpcC1wYXRoLCBiYWNrZmFjZS12aXNpYmlsaXR5LCBjb2x1bW4sIGJveC1kZWNvcmF0aW9uLWJyZWFrXG5cbiAgICBjYXNlIDU1NzI6XG4gICAgY2FzZSA2MzU2OlxuICAgIGNhc2UgNTg0NDpcbiAgICBjYXNlIDMxOTE6XG4gICAgY2FzZSA2NjQ1OlxuICAgIGNhc2UgMzAwNTogLy8gbWFzaywgbWFzay1pbWFnZSwgbWFzay0obW9kZXxjbGlwfHNpemUpLCBtYXNrLShyZXBlYXR8b3JpZ2luKSwgbWFzay1wb3NpdGlvbiwgbWFzay1jb21wb3NpdGUsXG5cbiAgICBjYXNlIDYzOTE6XG4gICAgY2FzZSA1ODc5OlxuICAgIGNhc2UgNTYyMzpcbiAgICBjYXNlIDYxMzU6XG4gICAgY2FzZSA0NTk5OlxuICAgIGNhc2UgNDg1NTogLy8gYmFja2dyb3VuZC1jbGlwLCBjb2x1bW5zLCBjb2x1bW4tKGNvdW50fGZpbGx8Z2FwfHJ1bGV8cnVsZS1jb2xvcnxydWxlLXN0eWxlfHJ1bGUtd2lkdGh8c3Bhbnx3aWR0aClcblxuICAgIGNhc2UgNDIxNTpcbiAgICBjYXNlIDYzODk6XG4gICAgY2FzZSA1MTA5OlxuICAgIGNhc2UgNTM2NTpcbiAgICBjYXNlIDU2MjE6XG4gICAgY2FzZSAzODI5OlxuICAgICAgcmV0dXJuIFdFQktJVCArIHZhbHVlICsgdmFsdWU7XG4gICAgLy8gYXBwZWFyYW5jZSwgdXNlci1zZWxlY3QsIHRyYW5zZm9ybSwgaHlwaGVucywgdGV4dC1zaXplLWFkanVzdFxuXG4gICAgY2FzZSA1MzQ5OlxuICAgIGNhc2UgNDI0NjpcbiAgICBjYXNlIDQ4MTA6XG4gICAgY2FzZSA2OTY4OlxuICAgIGNhc2UgMjc1NjpcbiAgICAgIHJldHVybiBXRUJLSVQgKyB2YWx1ZSArIE1PWiArIHZhbHVlICsgTVMgKyB2YWx1ZSArIHZhbHVlO1xuICAgIC8vIGZsZXgsIGZsZXgtZGlyZWN0aW9uXG5cbiAgICBjYXNlIDY4Mjg6XG4gICAgY2FzZSA0MjY4OlxuICAgICAgcmV0dXJuIFdFQktJVCArIHZhbHVlICsgTVMgKyB2YWx1ZSArIHZhbHVlO1xuICAgIC8vIG9yZGVyXG5cbiAgICBjYXNlIDYxNjU6XG4gICAgICByZXR1cm4gV0VCS0lUICsgdmFsdWUgKyBNUyArICdmbGV4LScgKyB2YWx1ZSArIHZhbHVlO1xuICAgIC8vIGFsaWduLWl0ZW1zXG5cbiAgICBjYXNlIDUxODc6XG4gICAgICByZXR1cm4gV0VCS0lUICsgdmFsdWUgKyByZXBsYWNlKHZhbHVlLCAvKFxcdyspLisoOlteXSspLywgV0VCS0lUICsgJ2JveC0kMSQyJyArIE1TICsgJ2ZsZXgtJDEkMicpICsgdmFsdWU7XG4gICAgLy8gYWxpZ24tc2VsZlxuXG4gICAgY2FzZSA1NDQzOlxuICAgICAgcmV0dXJuIFdFQktJVCArIHZhbHVlICsgTVMgKyAnZmxleC1pdGVtLScgKyByZXBsYWNlKHZhbHVlLCAvZmxleC18LXNlbGYvLCAnJykgKyB2YWx1ZTtcbiAgICAvLyBhbGlnbi1jb250ZW50XG5cbiAgICBjYXNlIDQ2NzU6XG4gICAgICByZXR1cm4gV0VCS0lUICsgdmFsdWUgKyBNUyArICdmbGV4LWxpbmUtcGFjaycgKyByZXBsYWNlKHZhbHVlLCAvYWxpZ24tY29udGVudHxmbGV4LXwtc2VsZi8sICcnKSArIHZhbHVlO1xuICAgIC8vIGZsZXgtc2hyaW5rXG5cbiAgICBjYXNlIDU1NDg6XG4gICAgICByZXR1cm4gV0VCS0lUICsgdmFsdWUgKyBNUyArIHJlcGxhY2UodmFsdWUsICdzaHJpbmsnLCAnbmVnYXRpdmUnKSArIHZhbHVlO1xuICAgIC8vIGZsZXgtYmFzaXNcblxuICAgIGNhc2UgNTI5MjpcbiAgICAgIHJldHVybiBXRUJLSVQgKyB2YWx1ZSArIE1TICsgcmVwbGFjZSh2YWx1ZSwgJ2Jhc2lzJywgJ3ByZWZlcnJlZC1zaXplJykgKyB2YWx1ZTtcbiAgICAvLyBmbGV4LWdyb3dcblxuICAgIGNhc2UgNjA2MDpcbiAgICAgIHJldHVybiBXRUJLSVQgKyAnYm94LScgKyByZXBsYWNlKHZhbHVlLCAnLWdyb3cnLCAnJykgKyBXRUJLSVQgKyB2YWx1ZSArIE1TICsgcmVwbGFjZSh2YWx1ZSwgJ2dyb3cnLCAncG9zaXRpdmUnKSArIHZhbHVlO1xuICAgIC8vIHRyYW5zaXRpb25cblxuICAgIGNhc2UgNDU1NDpcbiAgICAgIHJldHVybiBXRUJLSVQgKyByZXBsYWNlKHZhbHVlLCAvKFteLV0pKHRyYW5zZm9ybSkvZywgJyQxJyArIFdFQktJVCArICckMicpICsgdmFsdWU7XG4gICAgLy8gY3Vyc29yXG5cbiAgICBjYXNlIDYxODc6XG4gICAgICByZXR1cm4gcmVwbGFjZShyZXBsYWNlKHJlcGxhY2UodmFsdWUsIC8oem9vbS18Z3JhYikvLCBXRUJLSVQgKyAnJDEnKSwgLyhpbWFnZS1zZXQpLywgV0VCS0lUICsgJyQxJyksIHZhbHVlLCAnJykgKyB2YWx1ZTtcbiAgICAvLyBiYWNrZ3JvdW5kLCBiYWNrZ3JvdW5kLWltYWdlXG5cbiAgICBjYXNlIDU0OTU6XG4gICAgY2FzZSAzOTU5OlxuICAgICAgcmV0dXJuIHJlcGxhY2UodmFsdWUsIC8oaW1hZ2Utc2V0XFwoW15dKikvLCBXRUJLSVQgKyAnJDEnICsgJyRgJDEnKTtcbiAgICAvLyBqdXN0aWZ5LWNvbnRlbnRcblxuICAgIGNhc2UgNDk2ODpcbiAgICAgIHJldHVybiByZXBsYWNlKHJlcGxhY2UodmFsdWUsIC8oLis6KShmbGV4LSk/KC4qKS8sIFdFQktJVCArICdib3gtcGFjazokMycgKyBNUyArICdmbGV4LXBhY2s6JDMnKSwgL3MuKy1iW147XSsvLCAnanVzdGlmeScpICsgV0VCS0lUICsgdmFsdWUgKyB2YWx1ZTtcbiAgICAvLyAobWFyZ2lufHBhZGRpbmcpLWlubGluZS0oc3RhcnR8ZW5kKVxuXG4gICAgY2FzZSA0MDk1OlxuICAgIGNhc2UgMzU4MzpcbiAgICBjYXNlIDQwNjg6XG4gICAgY2FzZSAyNTMyOlxuICAgICAgcmV0dXJuIHJlcGxhY2UodmFsdWUsIC8oLispLWlubGluZSguKykvLCBXRUJLSVQgKyAnJDEkMicpICsgdmFsdWU7XG4gICAgLy8gKG1pbnxtYXgpPyh3aWR0aHxoZWlnaHR8aW5saW5lLXNpemV8YmxvY2stc2l6ZSlcblxuICAgIGNhc2UgODExNjpcbiAgICBjYXNlIDcwNTk6XG4gICAgY2FzZSA1NzUzOlxuICAgIGNhc2UgNTUzNTpcbiAgICBjYXNlIDU0NDU6XG4gICAgY2FzZSA1NzAxOlxuICAgIGNhc2UgNDkzMzpcbiAgICBjYXNlIDQ2Nzc6XG4gICAgY2FzZSA1NTMzOlxuICAgIGNhc2UgNTc4OTpcbiAgICBjYXNlIDUwMjE6XG4gICAgY2FzZSA0NzY1OlxuICAgICAgLy8gc3RyZXRjaCwgbWF4LWNvbnRlbnQsIG1pbi1jb250ZW50LCBmaWxsLWF2YWlsYWJsZVxuICAgICAgaWYgKHN0cmxlbih2YWx1ZSkgLSAxIC0gbGVuZ3RoID4gNikgc3dpdGNoIChjaGFyYXQodmFsdWUsIGxlbmd0aCArIDEpKSB7XG4gICAgICAgIC8vIChtKWF4LWNvbnRlbnQsIChtKWluLWNvbnRlbnRcbiAgICAgICAgY2FzZSAxMDk6XG4gICAgICAgICAgLy8gLVxuICAgICAgICAgIGlmIChjaGFyYXQodmFsdWUsIGxlbmd0aCArIDQpICE9PSA0NSkgYnJlYWs7XG4gICAgICAgIC8vIChmKWlsbC1hdmFpbGFibGUsIChmKWl0LWNvbnRlbnRcblxuICAgICAgICBjYXNlIDEwMjpcbiAgICAgICAgICByZXR1cm4gcmVwbGFjZSh2YWx1ZSwgLyguKzopKC4rKS0oW15dKykvLCAnJDEnICsgV0VCS0lUICsgJyQyLSQzJyArICckMScgKyBNT1ogKyAoY2hhcmF0KHZhbHVlLCBsZW5ndGggKyAzKSA9PSAxMDggPyAnJDMnIDogJyQyLSQzJykpICsgdmFsdWU7XG4gICAgICAgIC8vIChzKXRyZXRjaFxuXG4gICAgICAgIGNhc2UgMTE1OlxuICAgICAgICAgIHJldHVybiB+aW5kZXhvZih2YWx1ZSwgJ3N0cmV0Y2gnKSA/IHByZWZpeChyZXBsYWNlKHZhbHVlLCAnc3RyZXRjaCcsICdmaWxsLWF2YWlsYWJsZScpLCBsZW5ndGgpICsgdmFsdWUgOiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIC8vIHBvc2l0aW9uOiBzdGlja3lcblxuICAgIGNhc2UgNDk0OTpcbiAgICAgIC8vIChzKXRpY2t5P1xuICAgICAgaWYgKGNoYXJhdCh2YWx1ZSwgbGVuZ3RoICsgMSkgIT09IDExNSkgYnJlYWs7XG4gICAgLy8gZGlzcGxheTogKGZsZXh8aW5saW5lLWZsZXgpXG5cbiAgICBjYXNlIDY0NDQ6XG4gICAgICBzd2l0Y2ggKGNoYXJhdCh2YWx1ZSwgc3RybGVuKHZhbHVlKSAtIDMgLSAofmluZGV4b2YodmFsdWUsICchaW1wb3J0YW50JykgJiYgMTApKSkge1xuICAgICAgICAvLyBzdGljKGspeVxuICAgICAgICBjYXNlIDEwNzpcbiAgICAgICAgICByZXR1cm4gcmVwbGFjZSh2YWx1ZSwgJzonLCAnOicgKyBXRUJLSVQpICsgdmFsdWU7XG4gICAgICAgIC8vIChpbmxpbmUtKT9mbChlKXhcblxuICAgICAgICBjYXNlIDEwMTpcbiAgICAgICAgICByZXR1cm4gcmVwbGFjZSh2YWx1ZSwgLyguKzopKFteOyFdKykoO3whLispPy8sICckMScgKyBXRUJLSVQgKyAoY2hhcmF0KHZhbHVlLCAxNCkgPT09IDQ1ID8gJ2lubGluZS0nIDogJycpICsgJ2JveCQzJyArICckMScgKyBXRUJLSVQgKyAnJDIkMycgKyAnJDEnICsgTVMgKyAnJDJib3gkMycpICsgdmFsdWU7XG4gICAgICB9XG5cbiAgICAgIGJyZWFrO1xuICAgIC8vIHdyaXRpbmctbW9kZVxuXG4gICAgY2FzZSA1OTM2OlxuICAgICAgc3dpdGNoIChjaGFyYXQodmFsdWUsIGxlbmd0aCArIDExKSkge1xuICAgICAgICAvLyB2ZXJ0aWNhbC1sKHIpXG4gICAgICAgIGNhc2UgMTE0OlxuICAgICAgICAgIHJldHVybiBXRUJLSVQgKyB2YWx1ZSArIE1TICsgcmVwbGFjZSh2YWx1ZSwgL1tzdmhdXFx3Ky1bdGJscl17Mn0vLCAndGInKSArIHZhbHVlO1xuICAgICAgICAvLyB2ZXJ0aWNhbC1yKGwpXG5cbiAgICAgICAgY2FzZSAxMDg6XG4gICAgICAgICAgcmV0dXJuIFdFQktJVCArIHZhbHVlICsgTVMgKyByZXBsYWNlKHZhbHVlLCAvW3N2aF1cXHcrLVt0YmxyXXsyfS8sICd0Yi1ybCcpICsgdmFsdWU7XG4gICAgICAgIC8vIGhvcml6b250YWwoLSl0YlxuXG4gICAgICAgIGNhc2UgNDU6XG4gICAgICAgICAgcmV0dXJuIFdFQktJVCArIHZhbHVlICsgTVMgKyByZXBsYWNlKHZhbHVlLCAvW3N2aF1cXHcrLVt0YmxyXXsyfS8sICdscicpICsgdmFsdWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBXRUJLSVQgKyB2YWx1ZSArIE1TICsgdmFsdWUgKyB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiB2YWx1ZTtcbn1cblxudmFyIHByZWZpeGVyID0gZnVuY3Rpb24gcHJlZml4ZXIoZWxlbWVudCwgaW5kZXgsIGNoaWxkcmVuLCBjYWxsYmFjaykge1xuICBpZiAoZWxlbWVudC5sZW5ndGggPiAtMSkgaWYgKCFlbGVtZW50W1wicmV0dXJuXCJdKSBzd2l0Y2ggKGVsZW1lbnQudHlwZSkge1xuICAgIGNhc2UgREVDTEFSQVRJT046XG4gICAgICBlbGVtZW50W1wicmV0dXJuXCJdID0gcHJlZml4KGVsZW1lbnQudmFsdWUsIGVsZW1lbnQubGVuZ3RoKTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSBLRVlGUkFNRVM6XG4gICAgICByZXR1cm4gc2VyaWFsaXplKFtjb3B5KGVsZW1lbnQsIHtcbiAgICAgICAgdmFsdWU6IHJlcGxhY2UoZWxlbWVudC52YWx1ZSwgJ0AnLCAnQCcgKyBXRUJLSVQpXG4gICAgICB9KV0sIGNhbGxiYWNrKTtcblxuICAgIGNhc2UgUlVMRVNFVDpcbiAgICAgIGlmIChlbGVtZW50Lmxlbmd0aCkgcmV0dXJuIGNvbWJpbmUoZWxlbWVudC5wcm9wcywgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHN3aXRjaCAobWF0Y2godmFsdWUsIC8oOjpwbGFjXFx3K3w6cmVhZC1cXHcrKS8pKSB7XG4gICAgICAgICAgLy8gOnJlYWQtKG9ubHl8d3JpdGUpXG4gICAgICAgICAgY2FzZSAnOnJlYWQtb25seSc6XG4gICAgICAgICAgY2FzZSAnOnJlYWQtd3JpdGUnOlxuICAgICAgICAgICAgcmV0dXJuIHNlcmlhbGl6ZShbY29weShlbGVtZW50LCB7XG4gICAgICAgICAgICAgIHByb3BzOiBbcmVwbGFjZSh2YWx1ZSwgLzoocmVhZC1cXHcrKS8sICc6JyArIE1PWiArICckMScpXVxuICAgICAgICAgICAgfSldLCBjYWxsYmFjayk7XG4gICAgICAgICAgLy8gOnBsYWNlaG9sZGVyXG5cbiAgICAgICAgICBjYXNlICc6OnBsYWNlaG9sZGVyJzpcbiAgICAgICAgICAgIHJldHVybiBzZXJpYWxpemUoW2NvcHkoZWxlbWVudCwge1xuICAgICAgICAgICAgICBwcm9wczogW3JlcGxhY2UodmFsdWUsIC86KHBsYWNcXHcrKS8sICc6JyArIFdFQktJVCArICdpbnB1dC0kMScpXVxuICAgICAgICAgICAgfSksIGNvcHkoZWxlbWVudCwge1xuICAgICAgICAgICAgICBwcm9wczogW3JlcGxhY2UodmFsdWUsIC86KHBsYWNcXHcrKS8sICc6JyArIE1PWiArICckMScpXVxuICAgICAgICAgICAgfSksIGNvcHkoZWxlbWVudCwge1xuICAgICAgICAgICAgICBwcm9wczogW3JlcGxhY2UodmFsdWUsIC86KHBsYWNcXHcrKS8sIE1TICsgJ2lucHV0LSQxJyldXG4gICAgICAgICAgICB9KV0sIGNhbGxiYWNrKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH0pO1xuICB9XG59O1xuXG52YXIgZGVmYXVsdFN0eWxpc1BsdWdpbnMgPSBbcHJlZml4ZXJdO1xuXG52YXIgY3JlYXRlQ2FjaGUgPSBmdW5jdGlvbiBjcmVhdGVDYWNoZShvcHRpb25zKSB7XG4gIHZhciBrZXkgPSBvcHRpb25zLmtleTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAha2V5KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiWW91IGhhdmUgdG8gY29uZmlndXJlIGBrZXlgIGZvciB5b3VyIGNhY2hlLiBQbGVhc2UgbWFrZSBzdXJlIGl0J3MgdW5pcXVlIChhbmQgbm90IGVxdWFsIHRvICdjc3MnKSBhcyBpdCdzIHVzZWQgZm9yIGxpbmtpbmcgc3R5bGVzIHRvIHlvdXIgY2FjaGUuXFxuXCIgKyBcIklmIG11bHRpcGxlIGNhY2hlcyBzaGFyZSB0aGUgc2FtZSBrZXkgdGhleSBtaWdodCBcXFwiZmlnaHRcXFwiIGZvciBlYWNoIG90aGVyJ3Mgc3R5bGUgZWxlbWVudHMuXCIpO1xuICB9XG5cbiAgaWYgKCBrZXkgPT09ICdjc3MnKSB7XG4gICAgdmFyIHNzclN0eWxlcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJzdHlsZVtkYXRhLWVtb3Rpb25dOm5vdChbZGF0YS1zXSlcIik7IC8vIGdldCBTU1JlZCBzdHlsZXMgb3V0IG9mIHRoZSB3YXkgb2YgUmVhY3QncyBoeWRyYXRpb25cbiAgICAvLyBkb2N1bWVudC5oZWFkIGlzIGEgc2FmZSBwbGFjZSB0byBtb3ZlIHRoZW0gdG8odGhvdWdoIG5vdGUgZG9jdW1lbnQuaGVhZCBpcyBub3QgbmVjZXNzYXJpbHkgdGhlIGxhc3QgcGxhY2UgdGhleSB3aWxsIGJlKVxuICAgIC8vIG5vdGUgdGhpcyB2ZXJ5IHZlcnkgaW50ZW50aW9uYWxseSB0YXJnZXRzIGFsbCBzdHlsZSBlbGVtZW50cyByZWdhcmRsZXNzIG9mIHRoZSBrZXkgdG8gZW5zdXJlXG4gICAgLy8gdGhhdCBjcmVhdGluZyBhIGNhY2hlIHdvcmtzIGluc2lkZSBvZiByZW5kZXIgb2YgYSBSZWFjdCBjb21wb25lbnRcblxuICAgIEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwoc3NyU3R5bGVzLCBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgLy8gd2Ugd2FudCB0byBvbmx5IG1vdmUgZWxlbWVudHMgd2hpY2ggaGF2ZSBhIHNwYWNlIGluIHRoZSBkYXRhLWVtb3Rpb24gYXR0cmlidXRlIHZhbHVlXG4gICAgICAvLyBiZWNhdXNlIHRoYXQgaW5kaWNhdGVzIHRoYXQgaXQgaXMgYW4gRW1vdGlvbiAxMSBzZXJ2ZXItc2lkZSByZW5kZXJlZCBzdHlsZSBlbGVtZW50c1xuICAgICAgLy8gd2hpbGUgd2Ugd2lsbCBhbHJlYWR5IGlnbm9yZSBFbW90aW9uIDExIGNsaWVudC1zaWRlIGluc2VydGVkIHN0eWxlcyBiZWNhdXNlIG9mIHRoZSA6bm90KFtkYXRhLXNdKSBwYXJ0IGluIHRoZSBzZWxlY3RvclxuICAgICAgLy8gRW1vdGlvbiAxMCBjbGllbnQtc2lkZSBpbnNlcnRlZCBzdHlsZXMgZGlkIG5vdCBoYXZlIGRhdGEtcyAoYnV0IGltcG9ydGFudGx5IGRpZCBub3QgaGF2ZSBhIHNwYWNlIGluIHRoZWlyIGRhdGEtZW1vdGlvbiBhdHRyaWJ1dGVzKVxuICAgICAgLy8gc28gY2hlY2tpbmcgZm9yIHRoZSBzcGFjZSBlbnN1cmVzIHRoYXQgbG9hZGluZyBFbW90aW9uIDExIGFmdGVyIEVtb3Rpb24gMTAgaGFzIGluc2VydGVkIHNvbWUgc3R5bGVzXG4gICAgICAvLyB3aWxsIG5vdCByZXN1bHQgaW4gdGhlIEVtb3Rpb24gMTAgc3R5bGVzIGJlaW5nIGRlc3Ryb3llZFxuICAgICAgdmFyIGRhdGFFbW90aW9uQXR0cmlidXRlID0gbm9kZS5nZXRBdHRyaWJ1dGUoJ2RhdGEtZW1vdGlvbicpO1xuXG4gICAgICBpZiAoZGF0YUVtb3Rpb25BdHRyaWJ1dGUuaW5kZXhPZignICcpID09PSAtMSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKG5vZGUpO1xuICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoJ2RhdGEtcycsICcnKTtcbiAgICB9KTtcbiAgfVxuXG4gIHZhciBzdHlsaXNQbHVnaW5zID0gb3B0aW9ucy5zdHlsaXNQbHVnaW5zIHx8IGRlZmF1bHRTdHlsaXNQbHVnaW5zO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gJEZsb3dGaXhNZVxuICAgIGlmICgvW15hLXotXS8udGVzdChrZXkpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFbW90aW9uIGtleSBtdXN0IG9ubHkgY29udGFpbiBsb3dlciBjYXNlIGFscGhhYmV0aWNhbCBjaGFyYWN0ZXJzIGFuZCAtIGJ1dCBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgd2FzIHBhc3NlZFwiKTtcbiAgICB9XG4gIH1cblxuICB2YXIgaW5zZXJ0ZWQgPSB7fTtcbiAgdmFyIGNvbnRhaW5lcjtcbiAgdmFyIG5vZGVzVG9IeWRyYXRlID0gW107XG5cbiAge1xuICAgIGNvbnRhaW5lciA9IG9wdGlvbnMuY29udGFpbmVyIHx8IGRvY3VtZW50LmhlYWQ7XG4gICAgQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbCggLy8gdGhpcyBtZWFucyB3ZSB3aWxsIGlnbm9yZSBlbGVtZW50cyB3aGljaCBkb24ndCBoYXZlIGEgc3BhY2UgaW4gdGhlbSB3aGljaFxuICAgIC8vIG1lYW5zIHRoYXQgdGhlIHN0eWxlIGVsZW1lbnRzIHdlJ3JlIGxvb2tpbmcgYXQgYXJlIG9ubHkgRW1vdGlvbiAxMSBzZXJ2ZXItcmVuZGVyZWQgc3R5bGUgZWxlbWVudHNcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwic3R5bGVbZGF0YS1lbW90aW9uXj1cXFwiXCIgKyBrZXkgKyBcIiBcXFwiXVwiKSwgZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgIHZhciBhdHRyaWIgPSBub2RlLmdldEF0dHJpYnV0ZShcImRhdGEtZW1vdGlvblwiKS5zcGxpdCgnICcpOyAvLyAkRmxvd0ZpeE1lXG5cbiAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXR0cmliLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGluc2VydGVkW2F0dHJpYltpXV0gPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBub2Rlc1RvSHlkcmF0ZS5wdXNoKG5vZGUpO1xuICAgIH0pO1xuICB9XG5cbiAgdmFyIF9pbnNlcnQ7XG5cbiAgdmFyIG9tbmlwcmVzZW50UGx1Z2lucyA9IFtjb21wYXQsIHJlbW92ZUxhYmVsXTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIG9tbmlwcmVzZW50UGx1Z2lucy5wdXNoKGNyZWF0ZVVuc2FmZVNlbGVjdG9yc0FsYXJtKHtcbiAgICAgIGdldCBjb21wYXQoKSB7XG4gICAgICAgIHJldHVybiBjYWNoZS5jb21wYXQ7XG4gICAgICB9XG5cbiAgICB9KSwgaW5jb3JyZWN0SW1wb3J0QWxhcm0pO1xuICB9XG5cbiAge1xuICAgIHZhciBjdXJyZW50U2hlZXQ7XG4gICAgdmFyIGZpbmFsaXppbmdQbHVnaW5zID0gW3N0cmluZ2lmeSwgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICBpZiAoIWVsZW1lbnQucm9vdCkge1xuICAgICAgICBpZiAoZWxlbWVudFtcInJldHVyblwiXSkge1xuICAgICAgICAgIGN1cnJlbnRTaGVldC5pbnNlcnQoZWxlbWVudFtcInJldHVyblwiXSk7XG4gICAgICAgIH0gZWxzZSBpZiAoZWxlbWVudC52YWx1ZSAmJiBlbGVtZW50LnR5cGUgIT09IENPTU1FTlQpIHtcbiAgICAgICAgICAvLyBpbnNlcnQgZW1wdHkgcnVsZSBpbiBub24tcHJvZHVjdGlvbiBlbnZpcm9ubWVudHNcbiAgICAgICAgICAvLyBzbyBAZW1vdGlvbi9qZXN0IGNhbiBncmFiIGBrZXlgIGZyb20gdGhlIChKUylET00gZm9yIGNhY2hlcyB3aXRob3V0IGFueSBydWxlcyBpbnNlcnRlZCB5ZXRcbiAgICAgICAgICBjdXJyZW50U2hlZXQuaW5zZXJ0KGVsZW1lbnQudmFsdWUgKyBcInt9XCIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSA6IHJ1bGVzaGVldChmdW5jdGlvbiAocnVsZSkge1xuICAgICAgY3VycmVudFNoZWV0Lmluc2VydChydWxlKTtcbiAgICB9KV07XG4gICAgdmFyIHNlcmlhbGl6ZXIgPSBtaWRkbGV3YXJlKG9tbmlwcmVzZW50UGx1Z2lucy5jb25jYXQoc3R5bGlzUGx1Z2lucywgZmluYWxpemluZ1BsdWdpbnMpKTtcblxuICAgIHZhciBzdHlsaXMgPSBmdW5jdGlvbiBzdHlsaXMoc3R5bGVzKSB7XG4gICAgICByZXR1cm4gc2VyaWFsaXplKGNvbXBpbGUoc3R5bGVzKSwgc2VyaWFsaXplcik7XG4gICAgfTtcblxuICAgIF9pbnNlcnQgPSBmdW5jdGlvbiBpbnNlcnQoc2VsZWN0b3IsIHNlcmlhbGl6ZWQsIHNoZWV0LCBzaG91bGRDYWNoZSkge1xuICAgICAgY3VycmVudFNoZWV0ID0gc2hlZXQ7XG5cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHNlcmlhbGl6ZWQubWFwICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY3VycmVudFNoZWV0ID0ge1xuICAgICAgICAgIGluc2VydDogZnVuY3Rpb24gaW5zZXJ0KHJ1bGUpIHtcbiAgICAgICAgICAgIHNoZWV0Lmluc2VydChydWxlICsgc2VyaWFsaXplZC5tYXApO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgc3R5bGlzKHNlbGVjdG9yID8gc2VsZWN0b3IgKyBcIntcIiArIHNlcmlhbGl6ZWQuc3R5bGVzICsgXCJ9XCIgOiBzZXJpYWxpemVkLnN0eWxlcyk7XG5cbiAgICAgIGlmIChzaG91bGRDYWNoZSkge1xuICAgICAgICBjYWNoZS5pbnNlcnRlZFtzZXJpYWxpemVkLm5hbWVdID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgdmFyIGNhY2hlID0ge1xuICAgIGtleToga2V5LFxuICAgIHNoZWV0OiBuZXcgU3R5bGVTaGVldCh7XG4gICAgICBrZXk6IGtleSxcbiAgICAgIGNvbnRhaW5lcjogY29udGFpbmVyLFxuICAgICAgbm9uY2U6IG9wdGlvbnMubm9uY2UsXG4gICAgICBzcGVlZHk6IG9wdGlvbnMuc3BlZWR5LFxuICAgICAgcHJlcGVuZDogb3B0aW9ucy5wcmVwZW5kLFxuICAgICAgaW5zZXJ0aW9uUG9pbnQ6IG9wdGlvbnMuaW5zZXJ0aW9uUG9pbnRcbiAgICB9KSxcbiAgICBub25jZTogb3B0aW9ucy5ub25jZSxcbiAgICBpbnNlcnRlZDogaW5zZXJ0ZWQsXG4gICAgcmVnaXN0ZXJlZDoge30sXG4gICAgaW5zZXJ0OiBfaW5zZXJ0XG4gIH07XG4gIGNhY2hlLnNoZWV0Lmh5ZHJhdGUobm9kZXNUb0h5ZHJhdGUpO1xuICByZXR1cm4gY2FjaGU7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVDYWNoZTtcbiIsImltcG9ydCB7TVMsIE1PWiwgV0VCS0lULCBSVUxFU0VULCBLRVlGUkFNRVMsIERFQ0xBUkFUSU9OfSBmcm9tICcuL0VudW0uanMnXG5pbXBvcnQge21hdGNoLCBjaGFyYXQsIHN1YnN0ciwgc3RybGVuLCBzaXplb2YsIHJlcGxhY2UsIGNvbWJpbmV9IGZyb20gJy4vVXRpbGl0eS5qcydcbmltcG9ydCB7Y29weSwgdG9rZW5pemV9IGZyb20gJy4vVG9rZW5pemVyLmpzJ1xuaW1wb3J0IHtzZXJpYWxpemV9IGZyb20gJy4vU2VyaWFsaXplci5qcydcbmltcG9ydCB7cHJlZml4fSBmcm9tICcuL1ByZWZpeGVyLmpzJ1xuXG4vKipcbiAqIEBwYXJhbSB7ZnVuY3Rpb25bXX0gY29sbGVjdGlvblxuICogQHJldHVybiB7ZnVuY3Rpb259XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtaWRkbGV3YXJlIChjb2xsZWN0aW9uKSB7XG5cdHZhciBsZW5ndGggPSBzaXplb2YoY29sbGVjdGlvbilcblxuXHRyZXR1cm4gZnVuY3Rpb24gKGVsZW1lbnQsIGluZGV4LCBjaGlsZHJlbiwgY2FsbGJhY2spIHtcblx0XHR2YXIgb3V0cHV0ID0gJydcblxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspXG5cdFx0XHRvdXRwdXQgKz0gY29sbGVjdGlvbltpXShlbGVtZW50LCBpbmRleCwgY2hpbGRyZW4sIGNhbGxiYWNrKSB8fCAnJ1xuXG5cdFx0cmV0dXJuIG91dHB1dFxuXHR9XG59XG5cbi8qKlxuICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEByZXR1cm4ge2Z1bmN0aW9ufVxuICovXG5leHBvcnQgZnVuY3Rpb24gcnVsZXNoZWV0IChjYWxsYmFjaykge1xuXHRyZXR1cm4gZnVuY3Rpb24gKGVsZW1lbnQpIHtcblx0XHRpZiAoIWVsZW1lbnQucm9vdClcblx0XHRcdGlmIChlbGVtZW50ID0gZWxlbWVudC5yZXR1cm4pXG5cdFx0XHRcdGNhbGxiYWNrKGVsZW1lbnQpXG5cdH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge29iamVjdH0gZWxlbWVudFxuICogQHBhcmFtIHtudW1iZXJ9IGluZGV4XG4gKiBAcGFyYW0ge29iamVjdFtdfSBjaGlsZHJlblxuICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2tcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHByZWZpeGVyIChlbGVtZW50LCBpbmRleCwgY2hpbGRyZW4sIGNhbGxiYWNrKSB7XG5cdGlmIChlbGVtZW50Lmxlbmd0aCA+IC0xKVxuXHRcdGlmICghZWxlbWVudC5yZXR1cm4pXG5cdFx0XHRzd2l0Y2ggKGVsZW1lbnQudHlwZSkge1xuXHRcdFx0XHRjYXNlIERFQ0xBUkFUSU9OOiBlbGVtZW50LnJldHVybiA9IHByZWZpeChlbGVtZW50LnZhbHVlLCBlbGVtZW50Lmxlbmd0aCwgY2hpbGRyZW4pXG5cdFx0XHRcdFx0cmV0dXJuXG5cdFx0XHRcdGNhc2UgS0VZRlJBTUVTOlxuXHRcdFx0XHRcdHJldHVybiBzZXJpYWxpemUoW2NvcHkoZWxlbWVudCwge3ZhbHVlOiByZXBsYWNlKGVsZW1lbnQudmFsdWUsICdAJywgJ0AnICsgV0VCS0lUKX0pXSwgY2FsbGJhY2spXG5cdFx0XHRcdGNhc2UgUlVMRVNFVDpcblx0XHRcdFx0XHRpZiAoZWxlbWVudC5sZW5ndGgpXG5cdFx0XHRcdFx0XHRyZXR1cm4gY29tYmluZShlbGVtZW50LnByb3BzLCBmdW5jdGlvbiAodmFsdWUpIHtcblx0XHRcdFx0XHRcdFx0c3dpdGNoIChtYXRjaCh2YWx1ZSwgLyg6OnBsYWNcXHcrfDpyZWFkLVxcdyspLykpIHtcblx0XHRcdFx0XHRcdFx0XHQvLyA6cmVhZC0ob25seXx3cml0ZSlcblx0XHRcdFx0XHRcdFx0XHRjYXNlICc6cmVhZC1vbmx5JzogY2FzZSAnOnJlYWQtd3JpdGUnOlxuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHNlcmlhbGl6ZShbY29weShlbGVtZW50LCB7cHJvcHM6IFtyZXBsYWNlKHZhbHVlLCAvOihyZWFkLVxcdyspLywgJzonICsgTU9aICsgJyQxJyldfSldLCBjYWxsYmFjaylcblx0XHRcdFx0XHRcdFx0XHQvLyA6cGxhY2Vob2xkZXJcblx0XHRcdFx0XHRcdFx0XHRjYXNlICc6OnBsYWNlaG9sZGVyJzpcblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybiBzZXJpYWxpemUoW1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRjb3B5KGVsZW1lbnQsIHtwcm9wczogW3JlcGxhY2UodmFsdWUsIC86KHBsYWNcXHcrKS8sICc6JyArIFdFQktJVCArICdpbnB1dC0kMScpXX0pLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRjb3B5KGVsZW1lbnQsIHtwcm9wczogW3JlcGxhY2UodmFsdWUsIC86KHBsYWNcXHcrKS8sICc6JyArIE1PWiArICckMScpXX0pLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRjb3B5KGVsZW1lbnQsIHtwcm9wczogW3JlcGxhY2UodmFsdWUsIC86KHBsYWNcXHcrKS8sIE1TICsgJ2lucHV0LSQxJyldfSlcblx0XHRcdFx0XHRcdFx0XHRcdF0sIGNhbGxiYWNrKVxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0cmV0dXJuICcnXG5cdFx0XHRcdFx0XHR9KVxuXHRcdFx0fVxufVxuXG4vKipcbiAqIEBwYXJhbSB7b2JqZWN0fSBlbGVtZW50XG4gKiBAcGFyYW0ge251bWJlcn0gaW5kZXhcbiAqIEBwYXJhbSB7b2JqZWN0W119IGNoaWxkcmVuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBuYW1lc3BhY2UgKGVsZW1lbnQpIHtcblx0c3dpdGNoIChlbGVtZW50LnR5cGUpIHtcblx0XHRjYXNlIFJVTEVTRVQ6XG5cdFx0XHRlbGVtZW50LnByb3BzID0gZWxlbWVudC5wcm9wcy5tYXAoZnVuY3Rpb24gKHZhbHVlKSB7XG5cdFx0XHRcdHJldHVybiBjb21iaW5lKHRva2VuaXplKHZhbHVlKSwgZnVuY3Rpb24gKHZhbHVlLCBpbmRleCwgY2hpbGRyZW4pIHtcblx0XHRcdFx0XHRzd2l0Y2ggKGNoYXJhdCh2YWx1ZSwgMCkpIHtcblx0XHRcdFx0XHRcdC8vIFxcZlxuXHRcdFx0XHRcdFx0Y2FzZSAxMjpcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHN1YnN0cih2YWx1ZSwgMSwgc3RybGVuKHZhbHVlKSlcblx0XHRcdFx0XHRcdC8vIFxcMCAoICsgPiB+XG5cdFx0XHRcdFx0XHRjYXNlIDA6IGNhc2UgNDA6IGNhc2UgNDM6IGNhc2UgNjI6IGNhc2UgMTI2OlxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdmFsdWVcblx0XHRcdFx0XHRcdC8vIDpcblx0XHRcdFx0XHRcdGNhc2UgNTg6XG5cdFx0XHRcdFx0XHRcdGlmIChjaGlsZHJlblsrK2luZGV4XSA9PT0gJ2dsb2JhbCcpXG5cdFx0XHRcdFx0XHRcdFx0Y2hpbGRyZW5baW5kZXhdID0gJycsIGNoaWxkcmVuWysraW5kZXhdID0gJ1xcZicgKyBzdWJzdHIoY2hpbGRyZW5baW5kZXhdLCBpbmRleCA9IDEsIC0xKVxuXHRcdFx0XHRcdFx0Ly8gXFxzXG5cdFx0XHRcdFx0XHRjYXNlIDMyOlxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gaW5kZXggPT09IDEgPyAnJyA6IHZhbHVlXG5cdFx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0XHRzd2l0Y2ggKGluZGV4KSB7XG5cdFx0XHRcdFx0XHRcdFx0Y2FzZSAwOiBlbGVtZW50ID0gdmFsdWVcblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybiBzaXplb2YoY2hpbGRyZW4pID4gMSA/ICcnIDogdmFsdWVcblx0XHRcdFx0XHRcdFx0XHRjYXNlIGluZGV4ID0gc2l6ZW9mKGNoaWxkcmVuKSAtIDE6IGNhc2UgMjpcblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybiBpbmRleCA9PT0gMiA/IHZhbHVlICsgZWxlbWVudCArIGVsZW1lbnQgOiB2YWx1ZSArIGVsZW1lbnRcblx0XHRcdFx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHZhbHVlXG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pXG5cdFx0XHR9KVxuXHR9XG59XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSAqL1xuLy8gSW5zcGlyZWQgYnkgaHR0cHM6Ly9naXRodWIuY29tL2dhcnljb3VydC9tdXJtdXJoYXNoLWpzXG4vLyBQb3J0ZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vYWFwcGxlYnkvc21oYXNoZXIvYmxvYi82MWEwNTMwZjI4Mjc3ZjJlODUwYmZjMzk2MDBjZTYxZDAyYjUxOGRlL3NyYy9NdXJtdXJIYXNoMi5jcHAjTDM3LUw4NlxuZnVuY3Rpb24gbXVybXVyMihzdHIpIHtcbiAgLy8gJ20nIGFuZCAncicgYXJlIG1peGluZyBjb25zdGFudHMgZ2VuZXJhdGVkIG9mZmxpbmUuXG4gIC8vIFRoZXkncmUgbm90IHJlYWxseSAnbWFnaWMnLCB0aGV5IGp1c3QgaGFwcGVuIHRvIHdvcmsgd2VsbC5cbiAgLy8gY29uc3QgbSA9IDB4NWJkMWU5OTU7XG4gIC8vIGNvbnN0IHIgPSAyNDtcbiAgLy8gSW5pdGlhbGl6ZSB0aGUgaGFzaFxuICB2YXIgaCA9IDA7IC8vIE1peCA0IGJ5dGVzIGF0IGEgdGltZSBpbnRvIHRoZSBoYXNoXG5cbiAgdmFyIGssXG4gICAgICBpID0gMCxcbiAgICAgIGxlbiA9IHN0ci5sZW5ndGg7XG5cbiAgZm9yICg7IGxlbiA+PSA0OyArK2ksIGxlbiAtPSA0KSB7XG4gICAgayA9IHN0ci5jaGFyQ29kZUF0KGkpICYgMHhmZiB8IChzdHIuY2hhckNvZGVBdCgrK2kpICYgMHhmZikgPDwgOCB8IChzdHIuY2hhckNvZGVBdCgrK2kpICYgMHhmZikgPDwgMTYgfCAoc3RyLmNoYXJDb2RlQXQoKytpKSAmIDB4ZmYpIDw8IDI0O1xuICAgIGsgPVxuICAgIC8qIE1hdGguaW11bChrLCBtKTogKi9cbiAgICAoayAmIDB4ZmZmZikgKiAweDViZDFlOTk1ICsgKChrID4+PiAxNikgKiAweGU5OTUgPDwgMTYpO1xuICAgIGsgXj1cbiAgICAvKiBrID4+PiByOiAqL1xuICAgIGsgPj4+IDI0O1xuICAgIGggPVxuICAgIC8qIE1hdGguaW11bChrLCBtKTogKi9cbiAgICAoayAmIDB4ZmZmZikgKiAweDViZDFlOTk1ICsgKChrID4+PiAxNikgKiAweGU5OTUgPDwgMTYpIF5cbiAgICAvKiBNYXRoLmltdWwoaCwgbSk6ICovXG4gICAgKGggJiAweGZmZmYpICogMHg1YmQxZTk5NSArICgoaCA+Pj4gMTYpICogMHhlOTk1IDw8IDE2KTtcbiAgfSAvLyBIYW5kbGUgdGhlIGxhc3QgZmV3IGJ5dGVzIG9mIHRoZSBpbnB1dCBhcnJheVxuXG5cbiAgc3dpdGNoIChsZW4pIHtcbiAgICBjYXNlIDM6XG4gICAgICBoIF49IChzdHIuY2hhckNvZGVBdChpICsgMikgJiAweGZmKSA8PCAxNjtcblxuICAgIGNhc2UgMjpcbiAgICAgIGggXj0gKHN0ci5jaGFyQ29kZUF0KGkgKyAxKSAmIDB4ZmYpIDw8IDg7XG5cbiAgICBjYXNlIDE6XG4gICAgICBoIF49IHN0ci5jaGFyQ29kZUF0KGkpICYgMHhmZjtcbiAgICAgIGggPVxuICAgICAgLyogTWF0aC5pbXVsKGgsIG0pOiAqL1xuICAgICAgKGggJiAweGZmZmYpICogMHg1YmQxZTk5NSArICgoaCA+Pj4gMTYpICogMHhlOTk1IDw8IDE2KTtcbiAgfSAvLyBEbyBhIGZldyBmaW5hbCBtaXhlcyBvZiB0aGUgaGFzaCB0byBlbnN1cmUgdGhlIGxhc3QgZmV3XG4gIC8vIGJ5dGVzIGFyZSB3ZWxsLWluY29ycG9yYXRlZC5cblxuXG4gIGggXj0gaCA+Pj4gMTM7XG4gIGggPVxuICAvKiBNYXRoLmltdWwoaCwgbSk6ICovXG4gIChoICYgMHhmZmZmKSAqIDB4NWJkMWU5OTUgKyAoKGggPj4+IDE2KSAqIDB4ZTk5NSA8PCAxNik7XG4gIHJldHVybiAoKGggXiBoID4+PiAxNSkgPj4+IDApLnRvU3RyaW5nKDM2KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbXVybXVyMjtcbiIsInZhciB1bml0bGVzc0tleXMgPSB7XG4gIGFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50OiAxLFxuICBib3JkZXJJbWFnZU91dHNldDogMSxcbiAgYm9yZGVySW1hZ2VTbGljZTogMSxcbiAgYm9yZGVySW1hZ2VXaWR0aDogMSxcbiAgYm94RmxleDogMSxcbiAgYm94RmxleEdyb3VwOiAxLFxuICBib3hPcmRpbmFsR3JvdXA6IDEsXG4gIGNvbHVtbkNvdW50OiAxLFxuICBjb2x1bW5zOiAxLFxuICBmbGV4OiAxLFxuICBmbGV4R3JvdzogMSxcbiAgZmxleFBvc2l0aXZlOiAxLFxuICBmbGV4U2hyaW5rOiAxLFxuICBmbGV4TmVnYXRpdmU6IDEsXG4gIGZsZXhPcmRlcjogMSxcbiAgZ3JpZFJvdzogMSxcbiAgZ3JpZFJvd0VuZDogMSxcbiAgZ3JpZFJvd1NwYW46IDEsXG4gIGdyaWRSb3dTdGFydDogMSxcbiAgZ3JpZENvbHVtbjogMSxcbiAgZ3JpZENvbHVtbkVuZDogMSxcbiAgZ3JpZENvbHVtblNwYW46IDEsXG4gIGdyaWRDb2x1bW5TdGFydDogMSxcbiAgbXNHcmlkUm93OiAxLFxuICBtc0dyaWRSb3dTcGFuOiAxLFxuICBtc0dyaWRDb2x1bW46IDEsXG4gIG1zR3JpZENvbHVtblNwYW46IDEsXG4gIGZvbnRXZWlnaHQ6IDEsXG4gIGxpbmVIZWlnaHQ6IDEsXG4gIG9wYWNpdHk6IDEsXG4gIG9yZGVyOiAxLFxuICBvcnBoYW5zOiAxLFxuICB0YWJTaXplOiAxLFxuICB3aWRvd3M6IDEsXG4gIHpJbmRleDogMSxcbiAgem9vbTogMSxcbiAgV2Via2l0TGluZUNsYW1wOiAxLFxuICAvLyBTVkctcmVsYXRlZCBwcm9wZXJ0aWVzXG4gIGZpbGxPcGFjaXR5OiAxLFxuICBmbG9vZE9wYWNpdHk6IDEsXG4gIHN0b3BPcGFjaXR5OiAxLFxuICBzdHJva2VEYXNoYXJyYXk6IDEsXG4gIHN0cm9rZURhc2hvZmZzZXQ6IDEsXG4gIHN0cm9rZU1pdGVybGltaXQ6IDEsXG4gIHN0cm9rZU9wYWNpdHk6IDEsXG4gIHN0cm9rZVdpZHRoOiAxXG59O1xuXG5leHBvcnQgZGVmYXVsdCB1bml0bGVzc0tleXM7XG4iLCJpbXBvcnQgaGFzaFN0cmluZyBmcm9tICdAZW1vdGlvbi9oYXNoJztcbmltcG9ydCB1bml0bGVzcyBmcm9tICdAZW1vdGlvbi91bml0bGVzcyc7XG5pbXBvcnQgbWVtb2l6ZSBmcm9tICdAZW1vdGlvbi9tZW1vaXplJztcblxudmFyIElMTEVHQUxfRVNDQVBFX1NFUVVFTkNFX0VSUk9SID0gXCJZb3UgaGF2ZSBpbGxlZ2FsIGVzY2FwZSBzZXF1ZW5jZSBpbiB5b3VyIHRlbXBsYXRlIGxpdGVyYWwsIG1vc3QgbGlrZWx5IGluc2lkZSBjb250ZW50J3MgcHJvcGVydHkgdmFsdWUuXFxuQmVjYXVzZSB5b3Ugd3JpdGUgeW91ciBDU1MgaW5zaWRlIGEgSmF2YVNjcmlwdCBzdHJpbmcgeW91IGFjdHVhbGx5IGhhdmUgdG8gZG8gZG91YmxlIGVzY2FwaW5nLCBzbyBmb3IgZXhhbXBsZSBcXFwiY29udGVudDogJ1xcXFwwMGQ3JztcXFwiIHNob3VsZCBiZWNvbWUgXFxcImNvbnRlbnQ6ICdcXFxcXFxcXDAwZDcnO1xcXCIuXFxuWW91IGNhbiByZWFkIG1vcmUgYWJvdXQgdGhpcyBoZXJlOlxcbmh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL1RlbXBsYXRlX2xpdGVyYWxzI0VTMjAxOF9yZXZpc2lvbl9vZl9pbGxlZ2FsX2VzY2FwZV9zZXF1ZW5jZXNcIjtcbnZhciBVTkRFRklORURfQVNfT0JKRUNUX0tFWV9FUlJPUiA9IFwiWW91IGhhdmUgcGFzc2VkIGluIGZhbHN5IHZhbHVlIGFzIHN0eWxlIG9iamVjdCdzIGtleSAoY2FuIGhhcHBlbiB3aGVuIGluIGV4YW1wbGUgeW91IHBhc3MgdW5leHBvcnRlZCBjb21wb25lbnQgYXMgY29tcHV0ZWQga2V5KS5cIjtcbnZhciBoeXBoZW5hdGVSZWdleCA9IC9bQS1aXXxebXMvZztcbnZhciBhbmltYXRpb25SZWdleCA9IC9fRU1PXyhbXl9dKz8pXyhbXl0qPylfRU1PXy9nO1xuXG52YXIgaXNDdXN0b21Qcm9wZXJ0eSA9IGZ1bmN0aW9uIGlzQ3VzdG9tUHJvcGVydHkocHJvcGVydHkpIHtcbiAgcmV0dXJuIHByb3BlcnR5LmNoYXJDb2RlQXQoMSkgPT09IDQ1O1xufTtcblxudmFyIGlzUHJvY2Vzc2FibGVWYWx1ZSA9IGZ1bmN0aW9uIGlzUHJvY2Vzc2FibGVWYWx1ZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgIT09ICdib29sZWFuJztcbn07XG5cbnZhciBwcm9jZXNzU3R5bGVOYW1lID0gLyogI19fUFVSRV9fICovbWVtb2l6ZShmdW5jdGlvbiAoc3R5bGVOYW1lKSB7XG4gIHJldHVybiBpc0N1c3RvbVByb3BlcnR5KHN0eWxlTmFtZSkgPyBzdHlsZU5hbWUgOiBzdHlsZU5hbWUucmVwbGFjZShoeXBoZW5hdGVSZWdleCwgJy0kJicpLnRvTG93ZXJDYXNlKCk7XG59KTtcblxudmFyIHByb2Nlc3NTdHlsZVZhbHVlID0gZnVuY3Rpb24gcHJvY2Vzc1N0eWxlVmFsdWUoa2V5LCB2YWx1ZSkge1xuICBzd2l0Y2ggKGtleSkge1xuICAgIGNhc2UgJ2FuaW1hdGlvbic6XG4gICAgY2FzZSAnYW5pbWF0aW9uTmFtZSc6XG4gICAgICB7XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlLnJlcGxhY2UoYW5pbWF0aW9uUmVnZXgsIGZ1bmN0aW9uIChtYXRjaCwgcDEsIHAyKSB7XG4gICAgICAgICAgICBjdXJzb3IgPSB7XG4gICAgICAgICAgICAgIG5hbWU6IHAxLFxuICAgICAgICAgICAgICBzdHlsZXM6IHAyLFxuICAgICAgICAgICAgICBuZXh0OiBjdXJzb3JcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4gcDE7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgfVxuXG4gIGlmICh1bml0bGVzc1trZXldICE9PSAxICYmICFpc0N1c3RvbVByb3BlcnR5KGtleSkgJiYgdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyAmJiB2YWx1ZSAhPT0gMCkge1xuICAgIHJldHVybiB2YWx1ZSArICdweCc7XG4gIH1cblxuICByZXR1cm4gdmFsdWU7XG59O1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgY29udGVudFZhbHVlUGF0dGVybiA9IC8odmFyfGF0dHJ8Y291bnRlcnM/fHVybHxlbGVtZW50fCgoKHJlcGVhdGluZy0pPyhsaW5lYXJ8cmFkaWFsKSl8Y29uaWMpLWdyYWRpZW50KVxcKHwobm8tKT8ob3BlbnxjbG9zZSktcXVvdGUvO1xuICB2YXIgY29udGVudFZhbHVlcyA9IFsnbm9ybWFsJywgJ25vbmUnLCAnaW5pdGlhbCcsICdpbmhlcml0JywgJ3Vuc2V0J107XG4gIHZhciBvbGRQcm9jZXNzU3R5bGVWYWx1ZSA9IHByb2Nlc3NTdHlsZVZhbHVlO1xuICB2YXIgbXNQYXR0ZXJuID0gL14tbXMtLztcbiAgdmFyIGh5cGhlblBhdHRlcm4gPSAvLSguKS9nO1xuICB2YXIgaHlwaGVuYXRlZENhY2hlID0ge307XG5cbiAgcHJvY2Vzc1N0eWxlVmFsdWUgPSBmdW5jdGlvbiBwcm9jZXNzU3R5bGVWYWx1ZShrZXksIHZhbHVlKSB7XG4gICAgaWYgKGtleSA9PT0gJ2NvbnRlbnQnKSB7XG4gICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJyB8fCBjb250ZW50VmFsdWVzLmluZGV4T2YodmFsdWUpID09PSAtMSAmJiAhY29udGVudFZhbHVlUGF0dGVybi50ZXN0KHZhbHVlKSAmJiAodmFsdWUuY2hhckF0KDApICE9PSB2YWx1ZS5jaGFyQXQodmFsdWUubGVuZ3RoIC0gMSkgfHwgdmFsdWUuY2hhckF0KDApICE9PSAnXCInICYmIHZhbHVlLmNoYXJBdCgwKSAhPT0gXCInXCIpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIllvdSBzZWVtIHRvIGJlIHVzaW5nIGEgdmFsdWUgZm9yICdjb250ZW50JyB3aXRob3V0IHF1b3RlcywgdHJ5IHJlcGxhY2luZyBpdCB3aXRoIGBjb250ZW50OiAnXFxcIlwiICsgdmFsdWUgKyBcIlxcXCInYFwiKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgcHJvY2Vzc2VkID0gb2xkUHJvY2Vzc1N0eWxlVmFsdWUoa2V5LCB2YWx1ZSk7XG5cbiAgICBpZiAocHJvY2Vzc2VkICE9PSAnJyAmJiAhaXNDdXN0b21Qcm9wZXJ0eShrZXkpICYmIGtleS5pbmRleE9mKCctJykgIT09IC0xICYmIGh5cGhlbmF0ZWRDYWNoZVtrZXldID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGh5cGhlbmF0ZWRDYWNoZVtrZXldID0gdHJ1ZTtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJVc2luZyBrZWJhYi1jYXNlIGZvciBjc3MgcHJvcGVydGllcyBpbiBvYmplY3RzIGlzIG5vdCBzdXBwb3J0ZWQuIERpZCB5b3UgbWVhbiBcIiArIGtleS5yZXBsYWNlKG1zUGF0dGVybiwgJ21zLScpLnJlcGxhY2UoaHlwaGVuUGF0dGVybiwgZnVuY3Rpb24gKHN0ciwgX2NoYXIpIHtcbiAgICAgICAgcmV0dXJuIF9jaGFyLnRvVXBwZXJDYXNlKCk7XG4gICAgICB9KSArIFwiP1wiKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJvY2Vzc2VkO1xuICB9O1xufVxuXG52YXIgbm9Db21wb25lbnRTZWxlY3Rvck1lc3NhZ2UgPSAnQ29tcG9uZW50IHNlbGVjdG9ycyBjYW4gb25seSBiZSB1c2VkIGluIGNvbmp1bmN0aW9uIHdpdGggJyArICdAZW1vdGlvbi9iYWJlbC1wbHVnaW4sIHRoZSBzd2MgRW1vdGlvbiBwbHVnaW4sIG9yIGFub3RoZXIgRW1vdGlvbi1hd2FyZSAnICsgJ2NvbXBpbGVyIHRyYW5zZm9ybS4nO1xuXG5mdW5jdGlvbiBoYW5kbGVJbnRlcnBvbGF0aW9uKG1lcmdlZFByb3BzLCByZWdpc3RlcmVkLCBpbnRlcnBvbGF0aW9uKSB7XG4gIGlmIChpbnRlcnBvbGF0aW9uID09IG51bGwpIHtcbiAgICByZXR1cm4gJyc7XG4gIH1cblxuICBpZiAoaW50ZXJwb2xhdGlvbi5fX2Vtb3Rpb25fc3R5bGVzICE9PSB1bmRlZmluZWQpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBpbnRlcnBvbGF0aW9uLnRvU3RyaW5nKCkgPT09ICdOT19DT01QT05FTlRfU0VMRUNUT1InKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3Iobm9Db21wb25lbnRTZWxlY3Rvck1lc3NhZ2UpO1xuICAgIH1cblxuICAgIHJldHVybiBpbnRlcnBvbGF0aW9uO1xuICB9XG5cbiAgc3dpdGNoICh0eXBlb2YgaW50ZXJwb2xhdGlvbikge1xuICAgIGNhc2UgJ2Jvb2xlYW4nOlxuICAgICAge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9XG5cbiAgICBjYXNlICdvYmplY3QnOlxuICAgICAge1xuICAgICAgICBpZiAoaW50ZXJwb2xhdGlvbi5hbmltID09PSAxKSB7XG4gICAgICAgICAgY3Vyc29yID0ge1xuICAgICAgICAgICAgbmFtZTogaW50ZXJwb2xhdGlvbi5uYW1lLFxuICAgICAgICAgICAgc3R5bGVzOiBpbnRlcnBvbGF0aW9uLnN0eWxlcyxcbiAgICAgICAgICAgIG5leHQ6IGN1cnNvclxuICAgICAgICAgIH07XG4gICAgICAgICAgcmV0dXJuIGludGVycG9sYXRpb24ubmFtZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpbnRlcnBvbGF0aW9uLnN0eWxlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdmFyIG5leHQgPSBpbnRlcnBvbGF0aW9uLm5leHQ7XG5cbiAgICAgICAgICBpZiAobmV4dCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAvLyBub3QgdGhlIG1vc3QgZWZmaWNpZW50IHRoaW5nIGV2ZXIgYnV0IHRoaXMgaXMgYSBwcmV0dHkgcmFyZSBjYXNlXG4gICAgICAgICAgICAvLyBhbmQgdGhlcmUgd2lsbCBiZSB2ZXJ5IGZldyBpdGVyYXRpb25zIG9mIHRoaXMgZ2VuZXJhbGx5XG4gICAgICAgICAgICB3aGlsZSAobmV4dCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgIGN1cnNvciA9IHtcbiAgICAgICAgICAgICAgICBuYW1lOiBuZXh0Lm5hbWUsXG4gICAgICAgICAgICAgICAgc3R5bGVzOiBuZXh0LnN0eWxlcyxcbiAgICAgICAgICAgICAgICBuZXh0OiBjdXJzb3JcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgbmV4dCA9IG5leHQubmV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgc3R5bGVzID0gaW50ZXJwb2xhdGlvbi5zdHlsZXMgKyBcIjtcIjtcblxuICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGludGVycG9sYXRpb24ubWFwICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHN0eWxlcyArPSBpbnRlcnBvbGF0aW9uLm1hcDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gc3R5bGVzO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNyZWF0ZVN0cmluZ0Zyb21PYmplY3QobWVyZ2VkUHJvcHMsIHJlZ2lzdGVyZWQsIGludGVycG9sYXRpb24pO1xuICAgICAgfVxuXG4gICAgY2FzZSAnZnVuY3Rpb24nOlxuICAgICAge1xuICAgICAgICBpZiAobWVyZ2VkUHJvcHMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHZhciBwcmV2aW91c0N1cnNvciA9IGN1cnNvcjtcbiAgICAgICAgICB2YXIgcmVzdWx0ID0gaW50ZXJwb2xhdGlvbihtZXJnZWRQcm9wcyk7XG4gICAgICAgICAgY3Vyc29yID0gcHJldmlvdXNDdXJzb3I7XG4gICAgICAgICAgcmV0dXJuIGhhbmRsZUludGVycG9sYXRpb24obWVyZ2VkUHJvcHMsIHJlZ2lzdGVyZWQsIHJlc3VsdCk7XG4gICAgICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Z1bmN0aW9ucyB0aGF0IGFyZSBpbnRlcnBvbGF0ZWQgaW4gY3NzIGNhbGxzIHdpbGwgYmUgc3RyaW5naWZpZWQuXFxuJyArICdJZiB5b3Ugd2FudCB0byBoYXZlIGEgY3NzIGNhbGwgYmFzZWQgb24gcHJvcHMsIGNyZWF0ZSBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIGNzcyBjYWxsIGxpa2UgdGhpc1xcbicgKyAnbGV0IGR5bmFtaWNTdHlsZSA9IChwcm9wcykgPT4gY3NzYGNvbG9yOiAke3Byb3BzLmNvbG9yfWBcXG4nICsgJ0l0IGNhbiBiZSBjYWxsZWQgZGlyZWN0bHkgd2l0aCBwcm9wcyBvciBpbnRlcnBvbGF0ZWQgaW4gYSBzdHlsZWQgY2FsbCBsaWtlIHRoaXNcXG4nICsgXCJsZXQgU29tZUNvbXBvbmVudCA9IHN0eWxlZCgnZGl2JylgJHtkeW5hbWljU3R5bGV9YFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIHZhciBtYXRjaGVkID0gW107XG4gICAgICAgIHZhciByZXBsYWNlZCA9IGludGVycG9sYXRpb24ucmVwbGFjZShhbmltYXRpb25SZWdleCwgZnVuY3Rpb24gKG1hdGNoLCBwMSwgcDIpIHtcbiAgICAgICAgICB2YXIgZmFrZVZhck5hbWUgPSBcImFuaW1hdGlvblwiICsgbWF0Y2hlZC5sZW5ndGg7XG4gICAgICAgICAgbWF0Y2hlZC5wdXNoKFwiY29uc3QgXCIgKyBmYWtlVmFyTmFtZSArIFwiID0ga2V5ZnJhbWVzYFwiICsgcDIucmVwbGFjZSgvXkBrZXlmcmFtZXMgYW5pbWF0aW9uLVxcdysvLCAnJykgKyBcImBcIik7XG4gICAgICAgICAgcmV0dXJuIFwiJHtcIiArIGZha2VWYXJOYW1lICsgXCJ9XCI7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChtYXRjaGVkLmxlbmd0aCkge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ2BrZXlmcmFtZXNgIG91dHB1dCBnb3QgaW50ZXJwb2xhdGVkIGludG8gcGxhaW4gc3RyaW5nLCBwbGVhc2Ugd3JhcCBpdCB3aXRoIGBjc3NgLlxcblxcbicgKyAnSW5zdGVhZCBvZiBkb2luZyB0aGlzOlxcblxcbicgKyBbXS5jb25jYXQobWF0Y2hlZCwgW1wiYFwiICsgcmVwbGFjZWQgKyBcImBcIl0pLmpvaW4oJ1xcbicpICsgJ1xcblxcbllvdSBzaG91bGQgd3JhcCBpdCB3aXRoIGBjc3NgIGxpa2UgdGhpczpcXG5cXG4nICsgKFwiY3NzYFwiICsgcmVwbGFjZWQgKyBcImBcIikpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGJyZWFrO1xuICB9IC8vIGZpbmFsaXplIHN0cmluZyB2YWx1ZXMgKHJlZ3VsYXIgc3RyaW5ncyBhbmQgZnVuY3Rpb25zIGludGVycG9sYXRlZCBpbnRvIGNzcyBjYWxscylcblxuXG4gIGlmIChyZWdpc3RlcmVkID09IG51bGwpIHtcbiAgICByZXR1cm4gaW50ZXJwb2xhdGlvbjtcbiAgfVxuXG4gIHZhciBjYWNoZWQgPSByZWdpc3RlcmVkW2ludGVycG9sYXRpb25dO1xuICByZXR1cm4gY2FjaGVkICE9PSB1bmRlZmluZWQgPyBjYWNoZWQgOiBpbnRlcnBvbGF0aW9uO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVTdHJpbmdGcm9tT2JqZWN0KG1lcmdlZFByb3BzLCByZWdpc3RlcmVkLCBvYmopIHtcbiAgdmFyIHN0cmluZyA9ICcnO1xuXG4gIGlmIChBcnJheS5pc0FycmF5KG9iaikpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9iai5sZW5ndGg7IGkrKykge1xuICAgICAgc3RyaW5nICs9IGhhbmRsZUludGVycG9sYXRpb24obWVyZ2VkUHJvcHMsIHJlZ2lzdGVyZWQsIG9ialtpXSkgKyBcIjtcIjtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgZm9yICh2YXIgX2tleSBpbiBvYmopIHtcbiAgICAgIHZhciB2YWx1ZSA9IG9ialtfa2V5XTtcblxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgaWYgKHJlZ2lzdGVyZWQgIT0gbnVsbCAmJiByZWdpc3RlcmVkW3ZhbHVlXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgc3RyaW5nICs9IF9rZXkgKyBcIntcIiArIHJlZ2lzdGVyZWRbdmFsdWVdICsgXCJ9XCI7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNQcm9jZXNzYWJsZVZhbHVlKHZhbHVlKSkge1xuICAgICAgICAgIHN0cmluZyArPSBwcm9jZXNzU3R5bGVOYW1lKF9rZXkpICsgXCI6XCIgKyBwcm9jZXNzU3R5bGVWYWx1ZShfa2V5LCB2YWx1ZSkgKyBcIjtcIjtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKF9rZXkgPT09ICdOT19DT01QT05FTlRfU0VMRUNUT1InICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3Iobm9Db21wb25lbnRTZWxlY3Rvck1lc3NhZ2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpICYmIHR5cGVvZiB2YWx1ZVswXSA9PT0gJ3N0cmluZycgJiYgKHJlZ2lzdGVyZWQgPT0gbnVsbCB8fCByZWdpc3RlcmVkW3ZhbHVlWzBdXSA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCB2YWx1ZS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIGlmIChpc1Byb2Nlc3NhYmxlVmFsdWUodmFsdWVbX2ldKSkge1xuICAgICAgICAgICAgICBzdHJpbmcgKz0gcHJvY2Vzc1N0eWxlTmFtZShfa2V5KSArIFwiOlwiICsgcHJvY2Vzc1N0eWxlVmFsdWUoX2tleSwgdmFsdWVbX2ldKSArIFwiO1wiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgaW50ZXJwb2xhdGVkID0gaGFuZGxlSW50ZXJwb2xhdGlvbihtZXJnZWRQcm9wcywgcmVnaXN0ZXJlZCwgdmFsdWUpO1xuXG4gICAgICAgICAgc3dpdGNoIChfa2V5KSB7XG4gICAgICAgICAgICBjYXNlICdhbmltYXRpb24nOlxuICAgICAgICAgICAgY2FzZSAnYW5pbWF0aW9uTmFtZSc6XG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzdHJpbmcgKz0gcHJvY2Vzc1N0eWxlTmFtZShfa2V5KSArIFwiOlwiICsgaW50ZXJwb2xhdGVkICsgXCI7XCI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIF9rZXkgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFVOREVGSU5FRF9BU19PQkpFQ1RfS0VZX0VSUk9SKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBzdHJpbmcgKz0gX2tleSArIFwie1wiICsgaW50ZXJwb2xhdGVkICsgXCJ9XCI7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gc3RyaW5nO1xufVxuXG52YXIgbGFiZWxQYXR0ZXJuID0gL2xhYmVsOlxccyooW15cXHM7XFxue10rKVxccyooO3wkKS9nO1xudmFyIHNvdXJjZU1hcFBhdHRlcm47XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHNvdXJjZU1hcFBhdHRlcm4gPSAvXFwvXFwqI1xcc3NvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvblxcL2pzb247XFxTK1xccytcXCpcXC8vZztcbn0gLy8gdGhpcyBpcyB0aGUgY3Vyc29yIGZvciBrZXlmcmFtZXNcbi8vIGtleWZyYW1lcyBhcmUgc3RvcmVkIG9uIHRoZSBTZXJpYWxpemVkU3R5bGVzIG9iamVjdCBhcyBhIGxpbmtlZCBsaXN0XG5cblxudmFyIGN1cnNvcjtcbnZhciBzZXJpYWxpemVTdHlsZXMgPSBmdW5jdGlvbiBzZXJpYWxpemVTdHlsZXMoYXJncywgcmVnaXN0ZXJlZCwgbWVyZ2VkUHJvcHMpIHtcbiAgaWYgKGFyZ3MubGVuZ3RoID09PSAxICYmIHR5cGVvZiBhcmdzWzBdID09PSAnb2JqZWN0JyAmJiBhcmdzWzBdICE9PSBudWxsICYmIGFyZ3NbMF0uc3R5bGVzICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gYXJnc1swXTtcbiAgfVxuXG4gIHZhciBzdHJpbmdNb2RlID0gdHJ1ZTtcbiAgdmFyIHN0eWxlcyA9ICcnO1xuICBjdXJzb3IgPSB1bmRlZmluZWQ7XG4gIHZhciBzdHJpbmdzID0gYXJnc1swXTtcblxuICBpZiAoc3RyaW5ncyA9PSBudWxsIHx8IHN0cmluZ3MucmF3ID09PSB1bmRlZmluZWQpIHtcbiAgICBzdHJpbmdNb2RlID0gZmFsc2U7XG4gICAgc3R5bGVzICs9IGhhbmRsZUludGVycG9sYXRpb24obWVyZ2VkUHJvcHMsIHJlZ2lzdGVyZWQsIHN0cmluZ3MpO1xuICB9IGVsc2Uge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHN0cmluZ3NbMF0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgY29uc29sZS5lcnJvcihJTExFR0FMX0VTQ0FQRV9TRVFVRU5DRV9FUlJPUik7XG4gICAgfVxuXG4gICAgc3R5bGVzICs9IHN0cmluZ3NbMF07XG4gIH0gLy8gd2Ugc3RhcnQgYXQgMSBzaW5jZSB3ZSd2ZSBhbHJlYWR5IGhhbmRsZWQgdGhlIGZpcnN0IGFyZ1xuXG5cbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgc3R5bGVzICs9IGhhbmRsZUludGVycG9sYXRpb24obWVyZ2VkUHJvcHMsIHJlZ2lzdGVyZWQsIGFyZ3NbaV0pO1xuXG4gICAgaWYgKHN0cmluZ01vZGUpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHN0cmluZ3NbaV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKElMTEVHQUxfRVNDQVBFX1NFUVVFTkNFX0VSUk9SKTtcbiAgICAgIH1cblxuICAgICAgc3R5bGVzICs9IHN0cmluZ3NbaV07XG4gICAgfVxuICB9XG5cbiAgdmFyIHNvdXJjZU1hcDtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHN0eWxlcyA9IHN0eWxlcy5yZXBsYWNlKHNvdXJjZU1hcFBhdHRlcm4sIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgc291cmNlTWFwID0gbWF0Y2g7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfSk7XG4gIH0gLy8gdXNpbmcgYSBnbG9iYWwgcmVnZXggd2l0aCAuZXhlYyBpcyBzdGF0ZWZ1bCBzbyBsYXN0SW5kZXggaGFzIHRvIGJlIHJlc2V0IGVhY2ggdGltZVxuXG5cbiAgbGFiZWxQYXR0ZXJuLmxhc3RJbmRleCA9IDA7XG4gIHZhciBpZGVudGlmaWVyTmFtZSA9ICcnO1xuICB2YXIgbWF0Y2g7IC8vIGh0dHBzOi8vZXNiZW5jaC5jb20vYmVuY2gvNWI4MDljMmNmMjk0OTgwMGEwZjYxZmI1XG5cbiAgd2hpbGUgKChtYXRjaCA9IGxhYmVsUGF0dGVybi5leGVjKHN0eWxlcykpICE9PSBudWxsKSB7XG4gICAgaWRlbnRpZmllck5hbWUgKz0gJy0nICsgLy8gJEZsb3dGaXhNZSB3ZSBrbm93IGl0J3Mgbm90IG51bGxcbiAgICBtYXRjaFsxXTtcbiAgfVxuXG4gIHZhciBuYW1lID0gaGFzaFN0cmluZyhzdHlsZXMpICsgaWRlbnRpZmllck5hbWU7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyAkRmxvd0ZpeE1lIFNlcmlhbGl6ZWRTdHlsZXMgdHlwZSBkb2Vzbid0IGhhdmUgdG9TdHJpbmcgcHJvcGVydHkgKGFuZCB3ZSBkb24ndCB3YW50IHRvIGFkZCBpdClcbiAgICByZXR1cm4ge1xuICAgICAgbmFtZTogbmFtZSxcbiAgICAgIHN0eWxlczogc3R5bGVzLFxuICAgICAgbWFwOiBzb3VyY2VNYXAsXG4gICAgICBuZXh0OiBjdXJzb3IsXG4gICAgICB0b1N0cmluZzogZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiBcIllvdSBoYXZlIHRyaWVkIHRvIHN0cmluZ2lmeSBvYmplY3QgcmV0dXJuZWQgZnJvbSBgY3NzYCBmdW5jdGlvbi4gSXQgaXNuJ3Qgc3VwcG9zZWQgdG8gYmUgdXNlZCBkaXJlY3RseSAoZS5nLiBhcyB2YWx1ZSBvZiB0aGUgYGNsYXNzTmFtZWAgcHJvcCksIGJ1dCByYXRoZXIgaGFuZGVkIHRvIGVtb3Rpb24gc28gaXQgY2FuIGhhbmRsZSBpdCAoZS5nLiBhcyB2YWx1ZSBvZiBgY3NzYCBwcm9wKS5cIjtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBuYW1lLFxuICAgIHN0eWxlczogc3R5bGVzLFxuICAgIG5leHQ6IGN1cnNvclxuICB9O1xufTtcblxuZXhwb3J0IHsgc2VyaWFsaXplU3R5bGVzIH07XG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VMYXlvdXRFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5cbnZhciBzeW5jRmFsbGJhY2sgPSBmdW5jdGlvbiBzeW5jRmFsbGJhY2soY3JlYXRlKSB7XG4gIHJldHVybiBjcmVhdGUoKTtcbn07XG5cbnZhciB1c2VJbnNlcnRpb25FZmZlY3QgPSBSZWFjdFsndXNlSW5zZXJ0aW9uJyArICdFZmZlY3QnXSA/IFJlYWN0Wyd1c2VJbnNlcnRpb24nICsgJ0VmZmVjdCddIDogZmFsc2U7XG52YXIgdXNlSW5zZXJ0aW9uRWZmZWN0QWx3YXlzV2l0aFN5bmNGYWxsYmFjayA9ICB1c2VJbnNlcnRpb25FZmZlY3QgfHwgc3luY0ZhbGxiYWNrO1xudmFyIHVzZUluc2VydGlvbkVmZmVjdFdpdGhMYXlvdXRGYWxsYmFjayA9IHVzZUluc2VydGlvbkVmZmVjdCB8fCB1c2VMYXlvdXRFZmZlY3Q7XG5cbmV4cG9ydCB7IHVzZUluc2VydGlvbkVmZmVjdEFsd2F5c1dpdGhTeW5jRmFsbGJhY2ssIHVzZUluc2VydGlvbkVmZmVjdFdpdGhMYXlvdXRGYWxsYmFjayB9O1xuIiwiaW1wb3J0IHsgY3JlYXRlQ29udGV4dCwgdXNlQ29udGV4dCwgZm9yd2FyZFJlZiwgY3JlYXRlRWxlbWVudCwgRnJhZ21lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY3JlYXRlQ2FjaGUgZnJvbSAnQGVtb3Rpb24vY2FjaGUnO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMnO1xuaW1wb3J0IHdlYWtNZW1vaXplIGZyb20gJ0BlbW90aW9uL3dlYWstbWVtb2l6ZSc7XG5pbXBvcnQgaG9pc3ROb25SZWFjdFN0YXRpY3MgZnJvbSAnLi4vX2lzb2xhdGVkLWhucnMvZGlzdC9lbW90aW9uLXJlYWN0LV9pc29sYXRlZC1obnJzLmJyb3dzZXIuZXNtLmpzJztcbmltcG9ydCB7IGdldFJlZ2lzdGVyZWRTdHlsZXMsIHJlZ2lzdGVyU3R5bGVzLCBpbnNlcnRTdHlsZXMgfSBmcm9tICdAZW1vdGlvbi91dGlscyc7XG5pbXBvcnQgeyBzZXJpYWxpemVTdHlsZXMgfSBmcm9tICdAZW1vdGlvbi9zZXJpYWxpemUnO1xuaW1wb3J0IHsgdXNlSW5zZXJ0aW9uRWZmZWN0QWx3YXlzV2l0aFN5bmNGYWxsYmFjayB9IGZyb20gJ0BlbW90aW9uL3VzZS1pbnNlcnRpb24tZWZmZWN0LXdpdGgtZmFsbGJhY2tzJztcblxudmFyIGhhc093blByb3BlcnR5ID0ge30uaGFzT3duUHJvcGVydHk7XG5cbnZhciBFbW90aW9uQ2FjaGVDb250ZXh0ID0gLyogI19fUFVSRV9fICovY3JlYXRlQ29udGV4dCggLy8gd2UncmUgZG9pbmcgdGhpcyB0byBhdm9pZCBwcmVjb25zdHJ1Y3QncyBkZWFkIGNvZGUgZWxpbWluYXRpb24gaW4gdGhpcyBvbmUgY2FzZVxuLy8gYmVjYXVzZSB0aGlzIG1vZHVsZSBpcyBwcmltYXJpbHkgaW50ZW5kZWQgZm9yIHRoZSBicm93c2VyIGFuZCBub2RlXG4vLyBidXQgaXQncyBhbHNvIHJlcXVpcmVkIGluIHJlYWN0IG5hdGl2ZSBhbmQgc2ltaWxhciBlbnZpcm9ubWVudHMgc29tZXRpbWVzXG4vLyBhbmQgd2UgY291bGQgaGF2ZSBhIHNwZWNpYWwgYnVpbGQganVzdCBmb3IgdGhhdFxuLy8gYnV0IHRoaXMgaXMgbXVjaCBlYXNpZXIgYW5kIHRoZSBuYXRpdmUgcGFja2FnZXNcbi8vIG1pZ2h0IHVzZSBhIGRpZmZlcmVudCB0aGVtZSBjb250ZXh0IGluIHRoZSBmdXR1cmUgYW55d2F5XG50eXBlb2YgSFRNTEVsZW1lbnQgIT09ICd1bmRlZmluZWQnID8gLyogI19fUFVSRV9fICovY3JlYXRlQ2FjaGUoe1xuICBrZXk6ICdjc3MnXG59KSA6IG51bGwpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBFbW90aW9uQ2FjaGVDb250ZXh0LmRpc3BsYXlOYW1lID0gJ0Vtb3Rpb25DYWNoZUNvbnRleHQnO1xufVxuXG52YXIgQ2FjaGVQcm92aWRlciA9IEVtb3Rpb25DYWNoZUNvbnRleHQuUHJvdmlkZXI7XG52YXIgX191bnNhZmVfdXNlRW1vdGlvbkNhY2hlID0gZnVuY3Rpb24gdXNlRW1vdGlvbkNhY2hlKCkge1xuICByZXR1cm4gdXNlQ29udGV4dChFbW90aW9uQ2FjaGVDb250ZXh0KTtcbn07XG5cbnZhciB3aXRoRW1vdGlvbkNhY2hlID0gZnVuY3Rpb24gd2l0aEVtb3Rpb25DYWNoZShmdW5jKSB7XG4gIC8vICRGbG93Rml4TWVcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9mb3J3YXJkUmVmKGZ1bmN0aW9uIChwcm9wcywgcmVmKSB7XG4gICAgLy8gdGhlIGNhY2hlIHdpbGwgbmV2ZXIgYmUgbnVsbCBpbiB0aGUgYnJvd3NlclxuICAgIHZhciBjYWNoZSA9IHVzZUNvbnRleHQoRW1vdGlvbkNhY2hlQ29udGV4dCk7XG4gICAgcmV0dXJuIGZ1bmMocHJvcHMsIGNhY2hlLCByZWYpO1xuICB9KTtcbn07XG5cbnZhciBUaGVtZUNvbnRleHQgPSAvKiAjX19QVVJFX18gKi9jcmVhdGVDb250ZXh0KHt9KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgVGhlbWVDb250ZXh0LmRpc3BsYXlOYW1lID0gJ0Vtb3Rpb25UaGVtZUNvbnRleHQnO1xufVxuXG52YXIgdXNlVGhlbWUgPSBmdW5jdGlvbiB1c2VUaGVtZSgpIHtcbiAgcmV0dXJuIHVzZUNvbnRleHQoVGhlbWVDb250ZXh0KTtcbn07XG5cbnZhciBnZXRUaGVtZSA9IGZ1bmN0aW9uIGdldFRoZW1lKG91dGVyVGhlbWUsIHRoZW1lKSB7XG4gIGlmICh0eXBlb2YgdGhlbWUgPT09ICdmdW5jdGlvbicpIHtcbiAgICB2YXIgbWVyZ2VkVGhlbWUgPSB0aGVtZShvdXRlclRoZW1lKTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIChtZXJnZWRUaGVtZSA9PSBudWxsIHx8IHR5cGVvZiBtZXJnZWRUaGVtZSAhPT0gJ29iamVjdCcgfHwgQXJyYXkuaXNBcnJheShtZXJnZWRUaGVtZSkpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1tUaGVtZVByb3ZpZGVyXSBQbGVhc2UgcmV0dXJuIGFuIG9iamVjdCBmcm9tIHlvdXIgdGhlbWUgZnVuY3Rpb24sIGkuZS4gdGhlbWU9eygpID0+ICh7fSl9IScpO1xuICAgIH1cblxuICAgIHJldHVybiBtZXJnZWRUaGVtZTtcbiAgfVxuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICh0aGVtZSA9PSBudWxsIHx8IHR5cGVvZiB0aGVtZSAhPT0gJ29iamVjdCcgfHwgQXJyYXkuaXNBcnJheSh0aGVtZSkpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdbVGhlbWVQcm92aWRlcl0gUGxlYXNlIG1ha2UgeW91ciB0aGVtZSBwcm9wIGEgcGxhaW4gb2JqZWN0Jyk7XG4gIH1cblxuICByZXR1cm4gX2V4dGVuZHMoe30sIG91dGVyVGhlbWUsIHRoZW1lKTtcbn07XG5cbnZhciBjcmVhdGVDYWNoZVdpdGhUaGVtZSA9IC8qICNfX1BVUkVfXyAqL3dlYWtNZW1vaXplKGZ1bmN0aW9uIChvdXRlclRoZW1lKSB7XG4gIHJldHVybiB3ZWFrTWVtb2l6ZShmdW5jdGlvbiAodGhlbWUpIHtcbiAgICByZXR1cm4gZ2V0VGhlbWUob3V0ZXJUaGVtZSwgdGhlbWUpO1xuICB9KTtcbn0pO1xudmFyIFRoZW1lUHJvdmlkZXIgPSBmdW5jdGlvbiBUaGVtZVByb3ZpZGVyKHByb3BzKSB7XG4gIHZhciB0aGVtZSA9IHVzZUNvbnRleHQoVGhlbWVDb250ZXh0KTtcblxuICBpZiAocHJvcHMudGhlbWUgIT09IHRoZW1lKSB7XG4gICAgdGhlbWUgPSBjcmVhdGVDYWNoZVdpdGhUaGVtZSh0aGVtZSkocHJvcHMudGhlbWUpO1xuICB9XG5cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KFRoZW1lQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiB0aGVtZVxuICB9LCBwcm9wcy5jaGlsZHJlbik7XG59O1xuZnVuY3Rpb24gd2l0aFRoZW1lKENvbXBvbmVudCkge1xuICB2YXIgY29tcG9uZW50TmFtZSA9IENvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCBDb21wb25lbnQubmFtZSB8fCAnQ29tcG9uZW50JztcblxuICB2YXIgcmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKHByb3BzLCByZWYpIHtcbiAgICB2YXIgdGhlbWUgPSB1c2VDb250ZXh0KFRoZW1lQ29udGV4dCk7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgICAgdGhlbWU6IHRoZW1lLFxuICAgICAgcmVmOiByZWZcbiAgICB9LCBwcm9wcykpO1xuICB9OyAvLyAkRmxvd0ZpeE1lXG5cblxuICB2YXIgV2l0aFRoZW1lID0gLyojX19QVVJFX18qL2ZvcndhcmRSZWYocmVuZGVyKTtcbiAgV2l0aFRoZW1lLmRpc3BsYXlOYW1lID0gXCJXaXRoVGhlbWUoXCIgKyBjb21wb25lbnROYW1lICsgXCIpXCI7XG4gIHJldHVybiBob2lzdE5vblJlYWN0U3RhdGljcyhXaXRoVGhlbWUsIENvbXBvbmVudCk7XG59XG5cbnZhciBnZXRMYXN0UGFydCA9IGZ1bmN0aW9uIGdldExhc3RQYXJ0KGZ1bmN0aW9uTmFtZSkge1xuICAvLyBUaGUgbWF0Y2ggbWF5IGJlIHNvbWV0aGluZyBsaWtlICdPYmplY3QuY3JlYXRlRW1vdGlvblByb3BzJyBvclxuICAvLyAnTG9hZGVyLnByb3RvdHlwZS5yZW5kZXInXG4gIHZhciBwYXJ0cyA9IGZ1bmN0aW9uTmFtZS5zcGxpdCgnLicpO1xuICByZXR1cm4gcGFydHNbcGFydHMubGVuZ3RoIC0gMV07XG59O1xuXG52YXIgZ2V0RnVuY3Rpb25OYW1lRnJvbVN0YWNrVHJhY2VMaW5lID0gZnVuY3Rpb24gZ2V0RnVuY3Rpb25OYW1lRnJvbVN0YWNrVHJhY2VMaW5lKGxpbmUpIHtcbiAgLy8gVjhcbiAgdmFyIG1hdGNoID0gL15cXHMrYXRcXHMrKFtBLVphLXowLTkkLl0rKVxccy8uZXhlYyhsaW5lKTtcbiAgaWYgKG1hdGNoKSByZXR1cm4gZ2V0TGFzdFBhcnQobWF0Y2hbMV0pOyAvLyBTYWZhcmkgLyBGaXJlZm94XG5cbiAgbWF0Y2ggPSAvXihbQS1aYS16MC05JC5dKylALy5leGVjKGxpbmUpO1xuICBpZiAobWF0Y2gpIHJldHVybiBnZXRMYXN0UGFydChtYXRjaFsxXSk7XG4gIHJldHVybiB1bmRlZmluZWQ7XG59O1xuXG52YXIgaW50ZXJuYWxSZWFjdEZ1bmN0aW9uTmFtZXMgPSAvKiAjX19QVVJFX18gKi9uZXcgU2V0KFsncmVuZGVyV2l0aEhvb2tzJywgJ3Byb2Nlc3NDaGlsZCcsICdmaW5pc2hDbGFzc0NvbXBvbmVudCcsICdyZW5kZXJUb1N0cmluZyddKTsgLy8gVGhlc2UgaWRlbnRpZmllcnMgY29tZSBmcm9tIGVycm9yIHN0YWNrcywgc28gdGhleSBoYXZlIHRvIGJlIHZhbGlkIEpTXG4vLyBpZGVudGlmaWVycywgdGh1cyB3ZSBvbmx5IG5lZWQgdG8gcmVwbGFjZSB3aGF0IGlzIGEgdmFsaWQgY2hhcmFjdGVyIGZvciBKUyxcbi8vIGJ1dCBub3QgZm9yIENTUy5cblxudmFyIHNhbml0aXplSWRlbnRpZmllciA9IGZ1bmN0aW9uIHNhbml0aXplSWRlbnRpZmllcihpZGVudGlmaWVyKSB7XG4gIHJldHVybiBpZGVudGlmaWVyLnJlcGxhY2UoL1xcJC9nLCAnLScpO1xufTtcblxudmFyIGdldExhYmVsRnJvbVN0YWNrVHJhY2UgPSBmdW5jdGlvbiBnZXRMYWJlbEZyb21TdGFja1RyYWNlKHN0YWNrVHJhY2UpIHtcbiAgaWYgKCFzdGFja1RyYWNlKSByZXR1cm4gdW5kZWZpbmVkO1xuICB2YXIgbGluZXMgPSBzdGFja1RyYWNlLnNwbGl0KCdcXG4nKTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpbmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGZ1bmN0aW9uTmFtZSA9IGdldEZ1bmN0aW9uTmFtZUZyb21TdGFja1RyYWNlTGluZShsaW5lc1tpXSk7IC8vIFRoZSBmaXJzdCBsaW5lIG9mIFY4IHN0YWNrIHRyYWNlcyBpcyBqdXN0IFwiRXJyb3JcIlxuXG4gICAgaWYgKCFmdW5jdGlvbk5hbWUpIGNvbnRpbnVlOyAvLyBJZiB3ZSByZWFjaCBvbmUgb2YgdGhlc2UsIHdlIGhhdmUgZ29uZSB0b28gZmFyIGFuZCBzaG91bGQgcXVpdFxuXG4gICAgaWYgKGludGVybmFsUmVhY3RGdW5jdGlvbk5hbWVzLmhhcyhmdW5jdGlvbk5hbWUpKSBicmVhazsgLy8gVGhlIGNvbXBvbmVudCBuYW1lIGlzIHRoZSBmaXJzdCBmdW5jdGlvbiBpbiB0aGUgc3RhY2sgdGhhdCBzdGFydHMgd2l0aCBhblxuICAgIC8vIHVwcGVyY2FzZSBsZXR0ZXJcblxuICAgIGlmICgvXltBLVpdLy50ZXN0KGZ1bmN0aW9uTmFtZSkpIHJldHVybiBzYW5pdGl6ZUlkZW50aWZpZXIoZnVuY3Rpb25OYW1lKTtcbiAgfVxuXG4gIHJldHVybiB1bmRlZmluZWQ7XG59O1xuXG52YXIgdHlwZVByb3BOYW1lID0gJ19fRU1PVElPTl9UWVBFX1BMRUFTRV9ET19OT1RfVVNFX18nO1xudmFyIGxhYmVsUHJvcE5hbWUgPSAnX19FTU9USU9OX0xBQkVMX1BMRUFTRV9ET19OT1RfVVNFX18nO1xudmFyIGNyZWF0ZUVtb3Rpb25Qcm9wcyA9IGZ1bmN0aW9uIGNyZWF0ZUVtb3Rpb25Qcm9wcyh0eXBlLCBwcm9wcykge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB0eXBlb2YgcHJvcHMuY3NzID09PSAnc3RyaW5nJyAmJiAvLyBjaGVjayBpZiB0aGVyZSBpcyBhIGNzcyBkZWNsYXJhdGlvblxuICBwcm9wcy5jc3MuaW5kZXhPZignOicpICE9PSAtMSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIlN0cmluZ3MgYXJlIG5vdCBhbGxvd2VkIGFzIGNzcyBwcm9wIHZhbHVlcywgcGxlYXNlIHdyYXAgaXQgaW4gYSBjc3MgdGVtcGxhdGUgbGl0ZXJhbCBmcm9tICdAZW1vdGlvbi9yZWFjdCcgbGlrZSB0aGlzOiBjc3NgXCIgKyBwcm9wcy5jc3MgKyBcImBcIik7XG4gIH1cblxuICB2YXIgbmV3UHJvcHMgPSB7fTtcblxuICBmb3IgKHZhciBrZXkgaW4gcHJvcHMpIHtcbiAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChwcm9wcywga2V5KSkge1xuICAgICAgbmV3UHJvcHNba2V5XSA9IHByb3BzW2tleV07XG4gICAgfVxuICB9XG5cbiAgbmV3UHJvcHNbdHlwZVByb3BOYW1lXSA9IHR5cGU7IC8vIEZvciBwZXJmb3JtYW5jZSwgb25seSBjYWxsIGdldExhYmVsRnJvbVN0YWNrVHJhY2UgaW4gZGV2ZWxvcG1lbnQgYW5kIHdoZW5cbiAgLy8gdGhlIGxhYmVsIGhhc24ndCBhbHJlYWR5IGJlZW4gY29tcHV0ZWRcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhIXByb3BzLmNzcyAmJiAodHlwZW9mIHByb3BzLmNzcyAhPT0gJ29iamVjdCcgfHwgdHlwZW9mIHByb3BzLmNzcy5uYW1lICE9PSAnc3RyaW5nJyB8fCBwcm9wcy5jc3MubmFtZS5pbmRleE9mKCctJykgPT09IC0xKSkge1xuICAgIHZhciBsYWJlbCA9IGdldExhYmVsRnJvbVN0YWNrVHJhY2UobmV3IEVycm9yKCkuc3RhY2spO1xuICAgIGlmIChsYWJlbCkgbmV3UHJvcHNbbGFiZWxQcm9wTmFtZV0gPSBsYWJlbDtcbiAgfVxuXG4gIHJldHVybiBuZXdQcm9wcztcbn07XG5cbnZhciBJbnNlcnRpb24gPSBmdW5jdGlvbiBJbnNlcnRpb24oX3JlZikge1xuICB2YXIgY2FjaGUgPSBfcmVmLmNhY2hlLFxuICAgICAgc2VyaWFsaXplZCA9IF9yZWYuc2VyaWFsaXplZCxcbiAgICAgIGlzU3RyaW5nVGFnID0gX3JlZi5pc1N0cmluZ1RhZztcbiAgcmVnaXN0ZXJTdHlsZXMoY2FjaGUsIHNlcmlhbGl6ZWQsIGlzU3RyaW5nVGFnKTtcbiAgdmFyIHJ1bGVzID0gdXNlSW5zZXJ0aW9uRWZmZWN0QWx3YXlzV2l0aFN5bmNGYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGluc2VydFN0eWxlcyhjYWNoZSwgc2VyaWFsaXplZCwgaXNTdHJpbmdUYWcpO1xuICB9KTtcblxuICByZXR1cm4gbnVsbDtcbn07XG5cbnZhciBFbW90aW9uID0gLyogI19fUFVSRV9fICovd2l0aEVtb3Rpb25DYWNoZShmdW5jdGlvbiAocHJvcHMsIGNhY2hlLCByZWYpIHtcbiAgdmFyIGNzc1Byb3AgPSBwcm9wcy5jc3M7IC8vIHNvIHRoYXQgdXNpbmcgYGNzc2AgZnJvbSBgZW1vdGlvbmAgYW5kIHBhc3NpbmcgdGhlIHJlc3VsdCB0byB0aGUgY3NzIHByb3Agd29ya3NcbiAgLy8gbm90IHBhc3NpbmcgdGhlIHJlZ2lzdGVyZWQgY2FjaGUgdG8gc2VyaWFsaXplU3R5bGVzIGJlY2F1c2UgaXQgd291bGRcbiAgLy8gbWFrZSBjZXJ0YWluIGJhYmVsIG9wdGltaXNhdGlvbnMgbm90IHBvc3NpYmxlXG5cbiAgaWYgKHR5cGVvZiBjc3NQcm9wID09PSAnc3RyaW5nJyAmJiBjYWNoZS5yZWdpc3RlcmVkW2Nzc1Byb3BdICE9PSB1bmRlZmluZWQpIHtcbiAgICBjc3NQcm9wID0gY2FjaGUucmVnaXN0ZXJlZFtjc3NQcm9wXTtcbiAgfVxuXG4gIHZhciBXcmFwcGVkQ29tcG9uZW50ID0gcHJvcHNbdHlwZVByb3BOYW1lXTtcbiAgdmFyIHJlZ2lzdGVyZWRTdHlsZXMgPSBbY3NzUHJvcF07XG4gIHZhciBjbGFzc05hbWUgPSAnJztcblxuICBpZiAodHlwZW9mIHByb3BzLmNsYXNzTmFtZSA9PT0gJ3N0cmluZycpIHtcbiAgICBjbGFzc05hbWUgPSBnZXRSZWdpc3RlcmVkU3R5bGVzKGNhY2hlLnJlZ2lzdGVyZWQsIHJlZ2lzdGVyZWRTdHlsZXMsIHByb3BzLmNsYXNzTmFtZSk7XG4gIH0gZWxzZSBpZiAocHJvcHMuY2xhc3NOYW1lICE9IG51bGwpIHtcbiAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUgKyBcIiBcIjtcbiAgfVxuXG4gIHZhciBzZXJpYWxpemVkID0gc2VyaWFsaXplU3R5bGVzKHJlZ2lzdGVyZWRTdHlsZXMsIHVuZGVmaW5lZCwgdXNlQ29udGV4dChUaGVtZUNvbnRleHQpKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBzZXJpYWxpemVkLm5hbWUuaW5kZXhPZignLScpID09PSAtMSkge1xuICAgIHZhciBsYWJlbEZyb21TdGFjayA9IHByb3BzW2xhYmVsUHJvcE5hbWVdO1xuXG4gICAgaWYgKGxhYmVsRnJvbVN0YWNrKSB7XG4gICAgICBzZXJpYWxpemVkID0gc2VyaWFsaXplU3R5bGVzKFtzZXJpYWxpemVkLCAnbGFiZWw6JyArIGxhYmVsRnJvbVN0YWNrICsgJzsnXSk7XG4gICAgfVxuICB9XG5cbiAgY2xhc3NOYW1lICs9IGNhY2hlLmtleSArIFwiLVwiICsgc2VyaWFsaXplZC5uYW1lO1xuICB2YXIgbmV3UHJvcHMgPSB7fTtcblxuICBmb3IgKHZhciBrZXkgaW4gcHJvcHMpIHtcbiAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChwcm9wcywga2V5KSAmJiBrZXkgIT09ICdjc3MnICYmIGtleSAhPT0gdHlwZVByb3BOYW1lICYmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nIHx8IGtleSAhPT0gbGFiZWxQcm9wTmFtZSkpIHtcbiAgICAgIG5ld1Byb3BzW2tleV0gPSBwcm9wc1trZXldO1xuICAgIH1cbiAgfVxuXG4gIG5ld1Byb3BzLnJlZiA9IHJlZjtcbiAgbmV3UHJvcHMuY2xhc3NOYW1lID0gY2xhc3NOYW1lO1xuICByZXR1cm4gLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoRnJhZ21lbnQsIG51bGwsIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KEluc2VydGlvbiwge1xuICAgIGNhY2hlOiBjYWNoZSxcbiAgICBzZXJpYWxpemVkOiBzZXJpYWxpemVkLFxuICAgIGlzU3RyaW5nVGFnOiB0eXBlb2YgV3JhcHBlZENvbXBvbmVudCA9PT0gJ3N0cmluZydcbiAgfSksIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KFdyYXBwZWRDb21wb25lbnQsIG5ld1Byb3BzKSk7XG59KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgRW1vdGlvbi5kaXNwbGF5TmFtZSA9ICdFbW90aW9uQ3NzUHJvcEludGVybmFsJztcbn1cblxuZXhwb3J0IHsgQ2FjaGVQcm92aWRlciBhcyBDLCBFbW90aW9uIGFzIEUsIFRoZW1lQ29udGV4dCBhcyBULCBfX3Vuc2FmZV91c2VFbW90aW9uQ2FjaGUgYXMgXywgVGhlbWVQcm92aWRlciBhcyBhLCB3aXRoVGhlbWUgYXMgYiwgY3JlYXRlRW1vdGlvblByb3BzIGFzIGMsIGhhc093blByb3BlcnR5IGFzIGgsIHVzZVRoZW1lIGFzIHUsIHdpdGhFbW90aW9uQ2FjaGUgYXMgdyB9O1xuIiwidmFyIGlzQnJvd3NlciA9IFwib2JqZWN0XCIgIT09ICd1bmRlZmluZWQnO1xuZnVuY3Rpb24gZ2V0UmVnaXN0ZXJlZFN0eWxlcyhyZWdpc3RlcmVkLCByZWdpc3RlcmVkU3R5bGVzLCBjbGFzc05hbWVzKSB7XG4gIHZhciByYXdDbGFzc05hbWUgPSAnJztcbiAgY2xhc3NOYW1lcy5zcGxpdCgnICcpLmZvckVhY2goZnVuY3Rpb24gKGNsYXNzTmFtZSkge1xuICAgIGlmIChyZWdpc3RlcmVkW2NsYXNzTmFtZV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmVnaXN0ZXJlZFN0eWxlcy5wdXNoKHJlZ2lzdGVyZWRbY2xhc3NOYW1lXSArIFwiO1wiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmF3Q2xhc3NOYW1lICs9IGNsYXNzTmFtZSArIFwiIFwiO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiByYXdDbGFzc05hbWU7XG59XG52YXIgcmVnaXN0ZXJTdHlsZXMgPSBmdW5jdGlvbiByZWdpc3RlclN0eWxlcyhjYWNoZSwgc2VyaWFsaXplZCwgaXNTdHJpbmdUYWcpIHtcbiAgdmFyIGNsYXNzTmFtZSA9IGNhY2hlLmtleSArIFwiLVwiICsgc2VyaWFsaXplZC5uYW1lO1xuXG4gIGlmICggLy8gd2Ugb25seSBuZWVkIHRvIGFkZCB0aGUgc3R5bGVzIHRvIHRoZSByZWdpc3RlcmVkIGNhY2hlIGlmIHRoZVxuICAvLyBjbGFzcyBuYW1lIGNvdWxkIGJlIHVzZWQgZnVydGhlciBkb3duXG4gIC8vIHRoZSB0cmVlIGJ1dCBpZiBpdCdzIGEgc3RyaW5nIHRhZywgd2Uga25vdyBpdCB3b24ndFxuICAvLyBzbyB3ZSBkb24ndCBoYXZlIHRvIGFkZCBpdCB0byByZWdpc3RlcmVkIGNhY2hlLlxuICAvLyB0aGlzIGltcHJvdmVzIG1lbW9yeSB1c2FnZSBzaW5jZSB3ZSBjYW4gYXZvaWQgc3RvcmluZyB0aGUgd2hvbGUgc3R5bGUgc3RyaW5nXG4gIChpc1N0cmluZ1RhZyA9PT0gZmFsc2UgfHwgLy8gd2UgbmVlZCB0byBhbHdheXMgc3RvcmUgaXQgaWYgd2UncmUgaW4gY29tcGF0IG1vZGUgYW5kXG4gIC8vIGluIG5vZGUgc2luY2UgZW1vdGlvbi1zZXJ2ZXIgcmVsaWVzIG9uIHdoZXRoZXIgYSBzdHlsZSBpcyBpblxuICAvLyB0aGUgcmVnaXN0ZXJlZCBjYWNoZSB0byBrbm93IHdoZXRoZXIgYSBzdHlsZSBpcyBnbG9iYWwgb3Igbm90XG4gIC8vIGFsc28sIG5vdGUgdGhhdCB0aGlzIGNoZWNrIHdpbGwgYmUgZGVhZCBjb2RlIGVsaW1pbmF0ZWQgaW4gdGhlIGJyb3dzZXJcbiAgaXNCcm93c2VyID09PSBmYWxzZSApICYmIGNhY2hlLnJlZ2lzdGVyZWRbY2xhc3NOYW1lXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgY2FjaGUucmVnaXN0ZXJlZFtjbGFzc05hbWVdID0gc2VyaWFsaXplZC5zdHlsZXM7XG4gIH1cbn07XG52YXIgaW5zZXJ0U3R5bGVzID0gZnVuY3Rpb24gaW5zZXJ0U3R5bGVzKGNhY2hlLCBzZXJpYWxpemVkLCBpc1N0cmluZ1RhZykge1xuICByZWdpc3RlclN0eWxlcyhjYWNoZSwgc2VyaWFsaXplZCwgaXNTdHJpbmdUYWcpO1xuICB2YXIgY2xhc3NOYW1lID0gY2FjaGUua2V5ICsgXCItXCIgKyBzZXJpYWxpemVkLm5hbWU7XG5cbiAgaWYgKGNhY2hlLmluc2VydGVkW3NlcmlhbGl6ZWQubmFtZV0gPT09IHVuZGVmaW5lZCkge1xuICAgIHZhciBjdXJyZW50ID0gc2VyaWFsaXplZDtcblxuICAgIGRvIHtcbiAgICAgIHZhciBtYXliZVN0eWxlcyA9IGNhY2hlLmluc2VydChzZXJpYWxpemVkID09PSBjdXJyZW50ID8gXCIuXCIgKyBjbGFzc05hbWUgOiAnJywgY3VycmVudCwgY2FjaGUuc2hlZXQsIHRydWUpO1xuXG4gICAgICBjdXJyZW50ID0gY3VycmVudC5uZXh0O1xuICAgIH0gd2hpbGUgKGN1cnJlbnQgIT09IHVuZGVmaW5lZCk7XG4gIH1cbn07XG5cbmV4cG9ydCB7IGdldFJlZ2lzdGVyZWRTdHlsZXMsIGluc2VydFN0eWxlcywgcmVnaXN0ZXJTdHlsZXMgfTtcbiIsImltcG9ydCBfZXh0ZW5kcyBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzJztcbmltcG9ydCB7IHVzZUNvbnRleHQsIGNyZWF0ZUVsZW1lbnQsIEZyYWdtZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IGlzUHJvcFZhbGlkIGZyb20gJ0BlbW90aW9uL2lzLXByb3AtdmFsaWQnO1xuaW1wb3J0IHsgd2l0aEVtb3Rpb25DYWNoZSwgVGhlbWVDb250ZXh0IH0gZnJvbSAnQGVtb3Rpb24vcmVhY3QnO1xuaW1wb3J0IHsgZ2V0UmVnaXN0ZXJlZFN0eWxlcywgcmVnaXN0ZXJTdHlsZXMsIGluc2VydFN0eWxlcyB9IGZyb20gJ0BlbW90aW9uL3V0aWxzJztcbmltcG9ydCB7IHNlcmlhbGl6ZVN0eWxlcyB9IGZyb20gJ0BlbW90aW9uL3NlcmlhbGl6ZSc7XG5pbXBvcnQgeyB1c2VJbnNlcnRpb25FZmZlY3RBbHdheXNXaXRoU3luY0ZhbGxiYWNrIH0gZnJvbSAnQGVtb3Rpb24vdXNlLWluc2VydGlvbi1lZmZlY3Qtd2l0aC1mYWxsYmFja3MnO1xuXG52YXIgdGVzdE9taXRQcm9wc09uU3RyaW5nVGFnID0gaXNQcm9wVmFsaWQ7XG5cbnZhciB0ZXN0T21pdFByb3BzT25Db21wb25lbnQgPSBmdW5jdGlvbiB0ZXN0T21pdFByb3BzT25Db21wb25lbnQoa2V5KSB7XG4gIHJldHVybiBrZXkgIT09ICd0aGVtZSc7XG59O1xuXG52YXIgZ2V0RGVmYXVsdFNob3VsZEZvcndhcmRQcm9wID0gZnVuY3Rpb24gZ2V0RGVmYXVsdFNob3VsZEZvcndhcmRQcm9wKHRhZykge1xuICByZXR1cm4gdHlwZW9mIHRhZyA9PT0gJ3N0cmluZycgJiYgLy8gOTYgaXMgb25lIGxlc3MgdGhhbiB0aGUgY2hhciBjb2RlXG4gIC8vIGZvciBcImFcIiBzbyB0aGlzIGlzIGNoZWNraW5nIHRoYXRcbiAgLy8gaXQncyBhIGxvd2VyY2FzZSBjaGFyYWN0ZXJcbiAgdGFnLmNoYXJDb2RlQXQoMCkgPiA5NiA/IHRlc3RPbWl0UHJvcHNPblN0cmluZ1RhZyA6IHRlc3RPbWl0UHJvcHNPbkNvbXBvbmVudDtcbn07XG52YXIgY29tcG9zZVNob3VsZEZvcndhcmRQcm9wcyA9IGZ1bmN0aW9uIGNvbXBvc2VTaG91bGRGb3J3YXJkUHJvcHModGFnLCBvcHRpb25zLCBpc1JlYWwpIHtcbiAgdmFyIHNob3VsZEZvcndhcmRQcm9wO1xuXG4gIGlmIChvcHRpb25zKSB7XG4gICAgdmFyIG9wdGlvbnNTaG91bGRGb3J3YXJkUHJvcCA9IG9wdGlvbnMuc2hvdWxkRm9yd2FyZFByb3A7XG4gICAgc2hvdWxkRm9yd2FyZFByb3AgPSB0YWcuX19lbW90aW9uX2ZvcndhcmRQcm9wICYmIG9wdGlvbnNTaG91bGRGb3J3YXJkUHJvcCA/IGZ1bmN0aW9uIChwcm9wTmFtZSkge1xuICAgICAgcmV0dXJuIHRhZy5fX2Vtb3Rpb25fZm9yd2FyZFByb3AocHJvcE5hbWUpICYmIG9wdGlvbnNTaG91bGRGb3J3YXJkUHJvcChwcm9wTmFtZSk7XG4gICAgfSA6IG9wdGlvbnNTaG91bGRGb3J3YXJkUHJvcDtcbiAgfVxuXG4gIGlmICh0eXBlb2Ygc2hvdWxkRm9yd2FyZFByb3AgIT09ICdmdW5jdGlvbicgJiYgaXNSZWFsKSB7XG4gICAgc2hvdWxkRm9yd2FyZFByb3AgPSB0YWcuX19lbW90aW9uX2ZvcndhcmRQcm9wO1xuICB9XG5cbiAgcmV0dXJuIHNob3VsZEZvcndhcmRQcm9wO1xufTtcblxudmFyIElMTEVHQUxfRVNDQVBFX1NFUVVFTkNFX0VSUk9SID0gXCJZb3UgaGF2ZSBpbGxlZ2FsIGVzY2FwZSBzZXF1ZW5jZSBpbiB5b3VyIHRlbXBsYXRlIGxpdGVyYWwsIG1vc3QgbGlrZWx5IGluc2lkZSBjb250ZW50J3MgcHJvcGVydHkgdmFsdWUuXFxuQmVjYXVzZSB5b3Ugd3JpdGUgeW91ciBDU1MgaW5zaWRlIGEgSmF2YVNjcmlwdCBzdHJpbmcgeW91IGFjdHVhbGx5IGhhdmUgdG8gZG8gZG91YmxlIGVzY2FwaW5nLCBzbyBmb3IgZXhhbXBsZSBcXFwiY29udGVudDogJ1xcXFwwMGQ3JztcXFwiIHNob3VsZCBiZWNvbWUgXFxcImNvbnRlbnQ6ICdcXFxcXFxcXDAwZDcnO1xcXCIuXFxuWW91IGNhbiByZWFkIG1vcmUgYWJvdXQgdGhpcyBoZXJlOlxcbmh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL1RlbXBsYXRlX2xpdGVyYWxzI0VTMjAxOF9yZXZpc2lvbl9vZl9pbGxlZ2FsX2VzY2FwZV9zZXF1ZW5jZXNcIjtcblxudmFyIEluc2VydGlvbiA9IGZ1bmN0aW9uIEluc2VydGlvbihfcmVmKSB7XG4gIHZhciBjYWNoZSA9IF9yZWYuY2FjaGUsXG4gICAgICBzZXJpYWxpemVkID0gX3JlZi5zZXJpYWxpemVkLFxuICAgICAgaXNTdHJpbmdUYWcgPSBfcmVmLmlzU3RyaW5nVGFnO1xuICByZWdpc3RlclN0eWxlcyhjYWNoZSwgc2VyaWFsaXplZCwgaXNTdHJpbmdUYWcpO1xuICB2YXIgcnVsZXMgPSB1c2VJbnNlcnRpb25FZmZlY3RBbHdheXNXaXRoU3luY0ZhbGxiYWNrKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gaW5zZXJ0U3R5bGVzKGNhY2hlLCBzZXJpYWxpemVkLCBpc1N0cmluZ1RhZyk7XG4gIH0pO1xuXG4gIHJldHVybiBudWxsO1xufTtcblxudmFyIGNyZWF0ZVN0eWxlZCA9IGZ1bmN0aW9uIGNyZWF0ZVN0eWxlZCh0YWcsIG9wdGlvbnMpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAodGFnID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignWW91IGFyZSB0cnlpbmcgdG8gY3JlYXRlIGEgc3R5bGVkIGVsZW1lbnQgd2l0aCBhbiB1bmRlZmluZWQgY29tcG9uZW50LlxcbllvdSBtYXkgaGF2ZSBmb3Jnb3R0ZW4gdG8gaW1wb3J0IGl0LicpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBpc1JlYWwgPSB0YWcuX19lbW90aW9uX3JlYWwgPT09IHRhZztcbiAgdmFyIGJhc2VUYWcgPSBpc1JlYWwgJiYgdGFnLl9fZW1vdGlvbl9iYXNlIHx8IHRhZztcbiAgdmFyIGlkZW50aWZpZXJOYW1lO1xuICB2YXIgdGFyZ2V0Q2xhc3NOYW1lO1xuXG4gIGlmIChvcHRpb25zICE9PSB1bmRlZmluZWQpIHtcbiAgICBpZGVudGlmaWVyTmFtZSA9IG9wdGlvbnMubGFiZWw7XG4gICAgdGFyZ2V0Q2xhc3NOYW1lID0gb3B0aW9ucy50YXJnZXQ7XG4gIH1cblxuICB2YXIgc2hvdWxkRm9yd2FyZFByb3AgPSBjb21wb3NlU2hvdWxkRm9yd2FyZFByb3BzKHRhZywgb3B0aW9ucywgaXNSZWFsKTtcbiAgdmFyIGRlZmF1bHRTaG91bGRGb3J3YXJkUHJvcCA9IHNob3VsZEZvcndhcmRQcm9wIHx8IGdldERlZmF1bHRTaG91bGRGb3J3YXJkUHJvcChiYXNlVGFnKTtcbiAgdmFyIHNob3VsZFVzZUFzID0gIWRlZmF1bHRTaG91bGRGb3J3YXJkUHJvcCgnYXMnKTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcbiAgICB2YXIgc3R5bGVzID0gaXNSZWFsICYmIHRhZy5fX2Vtb3Rpb25fc3R5bGVzICE9PSB1bmRlZmluZWQgPyB0YWcuX19lbW90aW9uX3N0eWxlcy5zbGljZSgwKSA6IFtdO1xuXG4gICAgaWYgKGlkZW50aWZpZXJOYW1lICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHN0eWxlcy5wdXNoKFwibGFiZWw6XCIgKyBpZGVudGlmaWVyTmFtZSArIFwiO1wiKTtcbiAgICB9XG5cbiAgICBpZiAoYXJnc1swXSA9PSBudWxsIHx8IGFyZ3NbMF0ucmF3ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHN0eWxlcy5wdXNoLmFwcGx5KHN0eWxlcywgYXJncyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGFyZ3NbMF1bMF0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKElMTEVHQUxfRVNDQVBFX1NFUVVFTkNFX0VSUk9SKTtcbiAgICAgIH1cblxuICAgICAgc3R5bGVzLnB1c2goYXJnc1swXVswXSk7XG4gICAgICB2YXIgbGVuID0gYXJncy5sZW5ndGg7XG4gICAgICB2YXIgaSA9IDE7XG5cbiAgICAgIGZvciAoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgYXJnc1swXVtpXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihJTExFR0FMX0VTQ0FQRV9TRVFVRU5DRV9FUlJPUik7XG4gICAgICAgIH1cblxuICAgICAgICBzdHlsZXMucHVzaChhcmdzW2ldLCBhcmdzWzBdW2ldKTtcbiAgICAgIH1cbiAgICB9IC8vICRGbG93Rml4TWU6IHdlIG5lZWQgdG8gY2FzdCBTdGF0ZWxlc3NGdW5jdGlvbmFsQ29tcG9uZW50IHRvIG91ciBQcml2YXRlU3R5bGVkQ29tcG9uZW50IGNsYXNzXG5cblxuICAgIHZhciBTdHlsZWQgPSB3aXRoRW1vdGlvbkNhY2hlKGZ1bmN0aW9uIChwcm9wcywgY2FjaGUsIHJlZikge1xuICAgICAgdmFyIEZpbmFsVGFnID0gc2hvdWxkVXNlQXMgJiYgcHJvcHMuYXMgfHwgYmFzZVRhZztcbiAgICAgIHZhciBjbGFzc05hbWUgPSAnJztcbiAgICAgIHZhciBjbGFzc0ludGVycG9sYXRpb25zID0gW107XG4gICAgICB2YXIgbWVyZ2VkUHJvcHMgPSBwcm9wcztcblxuICAgICAgaWYgKHByb3BzLnRoZW1lID09IG51bGwpIHtcbiAgICAgICAgbWVyZ2VkUHJvcHMgPSB7fTtcblxuICAgICAgICBmb3IgKHZhciBrZXkgaW4gcHJvcHMpIHtcbiAgICAgICAgICBtZXJnZWRQcm9wc1trZXldID0gcHJvcHNba2V5XTtcbiAgICAgICAgfVxuXG4gICAgICAgIG1lcmdlZFByb3BzLnRoZW1lID0gdXNlQ29udGV4dChUaGVtZUNvbnRleHQpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIHByb3BzLmNsYXNzTmFtZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgY2xhc3NOYW1lID0gZ2V0UmVnaXN0ZXJlZFN0eWxlcyhjYWNoZS5yZWdpc3RlcmVkLCBjbGFzc0ludGVycG9sYXRpb25zLCBwcm9wcy5jbGFzc05hbWUpO1xuICAgICAgfSBlbHNlIGlmIChwcm9wcy5jbGFzc05hbWUgIT0gbnVsbCkge1xuICAgICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUgKyBcIiBcIjtcbiAgICAgIH1cblxuICAgICAgdmFyIHNlcmlhbGl6ZWQgPSBzZXJpYWxpemVTdHlsZXMoc3R5bGVzLmNvbmNhdChjbGFzc0ludGVycG9sYXRpb25zKSwgY2FjaGUucmVnaXN0ZXJlZCwgbWVyZ2VkUHJvcHMpO1xuICAgICAgY2xhc3NOYW1lICs9IGNhY2hlLmtleSArIFwiLVwiICsgc2VyaWFsaXplZC5uYW1lO1xuXG4gICAgICBpZiAodGFyZ2V0Q2xhc3NOYW1lICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY2xhc3NOYW1lICs9IFwiIFwiICsgdGFyZ2V0Q2xhc3NOYW1lO1xuICAgICAgfVxuXG4gICAgICB2YXIgZmluYWxTaG91bGRGb3J3YXJkUHJvcCA9IHNob3VsZFVzZUFzICYmIHNob3VsZEZvcndhcmRQcm9wID09PSB1bmRlZmluZWQgPyBnZXREZWZhdWx0U2hvdWxkRm9yd2FyZFByb3AoRmluYWxUYWcpIDogZGVmYXVsdFNob3VsZEZvcndhcmRQcm9wO1xuICAgICAgdmFyIG5ld1Byb3BzID0ge307XG5cbiAgICAgIGZvciAodmFyIF9rZXkgaW4gcHJvcHMpIHtcbiAgICAgICAgaWYgKHNob3VsZFVzZUFzICYmIF9rZXkgPT09ICdhcycpIGNvbnRpbnVlO1xuXG4gICAgICAgIGlmICggLy8gJEZsb3dGaXhNZVxuICAgICAgICBmaW5hbFNob3VsZEZvcndhcmRQcm9wKF9rZXkpKSB7XG4gICAgICAgICAgbmV3UHJvcHNbX2tleV0gPSBwcm9wc1tfa2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBuZXdQcm9wcy5jbGFzc05hbWUgPSBjbGFzc05hbWU7XG4gICAgICBuZXdQcm9wcy5yZWYgPSByZWY7XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoRnJhZ21lbnQsIG51bGwsIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KEluc2VydGlvbiwge1xuICAgICAgICBjYWNoZTogY2FjaGUsXG4gICAgICAgIHNlcmlhbGl6ZWQ6IHNlcmlhbGl6ZWQsXG4gICAgICAgIGlzU3RyaW5nVGFnOiB0eXBlb2YgRmluYWxUYWcgPT09ICdzdHJpbmcnXG4gICAgICB9KSwgLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoRmluYWxUYWcsIG5ld1Byb3BzKSk7XG4gICAgfSk7XG4gICAgU3R5bGVkLmRpc3BsYXlOYW1lID0gaWRlbnRpZmllck5hbWUgIT09IHVuZGVmaW5lZCA/IGlkZW50aWZpZXJOYW1lIDogXCJTdHlsZWQoXCIgKyAodHlwZW9mIGJhc2VUYWcgPT09ICdzdHJpbmcnID8gYmFzZVRhZyA6IGJhc2VUYWcuZGlzcGxheU5hbWUgfHwgYmFzZVRhZy5uYW1lIHx8ICdDb21wb25lbnQnKSArIFwiKVwiO1xuICAgIFN0eWxlZC5kZWZhdWx0UHJvcHMgPSB0YWcuZGVmYXVsdFByb3BzO1xuICAgIFN0eWxlZC5fX2Vtb3Rpb25fcmVhbCA9IFN0eWxlZDtcbiAgICBTdHlsZWQuX19lbW90aW9uX2Jhc2UgPSBiYXNlVGFnO1xuICAgIFN0eWxlZC5fX2Vtb3Rpb25fc3R5bGVzID0gc3R5bGVzO1xuICAgIFN0eWxlZC5fX2Vtb3Rpb25fZm9yd2FyZFByb3AgPSBzaG91bGRGb3J3YXJkUHJvcDtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU3R5bGVkLCAndG9TdHJpbmcnLCB7XG4gICAgICB2YWx1ZTogZnVuY3Rpb24gdmFsdWUoKSB7XG4gICAgICAgIGlmICh0YXJnZXRDbGFzc05hbWUgPT09IHVuZGVmaW5lZCAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgcmV0dXJuICdOT19DT01QT05FTlRfU0VMRUNUT1InO1xuICAgICAgICB9IC8vICRGbG93Rml4TWU6IGNvZXJjZSB1bmRlZmluZWQgdG8gc3RyaW5nXG5cblxuICAgICAgICByZXR1cm4gXCIuXCIgKyB0YXJnZXRDbGFzc05hbWU7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBTdHlsZWQud2l0aENvbXBvbmVudCA9IGZ1bmN0aW9uIChuZXh0VGFnLCBuZXh0T3B0aW9ucykge1xuICAgICAgcmV0dXJuIGNyZWF0ZVN0eWxlZChuZXh0VGFnLCBfZXh0ZW5kcyh7fSwgb3B0aW9ucywgbmV4dE9wdGlvbnMsIHtcbiAgICAgICAgc2hvdWxkRm9yd2FyZFByb3A6IGNvbXBvc2VTaG91bGRGb3J3YXJkUHJvcHMoU3R5bGVkLCBuZXh0T3B0aW9ucywgdHJ1ZSlcbiAgICAgIH0pKS5hcHBseSh2b2lkIDAsIHN0eWxlcyk7XG4gICAgfTtcblxuICAgIHJldHVybiBTdHlsZWQ7XG4gIH07XG59O1xuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVTdHlsZWQ7XG4iLCJpbXBvcnQgJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcyc7XG5pbXBvcnQgJ3JlYWN0JztcbmltcG9ydCAnQGVtb3Rpb24vaXMtcHJvcC12YWxpZCc7XG5pbXBvcnQgY3JlYXRlU3R5bGVkIGZyb20gJy4uL2Jhc2UvZGlzdC9lbW90aW9uLXN0eWxlZC1iYXNlLmJyb3dzZXIuZXNtLmpzJztcbmltcG9ydCAnQGVtb3Rpb24vcmVhY3QnO1xuaW1wb3J0ICdAZW1vdGlvbi91dGlscyc7XG5pbXBvcnQgJ0BlbW90aW9uL3NlcmlhbGl6ZSc7XG5pbXBvcnQgJ0BlbW90aW9uL3VzZS1pbnNlcnRpb24tZWZmZWN0LXdpdGgtZmFsbGJhY2tzJztcblxudmFyIHRhZ3MgPSBbJ2EnLCAnYWJicicsICdhZGRyZXNzJywgJ2FyZWEnLCAnYXJ0aWNsZScsICdhc2lkZScsICdhdWRpbycsICdiJywgJ2Jhc2UnLCAnYmRpJywgJ2JkbycsICdiaWcnLCAnYmxvY2txdW90ZScsICdib2R5JywgJ2JyJywgJ2J1dHRvbicsICdjYW52YXMnLCAnY2FwdGlvbicsICdjaXRlJywgJ2NvZGUnLCAnY29sJywgJ2NvbGdyb3VwJywgJ2RhdGEnLCAnZGF0YWxpc3QnLCAnZGQnLCAnZGVsJywgJ2RldGFpbHMnLCAnZGZuJywgJ2RpYWxvZycsICdkaXYnLCAnZGwnLCAnZHQnLCAnZW0nLCAnZW1iZWQnLCAnZmllbGRzZXQnLCAnZmlnY2FwdGlvbicsICdmaWd1cmUnLCAnZm9vdGVyJywgJ2Zvcm0nLCAnaDEnLCAnaDInLCAnaDMnLCAnaDQnLCAnaDUnLCAnaDYnLCAnaGVhZCcsICdoZWFkZXInLCAnaGdyb3VwJywgJ2hyJywgJ2h0bWwnLCAnaScsICdpZnJhbWUnLCAnaW1nJywgJ2lucHV0JywgJ2lucycsICdrYmQnLCAna2V5Z2VuJywgJ2xhYmVsJywgJ2xlZ2VuZCcsICdsaScsICdsaW5rJywgJ21haW4nLCAnbWFwJywgJ21hcmsnLCAnbWFycXVlZScsICdtZW51JywgJ21lbnVpdGVtJywgJ21ldGEnLCAnbWV0ZXInLCAnbmF2JywgJ25vc2NyaXB0JywgJ29iamVjdCcsICdvbCcsICdvcHRncm91cCcsICdvcHRpb24nLCAnb3V0cHV0JywgJ3AnLCAncGFyYW0nLCAncGljdHVyZScsICdwcmUnLCAncHJvZ3Jlc3MnLCAncScsICdycCcsICdydCcsICdydWJ5JywgJ3MnLCAnc2FtcCcsICdzY3JpcHQnLCAnc2VjdGlvbicsICdzZWxlY3QnLCAnc21hbGwnLCAnc291cmNlJywgJ3NwYW4nLCAnc3Ryb25nJywgJ3N0eWxlJywgJ3N1YicsICdzdW1tYXJ5JywgJ3N1cCcsICd0YWJsZScsICd0Ym9keScsICd0ZCcsICd0ZXh0YXJlYScsICd0Zm9vdCcsICd0aCcsICd0aGVhZCcsICd0aW1lJywgJ3RpdGxlJywgJ3RyJywgJ3RyYWNrJywgJ3UnLCAndWwnLCAndmFyJywgJ3ZpZGVvJywgJ3dicicsIC8vIFNWR1xuJ2NpcmNsZScsICdjbGlwUGF0aCcsICdkZWZzJywgJ2VsbGlwc2UnLCAnZm9yZWlnbk9iamVjdCcsICdnJywgJ2ltYWdlJywgJ2xpbmUnLCAnbGluZWFyR3JhZGllbnQnLCAnbWFzaycsICdwYXRoJywgJ3BhdHRlcm4nLCAncG9seWdvbicsICdwb2x5bGluZScsICdyYWRpYWxHcmFkaWVudCcsICdyZWN0JywgJ3N0b3AnLCAnc3ZnJywgJ3RleHQnLCAndHNwYW4nXTtcblxudmFyIG5ld1N0eWxlZCA9IGNyZWF0ZVN0eWxlZC5iaW5kKCk7XG50YWdzLmZvckVhY2goZnVuY3Rpb24gKHRhZ05hbWUpIHtcbiAgLy8gJEZsb3dGaXhNZTogd2UgY2FuIGlnbm9yZSB0aGlzIGJlY2F1c2UgaXRzIGV4cG9zZWQgdHlwZSBpcyBkZWZpbmVkIGJ5IHRoZSBDcmVhdGVTdHlsZWQgdHlwZVxuICBuZXdTdHlsZWRbdGFnTmFtZV0gPSBuZXdTdHlsZWQodGFnTmFtZSk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgbmV3U3R5bGVkO1xuIiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJ2YXJpYW50XCJdO1xuaW1wb3J0IHsgdW5zdGFibGVfY2FwaXRhbGl6ZSBhcyBjYXBpdGFsaXplIH0gZnJvbSAnQG11aS91dGlscyc7XG5cbmZ1bmN0aW9uIGlzRW1wdHkoc3RyaW5nKSB7XG4gIHJldHVybiBzdHJpbmcubGVuZ3RoID09PSAwO1xufVxuLyoqXG4gKiBHZW5lcmF0ZXMgc3RyaW5nIGNsYXNzS2V5IGJhc2VkIG9uIHRoZSBwcm9wZXJ0aWVzIHByb3ZpZGVkLiBJdCBzdGFydHMgd2l0aCB0aGVcbiAqIHZhcmlhbnQgaWYgZGVmaW5lZCwgYW5kIHRoZW4gaXQgYXBwZW5kcyBhbGwgb3RoZXIgcHJvcGVydGllcyBpbiBhbHBoYWJldGljYWwgb3JkZXIuXG4gKiBAcGFyYW0ge29iamVjdH0gcHJvcHMgLSB0aGUgcHJvcGVydGllcyBmb3Igd2hpY2ggdGhlIGNsYXNzS2V5IHNob3VsZCBiZSBjcmVhdGVkLlxuICovXG5cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcHJvcHNUb0NsYXNzS2V5KHByb3BzKSB7XG4gIGNvbnN0IHtcbiAgICB2YXJpYW50XG4gIH0gPSBwcm9wcyxcbiAgICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcblxuICBsZXQgY2xhc3NLZXkgPSB2YXJpYW50IHx8ICcnO1xuICBPYmplY3Qua2V5cyhvdGhlcikuc29ydCgpLmZvckVhY2goa2V5ID0+IHtcbiAgICBpZiAoa2V5ID09PSAnY29sb3InKSB7XG4gICAgICBjbGFzc0tleSArPSBpc0VtcHR5KGNsYXNzS2V5KSA/IHByb3BzW2tleV0gOiBjYXBpdGFsaXplKHByb3BzW2tleV0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBjbGFzc0tleSArPSBgJHtpc0VtcHR5KGNsYXNzS2V5KSA/IGtleSA6IGNhcGl0YWxpemUoa2V5KX0ke2NhcGl0YWxpemUocHJvcHNba2V5XS50b1N0cmluZygpKX1gO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBjbGFzc0tleTtcbn0iLCJpbXBvcnQgbWVyZ2UgZnJvbSAnLi9tZXJnZSc7XG5cbmZ1bmN0aW9uIGNvbXBvc2UoLi4uc3R5bGVzKSB7XG4gIGNvbnN0IGhhbmRsZXJzID0gc3R5bGVzLnJlZHVjZSgoYWNjLCBzdHlsZSkgPT4ge1xuICAgIHN0eWxlLmZpbHRlclByb3BzLmZvckVhY2gocHJvcCA9PiB7XG4gICAgICBhY2NbcHJvcF0gPSBzdHlsZTtcbiAgICB9KTtcbiAgICByZXR1cm4gYWNjO1xuICB9LCB7fSk7XG5cbiAgY29uc3QgZm4gPSBwcm9wcyA9PiB7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKHByb3BzKS5yZWR1Y2UoKGFjYywgcHJvcCkgPT4ge1xuICAgICAgaWYgKGhhbmRsZXJzW3Byb3BdKSB7XG4gICAgICAgIHJldHVybiBtZXJnZShhY2MsIGhhbmRsZXJzW3Byb3BdKHByb3BzKSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBhY2M7XG4gICAgfSwge30pO1xuICB9O1xuXG4gIGZuLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBzdHlsZXMucmVkdWNlKChhY2MsIHN0eWxlKSA9PiBPYmplY3QuYXNzaWduKGFjYywgc3R5bGUucHJvcFR5cGVzKSwge30pIDoge307XG4gIGZuLmZpbHRlclByb3BzID0gc3R5bGVzLnJlZHVjZSgoYWNjLCBzdHlsZSkgPT4gYWNjLmNvbmNhdChzdHlsZS5maWx0ZXJQcm9wcyksIFtdKTtcbiAgcmV0dXJuIGZuO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjb21wb3NlOyIsImltcG9ydCByZXNwb25zaXZlUHJvcFR5cGUgZnJvbSAnLi9yZXNwb25zaXZlUHJvcFR5cGUnO1xuaW1wb3J0IHN0eWxlIGZyb20gJy4vc3R5bGUnO1xuaW1wb3J0IGNvbXBvc2UgZnJvbSAnLi9jb21wb3NlJztcbmltcG9ydCB7IGNyZWF0ZVVuYXJ5VW5pdCwgZ2V0VmFsdWUgfSBmcm9tICcuL3NwYWNpbmcnO1xuaW1wb3J0IHsgaGFuZGxlQnJlYWtwb2ludHMgfSBmcm9tICcuL2JyZWFrcG9pbnRzJztcblxuZnVuY3Rpb24gZ2V0Qm9yZGVyKHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIGAke3ZhbHVlfXB4IHNvbGlkYDtcbn1cblxuZXhwb3J0IGNvbnN0IGJvcmRlciA9IHN0eWxlKHtcbiAgcHJvcDogJ2JvcmRlcicsXG4gIHRoZW1lS2V5OiAnYm9yZGVycycsXG4gIHRyYW5zZm9ybTogZ2V0Qm9yZGVyXG59KTtcbmV4cG9ydCBjb25zdCBib3JkZXJUb3AgPSBzdHlsZSh7XG4gIHByb3A6ICdib3JkZXJUb3AnLFxuICB0aGVtZUtleTogJ2JvcmRlcnMnLFxuICB0cmFuc2Zvcm06IGdldEJvcmRlclxufSk7XG5leHBvcnQgY29uc3QgYm9yZGVyUmlnaHQgPSBzdHlsZSh7XG4gIHByb3A6ICdib3JkZXJSaWdodCcsXG4gIHRoZW1lS2V5OiAnYm9yZGVycycsXG4gIHRyYW5zZm9ybTogZ2V0Qm9yZGVyXG59KTtcbmV4cG9ydCBjb25zdCBib3JkZXJCb3R0b20gPSBzdHlsZSh7XG4gIHByb3A6ICdib3JkZXJCb3R0b20nLFxuICB0aGVtZUtleTogJ2JvcmRlcnMnLFxuICB0cmFuc2Zvcm06IGdldEJvcmRlclxufSk7XG5leHBvcnQgY29uc3QgYm9yZGVyTGVmdCA9IHN0eWxlKHtcbiAgcHJvcDogJ2JvcmRlckxlZnQnLFxuICB0aGVtZUtleTogJ2JvcmRlcnMnLFxuICB0cmFuc2Zvcm06IGdldEJvcmRlclxufSk7XG5leHBvcnQgY29uc3QgYm9yZGVyQ29sb3IgPSBzdHlsZSh7XG4gIHByb3A6ICdib3JkZXJDb2xvcicsXG4gIHRoZW1lS2V5OiAncGFsZXR0ZSdcbn0pO1xuZXhwb3J0IGNvbnN0IGJvcmRlclRvcENvbG9yID0gc3R5bGUoe1xuICBwcm9wOiAnYm9yZGVyVG9wQ29sb3InLFxuICB0aGVtZUtleTogJ3BhbGV0dGUnXG59KTtcbmV4cG9ydCBjb25zdCBib3JkZXJSaWdodENvbG9yID0gc3R5bGUoe1xuICBwcm9wOiAnYm9yZGVyUmlnaHRDb2xvcicsXG4gIHRoZW1lS2V5OiAncGFsZXR0ZSdcbn0pO1xuZXhwb3J0IGNvbnN0IGJvcmRlckJvdHRvbUNvbG9yID0gc3R5bGUoe1xuICBwcm9wOiAnYm9yZGVyQm90dG9tQ29sb3InLFxuICB0aGVtZUtleTogJ3BhbGV0dGUnXG59KTtcbmV4cG9ydCBjb25zdCBib3JkZXJMZWZ0Q29sb3IgPSBzdHlsZSh7XG4gIHByb3A6ICdib3JkZXJMZWZ0Q29sb3InLFxuICB0aGVtZUtleTogJ3BhbGV0dGUnXG59KTtcbmV4cG9ydCBjb25zdCBib3JkZXJSYWRpdXMgPSBwcm9wcyA9PiB7XG4gIGlmIChwcm9wcy5ib3JkZXJSYWRpdXMgIT09IHVuZGVmaW5lZCAmJiBwcm9wcy5ib3JkZXJSYWRpdXMgIT09IG51bGwpIHtcbiAgICBjb25zdCB0cmFuc2Zvcm1lciA9IGNyZWF0ZVVuYXJ5VW5pdChwcm9wcy50aGVtZSwgJ3NoYXBlLmJvcmRlclJhZGl1cycsIDQsICdib3JkZXJSYWRpdXMnKTtcblxuICAgIGNvbnN0IHN0eWxlRnJvbVByb3BWYWx1ZSA9IHByb3BWYWx1ZSA9PiAoe1xuICAgICAgYm9yZGVyUmFkaXVzOiBnZXRWYWx1ZSh0cmFuc2Zvcm1lciwgcHJvcFZhbHVlKVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGhhbmRsZUJyZWFrcG9pbnRzKHByb3BzLCBwcm9wcy5ib3JkZXJSYWRpdXMsIHN0eWxlRnJvbVByb3BWYWx1ZSk7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn07XG5ib3JkZXJSYWRpdXMucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHtcbiAgYm9yZGVyUmFkaXVzOiByZXNwb25zaXZlUHJvcFR5cGVcbn0gOiB7fTtcbmJvcmRlclJhZGl1cy5maWx0ZXJQcm9wcyA9IFsnYm9yZGVyUmFkaXVzJ107XG5jb25zdCBib3JkZXJzID0gY29tcG9zZShib3JkZXIsIGJvcmRlclRvcCwgYm9yZGVyUmlnaHQsIGJvcmRlckJvdHRvbSwgYm9yZGVyTGVmdCwgYm9yZGVyQ29sb3IsIGJvcmRlclRvcENvbG9yLCBib3JkZXJSaWdodENvbG9yLCBib3JkZXJCb3R0b21Db2xvciwgYm9yZGVyTGVmdENvbG9yLCBib3JkZXJSYWRpdXMpO1xuZXhwb3J0IGRlZmF1bHQgYm9yZGVyczsiLCJpbXBvcnQgc3R5bGUgZnJvbSAnLi9zdHlsZSc7XG5pbXBvcnQgY29tcG9zZSBmcm9tICcuL2NvbXBvc2UnO1xuZXhwb3J0IGNvbnN0IGRpc3BsYXlQcmludCA9IHN0eWxlKHtcbiAgcHJvcDogJ2Rpc3BsYXlQcmludCcsXG4gIGNzc1Byb3BlcnR5OiBmYWxzZSxcbiAgdHJhbnNmb3JtOiB2YWx1ZSA9PiAoe1xuICAgICdAbWVkaWEgcHJpbnQnOiB7XG4gICAgICBkaXNwbGF5OiB2YWx1ZVxuICAgIH1cbiAgfSlcbn0pO1xuZXhwb3J0IGNvbnN0IGRpc3BsYXlSYXcgPSBzdHlsZSh7XG4gIHByb3A6ICdkaXNwbGF5J1xufSk7XG5leHBvcnQgY29uc3Qgb3ZlcmZsb3cgPSBzdHlsZSh7XG4gIHByb3A6ICdvdmVyZmxvdydcbn0pO1xuZXhwb3J0IGNvbnN0IHRleHRPdmVyZmxvdyA9IHN0eWxlKHtcbiAgcHJvcDogJ3RleHRPdmVyZmxvdydcbn0pO1xuZXhwb3J0IGNvbnN0IHZpc2liaWxpdHkgPSBzdHlsZSh7XG4gIHByb3A6ICd2aXNpYmlsaXR5J1xufSk7XG5leHBvcnQgY29uc3Qgd2hpdGVTcGFjZSA9IHN0eWxlKHtcbiAgcHJvcDogJ3doaXRlU3BhY2UnXG59KTtcbmV4cG9ydCBkZWZhdWx0IGNvbXBvc2UoZGlzcGxheVByaW50LCBkaXNwbGF5UmF3LCBvdmVyZmxvdywgdGV4dE92ZXJmbG93LCB2aXNpYmlsaXR5LCB3aGl0ZVNwYWNlKTsiLCJpbXBvcnQgc3R5bGUgZnJvbSAnLi9zdHlsZSc7XG5pbXBvcnQgY29tcG9zZSBmcm9tICcuL2NvbXBvc2UnO1xuZXhwb3J0IGNvbnN0IGZsZXhCYXNpcyA9IHN0eWxlKHtcbiAgcHJvcDogJ2ZsZXhCYXNpcydcbn0pO1xuZXhwb3J0IGNvbnN0IGZsZXhEaXJlY3Rpb24gPSBzdHlsZSh7XG4gIHByb3A6ICdmbGV4RGlyZWN0aW9uJ1xufSk7XG5leHBvcnQgY29uc3QgZmxleFdyYXAgPSBzdHlsZSh7XG4gIHByb3A6ICdmbGV4V3JhcCdcbn0pO1xuZXhwb3J0IGNvbnN0IGp1c3RpZnlDb250ZW50ID0gc3R5bGUoe1xuICBwcm9wOiAnanVzdGlmeUNvbnRlbnQnXG59KTtcbmV4cG9ydCBjb25zdCBhbGlnbkl0ZW1zID0gc3R5bGUoe1xuICBwcm9wOiAnYWxpZ25JdGVtcydcbn0pO1xuZXhwb3J0IGNvbnN0IGFsaWduQ29udGVudCA9IHN0eWxlKHtcbiAgcHJvcDogJ2FsaWduQ29udGVudCdcbn0pO1xuZXhwb3J0IGNvbnN0IG9yZGVyID0gc3R5bGUoe1xuICBwcm9wOiAnb3JkZXInXG59KTtcbmV4cG9ydCBjb25zdCBmbGV4ID0gc3R5bGUoe1xuICBwcm9wOiAnZmxleCdcbn0pO1xuZXhwb3J0IGNvbnN0IGZsZXhHcm93ID0gc3R5bGUoe1xuICBwcm9wOiAnZmxleEdyb3cnXG59KTtcbmV4cG9ydCBjb25zdCBmbGV4U2hyaW5rID0gc3R5bGUoe1xuICBwcm9wOiAnZmxleFNocmluaydcbn0pO1xuZXhwb3J0IGNvbnN0IGFsaWduU2VsZiA9IHN0eWxlKHtcbiAgcHJvcDogJ2FsaWduU2VsZidcbn0pO1xuZXhwb3J0IGNvbnN0IGp1c3RpZnlJdGVtcyA9IHN0eWxlKHtcbiAgcHJvcDogJ2p1c3RpZnlJdGVtcydcbn0pO1xuZXhwb3J0IGNvbnN0IGp1c3RpZnlTZWxmID0gc3R5bGUoe1xuICBwcm9wOiAnanVzdGlmeVNlbGYnXG59KTtcbmNvbnN0IGZsZXhib3ggPSBjb21wb3NlKGZsZXhCYXNpcywgZmxleERpcmVjdGlvbiwgZmxleFdyYXAsIGp1c3RpZnlDb250ZW50LCBhbGlnbkl0ZW1zLCBhbGlnbkNvbnRlbnQsIG9yZGVyLCBmbGV4LCBmbGV4R3JvdywgZmxleFNocmluaywgYWxpZ25TZWxmLCBqdXN0aWZ5SXRlbXMsIGp1c3RpZnlTZWxmKTtcbmV4cG9ydCBkZWZhdWx0IGZsZXhib3g7IiwiaW1wb3J0IHN0eWxlIGZyb20gJy4vc3R5bGUnO1xuaW1wb3J0IGNvbXBvc2UgZnJvbSAnLi9jb21wb3NlJztcbmltcG9ydCB7IGNyZWF0ZVVuYXJ5VW5pdCwgZ2V0VmFsdWUgfSBmcm9tICcuL3NwYWNpbmcnO1xuaW1wb3J0IHsgaGFuZGxlQnJlYWtwb2ludHMgfSBmcm9tICcuL2JyZWFrcG9pbnRzJztcbmltcG9ydCByZXNwb25zaXZlUHJvcFR5cGUgZnJvbSAnLi9yZXNwb25zaXZlUHJvcFR5cGUnO1xuZXhwb3J0IGNvbnN0IGdhcCA9IHByb3BzID0+IHtcbiAgaWYgKHByb3BzLmdhcCAhPT0gdW5kZWZpbmVkICYmIHByb3BzLmdhcCAhPT0gbnVsbCkge1xuICAgIGNvbnN0IHRyYW5zZm9ybWVyID0gY3JlYXRlVW5hcnlVbml0KHByb3BzLnRoZW1lLCAnc3BhY2luZycsIDgsICdnYXAnKTtcblxuICAgIGNvbnN0IHN0eWxlRnJvbVByb3BWYWx1ZSA9IHByb3BWYWx1ZSA9PiAoe1xuICAgICAgZ2FwOiBnZXRWYWx1ZSh0cmFuc2Zvcm1lciwgcHJvcFZhbHVlKVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGhhbmRsZUJyZWFrcG9pbnRzKHByb3BzLCBwcm9wcy5nYXAsIHN0eWxlRnJvbVByb3BWYWx1ZSk7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn07XG5nYXAucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHtcbiAgZ2FwOiByZXNwb25zaXZlUHJvcFR5cGVcbn0gOiB7fTtcbmdhcC5maWx0ZXJQcm9wcyA9IFsnZ2FwJ107XG5leHBvcnQgY29uc3QgY29sdW1uR2FwID0gcHJvcHMgPT4ge1xuICBpZiAocHJvcHMuY29sdW1uR2FwICE9PSB1bmRlZmluZWQgJiYgcHJvcHMuY29sdW1uR2FwICE9PSBudWxsKSB7XG4gICAgY29uc3QgdHJhbnNmb3JtZXIgPSBjcmVhdGVVbmFyeVVuaXQocHJvcHMudGhlbWUsICdzcGFjaW5nJywgOCwgJ2NvbHVtbkdhcCcpO1xuXG4gICAgY29uc3Qgc3R5bGVGcm9tUHJvcFZhbHVlID0gcHJvcFZhbHVlID0+ICh7XG4gICAgICBjb2x1bW5HYXA6IGdldFZhbHVlKHRyYW5zZm9ybWVyLCBwcm9wVmFsdWUpXG4gICAgfSk7XG5cbiAgICByZXR1cm4gaGFuZGxlQnJlYWtwb2ludHMocHJvcHMsIHByb3BzLmNvbHVtbkdhcCwgc3R5bGVGcm9tUHJvcFZhbHVlKTtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufTtcbmNvbHVtbkdhcC5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8ge1xuICBjb2x1bW5HYXA6IHJlc3BvbnNpdmVQcm9wVHlwZVxufSA6IHt9O1xuY29sdW1uR2FwLmZpbHRlclByb3BzID0gWydjb2x1bW5HYXAnXTtcbmV4cG9ydCBjb25zdCByb3dHYXAgPSBwcm9wcyA9PiB7XG4gIGlmIChwcm9wcy5yb3dHYXAgIT09IHVuZGVmaW5lZCAmJiBwcm9wcy5yb3dHYXAgIT09IG51bGwpIHtcbiAgICBjb25zdCB0cmFuc2Zvcm1lciA9IGNyZWF0ZVVuYXJ5VW5pdChwcm9wcy50aGVtZSwgJ3NwYWNpbmcnLCA4LCAncm93R2FwJyk7XG5cbiAgICBjb25zdCBzdHlsZUZyb21Qcm9wVmFsdWUgPSBwcm9wVmFsdWUgPT4gKHtcbiAgICAgIHJvd0dhcDogZ2V0VmFsdWUodHJhbnNmb3JtZXIsIHByb3BWYWx1ZSlcbiAgICB9KTtcblxuICAgIHJldHVybiBoYW5kbGVCcmVha3BvaW50cyhwcm9wcywgcHJvcHMucm93R2FwLCBzdHlsZUZyb21Qcm9wVmFsdWUpO1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59O1xucm93R2FwLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB7XG4gIHJvd0dhcDogcmVzcG9uc2l2ZVByb3BUeXBlXG59IDoge307XG5yb3dHYXAuZmlsdGVyUHJvcHMgPSBbJ3Jvd0dhcCddO1xuZXhwb3J0IGNvbnN0IGdyaWRDb2x1bW4gPSBzdHlsZSh7XG4gIHByb3A6ICdncmlkQ29sdW1uJ1xufSk7XG5leHBvcnQgY29uc3QgZ3JpZFJvdyA9IHN0eWxlKHtcbiAgcHJvcDogJ2dyaWRSb3cnXG59KTtcbmV4cG9ydCBjb25zdCBncmlkQXV0b0Zsb3cgPSBzdHlsZSh7XG4gIHByb3A6ICdncmlkQXV0b0Zsb3cnXG59KTtcbmV4cG9ydCBjb25zdCBncmlkQXV0b0NvbHVtbnMgPSBzdHlsZSh7XG4gIHByb3A6ICdncmlkQXV0b0NvbHVtbnMnXG59KTtcbmV4cG9ydCBjb25zdCBncmlkQXV0b1Jvd3MgPSBzdHlsZSh7XG4gIHByb3A6ICdncmlkQXV0b1Jvd3MnXG59KTtcbmV4cG9ydCBjb25zdCBncmlkVGVtcGxhdGVDb2x1bW5zID0gc3R5bGUoe1xuICBwcm9wOiAnZ3JpZFRlbXBsYXRlQ29sdW1ucydcbn0pO1xuZXhwb3J0IGNvbnN0IGdyaWRUZW1wbGF0ZVJvd3MgPSBzdHlsZSh7XG4gIHByb3A6ICdncmlkVGVtcGxhdGVSb3dzJ1xufSk7XG5leHBvcnQgY29uc3QgZ3JpZFRlbXBsYXRlQXJlYXMgPSBzdHlsZSh7XG4gIHByb3A6ICdncmlkVGVtcGxhdGVBcmVhcydcbn0pO1xuZXhwb3J0IGNvbnN0IGdyaWRBcmVhID0gc3R5bGUoe1xuICBwcm9wOiAnZ3JpZEFyZWEnXG59KTtcbmNvbnN0IGdyaWQgPSBjb21wb3NlKGdhcCwgY29sdW1uR2FwLCByb3dHYXAsIGdyaWRDb2x1bW4sIGdyaWRSb3csIGdyaWRBdXRvRmxvdywgZ3JpZEF1dG9Db2x1bW5zLCBncmlkQXV0b1Jvd3MsIGdyaWRUZW1wbGF0ZUNvbHVtbnMsIGdyaWRUZW1wbGF0ZVJvd3MsIGdyaWRUZW1wbGF0ZUFyZWFzLCBncmlkQXJlYSk7XG5leHBvcnQgZGVmYXVsdCBncmlkOyIsImltcG9ydCBzdHlsZSBmcm9tICcuL3N0eWxlJztcbmltcG9ydCBjb21wb3NlIGZyb20gJy4vY29tcG9zZSc7XG5leHBvcnQgY29uc3QgcG9zaXRpb24gPSBzdHlsZSh7XG4gIHByb3A6ICdwb3NpdGlvbidcbn0pO1xuZXhwb3J0IGNvbnN0IHpJbmRleCA9IHN0eWxlKHtcbiAgcHJvcDogJ3pJbmRleCcsXG4gIHRoZW1lS2V5OiAnekluZGV4J1xufSk7XG5leHBvcnQgY29uc3QgdG9wID0gc3R5bGUoe1xuICBwcm9wOiAndG9wJ1xufSk7XG5leHBvcnQgY29uc3QgcmlnaHQgPSBzdHlsZSh7XG4gIHByb3A6ICdyaWdodCdcbn0pO1xuZXhwb3J0IGNvbnN0IGJvdHRvbSA9IHN0eWxlKHtcbiAgcHJvcDogJ2JvdHRvbSdcbn0pO1xuZXhwb3J0IGNvbnN0IGxlZnQgPSBzdHlsZSh7XG4gIHByb3A6ICdsZWZ0J1xufSk7XG5leHBvcnQgZGVmYXVsdCBjb21wb3NlKHBvc2l0aW9uLCB6SW5kZXgsIHRvcCwgcmlnaHQsIGJvdHRvbSwgbGVmdCk7IiwiaW1wb3J0IHN0eWxlIGZyb20gJy4vc3R5bGUnO1xuaW1wb3J0IGNvbXBvc2UgZnJvbSAnLi9jb21wb3NlJztcblxuZnVuY3Rpb24gdHJhbnNmb3JtKHZhbHVlLCB1c2VyVmFsdWUpIHtcbiAgaWYgKHVzZXJWYWx1ZSA9PT0gJ2dyZXknKSB7XG4gICAgcmV0dXJuIHVzZXJWYWx1ZTtcbiAgfVxuXG4gIHJldHVybiB2YWx1ZTtcbn1cblxuZXhwb3J0IGNvbnN0IGNvbG9yID0gc3R5bGUoe1xuICBwcm9wOiAnY29sb3InLFxuICB0aGVtZUtleTogJ3BhbGV0dGUnLFxuICB0cmFuc2Zvcm1cbn0pO1xuZXhwb3J0IGNvbnN0IGJnY29sb3IgPSBzdHlsZSh7XG4gIHByb3A6ICdiZ2NvbG9yJyxcbiAgY3NzUHJvcGVydHk6ICdiYWNrZ3JvdW5kQ29sb3InLFxuICB0aGVtZUtleTogJ3BhbGV0dGUnLFxuICB0cmFuc2Zvcm1cbn0pO1xuZXhwb3J0IGNvbnN0IGJhY2tncm91bmRDb2xvciA9IHN0eWxlKHtcbiAgcHJvcDogJ2JhY2tncm91bmRDb2xvcicsXG4gIHRoZW1lS2V5OiAncGFsZXR0ZScsXG4gIHRyYW5zZm9ybVxufSk7XG5jb25zdCBwYWxldHRlID0gY29tcG9zZShjb2xvciwgYmdjb2xvciwgYmFja2dyb3VuZENvbG9yKTtcbmV4cG9ydCBkZWZhdWx0IHBhbGV0dGU7IiwiaW1wb3J0IHN0eWxlIGZyb20gJy4vc3R5bGUnO1xuY29uc3QgYm94U2hhZG93ID0gc3R5bGUoe1xuICBwcm9wOiAnYm94U2hhZG93JyxcbiAgdGhlbWVLZXk6ICdzaGFkb3dzJ1xufSk7XG5leHBvcnQgZGVmYXVsdCBib3hTaGFkb3c7IiwiaW1wb3J0IHN0eWxlIGZyb20gJy4vc3R5bGUnO1xuaW1wb3J0IGNvbXBvc2UgZnJvbSAnLi9jb21wb3NlJztcbmltcG9ydCB7IGhhbmRsZUJyZWFrcG9pbnRzLCB2YWx1ZXMgYXMgYnJlYWtwb2ludHNWYWx1ZXMgfSBmcm9tICcuL2JyZWFrcG9pbnRzJztcblxuZnVuY3Rpb24gdHJhbnNmb3JtKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA8PSAxICYmIHZhbHVlICE9PSAwID8gYCR7dmFsdWUgKiAxMDB9JWAgOiB2YWx1ZTtcbn1cblxuZXhwb3J0IGNvbnN0IHdpZHRoID0gc3R5bGUoe1xuICBwcm9wOiAnd2lkdGgnLFxuICB0cmFuc2Zvcm1cbn0pO1xuZXhwb3J0IGNvbnN0IG1heFdpZHRoID0gcHJvcHMgPT4ge1xuICBpZiAocHJvcHMubWF4V2lkdGggIT09IHVuZGVmaW5lZCAmJiBwcm9wcy5tYXhXaWR0aCAhPT0gbnVsbCkge1xuICAgIGNvbnN0IHN0eWxlRnJvbVByb3BWYWx1ZSA9IHByb3BWYWx1ZSA9PiB7XG4gICAgICB2YXIgX3Byb3BzJHRoZW1lLCBfcHJvcHMkdGhlbWUkYnJlYWtwb2ksIF9wcm9wcyR0aGVtZSRicmVha3BvaTI7XG5cbiAgICAgIGNvbnN0IGJyZWFrcG9pbnQgPSAoKF9wcm9wcyR0aGVtZSA9IHByb3BzLnRoZW1lKSA9PSBudWxsID8gdm9pZCAwIDogKF9wcm9wcyR0aGVtZSRicmVha3BvaSA9IF9wcm9wcyR0aGVtZS5icmVha3BvaW50cykgPT0gbnVsbCA/IHZvaWQgMCA6IChfcHJvcHMkdGhlbWUkYnJlYWtwb2kyID0gX3Byb3BzJHRoZW1lJGJyZWFrcG9pLnZhbHVlcykgPT0gbnVsbCA/IHZvaWQgMCA6IF9wcm9wcyR0aGVtZSRicmVha3BvaTJbcHJvcFZhbHVlXSkgfHwgYnJlYWtwb2ludHNWYWx1ZXNbcHJvcFZhbHVlXTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG1heFdpZHRoOiBicmVha3BvaW50IHx8IHRyYW5zZm9ybShwcm9wVmFsdWUpXG4gICAgICB9O1xuICAgIH07XG5cbiAgICByZXR1cm4gaGFuZGxlQnJlYWtwb2ludHMocHJvcHMsIHByb3BzLm1heFdpZHRoLCBzdHlsZUZyb21Qcm9wVmFsdWUpO1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59O1xubWF4V2lkdGguZmlsdGVyUHJvcHMgPSBbJ21heFdpZHRoJ107XG5leHBvcnQgY29uc3QgbWluV2lkdGggPSBzdHlsZSh7XG4gIHByb3A6ICdtaW5XaWR0aCcsXG4gIHRyYW5zZm9ybVxufSk7XG5leHBvcnQgY29uc3QgaGVpZ2h0ID0gc3R5bGUoe1xuICBwcm9wOiAnaGVpZ2h0JyxcbiAgdHJhbnNmb3JtXG59KTtcbmV4cG9ydCBjb25zdCBtYXhIZWlnaHQgPSBzdHlsZSh7XG4gIHByb3A6ICdtYXhIZWlnaHQnLFxuICB0cmFuc2Zvcm1cbn0pO1xuZXhwb3J0IGNvbnN0IG1pbkhlaWdodCA9IHN0eWxlKHtcbiAgcHJvcDogJ21pbkhlaWdodCcsXG4gIHRyYW5zZm9ybVxufSk7XG5leHBvcnQgY29uc3Qgc2l6ZVdpZHRoID0gc3R5bGUoe1xuICBwcm9wOiAnc2l6ZScsXG4gIGNzc1Byb3BlcnR5OiAnd2lkdGgnLFxuICB0cmFuc2Zvcm1cbn0pO1xuZXhwb3J0IGNvbnN0IHNpemVIZWlnaHQgPSBzdHlsZSh7XG4gIHByb3A6ICdzaXplJyxcbiAgY3NzUHJvcGVydHk6ICdoZWlnaHQnLFxuICB0cmFuc2Zvcm1cbn0pO1xuZXhwb3J0IGNvbnN0IGJveFNpemluZyA9IHN0eWxlKHtcbiAgcHJvcDogJ2JveFNpemluZydcbn0pO1xuY29uc3Qgc2l6aW5nID0gY29tcG9zZSh3aWR0aCwgbWF4V2lkdGgsIG1pbldpZHRoLCBoZWlnaHQsIG1heEhlaWdodCwgbWluSGVpZ2h0LCBib3hTaXppbmcpO1xuZXhwb3J0IGRlZmF1bHQgc2l6aW5nOyIsImltcG9ydCBzdHlsZSBmcm9tICcuL3N0eWxlJztcbmltcG9ydCBjb21wb3NlIGZyb20gJy4vY29tcG9zZSc7XG5leHBvcnQgY29uc3QgZm9udEZhbWlseSA9IHN0eWxlKHtcbiAgcHJvcDogJ2ZvbnRGYW1pbHknLFxuICB0aGVtZUtleTogJ3R5cG9ncmFwaHknXG59KTtcbmV4cG9ydCBjb25zdCBmb250U2l6ZSA9IHN0eWxlKHtcbiAgcHJvcDogJ2ZvbnRTaXplJyxcbiAgdGhlbWVLZXk6ICd0eXBvZ3JhcGh5J1xufSk7XG5leHBvcnQgY29uc3QgZm9udFN0eWxlID0gc3R5bGUoe1xuICBwcm9wOiAnZm9udFN0eWxlJyxcbiAgdGhlbWVLZXk6ICd0eXBvZ3JhcGh5J1xufSk7XG5leHBvcnQgY29uc3QgZm9udFdlaWdodCA9IHN0eWxlKHtcbiAgcHJvcDogJ2ZvbnRXZWlnaHQnLFxuICB0aGVtZUtleTogJ3R5cG9ncmFwaHknXG59KTtcbmV4cG9ydCBjb25zdCBsZXR0ZXJTcGFjaW5nID0gc3R5bGUoe1xuICBwcm9wOiAnbGV0dGVyU3BhY2luZydcbn0pO1xuZXhwb3J0IGNvbnN0IHRleHRUcmFuc2Zvcm0gPSBzdHlsZSh7XG4gIHByb3A6ICd0ZXh0VHJhbnNmb3JtJ1xufSk7XG5leHBvcnQgY29uc3QgbGluZUhlaWdodCA9IHN0eWxlKHtcbiAgcHJvcDogJ2xpbmVIZWlnaHQnXG59KTtcbmV4cG9ydCBjb25zdCB0ZXh0QWxpZ24gPSBzdHlsZSh7XG4gIHByb3A6ICd0ZXh0QWxpZ24nXG59KTtcbmV4cG9ydCBjb25zdCB0eXBvZ3JhcGh5VmFyaWFudCA9IHN0eWxlKHtcbiAgcHJvcDogJ3R5cG9ncmFwaHknLFxuICBjc3NQcm9wZXJ0eTogZmFsc2UsXG4gIHRoZW1lS2V5OiAndHlwb2dyYXBoeSdcbn0pO1xuY29uc3QgdHlwb2dyYXBoeSA9IGNvbXBvc2UodHlwb2dyYXBoeVZhcmlhbnQsIGZvbnRGYW1pbHksIGZvbnRTaXplLCBmb250U3R5bGUsIGZvbnRXZWlnaHQsIGxldHRlclNwYWNpbmcsIGxpbmVIZWlnaHQsIHRleHRBbGlnbiwgdGV4dFRyYW5zZm9ybSk7XG5leHBvcnQgZGVmYXVsdCB0eXBvZ3JhcGh5OyIsImltcG9ydCBib3JkZXJzIGZyb20gJy4vYm9yZGVycyc7XG5pbXBvcnQgZGlzcGxheSBmcm9tICcuL2Rpc3BsYXknO1xuaW1wb3J0IGZsZXhib3ggZnJvbSAnLi9mbGV4Ym94JztcbmltcG9ydCBncmlkIGZyb20gJy4vY3NzR3JpZCc7XG5pbXBvcnQgcG9zaXRpb25zIGZyb20gJy4vcG9zaXRpb25zJztcbmltcG9ydCBwYWxldHRlIGZyb20gJy4vcGFsZXR0ZSc7XG5pbXBvcnQgc2hhZG93cyBmcm9tICcuL3NoYWRvd3MnO1xuaW1wb3J0IHNpemluZyBmcm9tICcuL3NpemluZyc7XG5pbXBvcnQgc3BhY2luZyBmcm9tICcuL3NwYWNpbmcnO1xuaW1wb3J0IHR5cG9ncmFwaHkgZnJvbSAnLi90eXBvZ3JhcGh5JztcbmNvbnN0IGZpbHRlclByb3BzTWFwcGluZyA9IHtcbiAgYm9yZGVyczogYm9yZGVycy5maWx0ZXJQcm9wcyxcbiAgZGlzcGxheTogZGlzcGxheS5maWx0ZXJQcm9wcyxcbiAgZmxleGJveDogZmxleGJveC5maWx0ZXJQcm9wcyxcbiAgZ3JpZDogZ3JpZC5maWx0ZXJQcm9wcyxcbiAgcG9zaXRpb25zOiBwb3NpdGlvbnMuZmlsdGVyUHJvcHMsXG4gIHBhbGV0dGU6IHBhbGV0dGUuZmlsdGVyUHJvcHMsXG4gIHNoYWRvd3M6IHNoYWRvd3MuZmlsdGVyUHJvcHMsXG4gIHNpemluZzogc2l6aW5nLmZpbHRlclByb3BzLFxuICBzcGFjaW5nOiBzcGFjaW5nLmZpbHRlclByb3BzLFxuICB0eXBvZ3JhcGh5OiB0eXBvZ3JhcGh5LmZpbHRlclByb3BzXG59O1xuZXhwb3J0IGNvbnN0IHN0eWxlRnVuY3Rpb25NYXBwaW5nID0ge1xuICBib3JkZXJzLFxuICBkaXNwbGF5LFxuICBmbGV4Ym94LFxuICBncmlkLFxuICBwb3NpdGlvbnMsXG4gIHBhbGV0dGUsXG4gIHNoYWRvd3MsXG4gIHNpemluZyxcbiAgc3BhY2luZyxcbiAgdHlwb2dyYXBoeVxufTtcbmV4cG9ydCBjb25zdCBwcm9wVG9TdHlsZUZ1bmN0aW9uID0gT2JqZWN0LmtleXMoZmlsdGVyUHJvcHNNYXBwaW5nKS5yZWR1Y2UoKGFjYywgc3R5bGVGbk5hbWUpID0+IHtcbiAgZmlsdGVyUHJvcHNNYXBwaW5nW3N0eWxlRm5OYW1lXS5mb3JFYWNoKHByb3BOYW1lID0+IHtcbiAgICBhY2NbcHJvcE5hbWVdID0gc3R5bGVGdW5jdGlvbk1hcHBpbmdbc3R5bGVGbk5hbWVdO1xuICB9KTtcbiAgcmV0dXJuIGFjYztcbn0sIHt9KTtcblxuZnVuY3Rpb24gZ2V0VGhlbWVWYWx1ZShwcm9wLCB2YWx1ZSwgdGhlbWUpIHtcbiAgY29uc3QgaW5wdXRQcm9wcyA9IHtcbiAgICBbcHJvcF06IHZhbHVlLFxuICAgIHRoZW1lXG4gIH07XG4gIGNvbnN0IHN0eWxlRnVuY3Rpb24gPSBwcm9wVG9TdHlsZUZ1bmN0aW9uW3Byb3BdO1xuICByZXR1cm4gc3R5bGVGdW5jdGlvbiA/IHN0eWxlRnVuY3Rpb24oaW5wdXRQcm9wcykgOiB7XG4gICAgW3Byb3BdOiB2YWx1ZVxuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBnZXRUaGVtZVZhbHVlOyIsImltcG9ydCBtZXJnZSBmcm9tICcuLi9tZXJnZSc7XG5pbXBvcnQgeyBzdHlsZUZ1bmN0aW9uTWFwcGluZyBhcyBkZWZhdWx0U3R5bGVGdW5jdGlvbk1hcHBpbmcgfSBmcm9tICcuLi9nZXRUaGVtZVZhbHVlJztcbmltcG9ydCB7IGhhbmRsZUJyZWFrcG9pbnRzLCBjcmVhdGVFbXB0eUJyZWFrcG9pbnRPYmplY3QsIHJlbW92ZVVudXNlZEJyZWFrcG9pbnRzIH0gZnJvbSAnLi4vYnJlYWtwb2ludHMnO1xuXG5mdW5jdGlvbiBvYmplY3RzSGF2ZVNhbWVLZXlzKC4uLm9iamVjdHMpIHtcbiAgY29uc3QgYWxsS2V5cyA9IG9iamVjdHMucmVkdWNlKChrZXlzLCBvYmplY3QpID0+IGtleXMuY29uY2F0KE9iamVjdC5rZXlzKG9iamVjdCkpLCBbXSk7XG4gIGNvbnN0IHVuaW9uID0gbmV3IFNldChhbGxLZXlzKTtcbiAgcmV0dXJuIG9iamVjdHMuZXZlcnkob2JqZWN0ID0+IHVuaW9uLnNpemUgPT09IE9iamVjdC5rZXlzKG9iamVjdCkubGVuZ3RoKTtcbn1cblxuZnVuY3Rpb24gY2FsbElmRm4obWF5YmVGbiwgYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgbWF5YmVGbiA9PT0gJ2Z1bmN0aW9uJyA/IG1heWJlRm4oYXJnKSA6IG1heWJlRm47XG59IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbmFtaW5nLWNvbnZlbnRpb25cblxuXG5leHBvcnQgZnVuY3Rpb24gdW5zdGFibGVfY3JlYXRlU3R5bGVGdW5jdGlvblN4KHN0eWxlRnVuY3Rpb25NYXBwaW5nID0gZGVmYXVsdFN0eWxlRnVuY3Rpb25NYXBwaW5nKSB7XG4gIGNvbnN0IHByb3BUb1N0eWxlRnVuY3Rpb24gPSBPYmplY3Qua2V5cyhzdHlsZUZ1bmN0aW9uTWFwcGluZykucmVkdWNlKChhY2MsIHN0eWxlRm5OYW1lKSA9PiB7XG4gICAgc3R5bGVGdW5jdGlvbk1hcHBpbmdbc3R5bGVGbk5hbWVdLmZpbHRlclByb3BzLmZvckVhY2gocHJvcE5hbWUgPT4ge1xuICAgICAgYWNjW3Byb3BOYW1lXSA9IHN0eWxlRnVuY3Rpb25NYXBwaW5nW3N0eWxlRm5OYW1lXTtcbiAgICB9KTtcbiAgICByZXR1cm4gYWNjO1xuICB9LCB7fSk7XG5cbiAgZnVuY3Rpb24gZ2V0VGhlbWVWYWx1ZShwcm9wLCB2YWx1ZSwgdGhlbWUpIHtcbiAgICBjb25zdCBpbnB1dFByb3BzID0ge1xuICAgICAgW3Byb3BdOiB2YWx1ZSxcbiAgICAgIHRoZW1lXG4gICAgfTtcbiAgICBjb25zdCBzdHlsZUZ1bmN0aW9uID0gcHJvcFRvU3R5bGVGdW5jdGlvbltwcm9wXTtcbiAgICByZXR1cm4gc3R5bGVGdW5jdGlvbiA/IHN0eWxlRnVuY3Rpb24oaW5wdXRQcm9wcykgOiB7XG4gICAgICBbcHJvcF06IHZhbHVlXG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHN0eWxlRnVuY3Rpb25TeChwcm9wcykge1xuICAgIGNvbnN0IHtcbiAgICAgIHN4LFxuICAgICAgdGhlbWUgPSB7fVxuICAgIH0gPSBwcm9wcyB8fCB7fTtcblxuICAgIGlmICghc3gpIHtcbiAgICAgIHJldHVybiBudWxsOyAvLyBFbW90aW9uICYgc3R5bGVkLWNvbXBvbmVudHMgd2lsbCBuZWdsZWN0IG51bGxcbiAgICB9XG4gICAgLypcbiAgICAgKiBSZWNlaXZlIGBzeElucHV0YCBhcyBvYmplY3Qgb3IgY2FsbGJhY2tcbiAgICAgKiBhbmQgdGhlbiByZWN1cnNpdmVseSBjaGVjayBrZXlzICYgdmFsdWVzIHRvIGNyZWF0ZSBtZWRpYSBxdWVyeSBvYmplY3Qgc3R5bGVzLlxuICAgICAqICh0aGUgcmVzdWx0IHdpbGwgYmUgdXNlZCBpbiBgc3R5bGVkYClcbiAgICAgKi9cblxuXG4gICAgZnVuY3Rpb24gdHJhdmVyc2Uoc3hJbnB1dCkge1xuICAgICAgbGV0IHN4T2JqZWN0ID0gc3hJbnB1dDtcblxuICAgICAgaWYgKHR5cGVvZiBzeElucHV0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHN4T2JqZWN0ID0gc3hJbnB1dCh0aGVtZSk7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBzeElucHV0ICE9PSAnb2JqZWN0Jykge1xuICAgICAgICAvLyB2YWx1ZVxuICAgICAgICByZXR1cm4gc3hJbnB1dDtcbiAgICAgIH1cblxuICAgICAgaWYgKCFzeE9iamVjdCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgY29uc3QgZW1wdHlCcmVha3BvaW50cyA9IGNyZWF0ZUVtcHR5QnJlYWtwb2ludE9iamVjdCh0aGVtZS5icmVha3BvaW50cyk7XG4gICAgICBjb25zdCBicmVha3BvaW50c0tleXMgPSBPYmplY3Qua2V5cyhlbXB0eUJyZWFrcG9pbnRzKTtcbiAgICAgIGxldCBjc3MgPSBlbXB0eUJyZWFrcG9pbnRzO1xuICAgICAgT2JqZWN0LmtleXMoc3hPYmplY3QpLmZvckVhY2goc3R5bGVLZXkgPT4ge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IGNhbGxJZkZuKHN4T2JqZWN0W3N0eWxlS2V5XSwgdGhlbWUpO1xuXG4gICAgICAgIGlmICh2YWx1ZSAhPT0gbnVsbCAmJiB2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIGlmIChwcm9wVG9TdHlsZUZ1bmN0aW9uW3N0eWxlS2V5XSkge1xuICAgICAgICAgICAgICBjc3MgPSBtZXJnZShjc3MsIGdldFRoZW1lVmFsdWUoc3R5bGVLZXksIHZhbHVlLCB0aGVtZSkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgY29uc3QgYnJlYWtwb2ludHNWYWx1ZXMgPSBoYW5kbGVCcmVha3BvaW50cyh7XG4gICAgICAgICAgICAgICAgdGhlbWVcbiAgICAgICAgICAgICAgfSwgdmFsdWUsIHggPT4gKHtcbiAgICAgICAgICAgICAgICBbc3R5bGVLZXldOiB4XG4gICAgICAgICAgICAgIH0pKTtcblxuICAgICAgICAgICAgICBpZiAob2JqZWN0c0hhdmVTYW1lS2V5cyhicmVha3BvaW50c1ZhbHVlcywgdmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgY3NzW3N0eWxlS2V5XSA9IHN0eWxlRnVuY3Rpb25TeCh7XG4gICAgICAgICAgICAgICAgICBzeDogdmFsdWUsXG4gICAgICAgICAgICAgICAgICB0aGVtZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNzcyA9IG1lcmdlKGNzcywgYnJlYWtwb2ludHNWYWx1ZXMpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNzcyA9IG1lcmdlKGNzcywgZ2V0VGhlbWVWYWx1ZShzdHlsZUtleSwgdmFsdWUsIHRoZW1lKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZW1vdmVVbnVzZWRCcmVha3BvaW50cyhicmVha3BvaW50c0tleXMsIGNzcyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkoc3gpID8gc3gubWFwKHRyYXZlcnNlKSA6IHRyYXZlcnNlKHN4KTtcbiAgfVxuXG4gIHJldHVybiBzdHlsZUZ1bmN0aW9uU3g7XG59XG5jb25zdCBzdHlsZUZ1bmN0aW9uU3ggPSB1bnN0YWJsZV9jcmVhdGVTdHlsZUZ1bmN0aW9uU3goKTtcbnN0eWxlRnVuY3Rpb25TeC5maWx0ZXJQcm9wcyA9IFsnc3gnXTtcbmV4cG9ydCBkZWZhdWx0IHN0eWxlRnVuY3Rpb25TeDsiLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wibmFtZVwiLCBcInNsb3RcIiwgXCJza2lwVmFyaWFudHNSZXNvbHZlclwiLCBcInNraXBTeFwiLCBcIm92ZXJyaWRlc1Jlc29sdmVyXCJdLFxuICAgICAgX2V4Y2x1ZGVkMiA9IFtcInRoZW1lXCJdLFxuICAgICAgX2V4Y2x1ZGVkMyA9IFtcInRoZW1lXCJdO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bmRlcnNjb3JlLWRhbmdsZSAqL1xuaW1wb3J0IHN0eWxlZEVuZ2luZVN0eWxlZCwgeyBpbnRlcm5hbF9wcm9jZXNzU3R5bGVzIGFzIHByb2Nlc3NTdHlsZXMgfSBmcm9tICdAbXVpL3N0eWxlZC1lbmdpbmUnO1xuaW1wb3J0IHsgZ2V0RGlzcGxheU5hbWUgfSBmcm9tICdAbXVpL3V0aWxzJztcbmltcG9ydCBjcmVhdGVUaGVtZSBmcm9tICcuL2NyZWF0ZVRoZW1lJztcbmltcG9ydCBwcm9wc1RvQ2xhc3NLZXkgZnJvbSAnLi9wcm9wc1RvQ2xhc3NLZXknO1xuaW1wb3J0IGRlZmF1bHRTdHlsZUZ1bmN0aW9uU3ggZnJvbSAnLi9zdHlsZUZ1bmN0aW9uU3gnO1xuXG5mdW5jdGlvbiBpc0VtcHR5KG9iaikge1xuICByZXR1cm4gT2JqZWN0LmtleXMob2JqKS5sZW5ndGggPT09IDA7XG59IC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9lbW90aW9uLWpzL2Vtb3Rpb24vYmxvYi8yNmRlZDYxMDlmY2Q4Y2E5ODc1Y2MyY2U0NTY0ZmVlNjc4YTNmM2M1L3BhY2thZ2VzL3N0eWxlZC9zcmMvdXRpbHMuanMjTDQwXG5cblxuZnVuY3Rpb24gaXNTdHJpbmdUYWcodGFnKSB7XG4gIHJldHVybiB0eXBlb2YgdGFnID09PSAnc3RyaW5nJyAmJiAvLyA5NiBpcyBvbmUgbGVzcyB0aGFuIHRoZSBjaGFyIGNvZGVcbiAgLy8gZm9yIFwiYVwiIHNvIHRoaXMgaXMgY2hlY2tpbmcgdGhhdFxuICAvLyBpdCdzIGEgbG93ZXJjYXNlIGNoYXJhY3RlclxuICB0YWcuY2hhckNvZGVBdCgwKSA+IDk2O1xufVxuXG5jb25zdCBnZXRTdHlsZU92ZXJyaWRlcyA9IChuYW1lLCB0aGVtZSkgPT4ge1xuICBpZiAodGhlbWUuY29tcG9uZW50cyAmJiB0aGVtZS5jb21wb25lbnRzW25hbWVdICYmIHRoZW1lLmNvbXBvbmVudHNbbmFtZV0uc3R5bGVPdmVycmlkZXMpIHtcbiAgICByZXR1cm4gdGhlbWUuY29tcG9uZW50c1tuYW1lXS5zdHlsZU92ZXJyaWRlcztcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufTtcblxuY29uc3QgZ2V0VmFyaWFudFN0eWxlcyA9IChuYW1lLCB0aGVtZSkgPT4ge1xuICBsZXQgdmFyaWFudHMgPSBbXTtcblxuICBpZiAodGhlbWUgJiYgdGhlbWUuY29tcG9uZW50cyAmJiB0aGVtZS5jb21wb25lbnRzW25hbWVdICYmIHRoZW1lLmNvbXBvbmVudHNbbmFtZV0udmFyaWFudHMpIHtcbiAgICB2YXJpYW50cyA9IHRoZW1lLmNvbXBvbmVudHNbbmFtZV0udmFyaWFudHM7XG4gIH1cblxuICBjb25zdCB2YXJpYW50c1N0eWxlcyA9IHt9O1xuICB2YXJpYW50cy5mb3JFYWNoKGRlZmluaXRpb24gPT4ge1xuICAgIGNvbnN0IGtleSA9IHByb3BzVG9DbGFzc0tleShkZWZpbml0aW9uLnByb3BzKTtcbiAgICB2YXJpYW50c1N0eWxlc1trZXldID0gZGVmaW5pdGlvbi5zdHlsZTtcbiAgfSk7XG4gIHJldHVybiB2YXJpYW50c1N0eWxlcztcbn07XG5cbmNvbnN0IHZhcmlhbnRzUmVzb2x2ZXIgPSAocHJvcHMsIHN0eWxlcywgdGhlbWUsIG5hbWUpID0+IHtcbiAgdmFyIF90aGVtZSRjb21wb25lbnRzLCBfdGhlbWUkY29tcG9uZW50cyRuYW07XG5cbiAgY29uc3Qge1xuICAgIG93bmVyU3RhdGUgPSB7fVxuICB9ID0gcHJvcHM7XG4gIGNvbnN0IHZhcmlhbnRzU3R5bGVzID0gW107XG4gIGNvbnN0IHRoZW1lVmFyaWFudHMgPSB0aGVtZSA9PSBudWxsID8gdm9pZCAwIDogKF90aGVtZSRjb21wb25lbnRzID0gdGhlbWUuY29tcG9uZW50cykgPT0gbnVsbCA/IHZvaWQgMCA6IChfdGhlbWUkY29tcG9uZW50cyRuYW0gPSBfdGhlbWUkY29tcG9uZW50c1tuYW1lXSkgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGVtZSRjb21wb25lbnRzJG5hbS52YXJpYW50cztcblxuICBpZiAodGhlbWVWYXJpYW50cykge1xuICAgIHRoZW1lVmFyaWFudHMuZm9yRWFjaCh0aGVtZVZhcmlhbnQgPT4ge1xuICAgICAgbGV0IGlzTWF0Y2ggPSB0cnVlO1xuICAgICAgT2JqZWN0LmtleXModGhlbWVWYXJpYW50LnByb3BzKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgIGlmIChvd25lclN0YXRlW2tleV0gIT09IHRoZW1lVmFyaWFudC5wcm9wc1trZXldICYmIHByb3BzW2tleV0gIT09IHRoZW1lVmFyaWFudC5wcm9wc1trZXldKSB7XG4gICAgICAgICAgaXNNYXRjaCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgaWYgKGlzTWF0Y2gpIHtcbiAgICAgICAgdmFyaWFudHNTdHlsZXMucHVzaChzdHlsZXNbcHJvcHNUb0NsYXNzS2V5KHRoZW1lVmFyaWFudC5wcm9wcyldKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiB2YXJpYW50c1N0eWxlcztcbn07IC8vIFVwZGF0ZSAvc3lzdGVtL3N0eWxlZC8jYXBpIGluIGNhc2UgaWYgdGhpcyBjaGFuZ2VzXG5cblxuZXhwb3J0IGZ1bmN0aW9uIHNob3VsZEZvcndhcmRQcm9wKHByb3ApIHtcbiAgcmV0dXJuIHByb3AgIT09ICdvd25lclN0YXRlJyAmJiBwcm9wICE9PSAndGhlbWUnICYmIHByb3AgIT09ICdzeCcgJiYgcHJvcCAhPT0gJ2FzJztcbn1cbmV4cG9ydCBjb25zdCBzeXN0ZW1EZWZhdWx0VGhlbWUgPSBjcmVhdGVUaGVtZSgpO1xuXG5jb25zdCBsb3dlcmNhc2VGaXJzdExldHRlciA9IHN0cmluZyA9PiB7XG4gIHJldHVybiBzdHJpbmcuY2hhckF0KDApLnRvTG93ZXJDYXNlKCkgKyBzdHJpbmcuc2xpY2UoMSk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVTdHlsZWQoaW5wdXQgPSB7fSkge1xuICBjb25zdCB7XG4gICAgZGVmYXVsdFRoZW1lID0gc3lzdGVtRGVmYXVsdFRoZW1lLFxuICAgIHJvb3RTaG91bGRGb3J3YXJkUHJvcCA9IHNob3VsZEZvcndhcmRQcm9wLFxuICAgIHNsb3RTaG91bGRGb3J3YXJkUHJvcCA9IHNob3VsZEZvcndhcmRQcm9wLFxuICAgIHN0eWxlRnVuY3Rpb25TeCA9IGRlZmF1bHRTdHlsZUZ1bmN0aW9uU3hcbiAgfSA9IGlucHV0O1xuXG4gIGNvbnN0IHN5c3RlbVN4ID0gcHJvcHMgPT4ge1xuICAgIGNvbnN0IHRoZW1lID0gaXNFbXB0eShwcm9wcy50aGVtZSkgPyBkZWZhdWx0VGhlbWUgOiBwcm9wcy50aGVtZTtcbiAgICByZXR1cm4gc3R5bGVGdW5jdGlvblN4KF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgdGhlbWVcbiAgICB9KSk7XG4gIH07XG5cbiAgc3lzdGVtU3guX19tdWlfc3lzdGVtU3ggPSB0cnVlO1xuICByZXR1cm4gKHRhZywgaW5wdXRPcHRpb25zID0ge30pID0+IHtcbiAgICAvLyBGaWx0ZXIgb3V0IHRoZSBgc3hgIHN0eWxlIGZ1bmN0aW9uIGZyb20gdGhlIHByZXZpb3VzIHN0eWxlZCBjb21wb25lbnQgdG8gcHJldmVudCB1bm5lY2Vzc2FyeSBzdHlsZXMgZ2VuZXJhdGVkIGJ5IHRoZSBjb21wb3NpdGUgY29tcG9uZW50cy5cbiAgICBwcm9jZXNzU3R5bGVzKHRhZywgc3R5bGVzID0+IHN0eWxlcy5maWx0ZXIoc3R5bGUgPT4gIShzdHlsZSAhPSBudWxsICYmIHN0eWxlLl9fbXVpX3N5c3RlbVN4KSkpO1xuXG4gICAgY29uc3Qge1xuICAgICAgbmFtZTogY29tcG9uZW50TmFtZSxcbiAgICAgIHNsb3Q6IGNvbXBvbmVudFNsb3QsXG4gICAgICBza2lwVmFyaWFudHNSZXNvbHZlcjogaW5wdXRTa2lwVmFyaWFudHNSZXNvbHZlcixcbiAgICAgIHNraXBTeDogaW5wdXRTa2lwU3gsXG4gICAgICBvdmVycmlkZXNSZXNvbHZlclxuICAgIH0gPSBpbnB1dE9wdGlvbnMsXG4gICAgICAgICAgb3B0aW9ucyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKGlucHV0T3B0aW9ucywgX2V4Y2x1ZGVkKTsgLy8gaWYgc2tpcFZhcmlhbnRzUmVzb2x2ZXIgb3B0aW9uIGlzIGRlZmluZWQsIHRha2UgdGhlIHZhbHVlLCBvdGhlcndpc2UsIHRydWUgZm9yIHJvb3QgYW5kIGZhbHNlIGZvciBvdGhlciBzbG90cy5cblxuXG4gICAgY29uc3Qgc2tpcFZhcmlhbnRzUmVzb2x2ZXIgPSBpbnB1dFNraXBWYXJpYW50c1Jlc29sdmVyICE9PSB1bmRlZmluZWQgPyBpbnB1dFNraXBWYXJpYW50c1Jlc29sdmVyIDogY29tcG9uZW50U2xvdCAmJiBjb21wb25lbnRTbG90ICE9PSAnUm9vdCcgfHwgZmFsc2U7XG4gICAgY29uc3Qgc2tpcFN4ID0gaW5wdXRTa2lwU3ggfHwgZmFsc2U7XG4gICAgbGV0IGxhYmVsO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmIChjb21wb25lbnROYW1lKSB7XG4gICAgICAgIGxhYmVsID0gYCR7Y29tcG9uZW50TmFtZX0tJHtsb3dlcmNhc2VGaXJzdExldHRlcihjb21wb25lbnRTbG90IHx8ICdSb290Jyl9YDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsZXQgc2hvdWxkRm9yd2FyZFByb3BPcHRpb24gPSBzaG91bGRGb3J3YXJkUHJvcDtcblxuICAgIGlmIChjb21wb25lbnRTbG90ID09PSAnUm9vdCcpIHtcbiAgICAgIHNob3VsZEZvcndhcmRQcm9wT3B0aW9uID0gcm9vdFNob3VsZEZvcndhcmRQcm9wO1xuICAgIH0gZWxzZSBpZiAoY29tcG9uZW50U2xvdCkge1xuICAgICAgLy8gYW55IG90aGVyIHNsb3Qgc3BlY2lmaWVkXG4gICAgICBzaG91bGRGb3J3YXJkUHJvcE9wdGlvbiA9IHNsb3RTaG91bGRGb3J3YXJkUHJvcDtcbiAgICB9IGVsc2UgaWYgKGlzU3RyaW5nVGFnKHRhZykpIHtcbiAgICAgIC8vIGZvciBzdHJpbmcgKGh0bWwpIHRhZywgcHJlc2VydmUgdGhlIGJlaGF2aW9yIGluIGVtb3Rpb24gJiBzdHlsZWQtY29tcG9uZW50cy5cbiAgICAgIHNob3VsZEZvcndhcmRQcm9wT3B0aW9uID0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGNvbnN0IGRlZmF1bHRTdHlsZWRSZXNvbHZlciA9IHN0eWxlZEVuZ2luZVN0eWxlZCh0YWcsIF9leHRlbmRzKHtcbiAgICAgIHNob3VsZEZvcndhcmRQcm9wOiBzaG91bGRGb3J3YXJkUHJvcE9wdGlvbixcbiAgICAgIGxhYmVsXG4gICAgfSwgb3B0aW9ucykpO1xuXG4gICAgY29uc3QgbXVpU3R5bGVkUmVzb2x2ZXIgPSAoc3R5bGVBcmcsIC4uLmV4cHJlc3Npb25zKSA9PiB7XG4gICAgICBjb25zdCBleHByZXNzaW9uc1dpdGhEZWZhdWx0VGhlbWUgPSBleHByZXNzaW9ucyA/IGV4cHJlc3Npb25zLm1hcChzdHlsZXNBcmcgPT4ge1xuICAgICAgICAvLyBPbiB0aGUgc2VydmVyIEVtb3Rpb24gZG9lc24ndCB1c2UgUmVhY3QuZm9yd2FyZFJlZiBmb3IgY3JlYXRpbmcgY29tcG9uZW50cywgc28gdGhlIGNyZWF0ZWRcbiAgICAgICAgLy8gY29tcG9uZW50IHN0YXlzIGFzIGEgZnVuY3Rpb24uIFRoaXMgY29uZGl0aW9uIG1ha2VzIHN1cmUgdGhhdCB3ZSBkbyBub3QgaW50ZXJwb2xhdGUgZnVuY3Rpb25zXG4gICAgICAgIC8vIHdoaWNoIGFyZSBiYXNpY2FsbHkgY29tcG9uZW50cyB1c2VkIGFzIGEgc2VsZWN0b3JzLlxuICAgICAgICByZXR1cm4gdHlwZW9mIHN0eWxlc0FyZyA9PT0gJ2Z1bmN0aW9uJyAmJiBzdHlsZXNBcmcuX19lbW90aW9uX3JlYWwgIT09IHN0eWxlc0FyZyA/IF9yZWYgPT4ge1xuICAgICAgICAgIGxldCB7XG4gICAgICAgICAgICB0aGVtZTogdGhlbWVJbnB1dFxuICAgICAgICAgIH0gPSBfcmVmLFxuICAgICAgICAgICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYsIF9leGNsdWRlZDIpO1xuXG4gICAgICAgICAgcmV0dXJuIHN0eWxlc0FyZyhfZXh0ZW5kcyh7XG4gICAgICAgICAgICB0aGVtZTogaXNFbXB0eSh0aGVtZUlucHV0KSA/IGRlZmF1bHRUaGVtZSA6IHRoZW1lSW5wdXRcbiAgICAgICAgICB9LCBvdGhlcikpO1xuICAgICAgICB9IDogc3R5bGVzQXJnO1xuICAgICAgfSkgOiBbXTtcbiAgICAgIGxldCB0cmFuc2Zvcm1lZFN0eWxlQXJnID0gc3R5bGVBcmc7XG5cbiAgICAgIGlmIChjb21wb25lbnROYW1lICYmIG92ZXJyaWRlc1Jlc29sdmVyKSB7XG4gICAgICAgIGV4cHJlc3Npb25zV2l0aERlZmF1bHRUaGVtZS5wdXNoKHByb3BzID0+IHtcbiAgICAgICAgICBjb25zdCB0aGVtZSA9IGlzRW1wdHkocHJvcHMudGhlbWUpID8gZGVmYXVsdFRoZW1lIDogcHJvcHMudGhlbWU7XG4gICAgICAgICAgY29uc3Qgc3R5bGVPdmVycmlkZXMgPSBnZXRTdHlsZU92ZXJyaWRlcyhjb21wb25lbnROYW1lLCB0aGVtZSk7XG5cbiAgICAgICAgICBpZiAoc3R5bGVPdmVycmlkZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlc29sdmVkU3R5bGVPdmVycmlkZXMgPSB7fTtcbiAgICAgICAgICAgIE9iamVjdC5lbnRyaWVzKHN0eWxlT3ZlcnJpZGVzKS5mb3JFYWNoKChbc2xvdEtleSwgc2xvdFN0eWxlXSkgPT4ge1xuICAgICAgICAgICAgICByZXNvbHZlZFN0eWxlT3ZlcnJpZGVzW3Nsb3RLZXldID0gdHlwZW9mIHNsb3RTdHlsZSA9PT0gJ2Z1bmN0aW9uJyA/IHNsb3RTdHlsZShfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICAgICAgICAgICAgICB0aGVtZVxuICAgICAgICAgICAgICB9KSkgOiBzbG90U3R5bGU7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBvdmVycmlkZXNSZXNvbHZlcihwcm9wcywgcmVzb2x2ZWRTdHlsZU92ZXJyaWRlcyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBpZiAoY29tcG9uZW50TmFtZSAmJiAhc2tpcFZhcmlhbnRzUmVzb2x2ZXIpIHtcbiAgICAgICAgZXhwcmVzc2lvbnNXaXRoRGVmYXVsdFRoZW1lLnB1c2gocHJvcHMgPT4ge1xuICAgICAgICAgIGNvbnN0IHRoZW1lID0gaXNFbXB0eShwcm9wcy50aGVtZSkgPyBkZWZhdWx0VGhlbWUgOiBwcm9wcy50aGVtZTtcbiAgICAgICAgICByZXR1cm4gdmFyaWFudHNSZXNvbHZlcihwcm9wcywgZ2V0VmFyaWFudFN0eWxlcyhjb21wb25lbnROYW1lLCB0aGVtZSksIHRoZW1lLCBjb21wb25lbnROYW1lKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGlmICghc2tpcFN4KSB7XG4gICAgICAgIGV4cHJlc3Npb25zV2l0aERlZmF1bHRUaGVtZS5wdXNoKHN5c3RlbVN4KTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgbnVtT2ZDdXN0b21GbnNBcHBsaWVkID0gZXhwcmVzc2lvbnNXaXRoRGVmYXVsdFRoZW1lLmxlbmd0aCAtIGV4cHJlc3Npb25zLmxlbmd0aDtcblxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoc3R5bGVBcmcpICYmIG51bU9mQ3VzdG9tRm5zQXBwbGllZCA+IDApIHtcbiAgICAgICAgY29uc3QgcGxhY2Vob2xkZXJzID0gbmV3IEFycmF5KG51bU9mQ3VzdG9tRm5zQXBwbGllZCkuZmlsbCgnJyk7IC8vIElmIHRoZSB0eXBlIGlzIGFycmF5LCB0aGFuIHdlIG5lZWQgdG8gYWRkIHBsYWNlaG9sZGVycyBpbiB0aGUgdGVtcGxhdGUgZm9yIHRoZSBvdmVycmlkZXMsIHZhcmlhbnRzIGFuZCB0aGUgc3ggc3R5bGVzLlxuXG4gICAgICAgIHRyYW5zZm9ybWVkU3R5bGVBcmcgPSBbLi4uc3R5bGVBcmcsIC4uLnBsYWNlaG9sZGVyc107XG4gICAgICAgIHRyYW5zZm9ybWVkU3R5bGVBcmcucmF3ID0gWy4uLnN0eWxlQXJnLnJhdywgLi4ucGxhY2Vob2xkZXJzXTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHN0eWxlQXJnID09PSAnZnVuY3Rpb24nICYmIC8vIE9uIHRoZSBzZXJ2ZXIgRW1vdGlvbiBkb2Vzbid0IHVzZSBSZWFjdC5mb3J3YXJkUmVmIGZvciBjcmVhdGluZyBjb21wb25lbnRzLCBzbyB0aGUgY3JlYXRlZFxuICAgICAgLy8gY29tcG9uZW50IHN0YXlzIGFzIGEgZnVuY3Rpb24uIFRoaXMgY29uZGl0aW9uIG1ha2VzIHN1cmUgdGhhdCB3ZSBkbyBub3QgaW50ZXJwb2xhdGUgZnVuY3Rpb25zXG4gICAgICAvLyB3aGljaCBhcmUgYmFzaWNhbGx5IGNvbXBvbmVudHMgdXNlZCBhcyBhIHNlbGVjdG9ycy5cbiAgICAgIHN0eWxlQXJnLl9fZW1vdGlvbl9yZWFsICE9PSBzdHlsZUFyZykge1xuICAgICAgICAvLyBJZiB0aGUgdHlwZSBpcyBmdW5jdGlvbiwgd2UgbmVlZCB0byBkZWZpbmUgdGhlIGRlZmF1bHQgdGhlbWUuXG4gICAgICAgIHRyYW5zZm9ybWVkU3R5bGVBcmcgPSBfcmVmMiA9PiB7XG4gICAgICAgICAgbGV0IHtcbiAgICAgICAgICAgIHRoZW1lOiB0aGVtZUlucHV0XG4gICAgICAgICAgfSA9IF9yZWYyLFxuICAgICAgICAgICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYyLCBfZXhjbHVkZWQzKTtcblxuICAgICAgICAgIHJldHVybiBzdHlsZUFyZyhfZXh0ZW5kcyh7XG4gICAgICAgICAgICB0aGVtZTogaXNFbXB0eSh0aGVtZUlucHV0KSA/IGRlZmF1bHRUaGVtZSA6IHRoZW1lSW5wdXRcbiAgICAgICAgICB9LCBvdGhlcikpO1xuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBjb25zdCBDb21wb25lbnQgPSBkZWZhdWx0U3R5bGVkUmVzb2x2ZXIodHJhbnNmb3JtZWRTdHlsZUFyZywgLi4uZXhwcmVzc2lvbnNXaXRoRGVmYXVsdFRoZW1lKTtcblxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgbGV0IGRpc3BsYXlOYW1lO1xuXG4gICAgICAgIGlmIChjb21wb25lbnROYW1lKSB7XG4gICAgICAgICAgZGlzcGxheU5hbWUgPSBgJHtjb21wb25lbnROYW1lfSR7Y29tcG9uZW50U2xvdCB8fCAnJ31gO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRpc3BsYXlOYW1lID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBkaXNwbGF5TmFtZSA9IGBTdHlsZWQoJHtnZXREaXNwbGF5TmFtZSh0YWcpfSlgO1xuICAgICAgICB9XG5cbiAgICAgICAgQ29tcG9uZW50LmRpc3BsYXlOYW1lID0gZGlzcGxheU5hbWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb21wb25lbnQ7XG4gICAgfTtcblxuICAgIGlmIChkZWZhdWx0U3R5bGVkUmVzb2x2ZXIud2l0aENvbmZpZykge1xuICAgICAgbXVpU3R5bGVkUmVzb2x2ZXIud2l0aENvbmZpZyA9IGRlZmF1bHRTdHlsZWRSZXNvbHZlci53aXRoQ29uZmlnO1xuICAgIH1cblxuICAgIHJldHVybiBtdWlTdHlsZWRSZXNvbHZlcjtcbiAgfTtcbn0iLCJpbXBvcnQgeyBjcmVhdGVTdHlsZWQsIHNob3VsZEZvcndhcmRQcm9wIH0gZnJvbSAnQG11aS9zeXN0ZW0nO1xuaW1wb3J0IGRlZmF1bHRUaGVtZSBmcm9tICcuL2RlZmF1bHRUaGVtZSc7XG5leHBvcnQgY29uc3Qgcm9vdFNob3VsZEZvcndhcmRQcm9wID0gcHJvcCA9PiBzaG91bGRGb3J3YXJkUHJvcChwcm9wKSAmJiBwcm9wICE9PSAnY2xhc3Nlcyc7XG5leHBvcnQgY29uc3Qgc2xvdFNob3VsZEZvcndhcmRQcm9wID0gc2hvdWxkRm9yd2FyZFByb3A7XG5jb25zdCBzdHlsZWQgPSBjcmVhdGVTdHlsZWQoe1xuICBkZWZhdWx0VGhlbWUsXG4gIHJvb3RTaG91bGRGb3J3YXJkUHJvcFxufSk7XG5leHBvcnQgZGVmYXVsdCBzdHlsZWQ7IiwiLyoqIEBsaWNlbnNlIE1VSSB2NS4xMC44XG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbi8qIGVzbGludC1kaXNhYmxlIG5vLXVuZGVyc2NvcmUtZGFuZ2xlICovXG5pbXBvcnQgZW1TdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN0eWxlZCh0YWcsIG9wdGlvbnMpIHtcbiAgY29uc3Qgc3R5bGVzRmFjdG9yeSA9IGVtU3R5bGVkKHRhZywgb3B0aW9ucyk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICByZXR1cm4gKC4uLnN0eWxlcykgPT4ge1xuICAgICAgY29uc3QgY29tcG9uZW50ID0gdHlwZW9mIHRhZyA9PT0gJ3N0cmluZycgPyBgXCIke3RhZ31cImAgOiAnY29tcG9uZW50JztcblxuICAgICAgaWYgKHN0eWxlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihbYE1VSTogU2VlbXMgbGlrZSB5b3UgY2FsbGVkIFxcYHN0eWxlZCgke2NvbXBvbmVudH0pKClcXGAgd2l0aG91dCBhIFxcYHN0eWxlXFxgIGFyZ3VtZW50LmAsICdZb3UgbXVzdCBwcm92aWRlIGEgYHN0eWxlc2AgYXJndW1lbnQ6IGBzdHlsZWQoXCJkaXZcIikoc3R5bGVZb3VGb3Jnb3RUb1Bhc3MpYC4nXS5qb2luKCdcXG4nKSk7XG4gICAgICB9IGVsc2UgaWYgKHN0eWxlcy5zb21lKHN0eWxlID0+IHN0eWxlID09PSB1bmRlZmluZWQpKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYE1VSTogdGhlIHN0eWxlZCgke2NvbXBvbmVudH0pKC4uLmFyZ3MpIEFQSSByZXF1aXJlcyBhbGwgaXRzIGFyZ3MgdG8gYmUgZGVmaW5lZC5gKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHN0eWxlc0ZhY3RvcnkoLi4uc3R5bGVzKTtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIHN0eWxlc0ZhY3Rvcnk7XG59IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbmFtaW5nLWNvbnZlbnRpb25cblxuZXhwb3J0IGNvbnN0IGludGVybmFsX3Byb2Nlc3NTdHlsZXMgPSAodGFnLCBwcm9jZXNzb3IpID0+IHtcbiAgLy8gRW1vdGlvbiBhdHRhY2hlcyBhbGwgdGhlIHN0eWxlcyBhcyBgX19lbW90aW9uX3N0eWxlc2AuXG4gIC8vIFJlZjogaHR0cHM6Ly9naXRodWIuY29tL2Vtb3Rpb24tanMvZW1vdGlvbi9ibG9iLzE2ZDk3MWQwZGEyMjk1OTZkNmJjYzM5ZDI4MmJhOTc1M2M5ZWU3Y2YvcGFja2FnZXMvc3R5bGVkL3NyYy9iYXNlLmpzI0wxODZcbiAgaWYgKEFycmF5LmlzQXJyYXkodGFnLl9fZW1vdGlvbl9zdHlsZXMpKSB7XG4gICAgdGFnLl9fZW1vdGlvbl9zdHlsZXMgPSBwcm9jZXNzb3IodGFnLl9fZW1vdGlvbl9zdHlsZXMpO1xuICB9XG59O1xuZXhwb3J0IHsgVGhlbWVDb250ZXh0LCBrZXlmcmFtZXMsIGNzcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgU3R5bGVkRW5naW5lUHJvdmlkZXIgfSBmcm9tICcuL1N0eWxlZEVuZ2luZVByb3ZpZGVyJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgR2xvYmFsU3R5bGVzIH0gZnJvbSAnLi9HbG9iYWxTdHlsZXMnOyIsImltcG9ydCBDbGFzc05hbWVHZW5lcmF0b3IgZnJvbSAnLi4vQ2xhc3NOYW1lR2VuZXJhdG9yJztcbmNvbnN0IGdsb2JhbFN0YXRlQ2xhc3Nlc01hcHBpbmcgPSB7XG4gIGFjdGl2ZTogJ2FjdGl2ZScsXG4gIGNoZWNrZWQ6ICdjaGVja2VkJyxcbiAgY29tcGxldGVkOiAnY29tcGxldGVkJyxcbiAgZGlzYWJsZWQ6ICdkaXNhYmxlZCcsXG4gIGVycm9yOiAnZXJyb3InLFxuICBleHBhbmRlZDogJ2V4cGFuZGVkJyxcbiAgZm9jdXNlZDogJ2ZvY3VzZWQnLFxuICBmb2N1c1Zpc2libGU6ICdmb2N1c1Zpc2libGUnLFxuICByZXF1aXJlZDogJ3JlcXVpcmVkJyxcbiAgc2VsZWN0ZWQ6ICdzZWxlY3RlZCdcbn07XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZW5lcmF0ZVV0aWxpdHlDbGFzcyhjb21wb25lbnROYW1lLCBzbG90LCBnbG9iYWxTdGF0ZVByZWZpeCA9ICdNdWknKSB7XG4gIGNvbnN0IGdsb2JhbFN0YXRlQ2xhc3MgPSBnbG9iYWxTdGF0ZUNsYXNzZXNNYXBwaW5nW3Nsb3RdO1xuICByZXR1cm4gZ2xvYmFsU3RhdGVDbGFzcyA/IGAke2dsb2JhbFN0YXRlUHJlZml4fS0ke2dsb2JhbFN0YXRlQ2xhc3N9YCA6IGAke0NsYXNzTmFtZUdlbmVyYXRvci5nZW5lcmF0ZShjb21wb25lbnROYW1lKX0tJHtzbG90fWA7XG59IiwiaW1wb3J0IHsgdW5zdGFibGVfZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyBhcyBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIH0gZnJvbSAnQG11aS91dGlscyc7XG5pbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgZnJvbSAnLi4vZ2VuZXJhdGVVdGlsaXR5Q2xhc3MnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldFN2Z0ljb25VdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aVN2Z0ljb24nLCBzbG90KTtcbn1cbmNvbnN0IHN2Z0ljb25DbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpU3ZnSWNvbicsIFsncm9vdCcsICdjb2xvclByaW1hcnknLCAnY29sb3JTZWNvbmRhcnknLCAnY29sb3JBY3Rpb24nLCAnY29sb3JFcnJvcicsICdjb2xvckRpc2FibGVkJywgJ2ZvbnRTaXplSW5oZXJpdCcsICdmb250U2l6ZVNtYWxsJywgJ2ZvbnRTaXplTWVkaXVtJywgJ2ZvbnRTaXplTGFyZ2UnXSk7XG5leHBvcnQgZGVmYXVsdCBzdmdJY29uQ2xhc3NlczsiLCJpbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgZnJvbSAnLi4vZ2VuZXJhdGVVdGlsaXR5Q2xhc3MnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2VuZXJhdGVVdGlsaXR5Q2xhc3Nlcyhjb21wb25lbnROYW1lLCBzbG90cywgZ2xvYmFsU3RhdGVQcmVmaXggPSAnTXVpJykge1xuICBjb25zdCByZXN1bHQgPSB7fTtcbiAgc2xvdHMuZm9yRWFjaChzbG90ID0+IHtcbiAgICByZXN1bHRbc2xvdF0gPSBnZW5lcmF0ZVV0aWxpdHlDbGFzcyhjb21wb25lbnROYW1lLCBzbG90LCBnbG9iYWxTdGF0ZVByZWZpeCk7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufSIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJjaGlsZHJlblwiLCBcImNsYXNzTmFtZVwiLCBcImNvbG9yXCIsIFwiY29tcG9uZW50XCIsIFwiZm9udFNpemVcIiwgXCJodG1sQ29sb3JcIiwgXCJpbmhlcml0Vmlld0JveFwiLCBcInRpdGxlQWNjZXNzXCIsIFwidmlld0JveFwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB7IHVuc3RhYmxlX2NvbXBvc2VDbGFzc2VzIGFzIGNvbXBvc2VDbGFzc2VzIH0gZnJvbSAnQG11aS9iYXNlJztcbmltcG9ydCBjYXBpdGFsaXplIGZyb20gJy4uL3V0aWxzL2NhcGl0YWxpemUnO1xuaW1wb3J0IHVzZVRoZW1lUHJvcHMgZnJvbSAnLi4vc3R5bGVzL3VzZVRoZW1lUHJvcHMnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICcuLi9zdHlsZXMvc3R5bGVkJztcbmltcG9ydCB7IGdldFN2Z0ljb25VdGlsaXR5Q2xhc3MgfSBmcm9tICcuL3N2Z0ljb25DbGFzc2VzJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5pbXBvcnQgeyBqc3hzIGFzIF9qc3hzIH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5cbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBjb2xvcixcbiAgICBmb250U2l6ZSxcbiAgICBjbGFzc2VzXG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICByb290OiBbJ3Jvb3QnLCBjb2xvciAhPT0gJ2luaGVyaXQnICYmIGBjb2xvciR7Y2FwaXRhbGl6ZShjb2xvcil9YCwgYGZvbnRTaXplJHtjYXBpdGFsaXplKGZvbnRTaXplKX1gXVxuICB9O1xuICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldFN2Z0ljb25VdGlsaXR5Q2xhc3MsIGNsYXNzZXMpO1xufTtcblxuY29uc3QgU3ZnSWNvblJvb3QgPSBzdHlsZWQoJ3N2ZycsIHtcbiAgbmFtZTogJ011aVN2Z0ljb24nLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFtzdHlsZXMucm9vdCwgb3duZXJTdGF0ZS5jb2xvciAhPT0gJ2luaGVyaXQnICYmIHN0eWxlc1tgY29sb3Ike2NhcGl0YWxpemUob3duZXJTdGF0ZS5jb2xvcil9YF0sIHN0eWxlc1tgZm9udFNpemUke2NhcGl0YWxpemUob3duZXJTdGF0ZS5mb250U2l6ZSl9YF1dO1xuICB9XG59KSgoe1xuICB0aGVtZSxcbiAgb3duZXJTdGF0ZVxufSkgPT4ge1xuICB2YXIgX3RoZW1lJHRyYW5zaXRpb25zLCBfdGhlbWUkdHJhbnNpdGlvbnMkY3IsIF90aGVtZSR0cmFuc2l0aW9uczIsIF90aGVtZSR0cmFuc2l0aW9uczIkZCwgX3RoZW1lJHR5cG9ncmFwaHksIF90aGVtZSR0eXBvZ3JhcGh5JHB4VCwgX3RoZW1lJHR5cG9ncmFwaHkyLCBfdGhlbWUkdHlwb2dyYXBoeTIkcHgsIF90aGVtZSR0eXBvZ3JhcGh5MywgX3RoZW1lJHR5cG9ncmFwaHkzJHB4LCBfcGFsZXR0ZSRvd25lclN0YXRlJGMsIF9wYWxldHRlLCBfcGFsZXR0ZSRvd25lclN0YXRlJGMyLCBfcGFsZXR0ZTIsIF9wYWxldHRlMiRhY3Rpb24sIF9wYWxldHRlMywgX3BhbGV0dGUzJGFjdGlvbjtcblxuICByZXR1cm4ge1xuICAgIHVzZXJTZWxlY3Q6ICdub25lJyxcbiAgICB3aWR0aDogJzFlbScsXG4gICAgaGVpZ2h0OiAnMWVtJyxcbiAgICBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyxcbiAgICBmaWxsOiAnY3VycmVudENvbG9yJyxcbiAgICBmbGV4U2hyaW5rOiAwLFxuICAgIHRyYW5zaXRpb246IChfdGhlbWUkdHJhbnNpdGlvbnMgPSB0aGVtZS50cmFuc2l0aW9ucykgPT0gbnVsbCA/IHZvaWQgMCA6IChfdGhlbWUkdHJhbnNpdGlvbnMkY3IgPSBfdGhlbWUkdHJhbnNpdGlvbnMuY3JlYXRlKSA9PSBudWxsID8gdm9pZCAwIDogX3RoZW1lJHRyYW5zaXRpb25zJGNyLmNhbGwoX3RoZW1lJHRyYW5zaXRpb25zLCAnZmlsbCcsIHtcbiAgICAgIGR1cmF0aW9uOiAoX3RoZW1lJHRyYW5zaXRpb25zMiA9IHRoZW1lLnRyYW5zaXRpb25zKSA9PSBudWxsID8gdm9pZCAwIDogKF90aGVtZSR0cmFuc2l0aW9uczIkZCA9IF90aGVtZSR0cmFuc2l0aW9uczIuZHVyYXRpb24pID09IG51bGwgPyB2b2lkIDAgOiBfdGhlbWUkdHJhbnNpdGlvbnMyJGQuc2hvcnRlclxuICAgIH0pLFxuICAgIGZvbnRTaXplOiB7XG4gICAgICBpbmhlcml0OiAnaW5oZXJpdCcsXG4gICAgICBzbWFsbDogKChfdGhlbWUkdHlwb2dyYXBoeSA9IHRoZW1lLnR5cG9ncmFwaHkpID09IG51bGwgPyB2b2lkIDAgOiAoX3RoZW1lJHR5cG9ncmFwaHkkcHhUID0gX3RoZW1lJHR5cG9ncmFwaHkucHhUb1JlbSkgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGVtZSR0eXBvZ3JhcGh5JHB4VC5jYWxsKF90aGVtZSR0eXBvZ3JhcGh5LCAyMCkpIHx8ICcxLjI1cmVtJyxcbiAgICAgIG1lZGl1bTogKChfdGhlbWUkdHlwb2dyYXBoeTIgPSB0aGVtZS50eXBvZ3JhcGh5KSA9PSBudWxsID8gdm9pZCAwIDogKF90aGVtZSR0eXBvZ3JhcGh5MiRweCA9IF90aGVtZSR0eXBvZ3JhcGh5Mi5weFRvUmVtKSA9PSBudWxsID8gdm9pZCAwIDogX3RoZW1lJHR5cG9ncmFwaHkyJHB4LmNhbGwoX3RoZW1lJHR5cG9ncmFwaHkyLCAyNCkpIHx8ICcxLjVyZW0nLFxuICAgICAgbGFyZ2U6ICgoX3RoZW1lJHR5cG9ncmFwaHkzID0gdGhlbWUudHlwb2dyYXBoeSkgPT0gbnVsbCA/IHZvaWQgMCA6IChfdGhlbWUkdHlwb2dyYXBoeTMkcHggPSBfdGhlbWUkdHlwb2dyYXBoeTMucHhUb1JlbSkgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGVtZSR0eXBvZ3JhcGh5MyRweC5jYWxsKF90aGVtZSR0eXBvZ3JhcGh5MywgMzUpKSB8fCAnMi4xODc1cmVtJ1xuICAgIH1bb3duZXJTdGF0ZS5mb250U2l6ZV0sXG4gICAgLy8gVE9ETyB2NSBkZXByZWNhdGUsIHY2IHJlbW92ZSBmb3Igc3hcbiAgICBjb2xvcjogKF9wYWxldHRlJG93bmVyU3RhdGUkYyA9IChfcGFsZXR0ZSA9ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlKSA9PSBudWxsID8gdm9pZCAwIDogKF9wYWxldHRlJG93bmVyU3RhdGUkYzIgPSBfcGFsZXR0ZVtvd25lclN0YXRlLmNvbG9yXSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9wYWxldHRlJG93bmVyU3RhdGUkYzIubWFpbikgIT0gbnVsbCA/IF9wYWxldHRlJG93bmVyU3RhdGUkYyA6IHtcbiAgICAgIGFjdGlvbjogKF9wYWxldHRlMiA9ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlKSA9PSBudWxsID8gdm9pZCAwIDogKF9wYWxldHRlMiRhY3Rpb24gPSBfcGFsZXR0ZTIuYWN0aW9uKSA9PSBudWxsID8gdm9pZCAwIDogX3BhbGV0dGUyJGFjdGlvbi5hY3RpdmUsXG4gICAgICBkaXNhYmxlZDogKF9wYWxldHRlMyA9ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlKSA9PSBudWxsID8gdm9pZCAwIDogKF9wYWxldHRlMyRhY3Rpb24gPSBfcGFsZXR0ZTMuYWN0aW9uKSA9PSBudWxsID8gdm9pZCAwIDogX3BhbGV0dGUzJGFjdGlvbi5kaXNhYmxlZCxcbiAgICAgIGluaGVyaXQ6IHVuZGVmaW5lZFxuICAgIH1bb3duZXJTdGF0ZS5jb2xvcl1cbiAgfTtcbn0pO1xuY29uc3QgU3ZnSWNvbiA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFN2Z0ljb24oaW5Qcm9wcywgcmVmKSB7XG4gIGNvbnN0IHByb3BzID0gdXNlVGhlbWVQcm9wcyh7XG4gICAgcHJvcHM6IGluUHJvcHMsXG4gICAgbmFtZTogJ011aVN2Z0ljb24nXG4gIH0pO1xuXG4gIGNvbnN0IHtcbiAgICBjaGlsZHJlbixcbiAgICBjbGFzc05hbWUsXG4gICAgY29sb3IgPSAnaW5oZXJpdCcsXG4gICAgY29tcG9uZW50ID0gJ3N2ZycsXG4gICAgZm9udFNpemUgPSAnbWVkaXVtJyxcbiAgICBodG1sQ29sb3IsXG4gICAgaW5oZXJpdFZpZXdCb3ggPSBmYWxzZSxcbiAgICB0aXRsZUFjY2VzcyxcbiAgICB2aWV3Qm94ID0gJzAgMCAyNCAyNCdcbiAgfSA9IHByb3BzLFxuICAgICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuXG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBjb2xvcixcbiAgICBjb21wb25lbnQsXG4gICAgZm9udFNpemUsXG4gICAgaW5zdGFuY2VGb250U2l6ZTogaW5Qcm9wcy5mb250U2l6ZSxcbiAgICBpbmhlcml0Vmlld0JveCxcbiAgICB2aWV3Qm94XG4gIH0pO1xuXG4gIGNvbnN0IG1vcmUgPSB7fTtcblxuICBpZiAoIWluaGVyaXRWaWV3Qm94KSB7XG4gICAgbW9yZS52aWV3Qm94ID0gdmlld0JveDtcbiAgfVxuXG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4cyhTdmdJY29uUm9vdCwgX2V4dGVuZHMoe1xuICAgIGFzOiBjb21wb25lbnQsXG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKSxcbiAgICBmb2N1c2FibGU6IFwiZmFsc2VcIixcbiAgICBjb2xvcjogaHRtbENvbG9yLFxuICAgIFwiYXJpYS1oaWRkZW5cIjogdGl0bGVBY2Nlc3MgPyB1bmRlZmluZWQgOiB0cnVlLFxuICAgIHJvbGU6IHRpdGxlQWNjZXNzID8gJ2ltZycgOiB1bmRlZmluZWQsXG4gICAgcmVmOiByZWZcbiAgfSwgbW9yZSwgb3RoZXIsIHtcbiAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgIGNoaWxkcmVuOiBbY2hpbGRyZW4sIHRpdGxlQWNjZXNzID8gLyojX19QVVJFX18qL19qc3goXCJ0aXRsZVwiLCB7XG4gICAgICBjaGlsZHJlbjogdGl0bGVBY2Nlc3NcbiAgICB9KSA6IG51bGxdXG4gIH0pKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gU3ZnSWNvbi5wcm9wVHlwZXNcbi8qIHJlbW92ZS1wcm9wdHlwZXMgKi9cbj0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogTm9kZSBwYXNzZWQgaW50byB0aGUgU1ZHIGVsZW1lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbG9yIG9mIHRoZSBjb21wb25lbnQuXG4gICAqIEl0IHN1cHBvcnRzIGJvdGggZGVmYXVsdCBhbmQgY3VzdG9tIHRoZW1lIGNvbG9ycywgd2hpY2ggY2FuIGJlIGFkZGVkIGFzIHNob3duIGluIHRoZVxuICAgKiBbcGFsZXR0ZSBjdXN0b21pemF0aW9uIGd1aWRlXShodHRwczovL211aS5jb20vbWF0ZXJpYWwtdWkvY3VzdG9taXphdGlvbi9wYWxldHRlLyNhZGRpbmctbmV3LWNvbG9ycykuXG4gICAqIFlvdSBjYW4gdXNlIHRoZSBgaHRtbENvbG9yYCBwcm9wIHRvIGFwcGx5IGEgY29sb3IgYXR0cmlidXRlIHRvIHRoZSBTVkcgZWxlbWVudC5cbiAgICogQGRlZmF1bHQgJ2luaGVyaXQnXG4gICAqL1xuICBjb2xvcjogUHJvcFR5cGVzXG4gIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi9cbiAgLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnaW5oZXJpdCcsICdhY3Rpb24nLCAnZGlzYWJsZWQnLCAncHJpbWFyeScsICdzZWNvbmRhcnknLCAnZXJyb3InLCAnaW5mbycsICdzdWNjZXNzJywgJ3dhcm5pbmcnXSksIFByb3BUeXBlcy5zdHJpbmddKSxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqXG4gICAqIFRoZSBmb250U2l6ZSBhcHBsaWVkIHRvIHRoZSBpY29uLiBEZWZhdWx0cyB0byAyNHB4LCBidXQgY2FuIGJlIGNvbmZpZ3VyZSB0byBpbmhlcml0IGZvbnQgc2l6ZS5cbiAgICogQGRlZmF1bHQgJ21lZGl1bSdcbiAgICovXG4gIGZvbnRTaXplOiBQcm9wVHlwZXNcbiAgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqL1xuICAub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydpbmhlcml0JywgJ2xhcmdlJywgJ21lZGl1bScsICdzbWFsbCddKSwgUHJvcFR5cGVzLnN0cmluZ10pLFxuXG4gIC8qKlxuICAgKiBBcHBsaWVzIGEgY29sb3IgYXR0cmlidXRlIHRvIHRoZSBTVkcgZWxlbWVudC5cbiAgICovXG4gIGh0bWxDb2xvcjogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgcm9vdCBub2RlIHdpbGwgaW5oZXJpdCB0aGUgY3VzdG9tIGBjb21wb25lbnRgJ3Mgdmlld0JveCBhbmQgdGhlIGB2aWV3Qm94YFxuICAgKiBwcm9wIHdpbGwgYmUgaWdub3JlZC5cbiAgICogVXNlZnVsIHdoZW4geW91IHdhbnQgdG8gcmVmZXJlbmNlIGEgY3VzdG9tIGBjb21wb25lbnRgIGFuZCBoYXZlIGBTdmdJY29uYCBwYXNzIHRoYXRcbiAgICogYGNvbXBvbmVudGAncyB2aWV3Qm94IHRvIHRoZSByb290IG5vZGUuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBpbmhlcml0Vmlld0JveDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBzaGFwZS1yZW5kZXJpbmcgYXR0cmlidXRlLiBUaGUgYmVoYXZpb3Igb2YgdGhlIGRpZmZlcmVudCBvcHRpb25zIGlzIGRlc2NyaWJlZCBvbiB0aGVcbiAgICogW01ETiBXZWIgRG9jc10oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvU1ZHL0F0dHJpYnV0ZS9zaGFwZS1yZW5kZXJpbmcpLlxuICAgKiBJZiB5b3UgYXJlIGhhdmluZyBpc3N1ZXMgd2l0aCBibHVycnkgaWNvbnMgeW91IHNob3VsZCBpbnZlc3RpZ2F0ZSB0aGlzIHByb3AuXG4gICAqL1xuICBzaGFwZVJlbmRlcmluZzogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuXG4gIC8qKlxuICAgKiBQcm92aWRlcyBhIGh1bWFuLXJlYWRhYmxlIHRpdGxlIGZvciB0aGUgZWxlbWVudCB0aGF0IGNvbnRhaW5zIGl0LlxuICAgKiBodHRwczovL3d3dy53My5vcmcvVFIvU1ZHLWFjY2Vzcy8jRXF1aXZhbGVudFxuICAgKi9cbiAgdGl0bGVBY2Nlc3M6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIEFsbG93cyB5b3UgdG8gcmVkZWZpbmUgd2hhdCB0aGUgY29vcmRpbmF0ZXMgd2l0aG91dCB1bml0cyBtZWFuIGluc2lkZSBhbiBTVkcgZWxlbWVudC5cbiAgICogRm9yIGV4YW1wbGUsIGlmIHRoZSBTVkcgZWxlbWVudCBpcyA1MDAgKHdpZHRoKSBieSAyMDAgKGhlaWdodCksXG4gICAqIGFuZCB5b3UgcGFzcyB2aWV3Qm94PVwiMCAwIDUwIDIwXCIsXG4gICAqIHRoaXMgbWVhbnMgdGhhdCB0aGUgY29vcmRpbmF0ZXMgaW5zaWRlIHRoZSBTVkcgd2lsbCBnbyBmcm9tIHRoZSB0b3AgbGVmdCBjb3JuZXIgKDAsMClcbiAgICogdG8gYm90dG9tIHJpZ2h0ICg1MCwyMCkgYW5kIGVhY2ggdW5pdCB3aWxsIGJlIHdvcnRoIDEwcHguXG4gICAqIEBkZWZhdWx0ICcwIDAgMjQgMjQnXG4gICAqL1xuICB2aWV3Qm94OiBQcm9wVHlwZXMuc3RyaW5nXG59IDogdm9pZCAwO1xuU3ZnSWNvbi5tdWlOYW1lID0gJ1N2Z0ljb24nO1xuZXhwb3J0IGRlZmF1bHQgU3ZnSWNvbjsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0VXRpbGl0eUNsYXNzLCBjbGFzc2VzKSB7XG4gIGNvbnN0IG91dHB1dCA9IHt9O1xuICBPYmplY3Qua2V5cyhzbG90cykuZm9yRWFjaCggLy8gYE9iamV0LmtleXMoc2xvdHMpYCBjYW4ndCBiZSB3aWRlciB0aGFuIGBUYCBiZWNhdXNlIHdlIGluZmVyIGBUYCBmcm9tIGBzbG90c2AuXG4gIC8vIEB0cy1leHBlY3QtZXJyb3IgaHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC9UeXBlU2NyaXB0L3B1bGwvMTIyNTMjaXNzdWVjb21tZW50LTI2MzEzMjIwOFxuICBzbG90ID0+IHtcbiAgICBvdXRwdXRbc2xvdF0gPSBzbG90c1tzbG90XS5yZWR1Y2UoKGFjYywga2V5KSA9PiB7XG4gICAgICBpZiAoa2V5KSB7XG4gICAgICAgIGFjYy5wdXNoKGdldFV0aWxpdHlDbGFzcyhrZXkpKTtcblxuICAgICAgICBpZiAoY2xhc3NlcyAmJiBjbGFzc2VzW2tleV0pIHtcbiAgICAgICAgICBhY2MucHVzaChjbGFzc2VzW2tleV0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBhY2M7XG4gICAgfSwgW10pLmpvaW4oJyAnKTtcbiAgfSk7XG4gIHJldHVybiBvdXRwdXQ7XG59IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgU3ZnSWNvbiBmcm9tICcuLi9TdmdJY29uJztcbi8qKlxuICogUHJpdmF0ZSBtb2R1bGUgcmVzZXJ2ZWQgZm9yIEBtdWkgcGFja2FnZXMuXG4gKi9cblxuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZVN2Z0ljb24ocGF0aCwgZGlzcGxheU5hbWUpIHtcbiAgZnVuY3Rpb24gQ29tcG9uZW50KHByb3BzLCByZWYpIHtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL19qc3goU3ZnSWNvbiwgX2V4dGVuZHMoe1xuICAgICAgXCJkYXRhLXRlc3RpZFwiOiBgJHtkaXNwbGF5TmFtZX1JY29uYCxcbiAgICAgIHJlZjogcmVmXG4gICAgfSwgcHJvcHMsIHtcbiAgICAgIGNoaWxkcmVuOiBwYXRoXG4gICAgfSkpO1xuICB9XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBOZWVkIHRvIHNldCBgZGlzcGxheU5hbWVgIG9uIHRoZSBpbm5lciBjb21wb25lbnQgZm9yIFJlYWN0Lm1lbW8uXG4gICAgLy8gUmVhY3QgcHJpb3IgdG8gMTYuMTQgaWdub3JlcyBgZGlzcGxheU5hbWVgIG9uIHRoZSB3cmFwcGVyLlxuICAgIENvbXBvbmVudC5kaXNwbGF5TmFtZSA9IGAke2Rpc3BsYXlOYW1lfUljb25gO1xuICB9XG5cbiAgQ29tcG9uZW50Lm11aU5hbWUgPSBTdmdJY29uLm11aU5hbWU7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QubWVtbyggLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoQ29tcG9uZW50KSk7XG59IiwiaW1wb3J0IHsgdW5zdGFibGVfZGVib3VuY2UgYXMgZGVib3VuY2UgfSBmcm9tICdAbXVpL3V0aWxzJztcbmV4cG9ydCBkZWZhdWx0IGRlYm91bmNlOyIsIi8vIENvcnJlc3BvbmRzIHRvIDEwIGZyYW1lcyBhdCA2MCBIei5cbi8vIEEgZmV3IGJ5dGVzIHBheWxvYWQgb3ZlcmhlYWQgd2hlbiBsb2Rhc2gvZGVib3VuY2UgaXMgfjMga0IgYW5kIGRlYm91bmNlIH4zMDAgQi5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRlYm91bmNlKGZ1bmMsIHdhaXQgPSAxNjYpIHtcbiAgbGV0IHRpbWVvdXQ7XG5cbiAgZnVuY3Rpb24gZGVib3VuY2VkKC4uLmFyZ3MpIHtcbiAgICBjb25zdCBsYXRlciA9ICgpID0+IHtcbiAgICAgIGZ1bmMuYXBwbHkodGhpcywgYXJncyk7XG4gICAgfTtcblxuICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICB0aW1lb3V0ID0gc2V0VGltZW91dChsYXRlciwgd2FpdCk7XG4gIH1cblxuICBkZWJvdW5jZWQuY2xlYXIgPSAoKSA9PiB7XG4gICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICB9O1xuXG4gIHJldHVybiBkZWJvdW5jZWQ7XG59IiwiaW1wb3J0IHsgdW5zdGFibGVfZGVwcmVjYXRlZFByb3BUeXBlIGFzIGRlcHJlY2F0ZWRQcm9wVHlwZSB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuZXhwb3J0IGRlZmF1bHQgZGVwcmVjYXRlZFByb3BUeXBlOyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRlcHJlY2F0ZWRQcm9wVHlwZSh2YWxpZGF0b3IsIHJlYXNvbikge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICAgIHJldHVybiAoKSA9PiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIChwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUpID0+IHtcbiAgICBjb25zdCBjb21wb25lbnROYW1lU2FmZSA9IGNvbXBvbmVudE5hbWUgfHwgJzw8YW5vbnltb3VzPj4nO1xuICAgIGNvbnN0IHByb3BGdWxsTmFtZVNhZmUgPSBwcm9wRnVsbE5hbWUgfHwgcHJvcE5hbWU7XG5cbiAgICBpZiAodHlwZW9mIHByb3BzW3Byb3BOYW1lXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoYFRoZSAke2xvY2F0aW9ufSBcXGAke3Byb3BGdWxsTmFtZVNhZmV9XFxgIG9mIGAgKyBgXFxgJHtjb21wb25lbnROYW1lU2FmZX1cXGAgaXMgZGVwcmVjYXRlZC4gJHtyZWFzb259YCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG59IiwiaW1wb3J0IHsgdW5zdGFibGVfaXNNdWlFbGVtZW50IGFzIGlzTXVpRWxlbWVudCB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuZXhwb3J0IGRlZmF1bHQgaXNNdWlFbGVtZW50OyIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzTXVpRWxlbWVudChlbGVtZW50LCBtdWlOYW1lcykge1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmlzVmFsaWRFbGVtZW50KGVsZW1lbnQpICYmIG11aU5hbWVzLmluZGV4T2YoZWxlbWVudC50eXBlLm11aU5hbWUpICE9PSAtMTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBvd25lckRvY3VtZW50KG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUgJiYgbm9kZS5vd25lckRvY3VtZW50IHx8IGRvY3VtZW50O1xufSIsImltcG9ydCB7IHVuc3RhYmxlX293bmVyRG9jdW1lbnQgYXMgb3duZXJEb2N1bWVudCB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuZXhwb3J0IGRlZmF1bHQgb3duZXJEb2N1bWVudDsiLCJpbXBvcnQgeyB1bnN0YWJsZV9vd25lcldpbmRvdyBhcyBvd25lcldpbmRvdyB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuZXhwb3J0IGRlZmF1bHQgb3duZXJXaW5kb3c7IiwiaW1wb3J0IG93bmVyRG9jdW1lbnQgZnJvbSAnLi9vd25lckRvY3VtZW50JztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG93bmVyV2luZG93KG5vZGUpIHtcbiAgY29uc3QgZG9jID0gb3duZXJEb2N1bWVudChub2RlKTtcbiAgcmV0dXJuIGRvYy5kZWZhdWx0VmlldyB8fCB3aW5kb3c7XG59IiwiaW1wb3J0IHsgdW5zdGFibGVfcmVxdWlyZVByb3BGYWN0b3J5IGFzIHJlcXVpcmVQcm9wRmFjdG9yeSB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuZXhwb3J0IGRlZmF1bHQgcmVxdWlyZVByb3BGYWN0b3J5OyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVxdWlyZVByb3BGYWN0b3J5KGNvbXBvbmVudE5hbWVJbkVycm9yLCBDb21wb25lbnQpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgICByZXR1cm4gKCkgPT4gbnVsbDtcbiAgfSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QvZm9yYmlkLWZvcmVpZ24tcHJvcC10eXBlc1xuXG5cbiAgY29uc3QgcHJldlByb3BUeXBlcyA9IENvbXBvbmVudCA/IF9leHRlbmRzKHt9LCBDb21wb25lbnQucHJvcFR5cGVzKSA6IG51bGw7XG5cbiAgY29uc3QgcmVxdWlyZVByb3AgPSByZXF1aXJlZFByb3AgPT4gKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSwgLi4uYXJncykgPT4ge1xuICAgIGNvbnN0IHByb3BGdWxsTmFtZVNhZmUgPSBwcm9wRnVsbE5hbWUgfHwgcHJvcE5hbWU7XG4gICAgY29uc3QgZGVmYXVsdFR5cGVDaGVja2VyID0gcHJldlByb3BUeXBlcyA9PSBudWxsID8gdm9pZCAwIDogcHJldlByb3BUeXBlc1twcm9wRnVsbE5hbWVTYWZlXTtcblxuICAgIGlmIChkZWZhdWx0VHlwZUNoZWNrZXIpIHtcbiAgICAgIGNvbnN0IHR5cGVDaGVja2VyUmVzdWx0ID0gZGVmYXVsdFR5cGVDaGVja2VyKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSwgLi4uYXJncyk7XG5cbiAgICAgIGlmICh0eXBlQ2hlY2tlclJlc3VsdCkge1xuICAgICAgICByZXR1cm4gdHlwZUNoZWNrZXJSZXN1bHQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBwcm9wc1twcm9wTmFtZV0gIT09ICd1bmRlZmluZWQnICYmICFwcm9wc1tyZXF1aXJlZFByb3BdKSB7XG4gICAgICByZXR1cm4gbmV3IEVycm9yKGBUaGUgcHJvcCBcXGAke3Byb3BGdWxsTmFtZVNhZmV9XFxgIG9mIGAgKyBgXFxgJHtjb21wb25lbnROYW1lSW5FcnJvcn1cXGAgY2FuIG9ubHkgYmUgdXNlZCB0b2dldGhlciB3aXRoIHRoZSBcXGAke3JlcXVpcmVkUHJvcH1cXGAgcHJvcC5gKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICByZXR1cm4gcmVxdWlyZVByb3A7XG59IiwiLyoqXG4gKiBUT0RPIHY1OiBjb25zaWRlciBtYWtpbmcgaXQgcHJpdmF0ZVxuICpcbiAqIHBhc3NlcyB7dmFsdWV9IHRvIHtyZWZ9XG4gKlxuICogV0FSTklORzogQmUgc3VyZSB0byBvbmx5IGNhbGwgdGhpcyBpbnNpZGUgYSBjYWxsYmFjayB0aGF0IGlzIHBhc3NlZCBhcyBhIHJlZi5cbiAqIE90aGVyd2lzZSwgbWFrZSBzdXJlIHRvIGNsZWFudXAgdGhlIHByZXZpb3VzIHtyZWZ9IGlmIGl0IGNoYW5nZXMuIFNlZVxuICogaHR0cHM6Ly9naXRodWIuY29tL211aS9tYXRlcmlhbC11aS9pc3N1ZXMvMTM1MzlcbiAqXG4gKiBVc2VmdWwgaWYgeW91IHdhbnQgdG8gZXhwb3NlIHRoZSByZWYgb2YgYW4gaW5uZXIgY29tcG9uZW50IHRvIHRoZSBwdWJsaWMgQVBJXG4gKiB3aGlsZSBzdGlsbCB1c2luZyBpdCBpbnNpZGUgdGhlIGNvbXBvbmVudC5cbiAqIEBwYXJhbSByZWYgQSByZWYgY2FsbGJhY2sgb3IgcmVmIG9iamVjdC4gSWYgYW55dGhpbmcgZmFsc3ksIHRoaXMgaXMgYSBuby1vcC5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2V0UmVmKHJlZiwgdmFsdWUpIHtcbiAgaWYgKHR5cGVvZiByZWYgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZWYodmFsdWUpO1xuICB9IGVsc2UgaWYgKHJlZikge1xuICAgIHJlZi5jdXJyZW50ID0gdmFsdWU7XG4gIH1cbn0iLCJpbXBvcnQgeyB1bnN0YWJsZV9zZXRSZWYgYXMgc2V0UmVmIH0gZnJvbSAnQG11aS91dGlscyc7XG5leHBvcnQgZGVmYXVsdCBzZXRSZWY7IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuY29uc3QgdXNlRW5oYW5jZWRFZmZlY3QgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IFJlYWN0LnVzZUxheW91dEVmZmVjdCA6IFJlYWN0LnVzZUVmZmVjdDtcbmV4cG9ydCBkZWZhdWx0IHVzZUVuaGFuY2VkRWZmZWN0OyIsImltcG9ydCB7IHVuc3RhYmxlX3VzZUVuaGFuY2VkRWZmZWN0IGFzIHVzZUVuaGFuY2VkRWZmZWN0IH0gZnJvbSAnQG11aS91dGlscyc7XG5leHBvcnQgZGVmYXVsdCB1c2VFbmhhbmNlZEVmZmVjdDsiLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5sZXQgZ2xvYmFsSWQgPSAwO1xuXG5mdW5jdGlvbiB1c2VHbG9iYWxJZChpZE92ZXJyaWRlKSB7XG4gIGNvbnN0IFtkZWZhdWx0SWQsIHNldERlZmF1bHRJZF0gPSBSZWFjdC51c2VTdGF0ZShpZE92ZXJyaWRlKTtcbiAgY29uc3QgaWQgPSBpZE92ZXJyaWRlIHx8IGRlZmF1bHRJZDtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoZGVmYXVsdElkID09IG51bGwpIHtcbiAgICAgIC8vIEZhbGxiYWNrIHRvIHRoaXMgZGVmYXVsdCBpZCB3aGVuIHBvc3NpYmxlLlxuICAgICAgLy8gVXNlIHRoZSBpbmNyZW1lbnRpbmcgdmFsdWUgZm9yIGNsaWVudC1zaWRlIHJlbmRlcmluZyBvbmx5LlxuICAgICAgLy8gV2UgY2FuJ3QgdXNlIGl0IHNlcnZlci1zaWRlLlxuICAgICAgLy8gSWYgeW91IHdhbnQgdG8gdXNlIHJhbmRvbSB2YWx1ZXMgcGxlYXNlIGNvbnNpZGVyIHRoZSBCaXJ0aGRheSBQcm9ibGVtOiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9CaXJ0aGRheV9wcm9ibGVtXG4gICAgICBnbG9iYWxJZCArPSAxO1xuICAgICAgc2V0RGVmYXVsdElkKGBtdWktJHtnbG9iYWxJZH1gKTtcbiAgICB9XG4gIH0sIFtkZWZhdWx0SWRdKTtcbiAgcmV0dXJuIGlkO1xufSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdXNlbGVzcy1jb25jYXQgLS0gV29ya2Fyb3VuZCBmb3IgaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2svd2VicGFjay9pc3N1ZXMvMTQ4MTRcblxuXG5jb25zdCBtYXliZVJlYWN0VXNlSWQgPSBSZWFjdFsndXNlSWQnICsgJyddO1xuLyoqXG4gKlxuICogQGV4YW1wbGUgPGRpdiBpZD17dXNlSWQoKX0gLz5cbiAqIEBwYXJhbSBpZE92ZXJyaWRlXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZUlkKGlkT3ZlcnJpZGUpIHtcbiAgaWYgKG1heWJlUmVhY3RVc2VJZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgY29uc3QgcmVhY3RJZCA9IG1heWJlUmVhY3RVc2VJZCgpO1xuICAgIHJldHVybiBpZE92ZXJyaWRlICE9IG51bGwgPyBpZE92ZXJyaWRlIDogcmVhY3RJZDtcbiAgfSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3MgLS0gYFJlYWN0LnVzZUlkYCBpcyBpbnZhcmlhbnQgYXQgcnVudGltZS5cblxuXG4gIHJldHVybiB1c2VHbG9iYWxJZChpZE92ZXJyaWRlKTtcbn0iLCJpbXBvcnQgeyB1bnN0YWJsZV91c2VJZCBhcyB1c2VJZCB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuZXhwb3J0IGRlZmF1bHQgdXNlSWQ7IiwiaW1wb3J0IHsgdW5zdGFibGVfdW5zdXBwb3J0ZWRQcm9wIGFzIHVuc3VwcG9ydGVkUHJvcCB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuZXhwb3J0IGRlZmF1bHQgdW5zdXBwb3J0ZWRQcm9wOyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVuc3VwcG9ydGVkUHJvcChwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGNvbnN0IHByb3BGdWxsTmFtZVNhZmUgPSBwcm9wRnVsbE5hbWUgfHwgcHJvcE5hbWU7XG5cbiAgaWYgKHR5cGVvZiBwcm9wc1twcm9wTmFtZV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIG5ldyBFcnJvcihgVGhlIHByb3AgXFxgJHtwcm9wRnVsbE5hbWVTYWZlfVxcYCBpcyBub3Qgc3VwcG9ydGVkLiBQbGVhc2UgcmVtb3ZlIGl0LmApO1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59IiwiaW1wb3J0IHsgdW5zdGFibGVfdXNlQ29udHJvbGxlZCBhcyB1c2VDb250cm9sbGVkIH0gZnJvbSAnQG11aS91dGlscyc7XG5leHBvcnQgZGVmYXVsdCB1c2VDb250cm9sbGVkOyIsIi8qIGVzbGludC1kaXNhYmxlIHJlYWN0LWhvb2tzL3J1bGVzLW9mLWhvb2tzLCByZWFjdC1ob29rcy9leGhhdXN0aXZlLWRlcHMgKi9cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZUNvbnRyb2xsZWQoe1xuICBjb250cm9sbGVkLFxuICBkZWZhdWx0OiBkZWZhdWx0UHJvcCxcbiAgbmFtZSxcbiAgc3RhdGUgPSAndmFsdWUnXG59KSB7XG4gIC8vIGlzQ29udHJvbGxlZCBpcyBpZ25vcmVkIGluIHRoZSBob29rIGRlcGVuZGVuY3kgbGlzdHMgYXMgaXQgc2hvdWxkIG5ldmVyIGNoYW5nZS5cbiAgY29uc3Qge1xuICAgIGN1cnJlbnQ6IGlzQ29udHJvbGxlZFxuICB9ID0gUmVhY3QudXNlUmVmKGNvbnRyb2xsZWQgIT09IHVuZGVmaW5lZCk7XG4gIGNvbnN0IFt2YWx1ZVN0YXRlLCBzZXRWYWx1ZV0gPSBSZWFjdC51c2VTdGF0ZShkZWZhdWx0UHJvcCk7XG4gIGNvbnN0IHZhbHVlID0gaXNDb250cm9sbGVkID8gY29udHJvbGxlZCA6IHZhbHVlU3RhdGU7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgaWYgKGlzQ29udHJvbGxlZCAhPT0gKGNvbnRyb2xsZWQgIT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihbYE1VSTogQSBjb21wb25lbnQgaXMgY2hhbmdpbmcgdGhlICR7aXNDb250cm9sbGVkID8gJycgOiAndW4nfWNvbnRyb2xsZWQgJHtzdGF0ZX0gc3RhdGUgb2YgJHtuYW1lfSB0byBiZSAke2lzQ29udHJvbGxlZCA/ICd1bicgOiAnJ31jb250cm9sbGVkLmAsICdFbGVtZW50cyBzaG91bGQgbm90IHN3aXRjaCBmcm9tIHVuY29udHJvbGxlZCB0byBjb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4nLCBgRGVjaWRlIGJldHdlZW4gdXNpbmcgYSBjb250cm9sbGVkIG9yIHVuY29udHJvbGxlZCAke25hbWV9IGAgKyAnZWxlbWVudCBmb3IgdGhlIGxpZmV0aW1lIG9mIHRoZSBjb21wb25lbnQuJywgXCJUaGUgbmF0dXJlIG9mIHRoZSBzdGF0ZSBpcyBkZXRlcm1pbmVkIGR1cmluZyB0aGUgZmlyc3QgcmVuZGVyLiBJdCdzIGNvbnNpZGVyZWQgY29udHJvbGxlZCBpZiB0aGUgdmFsdWUgaXMgbm90IGB1bmRlZmluZWRgLlwiLCAnTW9yZSBpbmZvOiBodHRwczovL2ZiLm1lL3JlYWN0LWNvbnRyb2xsZWQtY29tcG9uZW50cyddLmpvaW4oJ1xcbicpKTtcbiAgICAgIH1cbiAgICB9LCBbc3RhdGUsIG5hbWUsIGNvbnRyb2xsZWRdKTtcbiAgICBjb25zdCB7XG4gICAgICBjdXJyZW50OiBkZWZhdWx0VmFsdWVcbiAgICB9ID0gUmVhY3QudXNlUmVmKGRlZmF1bHRQcm9wKTtcbiAgICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgaWYgKCFpc0NvbnRyb2xsZWQgJiYgZGVmYXVsdFZhbHVlICE9PSBkZWZhdWx0UHJvcCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFtgTVVJOiBBIGNvbXBvbmVudCBpcyBjaGFuZ2luZyB0aGUgZGVmYXVsdCAke3N0YXRlfSBzdGF0ZSBvZiBhbiB1bmNvbnRyb2xsZWQgJHtuYW1lfSBhZnRlciBiZWluZyBpbml0aWFsaXplZC4gYCArIGBUbyBzdXBwcmVzcyB0aGlzIHdhcm5pbmcgb3B0IHRvIHVzZSBhIGNvbnRyb2xsZWQgJHtuYW1lfS5gXS5qb2luKCdcXG4nKSk7XG4gICAgICB9XG4gICAgfSwgW0pTT04uc3RyaW5naWZ5KGRlZmF1bHRQcm9wKV0pO1xuICB9XG5cbiAgY29uc3Qgc2V0VmFsdWVJZlVuY29udHJvbGxlZCA9IFJlYWN0LnVzZUNhbGxiYWNrKG5ld1ZhbHVlID0+IHtcbiAgICBpZiAoIWlzQ29udHJvbGxlZCkge1xuICAgICAgc2V0VmFsdWUobmV3VmFsdWUpO1xuICAgIH1cbiAgfSwgW10pO1xuICByZXR1cm4gW3ZhbHVlLCBzZXRWYWx1ZUlmVW5jb250cm9sbGVkXTtcbn0iLCJpbXBvcnQgeyB1bnN0YWJsZV91c2VFdmVudENhbGxiYWNrIGFzIHVzZUV2ZW50Q2FsbGJhY2sgfSBmcm9tICdAbXVpL3V0aWxzJztcbmV4cG9ydCBkZWZhdWx0IHVzZUV2ZW50Q2FsbGJhY2s7IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHVzZUVuaGFuY2VkRWZmZWN0IGZyb20gJy4vdXNlRW5oYW5jZWRFZmZlY3QnO1xuLyoqXG4gKiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvaXNzdWVzLzE0MDk5I2lzc3VlY29tbWVudC00NDAwMTM4OTJcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VFdmVudENhbGxiYWNrKGZuKSB7XG4gIGNvbnN0IHJlZiA9IFJlYWN0LnVzZVJlZihmbik7XG4gIHVzZUVuaGFuY2VkRWZmZWN0KCgpID0+IHtcbiAgICByZWYuY3VycmVudCA9IGZuO1xuICB9KTtcbiAgcmV0dXJuIFJlYWN0LnVzZUNhbGxiYWNrKCguLi5hcmdzKSA9PiAvLyBAdHMtZXhwZWN0LWVycm9yIGhpZGUgYHRoaXNgXG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpiYW4tY29tbWEtb3BlcmF0b3JcbiAgKDAsIHJlZi5jdXJyZW50KSguLi5hcmdzKSwgW10pO1xufSIsImltcG9ydCB7IHVuc3RhYmxlX3VzZUZvcmtSZWYgYXMgdXNlRm9ya1JlZiB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuZXhwb3J0IGRlZmF1bHQgdXNlRm9ya1JlZjsiLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgc2V0UmVmIGZyb20gJy4vc2V0UmVmJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZUZvcmtSZWYoLi4ucmVmcykge1xuICAvKipcbiAgICogVGhpcyB3aWxsIGNyZWF0ZSBhIG5ldyBmdW5jdGlvbiBpZiB0aGUgcmVmcyBwYXNzZWQgdG8gdGhpcyBob29rIGNoYW5nZSBhbmQgYXJlIGFsbCBkZWZpbmVkLlxuICAgKiBUaGlzIG1lYW5zIHJlYWN0IHdpbGwgY2FsbCB0aGUgb2xkIGZvcmtSZWYgd2l0aCBgbnVsbGAgYW5kIHRoZSBuZXcgZm9ya1JlZlxuICAgKiB3aXRoIHRoZSByZWYuIENsZWFudXAgbmF0dXJhbGx5IGVtZXJnZXMgZnJvbSB0aGlzIGJlaGF2aW9yLlxuICAgKi9cbiAgcmV0dXJuIFJlYWN0LnVzZU1lbW8oKCkgPT4ge1xuICAgIGlmIChyZWZzLmV2ZXJ5KHJlZiA9PiByZWYgPT0gbnVsbCkpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBpbnN0YW5jZSA9PiB7XG4gICAgICByZWZzLmZvckVhY2gocmVmID0+IHtcbiAgICAgICAgc2V0UmVmKHJlZiwgaW5zdGFuY2UpO1xuICAgICAgfSk7XG4gICAgfTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwc1xuICB9LCByZWZzKTtcbn0iLCIvLyBiYXNlZCBvbiBodHRwczovL2dpdGh1Yi5jb20vV0lDRy9mb2N1cy12aXNpYmxlL2Jsb2IvdjQuMS41L3NyYy9mb2N1cy12aXNpYmxlLmpzXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5sZXQgaGFkS2V5Ym9hcmRFdmVudCA9IHRydWU7XG5sZXQgaGFkRm9jdXNWaXNpYmxlUmVjZW50bHkgPSBmYWxzZTtcbmxldCBoYWRGb2N1c1Zpc2libGVSZWNlbnRseVRpbWVvdXQ7XG5jb25zdCBpbnB1dFR5cGVzV2hpdGVsaXN0ID0ge1xuICB0ZXh0OiB0cnVlLFxuICBzZWFyY2g6IHRydWUsXG4gIHVybDogdHJ1ZSxcbiAgdGVsOiB0cnVlLFxuICBlbWFpbDogdHJ1ZSxcbiAgcGFzc3dvcmQ6IHRydWUsXG4gIG51bWJlcjogdHJ1ZSxcbiAgZGF0ZTogdHJ1ZSxcbiAgbW9udGg6IHRydWUsXG4gIHdlZWs6IHRydWUsXG4gIHRpbWU6IHRydWUsXG4gIGRhdGV0aW1lOiB0cnVlLFxuICAnZGF0ZXRpbWUtbG9jYWwnOiB0cnVlXG59O1xuLyoqXG4gKiBDb21wdXRlcyB3aGV0aGVyIHRoZSBnaXZlbiBlbGVtZW50IHNob3VsZCBhdXRvbWF0aWNhbGx5IHRyaWdnZXIgdGhlXG4gKiBgZm9jdXMtdmlzaWJsZWAgY2xhc3MgYmVpbmcgYWRkZWQsIGkuZS4gd2hldGhlciBpdCBzaG91bGQgYWx3YXlzIG1hdGNoXG4gKiBgOmZvY3VzLXZpc2libGVgIHdoZW4gZm9jdXNlZC5cbiAqIEBwYXJhbSB7RWxlbWVudH0gbm9kZVxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cblxuZnVuY3Rpb24gZm9jdXNUcmlnZ2Vyc0tleWJvYXJkTW9kYWxpdHkobm9kZSkge1xuICBjb25zdCB7XG4gICAgdHlwZSxcbiAgICB0YWdOYW1lXG4gIH0gPSBub2RlO1xuXG4gIGlmICh0YWdOYW1lID09PSAnSU5QVVQnICYmIGlucHV0VHlwZXNXaGl0ZWxpc3RbdHlwZV0gJiYgIW5vZGUucmVhZE9ubHkpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmICh0YWdOYW1lID09PSAnVEVYVEFSRUEnICYmICFub2RlLnJlYWRPbmx5KSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAobm9kZS5pc0NvbnRlbnRFZGl0YWJsZSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuLyoqXG4gKiBLZWVwIHRyYWNrIG9mIG91ciBrZXlib2FyZCBtb2RhbGl0eSBzdGF0ZSB3aXRoIGBoYWRLZXlib2FyZEV2ZW50YC5cbiAqIElmIHRoZSBtb3N0IHJlY2VudCB1c2VyIGludGVyYWN0aW9uIHdhcyB2aWEgdGhlIGtleWJvYXJkO1xuICogYW5kIHRoZSBrZXkgcHJlc3MgZGlkIG5vdCBpbmNsdWRlIGEgbWV0YSwgYWx0L29wdGlvbiwgb3IgY29udHJvbCBrZXk7XG4gKiB0aGVuIHRoZSBtb2RhbGl0eSBpcyBrZXlib2FyZC4gT3RoZXJ3aXNlLCB0aGUgbW9kYWxpdHkgaXMgbm90IGtleWJvYXJkLlxuICogQHBhcmFtIHtLZXlib2FyZEV2ZW50fSBldmVudFxuICovXG5cblxuZnVuY3Rpb24gaGFuZGxlS2V5RG93bihldmVudCkge1xuICBpZiAoZXZlbnQubWV0YUtleSB8fCBldmVudC5hbHRLZXkgfHwgZXZlbnQuY3RybEtleSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGhhZEtleWJvYXJkRXZlbnQgPSB0cnVlO1xufVxuLyoqXG4gKiBJZiBhdCBhbnkgcG9pbnQgYSB1c2VyIGNsaWNrcyB3aXRoIGEgcG9pbnRpbmcgZGV2aWNlLCBlbnN1cmUgdGhhdCB3ZSBjaGFuZ2VcbiAqIHRoZSBtb2RhbGl0eSBhd2F5IGZyb20ga2V5Ym9hcmQuXG4gKiBUaGlzIGF2b2lkcyB0aGUgc2l0dWF0aW9uIHdoZXJlIGEgdXNlciBwcmVzc2VzIGEga2V5IG9uIGFuIGFscmVhZHkgZm9jdXNlZFxuICogZWxlbWVudCwgYW5kIHRoZW4gY2xpY2tzIG9uIGEgZGlmZmVyZW50IGVsZW1lbnQsIGZvY3VzaW5nIGl0IHdpdGggYVxuICogcG9pbnRpbmcgZGV2aWNlLCB3aGlsZSB3ZSBzdGlsbCB0aGluayB3ZSdyZSBpbiBrZXlib2FyZCBtb2RhbGl0eS5cbiAqL1xuXG5cbmZ1bmN0aW9uIGhhbmRsZVBvaW50ZXJEb3duKCkge1xuICBoYWRLZXlib2FyZEV2ZW50ID0gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGhhbmRsZVZpc2liaWxpdHlDaGFuZ2UoKSB7XG4gIGlmICh0aGlzLnZpc2liaWxpdHlTdGF0ZSA9PT0gJ2hpZGRlbicpIHtcbiAgICAvLyBJZiB0aGUgdGFiIGJlY29tZXMgYWN0aXZlIGFnYWluLCB0aGUgYnJvd3NlciB3aWxsIGhhbmRsZSBjYWxsaW5nIGZvY3VzXG4gICAgLy8gb24gdGhlIGVsZW1lbnQgKFNhZmFyaSBhY3R1YWxseSBjYWxscyBpdCB0d2ljZSkuXG4gICAgLy8gSWYgdGhpcyB0YWIgY2hhbmdlIGNhdXNlZCBhIGJsdXIgb24gYW4gZWxlbWVudCB3aXRoIGZvY3VzLXZpc2libGUsXG4gICAgLy8gcmUtYXBwbHkgdGhlIGNsYXNzIHdoZW4gdGhlIHVzZXIgc3dpdGNoZXMgYmFjayB0byB0aGUgdGFiLlxuICAgIGlmIChoYWRGb2N1c1Zpc2libGVSZWNlbnRseSkge1xuICAgICAgaGFkS2V5Ym9hcmRFdmVudCA9IHRydWU7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHByZXBhcmUoZG9jKSB7XG4gIGRvYy5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgaGFuZGxlS2V5RG93biwgdHJ1ZSk7XG4gIGRvYy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBoYW5kbGVQb2ludGVyRG93biwgdHJ1ZSk7XG4gIGRvYy5hZGRFdmVudExpc3RlbmVyKCdwb2ludGVyZG93bicsIGhhbmRsZVBvaW50ZXJEb3duLCB0cnVlKTtcbiAgZG9jLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCBoYW5kbGVQb2ludGVyRG93biwgdHJ1ZSk7XG4gIGRvYy5hZGRFdmVudExpc3RlbmVyKCd2aXNpYmlsaXR5Y2hhbmdlJywgaGFuZGxlVmlzaWJpbGl0eUNoYW5nZSwgdHJ1ZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0ZWFyZG93bihkb2MpIHtcbiAgZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBoYW5kbGVLZXlEb3duLCB0cnVlKTtcbiAgZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIGhhbmRsZVBvaW50ZXJEb3duLCB0cnVlKTtcbiAgZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJkb3duJywgaGFuZGxlUG9pbnRlckRvd24sIHRydWUpO1xuICBkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIGhhbmRsZVBvaW50ZXJEb3duLCB0cnVlKTtcbiAgZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Zpc2liaWxpdHljaGFuZ2UnLCBoYW5kbGVWaXNpYmlsaXR5Q2hhbmdlLCB0cnVlKTtcbn1cblxuZnVuY3Rpb24gaXNGb2N1c1Zpc2libGUoZXZlbnQpIHtcbiAgY29uc3Qge1xuICAgIHRhcmdldFxuICB9ID0gZXZlbnQ7XG5cbiAgdHJ5IHtcbiAgICByZXR1cm4gdGFyZ2V0Lm1hdGNoZXMoJzpmb2N1cy12aXNpYmxlJyk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7Ly8gQnJvd3NlcnMgbm90IGltcGxlbWVudGluZyA6Zm9jdXMtdmlzaWJsZSB3aWxsIHRocm93IGEgU3ludGF4RXJyb3IuXG4gICAgLy8gV2UgdXNlIG91ciBvd24gaGV1cmlzdGljIGZvciB0aG9zZSBicm93c2Vycy5cbiAgICAvLyBSZXRocm93IG1pZ2h0IGJlIGJldHRlciBpZiBpdCdzIG5vdCB0aGUgZXhwZWN0ZWQgZXJyb3IgYnV0IGRvIHdlIHJlYWxseVxuICAgIC8vIHdhbnQgdG8gY3Jhc2ggaWYgZm9jdXMtdmlzaWJsZSBtYWxmdW5jdGlvbmVkP1xuICB9IC8vIE5vIG5lZWQgZm9yIHZhbGlkRm9jdXNUYXJnZXQgY2hlY2suIFRoZSB1c2VyIGRvZXMgdGhhdCBieSBhdHRhY2hpbmcgaXQgdG9cbiAgLy8gZm9jdXNhYmxlIGV2ZW50cyBvbmx5LlxuXG5cbiAgcmV0dXJuIGhhZEtleWJvYXJkRXZlbnQgfHwgZm9jdXNUcmlnZ2Vyc0tleWJvYXJkTW9kYWxpdHkodGFyZ2V0KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlSXNGb2N1c1Zpc2libGUoKSB7XG4gIGNvbnN0IHJlZiA9IFJlYWN0LnVzZUNhbGxiYWNrKG5vZGUgPT4ge1xuICAgIGlmIChub2RlICE9IG51bGwpIHtcbiAgICAgIHByZXBhcmUobm9kZS5vd25lckRvY3VtZW50KTtcbiAgICB9XG4gIH0sIFtdKTtcbiAgY29uc3QgaXNGb2N1c1Zpc2libGVSZWYgPSBSZWFjdC51c2VSZWYoZmFsc2UpO1xuICAvKipcbiAgICogU2hvdWxkIGJlIGNhbGxlZCBpZiBhIGJsdXIgZXZlbnQgaXMgZmlyZWRcbiAgICovXG5cbiAgZnVuY3Rpb24gaGFuZGxlQmx1clZpc2libGUoKSB7XG4gICAgLy8gY2hlY2tpbmcgYWdhaW5zdCBwb3RlbnRpYWwgc3RhdGUgdmFyaWFibGUgZG9lcyBub3Qgc3VmZmljZSBpZiB3ZSBmb2N1cyBhbmQgYmx1ciBzeW5jaHJvbm91c2x5LlxuICAgIC8vIFJlYWN0IHdvdWxkbid0IGhhdmUgdGltZSB0byB0cmlnZ2VyIGEgcmUtcmVuZGVyIHNvIGBmb2N1c1Zpc2libGVgIHdvdWxkIGJlIHN0YWxlLlxuICAgIC8vIElkZWFsbHkgd2Ugd291bGQgYWRqdXN0IGBpc0ZvY3VzVmlzaWJsZShldmVudClgIHRvIGxvb2sgYXQgYHJlbGF0ZWRUYXJnZXRgIGZvciBibHVyIGV2ZW50cy5cbiAgICAvLyBUaGlzIGRvZXNuJ3Qgd29yayBpbiBJRTExIGR1ZSB0byBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvaXNzdWVzLzM3NTFcbiAgICAvLyBUT0RPOiBjaGVjayBhZ2FpbiBpZiBSZWFjdCByZWxlYXNlcyB0aGVpciBpbnRlcm5hbCBjaGFuZ2VzIHRvIGZvY3VzIGV2ZW50IGhhbmRsaW5nIChodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvcHVsbC8xOTE4NikuXG4gICAgaWYgKGlzRm9jdXNWaXNpYmxlUmVmLmN1cnJlbnQpIHtcbiAgICAgIC8vIFRvIGRldGVjdCBhIHRhYi93aW5kb3cgc3dpdGNoLCB3ZSBsb29rIGZvciBhIGJsdXIgZXZlbnQgZm9sbG93ZWRcbiAgICAgIC8vIHJhcGlkbHkgYnkgYSB2aXNpYmlsaXR5IGNoYW5nZS5cbiAgICAgIC8vIElmIHdlIGRvbid0IHNlZSBhIHZpc2liaWxpdHkgY2hhbmdlIHdpdGhpbiAxMDBtcywgaXQncyBwcm9iYWJseSBhXG4gICAgICAvLyByZWd1bGFyIGZvY3VzIGNoYW5nZS5cbiAgICAgIGhhZEZvY3VzVmlzaWJsZVJlY2VudGx5ID0gdHJ1ZTtcbiAgICAgIHdpbmRvdy5jbGVhclRpbWVvdXQoaGFkRm9jdXNWaXNpYmxlUmVjZW50bHlUaW1lb3V0KTtcbiAgICAgIGhhZEZvY3VzVmlzaWJsZVJlY2VudGx5VGltZW91dCA9IHdpbmRvdy5zZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgaGFkRm9jdXNWaXNpYmxlUmVjZW50bHkgPSBmYWxzZTtcbiAgICAgIH0sIDEwMCk7XG4gICAgICBpc0ZvY3VzVmlzaWJsZVJlZi5jdXJyZW50ID0gZmFsc2U7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgLyoqXG4gICAqIFNob3VsZCBiZSBjYWxsZWQgaWYgYSBibHVyIGV2ZW50IGlzIGZpcmVkXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gaGFuZGxlRm9jdXNWaXNpYmxlKGV2ZW50KSB7XG4gICAgaWYgKGlzRm9jdXNWaXNpYmxlKGV2ZW50KSkge1xuICAgICAgaXNGb2N1c1Zpc2libGVSZWYuY3VycmVudCA9IHRydWU7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGlzRm9jdXNWaXNpYmxlUmVmLFxuICAgIG9uRm9jdXM6IGhhbmRsZUZvY3VzVmlzaWJsZSxcbiAgICBvbkJsdXI6IGhhbmRsZUJsdXJWaXNpYmxlLFxuICAgIHJlZlxuICB9O1xufSIsImltcG9ydCB7IHVuc3RhYmxlX3VzZUlzRm9jdXNWaXNpYmxlIGFzIHVzZUlzRm9jdXNWaXNpYmxlIH0gZnJvbSAnQG11aS91dGlscyc7XG5leHBvcnQgZGVmYXVsdCB1c2VJc0ZvY3VzVmlzaWJsZTsiLCJpbXBvcnQgeyB1bnN0YWJsZV9DbGFzc05hbWVHZW5lcmF0b3IgYXMgQ2xhc3NOYW1lR2VuZXJhdG9yIH0gZnJvbSAnQG11aS9iYXNlL2NsYXNzTmFtZSc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGNhcGl0YWxpemUgfSBmcm9tICcuL2NhcGl0YWxpemUnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBjcmVhdGVDaGFpbmVkRnVuY3Rpb24gfSBmcm9tICcuL2NyZWF0ZUNoYWluZWRGdW5jdGlvbic7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGNyZWF0ZVN2Z0ljb24gfSBmcm9tICcuL2NyZWF0ZVN2Z0ljb24nO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBkZWJvdW5jZSB9IGZyb20gJy4vZGVib3VuY2UnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBkZXByZWNhdGVkUHJvcFR5cGUgfSBmcm9tICcuL2RlcHJlY2F0ZWRQcm9wVHlwZSc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGlzTXVpRWxlbWVudCB9IGZyb20gJy4vaXNNdWlFbGVtZW50JztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgb3duZXJEb2N1bWVudCB9IGZyb20gJy4vb3duZXJEb2N1bWVudCc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIG93bmVyV2luZG93IH0gZnJvbSAnLi9vd25lcldpbmRvdyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHJlcXVpcmVQcm9wRmFjdG9yeSB9IGZyb20gJy4vcmVxdWlyZVByb3BGYWN0b3J5JztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgc2V0UmVmIH0gZnJvbSAnLi9zZXRSZWYnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyB1bnN0YWJsZV91c2VFbmhhbmNlZEVmZmVjdCB9IGZyb20gJy4vdXNlRW5oYW5jZWRFZmZlY3QnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyB1bnN0YWJsZV91c2VJZCB9IGZyb20gJy4vdXNlSWQnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyB1bnN1cHBvcnRlZFByb3AgfSBmcm9tICcuL3Vuc3VwcG9ydGVkUHJvcCc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHVzZUNvbnRyb2xsZWQgfSBmcm9tICcuL3VzZUNvbnRyb2xsZWQnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyB1c2VFdmVudENhbGxiYWNrIH0gZnJvbSAnLi91c2VFdmVudENhbGxiYWNrJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgdXNlRm9ya1JlZiB9IGZyb20gJy4vdXNlRm9ya1JlZic7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHVzZUlzRm9jdXNWaXNpYmxlIH0gZnJvbSAnLi91c2VJc0ZvY3VzVmlzaWJsZSc7IC8vIFRPRE86IHJlbW92ZSB0aGlzIGV4cG9ydCBvbmNlIENsYXNzTmFtZUdlbmVyYXRvciBpcyBzdGFibGVcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbmFtaW5nLWNvbnZlbnRpb25cblxuZXhwb3J0IGNvbnN0IHVuc3RhYmxlX0NsYXNzTmFtZUdlbmVyYXRvciA9IHtcbiAgY29uZmlndXJlOiBnZW5lcmF0b3IgPT4ge1xuICAgIGNvbnNvbGUud2FybihbJ01VSTogYENsYXNzTmFtZUdlbmVyYXRvcmAgaW1wb3J0IGZyb20gYEBtdWkvbWF0ZXJpYWwvdXRpbHNgIGlzIG91dGRhdGVkIGFuZCBtaWdodCBjYXVzZSB1bmV4cGVjdGVkIGlzc3Vlcy4nLCAnJywgXCJZb3Ugc2hvdWxkIHVzZSBgaW1wb3J0IHsgdW5zdGFibGVfQ2xhc3NOYW1lR2VuZXJhdG9yIH0gZnJvbSAnQG11aS9tYXRlcmlhbC9jbGFzc05hbWUnYCBpbnN0ZWFkXCIsICcnLCAnVGhlIGRldGFpbCBvZiB0aGUgaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9tdWkvbWF0ZXJpYWwtdWkvaXNzdWVzLzMwMDExI2lzc3VlY29tbWVudC0xMDI0OTkzNDAxJywgJycsICdUaGUgdXBkYXRlZCBkb2N1bWVudGF0aW9uOiBodHRwczovL211aS5jb20vZ3VpZGVzL2NsYXNzbmFtZS1nZW5lcmF0b3IvJ10uam9pbignXFxuJykpO1xuICAgIENsYXNzTmFtZUdlbmVyYXRvci5jb25maWd1cmUoZ2VuZXJhdG9yKTtcbiAgfVxufTsiLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi8qXFxuISB0YWlsd2luZGNzcyB2My4yLjQgfCBNSVQgTGljZW5zZSB8IGh0dHBzOi8vdGFpbHdpbmRjc3MuY29tXFxuKi8vKlxcbjEuIFByZXZlbnQgcGFkZGluZyBhbmQgYm9yZGVyIGZyb20gYWZmZWN0aW5nIGVsZW1lbnQgd2lkdGguIChodHRwczovL2dpdGh1Yi5jb20vbW96ZGV2cy9jc3NyZW1lZHkvaXNzdWVzLzQpXFxuMi4gQWxsb3cgYWRkaW5nIGEgYm9yZGVyIHRvIGFuIGVsZW1lbnQgYnkganVzdCBhZGRpbmcgYSBib3JkZXItd2lkdGguIChodHRwczovL2dpdGh1Yi5jb20vdGFpbHdpbmRjc3MvdGFpbHdpbmRjc3MvcHVsbC8xMTYpXFxuKi9cXG5cXG4qLFxcbjo6YmVmb3JlLFxcbjo6YWZ0ZXIge1xcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDsgLyogMSAqL1xcbiAgYm9yZGVyLXdpZHRoOiAwOyAvKiAyICovXFxuICBib3JkZXItc3R5bGU6IHNvbGlkOyAvKiAyICovXFxuICBib3JkZXItY29sb3I6ICNlNWU3ZWI7IC8qIDIgKi9cXG59XFxuXFxuOjpiZWZvcmUsXFxuOjphZnRlciB7XFxuICAtLXR3LWNvbnRlbnQ6ICcnO1xcbn1cXG5cXG4vKlxcbjEuIFVzZSBhIGNvbnNpc3RlbnQgc2Vuc2libGUgbGluZS1oZWlnaHQgaW4gYWxsIGJyb3dzZXJzLlxcbjIuIFByZXZlbnQgYWRqdXN0bWVudHMgb2YgZm9udCBzaXplIGFmdGVyIG9yaWVudGF0aW9uIGNoYW5nZXMgaW4gaU9TLlxcbjMuIFVzZSBhIG1vcmUgcmVhZGFibGUgdGFiIHNpemUuXFxuNC4gVXNlIHRoZSB1c2VyJ3MgY29uZmlndXJlZCBgc2Fuc2AgZm9udC1mYW1pbHkgYnkgZGVmYXVsdC5cXG41LiBVc2UgdGhlIHVzZXIncyBjb25maWd1cmVkIGBzYW5zYCBmb250LWZlYXR1cmUtc2V0dGluZ3MgYnkgZGVmYXVsdC5cXG4qL1xcblxcbmh0bWwge1xcbiAgbGluZS1oZWlnaHQ6IDEuNTsgLyogMSAqL1xcbiAgLXdlYmtpdC10ZXh0LXNpemUtYWRqdXN0OiAxMDAlOyAvKiAyICovXFxuICAtbW96LXRhYi1zaXplOiA0OyAvKiAzICovXFxuICAtby10YWItc2l6ZTogNDtcXG4gICAgIHRhYi1zaXplOiA0OyAvKiAzICovXFxuICBmb250LWZhbWlseTogdWktc2Fucy1zZXJpZiwgc3lzdGVtLXVpLCAtYXBwbGUtc3lzdGVtLCBCbGlua01hY1N5c3RlbUZvbnQsIFxcXCJTZWdvZSBVSVxcXCIsIFJvYm90bywgXFxcIkhlbHZldGljYSBOZXVlXFxcIiwgQXJpYWwsIFxcXCJOb3RvIFNhbnNcXFwiLCBzYW5zLXNlcmlmLCBcXFwiQXBwbGUgQ29sb3IgRW1vamlcXFwiLCBcXFwiU2Vnb2UgVUkgRW1vamlcXFwiLCBcXFwiU2Vnb2UgVUkgU3ltYm9sXFxcIiwgXFxcIk5vdG8gQ29sb3IgRW1vamlcXFwiOyAvKiA0ICovXFxuICBmb250LWZlYXR1cmUtc2V0dGluZ3M6IG5vcm1hbDsgLyogNSAqL1xcbn1cXG5cXG4vKlxcbjEuIFJlbW92ZSB0aGUgbWFyZ2luIGluIGFsbCBicm93c2Vycy5cXG4yLiBJbmhlcml0IGxpbmUtaGVpZ2h0IGZyb20gYGh0bWxgIHNvIHVzZXJzIGNhbiBzZXQgdGhlbSBhcyBhIGNsYXNzIGRpcmVjdGx5IG9uIHRoZSBgaHRtbGAgZWxlbWVudC5cXG4qL1xcblxcbmJvZHkge1xcbiAgbWFyZ2luOiAwOyAvKiAxICovXFxuICBsaW5lLWhlaWdodDogaW5oZXJpdDsgLyogMiAqL1xcbn1cXG5cXG4vKlxcbjEuIEFkZCB0aGUgY29ycmVjdCBoZWlnaHQgaW4gRmlyZWZveC5cXG4yLiBDb3JyZWN0IHRoZSBpbmhlcml0YW5jZSBvZiBib3JkZXIgY29sb3IgaW4gRmlyZWZveC4gKGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTE5MDY1NSlcXG4zLiBFbnN1cmUgaG9yaXpvbnRhbCBydWxlcyBhcmUgdmlzaWJsZSBieSBkZWZhdWx0LlxcbiovXFxuXFxuaHIge1xcbiAgaGVpZ2h0OiAwOyAvKiAxICovXFxuICBjb2xvcjogaW5oZXJpdDsgLyogMiAqL1xcbiAgYm9yZGVyLXRvcC13aWR0aDogMXB4OyAvKiAzICovXFxufVxcblxcbi8qXFxuQWRkIHRoZSBjb3JyZWN0IHRleHQgZGVjb3JhdGlvbiBpbiBDaHJvbWUsIEVkZ2UsIGFuZCBTYWZhcmkuXFxuKi9cXG5cXG5hYmJyOndoZXJlKFt0aXRsZV0pIHtcXG4gIC13ZWJraXQtdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmUgZG90dGVkO1xcbiAgICAgICAgICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZSBkb3R0ZWQ7XFxufVxcblxcbi8qXFxuUmVtb3ZlIHRoZSBkZWZhdWx0IGZvbnQgc2l6ZSBhbmQgd2VpZ2h0IGZvciBoZWFkaW5ncy5cXG4qL1xcblxcbmgxLFxcbmgyLFxcbmgzLFxcbmg0LFxcbmg1LFxcbmg2IHtcXG4gIGZvbnQtc2l6ZTogaW5oZXJpdDtcXG4gIGZvbnQtd2VpZ2h0OiBpbmhlcml0O1xcbn1cXG5cXG4vKlxcblJlc2V0IGxpbmtzIHRvIG9wdGltaXplIGZvciBvcHQtaW4gc3R5bGluZyBpbnN0ZWFkIG9mIG9wdC1vdXQuXFxuKi9cXG5cXG5hIHtcXG4gIGNvbG9yOiBpbmhlcml0O1xcbiAgdGV4dC1kZWNvcmF0aW9uOiBpbmhlcml0O1xcbn1cXG5cXG4vKlxcbkFkZCB0aGUgY29ycmVjdCBmb250IHdlaWdodCBpbiBFZGdlIGFuZCBTYWZhcmkuXFxuKi9cXG5cXG5iLFxcbnN0cm9uZyB7XFxuICBmb250LXdlaWdodDogYm9sZGVyO1xcbn1cXG5cXG4vKlxcbjEuIFVzZSB0aGUgdXNlcidzIGNvbmZpZ3VyZWQgYG1vbm9gIGZvbnQgZmFtaWx5IGJ5IGRlZmF1bHQuXFxuMi4gQ29ycmVjdCB0aGUgb2RkIGBlbWAgZm9udCBzaXppbmcgaW4gYWxsIGJyb3dzZXJzLlxcbiovXFxuXFxuY29kZSxcXG5rYmQsXFxuc2FtcCxcXG5wcmUge1xcbiAgZm9udC1mYW1pbHk6IHVpLW1vbm9zcGFjZSwgU0ZNb25vLVJlZ3VsYXIsIE1lbmxvLCBNb25hY28sIENvbnNvbGFzLCBcXFwiTGliZXJhdGlvbiBNb25vXFxcIiwgXFxcIkNvdXJpZXIgTmV3XFxcIiwgbW9ub3NwYWNlOyAvKiAxICovXFxuICBmb250LXNpemU6IDFlbTsgLyogMiAqL1xcbn1cXG5cXG4vKlxcbkFkZCB0aGUgY29ycmVjdCBmb250IHNpemUgaW4gYWxsIGJyb3dzZXJzLlxcbiovXFxuXFxuc21hbGwge1xcbiAgZm9udC1zaXplOiA4MCU7XFxufVxcblxcbi8qXFxuUHJldmVudCBgc3ViYCBhbmQgYHN1cGAgZWxlbWVudHMgZnJvbSBhZmZlY3RpbmcgdGhlIGxpbmUgaGVpZ2h0IGluIGFsbCBicm93c2Vycy5cXG4qL1xcblxcbnN1YixcXG5zdXAge1xcbiAgZm9udC1zaXplOiA3NSU7XFxuICBsaW5lLWhlaWdodDogMDtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIHZlcnRpY2FsLWFsaWduOiBiYXNlbGluZTtcXG59XFxuXFxuc3ViIHtcXG4gIGJvdHRvbTogLTAuMjVlbTtcXG59XFxuXFxuc3VwIHtcXG4gIHRvcDogLTAuNWVtO1xcbn1cXG5cXG4vKlxcbjEuIFJlbW92ZSB0ZXh0IGluZGVudGF0aW9uIGZyb20gdGFibGUgY29udGVudHMgaW4gQ2hyb21lIGFuZCBTYWZhcmkuIChodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD05OTkwODgsIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0yMDEyOTcpXFxuMi4gQ29ycmVjdCB0YWJsZSBib3JkZXIgY29sb3IgaW5oZXJpdGFuY2UgaW4gYWxsIENocm9tZSBhbmQgU2FmYXJpLiAoaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9OTM1NzI5LCBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTk1MDE2KVxcbjMuIFJlbW92ZSBnYXBzIGJldHdlZW4gdGFibGUgYm9yZGVycyBieSBkZWZhdWx0LlxcbiovXFxuXFxudGFibGUge1xcbiAgdGV4dC1pbmRlbnQ6IDA7IC8qIDEgKi9cXG4gIGJvcmRlci1jb2xvcjogaW5oZXJpdDsgLyogMiAqL1xcbiAgYm9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZTsgLyogMyAqL1xcbn1cXG5cXG4vKlxcbjEuIENoYW5nZSB0aGUgZm9udCBzdHlsZXMgaW4gYWxsIGJyb3dzZXJzLlxcbjIuIFJlbW92ZSB0aGUgbWFyZ2luIGluIEZpcmVmb3ggYW5kIFNhZmFyaS5cXG4zLiBSZW1vdmUgZGVmYXVsdCBwYWRkaW5nIGluIGFsbCBicm93c2Vycy5cXG4qL1xcblxcbmJ1dHRvbixcXG5pbnB1dCxcXG5vcHRncm91cCxcXG5zZWxlY3QsXFxudGV4dGFyZWEge1xcbiAgZm9udC1mYW1pbHk6IGluaGVyaXQ7IC8qIDEgKi9cXG4gIGZvbnQtc2l6ZTogMTAwJTsgLyogMSAqL1xcbiAgZm9udC13ZWlnaHQ6IGluaGVyaXQ7IC8qIDEgKi9cXG4gIGxpbmUtaGVpZ2h0OiBpbmhlcml0OyAvKiAxICovXFxuICBjb2xvcjogaW5oZXJpdDsgLyogMSAqL1xcbiAgbWFyZ2luOiAwOyAvKiAyICovXFxuICBwYWRkaW5nOiAwOyAvKiAzICovXFxufVxcblxcbi8qXFxuUmVtb3ZlIHRoZSBpbmhlcml0YW5jZSBvZiB0ZXh0IHRyYW5zZm9ybSBpbiBFZGdlIGFuZCBGaXJlZm94LlxcbiovXFxuXFxuYnV0dG9uLFxcbnNlbGVjdCB7XFxuICB0ZXh0LXRyYW5zZm9ybTogbm9uZTtcXG59XFxuXFxuLypcXG4xLiBDb3JyZWN0IHRoZSBpbmFiaWxpdHkgdG8gc3R5bGUgY2xpY2thYmxlIHR5cGVzIGluIGlPUyBhbmQgU2FmYXJpLlxcbjIuIFJlbW92ZSBkZWZhdWx0IGJ1dHRvbiBzdHlsZXMuXFxuKi9cXG5cXG5idXR0b24sXFxuW3R5cGU9J2J1dHRvbiddLFxcblt0eXBlPSdyZXNldCddLFxcblt0eXBlPSdzdWJtaXQnXSB7XFxuICAtd2Via2l0LWFwcGVhcmFuY2U6IGJ1dHRvbjsgLyogMSAqL1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7IC8qIDIgKi9cXG4gIGJhY2tncm91bmQtaW1hZ2U6IG5vbmU7IC8qIDIgKi9cXG59XFxuXFxuLypcXG5Vc2UgdGhlIG1vZGVybiBGaXJlZm94IGZvY3VzIHN0eWxlIGZvciBhbGwgZm9jdXNhYmxlIGVsZW1lbnRzLlxcbiovXFxuXFxuOi1tb3otZm9jdXNyaW5nIHtcXG4gIG91dGxpbmU6IGF1dG87XFxufVxcblxcbi8qXFxuUmVtb3ZlIHRoZSBhZGRpdGlvbmFsIGA6aW52YWxpZGAgc3R5bGVzIGluIEZpcmVmb3guIChodHRwczovL2dpdGh1Yi5jb20vbW96aWxsYS9nZWNrby1kZXYvYmxvYi8yZjllYWNkOWQzZDk5NWM5MzdiNDI1MWE1NTU3ZDk1ZDQ5NGM5YmUxL2xheW91dC9zdHlsZS9yZXMvZm9ybXMuY3NzI0w3MjgtTDczNylcXG4qL1xcblxcbjotbW96LXVpLWludmFsaWQge1xcbiAgYm94LXNoYWRvdzogbm9uZTtcXG59XFxuXFxuLypcXG5BZGQgdGhlIGNvcnJlY3QgdmVydGljYWwgYWxpZ25tZW50IGluIENocm9tZSBhbmQgRmlyZWZveC5cXG4qL1xcblxcbnByb2dyZXNzIHtcXG4gIHZlcnRpY2FsLWFsaWduOiBiYXNlbGluZTtcXG59XFxuXFxuLypcXG5Db3JyZWN0IHRoZSBjdXJzb3Igc3R5bGUgb2YgaW5jcmVtZW50IGFuZCBkZWNyZW1lbnQgYnV0dG9ucyBpbiBTYWZhcmkuXFxuKi9cXG5cXG46Oi13ZWJraXQtaW5uZXItc3Bpbi1idXR0b24sXFxuOjotd2Via2l0LW91dGVyLXNwaW4tYnV0dG9uIHtcXG4gIGhlaWdodDogYXV0bztcXG59XFxuXFxuLypcXG4xLiBDb3JyZWN0IHRoZSBvZGQgYXBwZWFyYW5jZSBpbiBDaHJvbWUgYW5kIFNhZmFyaS5cXG4yLiBDb3JyZWN0IHRoZSBvdXRsaW5lIHN0eWxlIGluIFNhZmFyaS5cXG4qL1xcblxcblt0eXBlPSdzZWFyY2gnXSB7XFxuICAtd2Via2l0LWFwcGVhcmFuY2U6IHRleHRmaWVsZDsgLyogMSAqL1xcbiAgb3V0bGluZS1vZmZzZXQ6IC0ycHg7IC8qIDIgKi9cXG59XFxuXFxuLypcXG5SZW1vdmUgdGhlIGlubmVyIHBhZGRpbmcgaW4gQ2hyb21lIGFuZCBTYWZhcmkgb24gbWFjT1MuXFxuKi9cXG5cXG46Oi13ZWJraXQtc2VhcmNoLWRlY29yYXRpb24ge1xcbiAgLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lO1xcbn1cXG5cXG4vKlxcbjEuIENvcnJlY3QgdGhlIGluYWJpbGl0eSB0byBzdHlsZSBjbGlja2FibGUgdHlwZXMgaW4gaU9TIGFuZCBTYWZhcmkuXFxuMi4gQ2hhbmdlIGZvbnQgcHJvcGVydGllcyB0byBgaW5oZXJpdGAgaW4gU2FmYXJpLlxcbiovXFxuXFxuOjotd2Via2l0LWZpbGUtdXBsb2FkLWJ1dHRvbiB7XFxuICAtd2Via2l0LWFwcGVhcmFuY2U6IGJ1dHRvbjsgLyogMSAqL1xcbiAgZm9udDogaW5oZXJpdDsgLyogMiAqL1xcbn1cXG5cXG4vKlxcbkFkZCB0aGUgY29ycmVjdCBkaXNwbGF5IGluIENocm9tZSBhbmQgU2FmYXJpLlxcbiovXFxuXFxuc3VtbWFyeSB7XFxuICBkaXNwbGF5OiBsaXN0LWl0ZW07XFxufVxcblxcbi8qXFxuUmVtb3ZlcyB0aGUgZGVmYXVsdCBzcGFjaW5nIGFuZCBib3JkZXIgZm9yIGFwcHJvcHJpYXRlIGVsZW1lbnRzLlxcbiovXFxuXFxuYmxvY2txdW90ZSxcXG5kbCxcXG5kZCxcXG5oMSxcXG5oMixcXG5oMyxcXG5oNCxcXG5oNSxcXG5oNixcXG5ocixcXG5maWd1cmUsXFxucCxcXG5wcmUge1xcbiAgbWFyZ2luOiAwO1xcbn1cXG5cXG5maWVsZHNldCB7XFxuICBtYXJnaW46IDA7XFxuICBwYWRkaW5nOiAwO1xcbn1cXG5cXG5sZWdlbmQge1xcbiAgcGFkZGluZzogMDtcXG59XFxuXFxub2wsXFxudWwsXFxubWVudSB7XFxuICBsaXN0LXN0eWxlOiBub25lO1xcbiAgbWFyZ2luOiAwO1xcbiAgcGFkZGluZzogMDtcXG59XFxuXFxuLypcXG5QcmV2ZW50IHJlc2l6aW5nIHRleHRhcmVhcyBob3Jpem9udGFsbHkgYnkgZGVmYXVsdC5cXG4qL1xcblxcbnRleHRhcmVhIHtcXG4gIHJlc2l6ZTogdmVydGljYWw7XFxufVxcblxcbi8qXFxuMS4gUmVzZXQgdGhlIGRlZmF1bHQgcGxhY2Vob2xkZXIgb3BhY2l0eSBpbiBGaXJlZm94LiAoaHR0cHM6Ly9naXRodWIuY29tL3RhaWx3aW5kbGFicy90YWlsd2luZGNzcy9pc3N1ZXMvMzMwMClcXG4yLiBTZXQgdGhlIGRlZmF1bHQgcGxhY2Vob2xkZXIgY29sb3IgdG8gdGhlIHVzZXIncyBjb25maWd1cmVkIGdyYXkgNDAwIGNvbG9yLlxcbiovXFxuXFxuaW5wdXQ6Oi1tb3otcGxhY2Vob2xkZXIsIHRleHRhcmVhOjotbW96LXBsYWNlaG9sZGVyIHtcXG4gIG9wYWNpdHk6IDE7IC8qIDEgKi9cXG4gIGNvbG9yOiAjOWNhM2FmOyAvKiAyICovXFxufVxcblxcbmlucHV0OjpwbGFjZWhvbGRlcixcXG50ZXh0YXJlYTo6cGxhY2Vob2xkZXIge1xcbiAgb3BhY2l0eTogMTsgLyogMSAqL1xcbiAgY29sb3I6ICM5Y2EzYWY7IC8qIDIgKi9cXG59XFxuXFxuLypcXG5TZXQgdGhlIGRlZmF1bHQgY3Vyc29yIGZvciBidXR0b25zLlxcbiovXFxuXFxuYnV0dG9uLFxcbltyb2xlPVxcXCJidXR0b25cXFwiXSB7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcblxcbi8qXFxuTWFrZSBzdXJlIGRpc2FibGVkIGJ1dHRvbnMgZG9uJ3QgZ2V0IHRoZSBwb2ludGVyIGN1cnNvci5cXG4qL1xcbjpkaXNhYmxlZCB7XFxuICBjdXJzb3I6IGRlZmF1bHQ7XFxufVxcblxcbi8qXFxuMS4gTWFrZSByZXBsYWNlZCBlbGVtZW50cyBgZGlzcGxheTogYmxvY2tgIGJ5IGRlZmF1bHQuIChodHRwczovL2dpdGh1Yi5jb20vbW96ZGV2cy9jc3NyZW1lZHkvaXNzdWVzLzE0KVxcbjIuIEFkZCBgdmVydGljYWwtYWxpZ246IG1pZGRsZWAgdG8gYWxpZ24gcmVwbGFjZWQgZWxlbWVudHMgbW9yZSBzZW5zaWJseSBieSBkZWZhdWx0LiAoaHR0cHM6Ly9naXRodWIuY29tL2plbnNpbW1vbnMvY3NzcmVtZWR5L2lzc3Vlcy8xNCNpc3N1ZWNvbW1lbnQtNjM0OTM0MjEwKVxcbiAgIFRoaXMgY2FuIHRyaWdnZXIgYSBwb29ybHkgY29uc2lkZXJlZCBsaW50IGVycm9yIGluIHNvbWUgdG9vbHMgYnV0IGlzIGluY2x1ZGVkIGJ5IGRlc2lnbi5cXG4qL1xcblxcbmltZyxcXG5zdmcsXFxudmlkZW8sXFxuY2FudmFzLFxcbmF1ZGlvLFxcbmlmcmFtZSxcXG5lbWJlZCxcXG5vYmplY3Qge1xcbiAgZGlzcGxheTogYmxvY2s7IC8qIDEgKi9cXG4gIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7IC8qIDIgKi9cXG59XFxuXFxuLypcXG5Db25zdHJhaW4gaW1hZ2VzIGFuZCB2aWRlb3MgdG8gdGhlIHBhcmVudCB3aWR0aCBhbmQgcHJlc2VydmUgdGhlaXIgaW50cmluc2ljIGFzcGVjdCByYXRpby4gKGh0dHBzOi8vZ2l0aHViLmNvbS9tb3pkZXZzL2Nzc3JlbWVkeS9pc3N1ZXMvMTQpXFxuKi9cXG5cXG5pbWcsXFxudmlkZW8ge1xcbiAgbWF4LXdpZHRoOiAxMDAlO1xcbiAgaGVpZ2h0OiBhdXRvO1xcbn1cXG5cXG4vKiBNYWtlIGVsZW1lbnRzIHdpdGggdGhlIEhUTUwgaGlkZGVuIGF0dHJpYnV0ZSBzdGF5IGhpZGRlbiBieSBkZWZhdWx0ICovXFxuW2hpZGRlbl0ge1xcbiAgZGlzcGxheTogbm9uZTtcXG59XFxuXFxuKiwgOjpiZWZvcmUsIDo6YWZ0ZXIge1xcbiAgLS10dy1ib3JkZXItc3BhY2luZy14OiAwO1xcbiAgLS10dy1ib3JkZXItc3BhY2luZy15OiAwO1xcbiAgLS10dy10cmFuc2xhdGUteDogMDtcXG4gIC0tdHctdHJhbnNsYXRlLXk6IDA7XFxuICAtLXR3LXJvdGF0ZTogMDtcXG4gIC0tdHctc2tldy14OiAwO1xcbiAgLS10dy1za2V3LXk6IDA7XFxuICAtLXR3LXNjYWxlLXg6IDE7XFxuICAtLXR3LXNjYWxlLXk6IDE7XFxuICAtLXR3LXBhbi14OiAgO1xcbiAgLS10dy1wYW4teTogIDtcXG4gIC0tdHctcGluY2gtem9vbTogIDtcXG4gIC0tdHctc2Nyb2xsLXNuYXAtc3RyaWN0bmVzczogcHJveGltaXR5O1xcbiAgLS10dy1vcmRpbmFsOiAgO1xcbiAgLS10dy1zbGFzaGVkLXplcm86ICA7XFxuICAtLXR3LW51bWVyaWMtZmlndXJlOiAgO1xcbiAgLS10dy1udW1lcmljLXNwYWNpbmc6ICA7XFxuICAtLXR3LW51bWVyaWMtZnJhY3Rpb246ICA7XFxuICAtLXR3LXJpbmctaW5zZXQ6ICA7XFxuICAtLXR3LXJpbmctb2Zmc2V0LXdpZHRoOiAwcHg7XFxuICAtLXR3LXJpbmctb2Zmc2V0LWNvbG9yOiAjZmZmO1xcbiAgLS10dy1yaW5nLWNvbG9yOiByZ2IoNTkgMTMwIDI0NiAvIDAuNSk7XFxuICAtLXR3LXJpbmctb2Zmc2V0LXNoYWRvdzogMCAwICMwMDAwO1xcbiAgLS10dy1yaW5nLXNoYWRvdzogMCAwICMwMDAwO1xcbiAgLS10dy1zaGFkb3c6IDAgMCAjMDAwMDtcXG4gIC0tdHctc2hhZG93LWNvbG9yZWQ6IDAgMCAjMDAwMDtcXG4gIC0tdHctYmx1cjogIDtcXG4gIC0tdHctYnJpZ2h0bmVzczogIDtcXG4gIC0tdHctY29udHJhc3Q6ICA7XFxuICAtLXR3LWdyYXlzY2FsZTogIDtcXG4gIC0tdHctaHVlLXJvdGF0ZTogIDtcXG4gIC0tdHctaW52ZXJ0OiAgO1xcbiAgLS10dy1zYXR1cmF0ZTogIDtcXG4gIC0tdHctc2VwaWE6ICA7XFxuICAtLXR3LWRyb3Atc2hhZG93OiAgO1xcbiAgLS10dy1iYWNrZHJvcC1ibHVyOiAgO1xcbiAgLS10dy1iYWNrZHJvcC1icmlnaHRuZXNzOiAgO1xcbiAgLS10dy1iYWNrZHJvcC1jb250cmFzdDogIDtcXG4gIC0tdHctYmFja2Ryb3AtZ3JheXNjYWxlOiAgO1xcbiAgLS10dy1iYWNrZHJvcC1odWUtcm90YXRlOiAgO1xcbiAgLS10dy1iYWNrZHJvcC1pbnZlcnQ6ICA7XFxuICAtLXR3LWJhY2tkcm9wLW9wYWNpdHk6ICA7XFxuICAtLXR3LWJhY2tkcm9wLXNhdHVyYXRlOiAgO1xcbiAgLS10dy1iYWNrZHJvcC1zZXBpYTogIDtcXG59XFxuXFxuOjpiYWNrZHJvcCB7XFxuICAtLXR3LWJvcmRlci1zcGFjaW5nLXg6IDA7XFxuICAtLXR3LWJvcmRlci1zcGFjaW5nLXk6IDA7XFxuICAtLXR3LXRyYW5zbGF0ZS14OiAwO1xcbiAgLS10dy10cmFuc2xhdGUteTogMDtcXG4gIC0tdHctcm90YXRlOiAwO1xcbiAgLS10dy1za2V3LXg6IDA7XFxuICAtLXR3LXNrZXcteTogMDtcXG4gIC0tdHctc2NhbGUteDogMTtcXG4gIC0tdHctc2NhbGUteTogMTtcXG4gIC0tdHctcGFuLXg6ICA7XFxuICAtLXR3LXBhbi15OiAgO1xcbiAgLS10dy1waW5jaC16b29tOiAgO1xcbiAgLS10dy1zY3JvbGwtc25hcC1zdHJpY3RuZXNzOiBwcm94aW1pdHk7XFxuICAtLXR3LW9yZGluYWw6ICA7XFxuICAtLXR3LXNsYXNoZWQtemVybzogIDtcXG4gIC0tdHctbnVtZXJpYy1maWd1cmU6ICA7XFxuICAtLXR3LW51bWVyaWMtc3BhY2luZzogIDtcXG4gIC0tdHctbnVtZXJpYy1mcmFjdGlvbjogIDtcXG4gIC0tdHctcmluZy1pbnNldDogIDtcXG4gIC0tdHctcmluZy1vZmZzZXQtd2lkdGg6IDBweDtcXG4gIC0tdHctcmluZy1vZmZzZXQtY29sb3I6ICNmZmY7XFxuICAtLXR3LXJpbmctY29sb3I6IHJnYig1OSAxMzAgMjQ2IC8gMC41KTtcXG4gIC0tdHctcmluZy1vZmZzZXQtc2hhZG93OiAwIDAgIzAwMDA7XFxuICAtLXR3LXJpbmctc2hhZG93OiAwIDAgIzAwMDA7XFxuICAtLXR3LXNoYWRvdzogMCAwICMwMDAwO1xcbiAgLS10dy1zaGFkb3ctY29sb3JlZDogMCAwICMwMDAwO1xcbiAgLS10dy1ibHVyOiAgO1xcbiAgLS10dy1icmlnaHRuZXNzOiAgO1xcbiAgLS10dy1jb250cmFzdDogIDtcXG4gIC0tdHctZ3JheXNjYWxlOiAgO1xcbiAgLS10dy1odWUtcm90YXRlOiAgO1xcbiAgLS10dy1pbnZlcnQ6ICA7XFxuICAtLXR3LXNhdHVyYXRlOiAgO1xcbiAgLS10dy1zZXBpYTogIDtcXG4gIC0tdHctZHJvcC1zaGFkb3c6ICA7XFxuICAtLXR3LWJhY2tkcm9wLWJsdXI6ICA7XFxuICAtLXR3LWJhY2tkcm9wLWJyaWdodG5lc3M6ICA7XFxuICAtLXR3LWJhY2tkcm9wLWNvbnRyYXN0OiAgO1xcbiAgLS10dy1iYWNrZHJvcC1ncmF5c2NhbGU6ICA7XFxuICAtLXR3LWJhY2tkcm9wLWh1ZS1yb3RhdGU6ICA7XFxuICAtLXR3LWJhY2tkcm9wLWludmVydDogIDtcXG4gIC0tdHctYmFja2Ryb3Atb3BhY2l0eTogIDtcXG4gIC0tdHctYmFja2Ryb3Atc2F0dXJhdGU6ICA7XFxuICAtLXR3LWJhY2tkcm9wLXNlcGlhOiAgO1xcbn1cXHJcXG4uY29udGFpbmVyIHtcXG4gIHdpZHRoOiAxMDAlO1xcbn1cXHJcXG5AbWVkaWEgKG1pbi13aWR0aDogNjQwcHgpIHtcXG5cXG4gIC5jb250YWluZXIge1xcbiAgICBtYXgtd2lkdGg6IDY0MHB4O1xcbiAgfVxcbn1cXHJcXG5AbWVkaWEgKG1pbi13aWR0aDogNzY4cHgpIHtcXG5cXG4gIC5jb250YWluZXIge1xcbiAgICBtYXgtd2lkdGg6IDc2OHB4O1xcbiAgfVxcbn1cXHJcXG5AbWVkaWEgKG1pbi13aWR0aDogMTAyNHB4KSB7XFxuXFxuICAuY29udGFpbmVyIHtcXG4gICAgbWF4LXdpZHRoOiAxMDI0cHg7XFxuICB9XFxufVxcclxcbkBtZWRpYSAobWluLXdpZHRoOiAxMjgwcHgpIHtcXG5cXG4gIC5jb250YWluZXIge1xcbiAgICBtYXgtd2lkdGg6IDEyODBweDtcXG4gIH1cXG59XFxyXFxuQG1lZGlhIChtaW4td2lkdGg6IDE1MzZweCkge1xcblxcbiAgLmNvbnRhaW5lciB7XFxuICAgIG1heC13aWR0aDogMTUzNnB4O1xcbiAgfVxcbn1cXHJcXG4uYWJzb2x1dGUge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbn1cXHJcXG4uaW5zZXQteS0wIHtcXG4gIHRvcDogMHB4O1xcbiAgYm90dG9tOiAwcHg7XFxufVxcclxcbi5yaWdodC0wIHtcXG4gIHJpZ2h0OiAwcHg7XFxufVxcclxcbi5tLTIwIHtcXG4gIG1hcmdpbjogNXJlbTtcXG59XFxyXFxuLm15LTIge1xcbiAgbWFyZ2luLXRvcDogMC41cmVtO1xcbiAgbWFyZ2luLWJvdHRvbTogMC41cmVtO1xcbn1cXHJcXG4ubXgtNCB7XFxuICBtYXJnaW4tbGVmdDogMXJlbTtcXG4gIG1hcmdpbi1yaWdodDogMXJlbTtcXG59XFxyXFxuLm1sLTIge1xcbiAgbWFyZ2luLWxlZnQ6IDAuNXJlbTtcXG59XFxyXFxuLm10LTIge1xcbiAgbWFyZ2luLXRvcDogMC41cmVtO1xcbn1cXHJcXG4ubXItMSB7XFxuICBtYXJnaW4tcmlnaHQ6IDAuMjVyZW07XFxufVxcclxcbi5tci00IHtcXG4gIG1hcmdpbi1yaWdodDogMXJlbTtcXG59XFxyXFxuLm1yLTMge1xcbiAgbWFyZ2luLXJpZ2h0OiAwLjc1cmVtO1xcbn1cXHJcXG4ubWItMSB7XFxuICBtYXJnaW4tYm90dG9tOiAwLjI1cmVtO1xcbn1cXHJcXG4ubXItMiB7XFxuICBtYXJnaW4tcmlnaHQ6IDAuNXJlbTtcXG59XFxyXFxuLm10LTQge1xcbiAgbWFyZ2luLXRvcDogMXJlbTtcXG59XFxyXFxuLm1iLTQge1xcbiAgbWFyZ2luLWJvdHRvbTogMXJlbTtcXG59XFxyXFxuLm1iLTcge1xcbiAgbWFyZ2luLWJvdHRvbTogMS43NXJlbTtcXG59XFxyXFxuLm1iLTUge1xcbiAgbWFyZ2luLWJvdHRvbTogMS4yNXJlbTtcXG59XFxyXFxuLm1sLTEge1xcbiAgbWFyZ2luLWxlZnQ6IDAuMjVyZW07XFxufVxcclxcbi5ibG9jayB7XFxuICBkaXNwbGF5OiBibG9jaztcXG59XFxyXFxuLmZsZXgge1xcbiAgZGlzcGxheTogZmxleDtcXG59XFxyXFxuLmlubGluZS1mbGV4IHtcXG4gIGRpc3BsYXk6IGlubGluZS1mbGV4O1xcbn1cXHJcXG4uaC1zY3JlZW4ge1xcbiAgaGVpZ2h0OiAxMDB2aDtcXG59XFxyXFxuLmgtNCB7XFxuICBoZWlnaHQ6IDFyZW07XFxufVxcclxcbi5oLWZ1bGwge1xcbiAgaGVpZ2h0OiAxMDAlO1xcbn1cXHJcXG4udy1zY3JlZW4ge1xcbiAgd2lkdGg6IDEwMHZ3O1xcbn1cXHJcXG4udy1mdWxsIHtcXG4gIHdpZHRoOiAxMDAlO1xcbn1cXHJcXG4udy04IHtcXG4gIHdpZHRoOiAycmVtO1xcbn1cXHJcXG4udy00IHtcXG4gIHdpZHRoOiAxcmVtO1xcbn1cXHJcXG4udy0xXFxcXC81IHtcXG4gIHdpZHRoOiAyMCU7XFxufVxcclxcbi53LTFcXFxcLzYge1xcbiAgd2lkdGg6IDE2LjY2NjY2NyU7XFxufVxcclxcbi5ncm93IHtcXG4gIGZsZXgtZ3JvdzogMTtcXG59XFxyXFxuLmN1cnNvci1wb2ludGVyIHtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG59XFxyXFxuLmZsZXgtY29sIHtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxufVxcclxcbi5pdGVtcy1zdGFydCB7XFxuICBhbGlnbi1pdGVtczogZmxleC1zdGFydDtcXG59XFxyXFxuLml0ZW1zLWNlbnRlciB7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbn1cXHJcXG4uaXRlbXMtYmFzZWxpbmUge1xcbiAgYWxpZ24taXRlbXM6IGJhc2VsaW5lO1xcbn1cXHJcXG4uaXRlbXMtc3RyZXRjaCB7XFxuICBhbGlnbi1pdGVtczogc3RyZXRjaDtcXG59XFxyXFxuLmp1c3RpZnktY2VudGVyIHtcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbn1cXHJcXG4uanVzdGlmeS1iZXR3ZWVuIHtcXG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXG59XFxyXFxuLnJvdW5kZWQtbWQge1xcbiAgYm9yZGVyLXJhZGl1czogMC4zNzVyZW07XFxufVxcclxcbi5yb3VuZGVkLWZ1bGwge1xcbiAgYm9yZGVyLXJhZGl1czogOTk5OXB4O1xcbn1cXHJcXG4ucm91bmRlZC10IHtcXG4gIGJvcmRlci10b3AtbGVmdC1yYWRpdXM6IDAuMjVyZW07XFxuICBib3JkZXItdG9wLXJpZ2h0LXJhZGl1czogMC4yNXJlbTtcXG59XFxyXFxuLnJvdW5kZWQtdC1tZCB7XFxuICBib3JkZXItdG9wLWxlZnQtcmFkaXVzOiAwLjM3NXJlbTtcXG4gIGJvcmRlci10b3AtcmlnaHQtcmFkaXVzOiAwLjM3NXJlbTtcXG59XFxyXFxuLnJvdW5kZWQtYi1tZCB7XFxuICBib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czogMC4zNzVyZW07XFxuICBib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOiAwLjM3NXJlbTtcXG59XFxyXFxuLmJvcmRlciB7XFxuICBib3JkZXItd2lkdGg6IDFweDtcXG59XFxyXFxuLmJvcmRlci1sLTgge1xcbiAgYm9yZGVyLWxlZnQtd2lkdGg6IDhweDtcXG59XFxyXFxuLmJvcmRlci1iLTAge1xcbiAgYm9yZGVyLWJvdHRvbS13aWR0aDogMHB4O1xcbn1cXHJcXG4uYm9yZGVyLXQtMCB7XFxuICBib3JkZXItdG9wLXdpZHRoOiAwcHg7XFxufVxcclxcbi5ib3JkZXItYiB7XFxuICBib3JkZXItYm90dG9tLXdpZHRoOiAxcHg7XFxufVxcclxcbi5ib3JkZXItc2t5LTcwMCB7XFxuICAtLXR3LWJvcmRlci1vcGFjaXR5OiAxO1xcbiAgYm9yZGVyLWNvbG9yOiByZ2IoMyAxMDUgMTYxIC8gdmFyKC0tdHctYm9yZGVyLW9wYWNpdHkpKTtcXG59XFxyXFxuLmJvcmRlci1ncmF5LTMwMCB7XFxuICAtLXR3LWJvcmRlci1vcGFjaXR5OiAxO1xcbiAgYm9yZGVyLWNvbG9yOiByZ2IoMjA5IDIxMyAyMTkgLyB2YXIoLS10dy1ib3JkZXItb3BhY2l0eSkpO1xcbn1cXHJcXG4uYmctd2hpdGUge1xcbiAgLS10dy1iZy1vcGFjaXR5OiAxO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDI1NSAyNTUgMjU1IC8gdmFyKC0tdHctYmctb3BhY2l0eSkpO1xcbn1cXHJcXG4uYmctc2xhdGUtODAwIHtcXG4gIC0tdHctYmctb3BhY2l0eTogMTtcXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYigzMCA0MSA1OSAvIHZhcigtLXR3LWJnLW9wYWNpdHkpKTtcXG59XFxyXFxuLmJnLXNsYXRlLTcwMCB7XFxuICAtLXR3LWJnLW9wYWNpdHk6IDE7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoNTEgNjUgODUgLyB2YXIoLS10dy1iZy1vcGFjaXR5KSk7XFxufVxcclxcbi5iZy1zbGF0ZS02MDAge1xcbiAgLS10dy1iZy1vcGFjaXR5OiAxO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDcxIDg1IDEwNSAvIHZhcigtLXR3LWJnLW9wYWNpdHkpKTtcXG59XFxyXFxuLmJnLXNsYXRlLTEwMCB7XFxuICAtLXR3LWJnLW9wYWNpdHk6IDE7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMjQxIDI0NSAyNDkgLyB2YXIoLS10dy1iZy1vcGFjaXR5KSk7XFxufVxcclxcbi5iZy1ncmF5LTIwMCB7XFxuICAtLXR3LWJnLW9wYWNpdHk6IDE7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMjI5IDIzMSAyMzUgLyB2YXIoLS10dy1iZy1vcGFjaXR5KSk7XFxufVxcclxcbi5iZy1ncmF5LTEwMCB7XFxuICAtLXR3LWJnLW9wYWNpdHk6IDE7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMjQzIDI0NCAyNDYgLyB2YXIoLS10dy1iZy1vcGFjaXR5KSk7XFxufVxcclxcbi5wLTEwIHtcXG4gIHBhZGRpbmc6IDIuNXJlbTtcXG59XFxyXFxuLnAtNCB7XFxuICBwYWRkaW5nOiAxcmVtO1xcbn1cXHJcXG4ucHgtNSB7XFxuICBwYWRkaW5nLWxlZnQ6IDEuMjVyZW07XFxuICBwYWRkaW5nLXJpZ2h0OiAxLjI1cmVtO1xcbn1cXHJcXG4ucHgtNCB7XFxuICBwYWRkaW5nLWxlZnQ6IDFyZW07XFxuICBwYWRkaW5nLXJpZ2h0OiAxcmVtO1xcbn1cXHJcXG4ucHktMiB7XFxuICBwYWRkaW5nLXRvcDogMC41cmVtO1xcbiAgcGFkZGluZy1ib3R0b206IDAuNXJlbTtcXG59XFxyXFxuLnB5LTEge1xcbiAgcGFkZGluZy10b3A6IDAuMjVyZW07XFxuICBwYWRkaW5nLWJvdHRvbTogMC4yNXJlbTtcXG59XFxyXFxuLnB5LTMge1xcbiAgcGFkZGluZy10b3A6IDAuNzVyZW07XFxuICBwYWRkaW5nLWJvdHRvbTogMC43NXJlbTtcXG59XFxyXFxuLnB4LTIge1xcbiAgcGFkZGluZy1sZWZ0OiAwLjVyZW07XFxuICBwYWRkaW5nLXJpZ2h0OiAwLjVyZW07XFxufVxcclxcbi5wci0zIHtcXG4gIHBhZGRpbmctcmlnaHQ6IDAuNzVyZW07XFxufVxcclxcbi5wdC0yIHtcXG4gIHBhZGRpbmctdG9wOiAwLjVyZW07XFxufVxcclxcbi5wYi0zIHtcXG4gIHBhZGRpbmctYm90dG9tOiAwLjc1cmVtO1xcbn1cXHJcXG4ucHQtNCB7XFxuICBwYWRkaW5nLXRvcDogMXJlbTtcXG59XFxyXFxuLnBsLTIge1xcbiAgcGFkZGluZy1sZWZ0OiAwLjVyZW07XFxufVxcclxcbi5mb250LXNlcmlmIHtcXG4gIGZvbnQtZmFtaWx5OiB1aS1zZXJpZiwgR2VvcmdpYSwgQ2FtYnJpYSwgXFxcIlRpbWVzIE5ldyBSb21hblxcXCIsIFRpbWVzLCBzZXJpZjtcXG59XFxyXFxuLnRleHQtc20ge1xcbiAgZm9udC1zaXplOiAwLjg3NXJlbTtcXG4gIGxpbmUtaGVpZ2h0OiAxLjI1cmVtO1xcbn1cXHJcXG4udGV4dC1cXFxcWzhweFxcXFxdIHtcXG4gIGZvbnQtc2l6ZTogOHB4O1xcbn1cXHJcXG4udGV4dC14bCB7XFxuICBmb250LXNpemU6IDEuMjVyZW07XFxuICBsaW5lLWhlaWdodDogMS43NXJlbTtcXG59XFxyXFxuLnRleHQtMnhsIHtcXG4gIGZvbnQtc2l6ZTogMS41cmVtO1xcbiAgbGluZS1oZWlnaHQ6IDJyZW07XFxufVxcclxcbi50ZXh0LWxnIHtcXG4gIGZvbnQtc2l6ZTogMS4xMjVyZW07XFxuICBsaW5lLWhlaWdodDogMS43NXJlbTtcXG59XFxyXFxuLmZvbnQtYm9sZCB7XFxuICBmb250LXdlaWdodDogNzAwO1xcbn1cXHJcXG4uZm9udC1ub3JtYWwge1xcbiAgZm9udC13ZWlnaHQ6IDQwMDtcXG59XFxyXFxuLmZvbnQtc2VtaWJvbGQge1xcbiAgZm9udC13ZWlnaHQ6IDYwMDtcXG59XFxyXFxuLnVwcGVyY2FzZSB7XFxuICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xcbn1cXHJcXG4udGV4dC13aGl0ZSB7XFxuICAtLXR3LXRleHQtb3BhY2l0eTogMTtcXG4gIGNvbG9yOiByZ2IoMjU1IDI1NSAyNTUgLyB2YXIoLS10dy10ZXh0LW9wYWNpdHkpKTtcXG59XFxyXFxuLnRleHQtZ3JheS0zMDAge1xcbiAgLS10dy10ZXh0LW9wYWNpdHk6IDE7XFxuICBjb2xvcjogcmdiKDIwOSAyMTMgMjE5IC8gdmFyKC0tdHctdGV4dC1vcGFjaXR5KSk7XFxufVxcclxcbi50ZXh0LXNreS03MDAge1xcbiAgLS10dy10ZXh0LW9wYWNpdHk6IDE7XFxuICBjb2xvcjogcmdiKDMgMTA1IDE2MSAvIHZhcigtLXR3LXRleHQtb3BhY2l0eSkpO1xcbn1cXHJcXG4udGV4dC1ncmF5LTUwMCB7XFxuICAtLXR3LXRleHQtb3BhY2l0eTogMTtcXG4gIGNvbG9yOiByZ2IoMTA3IDExNCAxMjggLyB2YXIoLS10dy10ZXh0LW9wYWNpdHkpKTtcXG59XFxyXFxuLnRleHQtc2xhdGUtNTAwIHtcXG4gIC0tdHctdGV4dC1vcGFjaXR5OiAxO1xcbiAgY29sb3I6IHJnYigxMDAgMTE2IDEzOSAvIHZhcigtLXR3LXRleHQtb3BhY2l0eSkpO1xcbn1cXHJcXG4udW5kZXJsaW5lIHtcXG4gIHRleHQtZGVjb3JhdGlvbi1saW5lOiB1bmRlcmxpbmU7XFxufVxcclxcbi5zaGFkb3cge1xcbiAgLS10dy1zaGFkb3c6IDAgMXB4IDNweCAwIHJnYigwIDAgMCAvIDAuMSksIDAgMXB4IDJweCAtMXB4IHJnYigwIDAgMCAvIDAuMSk7XFxuICAtLXR3LXNoYWRvdy1jb2xvcmVkOiAwIDFweCAzcHggMCB2YXIoLS10dy1zaGFkb3ctY29sb3IpLCAwIDFweCAycHggLTFweCB2YXIoLS10dy1zaGFkb3ctY29sb3IpO1xcbiAgYm94LXNoYWRvdzogdmFyKC0tdHctcmluZy1vZmZzZXQtc2hhZG93LCAwIDAgIzAwMDApLCB2YXIoLS10dy1yaW5nLXNoYWRvdywgMCAwICMwMDAwKSwgdmFyKC0tdHctc2hhZG93KTtcXG59XFxyXFxuLm91dGxpbmUtbm9uZSB7XFxuICBvdXRsaW5lOiAycHggc29saWQgdHJhbnNwYXJlbnQ7XFxuICBvdXRsaW5lLW9mZnNldDogMnB4O1xcbn1cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvaW5kZXguY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBOztDQUFjLENBQWQ7OztDQUFjOztBQUFkOzs7RUFBQSxzQkFBYyxFQUFkLE1BQWM7RUFBZCxlQUFjLEVBQWQsTUFBYztFQUFkLG1CQUFjLEVBQWQsTUFBYztFQUFkLHFCQUFjLEVBQWQsTUFBYztBQUFBOztBQUFkOztFQUFBLGdCQUFjO0FBQUE7O0FBQWQ7Ozs7OztDQUFjOztBQUFkO0VBQUEsZ0JBQWMsRUFBZCxNQUFjO0VBQWQsOEJBQWMsRUFBZCxNQUFjO0VBQWQsZ0JBQWMsRUFBZCxNQUFjO0VBQWQsY0FBYztLQUFkLFdBQWMsRUFBZCxNQUFjO0VBQWQsNE5BQWMsRUFBZCxNQUFjO0VBQWQsNkJBQWMsRUFBZCxNQUFjO0FBQUE7O0FBQWQ7OztDQUFjOztBQUFkO0VBQUEsU0FBYyxFQUFkLE1BQWM7RUFBZCxvQkFBYyxFQUFkLE1BQWM7QUFBQTs7QUFBZDs7OztDQUFjOztBQUFkO0VBQUEsU0FBYyxFQUFkLE1BQWM7RUFBZCxjQUFjLEVBQWQsTUFBYztFQUFkLHFCQUFjLEVBQWQsTUFBYztBQUFBOztBQUFkOztDQUFjOztBQUFkO0VBQUEseUNBQWM7VUFBZCxpQ0FBYztBQUFBOztBQUFkOztDQUFjOztBQUFkOzs7Ozs7RUFBQSxrQkFBYztFQUFkLG9CQUFjO0FBQUE7O0FBQWQ7O0NBQWM7O0FBQWQ7RUFBQSxjQUFjO0VBQWQsd0JBQWM7QUFBQTs7QUFBZDs7Q0FBYzs7QUFBZDs7RUFBQSxtQkFBYztBQUFBOztBQUFkOzs7Q0FBYzs7QUFBZDs7OztFQUFBLCtHQUFjLEVBQWQsTUFBYztFQUFkLGNBQWMsRUFBZCxNQUFjO0FBQUE7O0FBQWQ7O0NBQWM7O0FBQWQ7RUFBQSxjQUFjO0FBQUE7O0FBQWQ7O0NBQWM7O0FBQWQ7O0VBQUEsY0FBYztFQUFkLGNBQWM7RUFBZCxrQkFBYztFQUFkLHdCQUFjO0FBQUE7O0FBQWQ7RUFBQSxlQUFjO0FBQUE7O0FBQWQ7RUFBQSxXQUFjO0FBQUE7O0FBQWQ7Ozs7Q0FBYzs7QUFBZDtFQUFBLGNBQWMsRUFBZCxNQUFjO0VBQWQscUJBQWMsRUFBZCxNQUFjO0VBQWQseUJBQWMsRUFBZCxNQUFjO0FBQUE7O0FBQWQ7Ozs7Q0FBYzs7QUFBZDs7Ozs7RUFBQSxvQkFBYyxFQUFkLE1BQWM7RUFBZCxlQUFjLEVBQWQsTUFBYztFQUFkLG9CQUFjLEVBQWQsTUFBYztFQUFkLG9CQUFjLEVBQWQsTUFBYztFQUFkLGNBQWMsRUFBZCxNQUFjO0VBQWQsU0FBYyxFQUFkLE1BQWM7RUFBZCxVQUFjLEVBQWQsTUFBYztBQUFBOztBQUFkOztDQUFjOztBQUFkOztFQUFBLG9CQUFjO0FBQUE7O0FBQWQ7OztDQUFjOztBQUFkOzs7O0VBQUEsMEJBQWMsRUFBZCxNQUFjO0VBQWQsNkJBQWMsRUFBZCxNQUFjO0VBQWQsc0JBQWMsRUFBZCxNQUFjO0FBQUE7O0FBQWQ7O0NBQWM7O0FBQWQ7RUFBQSxhQUFjO0FBQUE7O0FBQWQ7O0NBQWM7O0FBQWQ7RUFBQSxnQkFBYztBQUFBOztBQUFkOztDQUFjOztBQUFkO0VBQUEsd0JBQWM7QUFBQTs7QUFBZDs7Q0FBYzs7QUFBZDs7RUFBQSxZQUFjO0FBQUE7O0FBQWQ7OztDQUFjOztBQUFkO0VBQUEsNkJBQWMsRUFBZCxNQUFjO0VBQWQsb0JBQWMsRUFBZCxNQUFjO0FBQUE7O0FBQWQ7O0NBQWM7O0FBQWQ7RUFBQSx3QkFBYztBQUFBOztBQUFkOzs7Q0FBYzs7QUFBZDtFQUFBLDBCQUFjLEVBQWQsTUFBYztFQUFkLGFBQWMsRUFBZCxNQUFjO0FBQUE7O0FBQWQ7O0NBQWM7O0FBQWQ7RUFBQSxrQkFBYztBQUFBOztBQUFkOztDQUFjOztBQUFkOzs7Ozs7Ozs7Ozs7O0VBQUEsU0FBYztBQUFBOztBQUFkO0VBQUEsU0FBYztFQUFkLFVBQWM7QUFBQTs7QUFBZDtFQUFBLFVBQWM7QUFBQTs7QUFBZDs7O0VBQUEsZ0JBQWM7RUFBZCxTQUFjO0VBQWQsVUFBYztBQUFBOztBQUFkOztDQUFjOztBQUFkO0VBQUEsZ0JBQWM7QUFBQTs7QUFBZDs7O0NBQWM7O0FBQWQ7RUFBQSxVQUFjLEVBQWQsTUFBYztFQUFkLGNBQWMsRUFBZCxNQUFjO0FBQUE7O0FBQWQ7O0VBQUEsVUFBYyxFQUFkLE1BQWM7RUFBZCxjQUFjLEVBQWQsTUFBYztBQUFBOztBQUFkOztDQUFjOztBQUFkOztFQUFBLGVBQWM7QUFBQTs7QUFBZDs7Q0FBYztBQUFkO0VBQUEsZUFBYztBQUFBOztBQUFkOzs7O0NBQWM7O0FBQWQ7Ozs7Ozs7O0VBQUEsY0FBYyxFQUFkLE1BQWM7RUFBZCxzQkFBYyxFQUFkLE1BQWM7QUFBQTs7QUFBZDs7Q0FBYzs7QUFBZDs7RUFBQSxlQUFjO0VBQWQsWUFBYztBQUFBOztBQUFkLHdFQUFjO0FBQWQ7RUFBQSxhQUFjO0FBQUE7O0FBQWQ7RUFBQSx3QkFBYztFQUFkLHdCQUFjO0VBQWQsbUJBQWM7RUFBZCxtQkFBYztFQUFkLGNBQWM7RUFBZCxjQUFjO0VBQWQsY0FBYztFQUFkLGVBQWM7RUFBZCxlQUFjO0VBQWQsYUFBYztFQUFkLGFBQWM7RUFBZCxrQkFBYztFQUFkLHNDQUFjO0VBQWQsZUFBYztFQUFkLG9CQUFjO0VBQWQsc0JBQWM7RUFBZCx1QkFBYztFQUFkLHdCQUFjO0VBQWQsa0JBQWM7RUFBZCwyQkFBYztFQUFkLDRCQUFjO0VBQWQsc0NBQWM7RUFBZCxrQ0FBYztFQUFkLDJCQUFjO0VBQWQsc0JBQWM7RUFBZCw4QkFBYztFQUFkLFlBQWM7RUFBZCxrQkFBYztFQUFkLGdCQUFjO0VBQWQsaUJBQWM7RUFBZCxrQkFBYztFQUFkLGNBQWM7RUFBZCxnQkFBYztFQUFkLGFBQWM7RUFBZCxtQkFBYztFQUFkLHFCQUFjO0VBQWQsMkJBQWM7RUFBZCx5QkFBYztFQUFkLDBCQUFjO0VBQWQsMkJBQWM7RUFBZCx1QkFBYztFQUFkLHdCQUFjO0VBQWQseUJBQWM7RUFBZDtBQUFjOztBQUFkO0VBQUEsd0JBQWM7RUFBZCx3QkFBYztFQUFkLG1CQUFjO0VBQWQsbUJBQWM7RUFBZCxjQUFjO0VBQWQsY0FBYztFQUFkLGNBQWM7RUFBZCxlQUFjO0VBQWQsZUFBYztFQUFkLGFBQWM7RUFBZCxhQUFjO0VBQWQsa0JBQWM7RUFBZCxzQ0FBYztFQUFkLGVBQWM7RUFBZCxvQkFBYztFQUFkLHNCQUFjO0VBQWQsdUJBQWM7RUFBZCx3QkFBYztFQUFkLGtCQUFjO0VBQWQsMkJBQWM7RUFBZCw0QkFBYztFQUFkLHNDQUFjO0VBQWQsa0NBQWM7RUFBZCwyQkFBYztFQUFkLHNCQUFjO0VBQWQsOEJBQWM7RUFBZCxZQUFjO0VBQWQsa0JBQWM7RUFBZCxnQkFBYztFQUFkLGlCQUFjO0VBQWQsa0JBQWM7RUFBZCxjQUFjO0VBQWQsZ0JBQWM7RUFBZCxhQUFjO0VBQWQsbUJBQWM7RUFBZCxxQkFBYztFQUFkLDJCQUFjO0VBQWQseUJBQWM7RUFBZCwwQkFBYztFQUFkLDJCQUFjO0VBQWQsdUJBQWM7RUFBZCx3QkFBYztFQUFkLHlCQUFjO0VBQWQ7QUFBYztBQUNkO0VBQUE7QUFBb0I7QUFBcEI7O0VBQUE7SUFBQTtFQUFvQjtBQUFBO0FBQXBCOztFQUFBO0lBQUE7RUFBb0I7QUFBQTtBQUFwQjs7RUFBQTtJQUFBO0VBQW9CO0FBQUE7QUFBcEI7O0VBQUE7SUFBQTtFQUFvQjtBQUFBO0FBQXBCOztFQUFBO0lBQUE7RUFBb0I7QUFBQTtBQUNwQjtFQUFBO0FBQW1CO0FBQW5CO0VBQUEsUUFBbUI7RUFBbkI7QUFBbUI7QUFBbkI7RUFBQTtBQUFtQjtBQUFuQjtFQUFBO0FBQW1CO0FBQW5CO0VBQUEsa0JBQW1CO0VBQW5CO0FBQW1CO0FBQW5CO0VBQUEsaUJBQW1CO0VBQW5CO0FBQW1CO0FBQW5CO0VBQUE7QUFBbUI7QUFBbkI7RUFBQTtBQUFtQjtBQUFuQjtFQUFBO0FBQW1CO0FBQW5CO0VBQUE7QUFBbUI7QUFBbkI7RUFBQTtBQUFtQjtBQUFuQjtFQUFBO0FBQW1CO0FBQW5CO0VBQUE7QUFBbUI7QUFBbkI7RUFBQTtBQUFtQjtBQUFuQjtFQUFBO0FBQW1CO0FBQW5CO0VBQUE7QUFBbUI7QUFBbkI7RUFBQTtBQUFtQjtBQUFuQjtFQUFBO0FBQW1CO0FBQW5CO0VBQUE7QUFBbUI7QUFBbkI7RUFBQTtBQUFtQjtBQUFuQjtFQUFBO0FBQW1CO0FBQW5CO0VBQUE7QUFBbUI7QUFBbkI7RUFBQTtBQUFtQjtBQUFuQjtFQUFBO0FBQW1CO0FBQW5CO0VBQUE7QUFBbUI7QUFBbkI7RUFBQTtBQUFtQjtBQUFuQjtFQUFBO0FBQW1CO0FBQW5CO0VBQUE7QUFBbUI7QUFBbkI7RUFBQTtBQUFtQjtBQUFuQjtFQUFBO0FBQW1CO0FBQW5CO0VBQUE7QUFBbUI7QUFBbkI7RUFBQTtBQUFtQjtBQUFuQjtFQUFBO0FBQW1CO0FBQW5CO0VBQUE7QUFBbUI7QUFBbkI7RUFBQTtBQUFtQjtBQUFuQjtFQUFBO0FBQW1CO0FBQW5CO0VBQUE7QUFBbUI7QUFBbkI7RUFBQTtBQUFtQjtBQUFuQjtFQUFBO0FBQW1CO0FBQW5CO0VBQUE7QUFBbUI7QUFBbkI7RUFBQTtBQUFtQjtBQUFuQjtFQUFBLCtCQUFtQjtFQUFuQjtBQUFtQjtBQUFuQjtFQUFBLGdDQUFtQjtFQUFuQjtBQUFtQjtBQUFuQjtFQUFBLG9DQUFtQjtFQUFuQjtBQUFtQjtBQUFuQjtFQUFBO0FBQW1CO0FBQW5CO0VBQUE7QUFBbUI7QUFBbkI7RUFBQTtBQUFtQjtBQUFuQjtFQUFBO0FBQW1CO0FBQW5CO0VBQUE7QUFBbUI7QUFBbkI7RUFBQSxzQkFBbUI7RUFBbkI7QUFBbUI7QUFBbkI7RUFBQSxzQkFBbUI7RUFBbkI7QUFBbUI7QUFBbkI7RUFBQSxrQkFBbUI7RUFBbkI7QUFBbUI7QUFBbkI7RUFBQSxrQkFBbUI7RUFBbkI7QUFBbUI7QUFBbkI7RUFBQSxrQkFBbUI7RUFBbkI7QUFBbUI7QUFBbkI7RUFBQSxrQkFBbUI7RUFBbkI7QUFBbUI7QUFBbkI7RUFBQSxrQkFBbUI7RUFBbkI7QUFBbUI7QUFBbkI7RUFBQSxrQkFBbUI7RUFBbkI7QUFBbUI7QUFBbkI7RUFBQSxrQkFBbUI7RUFBbkI7QUFBbUI7QUFBbkI7RUFBQTtBQUFtQjtBQUFuQjtFQUFBO0FBQW1CO0FBQW5CO0VBQUEscUJBQW1CO0VBQW5CO0FBQW1CO0FBQW5CO0VBQUEsa0JBQW1CO0VBQW5CO0FBQW1CO0FBQW5CO0VBQUEsbUJBQW1CO0VBQW5CO0FBQW1CO0FBQW5CO0VBQUEsb0JBQW1CO0VBQW5CO0FBQW1CO0FBQW5CO0VBQUEsb0JBQW1CO0VBQW5CO0FBQW1CO0FBQW5CO0VBQUEsb0JBQW1CO0VBQW5CO0FBQW1CO0FBQW5CO0VBQUE7QUFBbUI7QUFBbkI7RUFBQTtBQUFtQjtBQUFuQjtFQUFBO0FBQW1CO0FBQW5CO0VBQUE7QUFBbUI7QUFBbkI7RUFBQTtBQUFtQjtBQUFuQjtFQUFBO0FBQW1CO0FBQW5CO0VBQUEsbUJBQW1CO0VBQW5CO0FBQW1CO0FBQW5CO0VBQUE7QUFBbUI7QUFBbkI7RUFBQSxrQkFBbUI7RUFBbkI7QUFBbUI7QUFBbkI7RUFBQSxpQkFBbUI7RUFBbkI7QUFBbUI7QUFBbkI7RUFBQSxtQkFBbUI7RUFBbkI7QUFBbUI7QUFBbkI7RUFBQTtBQUFtQjtBQUFuQjtFQUFBO0FBQW1CO0FBQW5CO0VBQUE7QUFBbUI7QUFBbkI7RUFBQTtBQUFtQjtBQUFuQjtFQUFBLG9CQUFtQjtFQUFuQjtBQUFtQjtBQUFuQjtFQUFBLG9CQUFtQjtFQUFuQjtBQUFtQjtBQUFuQjtFQUFBLG9CQUFtQjtFQUFuQjtBQUFtQjtBQUFuQjtFQUFBLG9CQUFtQjtFQUFuQjtBQUFtQjtBQUFuQjtFQUFBLG9CQUFtQjtFQUFuQjtBQUFtQjtBQUFuQjtFQUFBO0FBQW1CO0FBQW5CO0VBQUEsMEVBQW1CO0VBQW5CLDhGQUFtQjtFQUFuQjtBQUFtQjtBQUFuQjtFQUFBLDhCQUFtQjtFQUFuQjtBQUFtQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJAdGFpbHdpbmQgYmFzZTtcXHJcXG5AdGFpbHdpbmQgY29tcG9uZW50cztcXHJcXG5AdGFpbHdpbmQgdXRpbGl0aWVzO1wiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcpIHtcbiAgdmFyIGxpc3QgPSBbXTsgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gXCJcIjtcbiAgICAgIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2YgaXRlbVs1XSAhPT0gXCJ1bmRlZmluZWRcIjtcblxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKTtcbiAgICAgIH1cblxuICAgICAgY29udGVudCArPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pO1xuXG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG5cbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oXCJcIik7XG4gIH07IC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG5cblxuICBsaXN0LmkgPSBmdW5jdGlvbiBpKG1vZHVsZXMsIG1lZGlhLCBkZWR1cGUsIHN1cHBvcnRzLCBsYXllcikge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgdW5kZWZpbmVkXV07XG4gICAgfVxuXG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblxuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgdGhpcy5sZW5ndGg7IGsrKykge1xuICAgICAgICB2YXIgaWQgPSB0aGlzW2tdWzBdO1xuXG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgX2sgPSAwOyBfayA8IG1vZHVsZXMubGVuZ3RoOyBfaysrKSB7XG4gICAgICB2YXIgaXRlbSA9IFtdLmNvbmNhdChtb2R1bGVzW19rXSk7XG5cbiAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBsYXllciAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBpZiAodHlwZW9mIGl0ZW1bNV0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKG1lZGlhKSB7XG4gICAgICAgIGlmICghaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHN1cHBvcnRzKSB7XG4gICAgICAgIGlmICghaXRlbVs0XSkge1xuICAgICAgICAgIGl0ZW1bNF0gPSBcIlwiLmNvbmNhdChzdXBwb3J0cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzRdID0gc3VwcG9ydHM7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gbGlzdDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZW0pIHtcbiAgdmFyIGNvbnRlbnQgPSBpdGVtWzFdO1xuICB2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG5cbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cblxuICBpZiAodHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShjc3NNYXBwaW5nKSkpKTtcbiAgICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG4gICAgdmFyIHNvdXJjZVVSTHMgPSBjc3NNYXBwaW5nLnNvdXJjZXMubWFwKGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgIHJldHVybiBcIi8qIyBzb3VyY2VVUkw9XCIuY29uY2F0KGNzc01hcHBpbmcuc291cmNlUm9vdCB8fCBcIlwiKS5jb25jYXQoc291cmNlLCBcIiAqL1wiKTtcbiAgICB9KTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKFwiXFxuXCIpO1xuICB9XG5cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKFwiXFxuXCIpO1xufTsiLCIvKipcbiAqIEBsaWNlbnNlIFJlYWN0XG4gKiByZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuLypcbiBNb2Rlcm5penIgMy4wLjBwcmUgKEN1c3RvbSBCdWlsZCkgfCBNSVRcbiovXG4ndXNlIHN0cmljdCc7dmFyIGFhPXJlcXVpcmUoXCJyZWFjdFwiKSxjYT1yZXF1aXJlKFwic2NoZWR1bGVyXCIpO2Z1bmN0aW9uIHAoYSl7Zm9yKHZhciBiPVwiaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnQ9XCIrYSxjPTE7Yzxhcmd1bWVudHMubGVuZ3RoO2MrKyliKz1cIiZhcmdzW109XCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tjXSk7cmV0dXJuXCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIrYStcIjsgdmlzaXQgXCIrYitcIiBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuXCJ9dmFyIGRhPW5ldyBTZXQsZWE9e307ZnVuY3Rpb24gZmEoYSxiKXtoYShhLGIpO2hhKGErXCJDYXB0dXJlXCIsYil9XG5mdW5jdGlvbiBoYShhLGIpe2VhW2FdPWI7Zm9yKGE9MDthPGIubGVuZ3RoO2ErKylkYS5hZGQoYlthXSl9XG52YXIgaWE9IShcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvd3x8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3cuZG9jdW1lbnR8fFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpLGphPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksa2E9L15bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRdWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXFwtLjAtOVxcdTAwQjdcXHUwMzAwLVxcdTAzNkZcXHUyMDNGLVxcdTIwNDBdKiQvLGxhPVxue30sbWE9e307ZnVuY3Rpb24gb2EoYSl7aWYoamEuY2FsbChtYSxhKSlyZXR1cm4hMDtpZihqYS5jYWxsKGxhLGEpKXJldHVybiExO2lmKGthLnRlc3QoYSkpcmV0dXJuIG1hW2FdPSEwO2xhW2FdPSEwO3JldHVybiExfWZ1bmN0aW9uIHBhKGEsYixjLGQpe2lmKG51bGwhPT1jJiYwPT09Yy50eXBlKXJldHVybiExO3N3aXRjaCh0eXBlb2YgYil7Y2FzZSBcImZ1bmN0aW9uXCI6Y2FzZSBcInN5bWJvbFwiOnJldHVybiEwO2Nhc2UgXCJib29sZWFuXCI6aWYoZClyZXR1cm4hMTtpZihudWxsIT09YylyZXR1cm4hYy5hY2NlcHRzQm9vbGVhbnM7YT1hLnRvTG93ZXJDYXNlKCkuc2xpY2UoMCw1KTtyZXR1cm5cImRhdGEtXCIhPT1hJiZcImFyaWEtXCIhPT1hO2RlZmF1bHQ6cmV0dXJuITF9fVxuZnVuY3Rpb24gcWEoYSxiLGMsZCl7aWYobnVsbD09PWJ8fFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYnx8cGEoYSxiLGMsZCkpcmV0dXJuITA7aWYoZClyZXR1cm4hMTtpZihudWxsIT09Yylzd2l0Y2goYy50eXBlKXtjYXNlIDM6cmV0dXJuIWI7Y2FzZSA0OnJldHVybiExPT09YjtjYXNlIDU6cmV0dXJuIGlzTmFOKGIpO2Nhc2UgNjpyZXR1cm4gaXNOYU4oYil8fDE+Yn1yZXR1cm4hMX1mdW5jdGlvbiB2KGEsYixjLGQsZSxmLGcpe3RoaXMuYWNjZXB0c0Jvb2xlYW5zPTI9PT1ifHwzPT09Ynx8ND09PWI7dGhpcy5hdHRyaWJ1dGVOYW1lPWQ7dGhpcy5hdHRyaWJ1dGVOYW1lc3BhY2U9ZTt0aGlzLm11c3RVc2VQcm9wZXJ0eT1jO3RoaXMucHJvcGVydHlOYW1lPWE7dGhpcy50eXBlPWI7dGhpcy5zYW5pdGl6ZVVSTD1mO3RoaXMucmVtb3ZlRW1wdHlTdHJpbmc9Z312YXIgej17fTtcblwiY2hpbGRyZW4gZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwgZGVmYXVsdFZhbHVlIGRlZmF1bHRDaGVja2VkIGlubmVySFRNTCBzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmcgc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nIHN0eWxlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDAsITEsYSxudWxsLCExLCExKX0pO1tbXCJhY2NlcHRDaGFyc2V0XCIsXCJhY2NlcHQtY2hhcnNldFwiXSxbXCJjbGFzc05hbWVcIixcImNsYXNzXCJdLFtcImh0bWxGb3JcIixcImZvclwiXSxbXCJodHRwRXF1aXZcIixcImh0dHAtZXF1aXZcIl1dLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YVswXTt6W2JdPW5ldyB2KGIsMSwhMSxhWzFdLG51bGwsITEsITEpfSk7W1wiY29udGVudEVkaXRhYmxlXCIsXCJkcmFnZ2FibGVcIixcInNwZWxsQ2hlY2tcIixcInZhbHVlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDIsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEsITEpfSk7XG5bXCJhdXRvUmV2ZXJzZVwiLFwiZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZFwiLFwiZm9jdXNhYmxlXCIsXCJwcmVzZXJ2ZUFscGhhXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDIsITEsYSxudWxsLCExLCExKX0pO1wiYWxsb3dGdWxsU2NyZWVuIGFzeW5jIGF1dG9Gb2N1cyBhdXRvUGxheSBjb250cm9scyBkZWZhdWx0IGRlZmVyIGRpc2FibGVkIGRpc2FibGVQaWN0dXJlSW5QaWN0dXJlIGRpc2FibGVSZW1vdGVQbGF5YmFjayBmb3JtTm9WYWxpZGF0ZSBoaWRkZW4gbG9vcCBub01vZHVsZSBub1ZhbGlkYXRlIG9wZW4gcGxheXNJbmxpbmUgcmVhZE9ubHkgcmVxdWlyZWQgcmV2ZXJzZWQgc2NvcGVkIHNlYW1sZXNzIGl0ZW1TY29wZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHYoYSwzLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExLCExKX0pO1xuW1wiY2hlY2tlZFwiLFwibXVsdGlwbGVcIixcIm11dGVkXCIsXCJzZWxlY3RlZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHYoYSwzLCEwLGEsbnVsbCwhMSwhMSl9KTtbXCJjYXB0dXJlXCIsXCJkb3dubG9hZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHYoYSw0LCExLGEsbnVsbCwhMSwhMSl9KTtbXCJjb2xzXCIsXCJyb3dzXCIsXCJzaXplXCIsXCJzcGFuXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDYsITEsYSxudWxsLCExLCExKX0pO1tcInJvd1NwYW5cIixcInN0YXJ0XCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDUsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEsITEpfSk7dmFyIHJhPS9bXFwtOl0oW2Etel0pL2c7ZnVuY3Rpb24gc2EoYSl7cmV0dXJuIGFbMV0udG9VcHBlckNhc2UoKX1cblwiYWNjZW50LWhlaWdodCBhbGlnbm1lbnQtYmFzZWxpbmUgYXJhYmljLWZvcm0gYmFzZWxpbmUtc2hpZnQgY2FwLWhlaWdodCBjbGlwLXBhdGggY2xpcC1ydWxlIGNvbG9yLWludGVycG9sYXRpb24gY29sb3ItaW50ZXJwb2xhdGlvbi1maWx0ZXJzIGNvbG9yLXByb2ZpbGUgY29sb3ItcmVuZGVyaW5nIGRvbWluYW50LWJhc2VsaW5lIGVuYWJsZS1iYWNrZ3JvdW5kIGZpbGwtb3BhY2l0eSBmaWxsLXJ1bGUgZmxvb2QtY29sb3IgZmxvb2Qtb3BhY2l0eSBmb250LWZhbWlseSBmb250LXNpemUgZm9udC1zaXplLWFkanVzdCBmb250LXN0cmV0Y2ggZm9udC1zdHlsZSBmb250LXZhcmlhbnQgZm9udC13ZWlnaHQgZ2x5cGgtbmFtZSBnbHlwaC1vcmllbnRhdGlvbi1ob3Jpem9udGFsIGdseXBoLW9yaWVudGF0aW9uLXZlcnRpY2FsIGhvcml6LWFkdi14IGhvcml6LW9yaWdpbi14IGltYWdlLXJlbmRlcmluZyBsZXR0ZXItc3BhY2luZyBsaWdodGluZy1jb2xvciBtYXJrZXItZW5kIG1hcmtlci1taWQgbWFya2VyLXN0YXJ0IG92ZXJsaW5lLXBvc2l0aW9uIG92ZXJsaW5lLXRoaWNrbmVzcyBwYWludC1vcmRlciBwYW5vc2UtMSBwb2ludGVyLWV2ZW50cyByZW5kZXJpbmctaW50ZW50IHNoYXBlLXJlbmRlcmluZyBzdG9wLWNvbG9yIHN0b3Atb3BhY2l0eSBzdHJpa2V0aHJvdWdoLXBvc2l0aW9uIHN0cmlrZXRocm91Z2gtdGhpY2tuZXNzIHN0cm9rZS1kYXNoYXJyYXkgc3Ryb2tlLWRhc2hvZmZzZXQgc3Ryb2tlLWxpbmVjYXAgc3Ryb2tlLWxpbmVqb2luIHN0cm9rZS1taXRlcmxpbWl0IHN0cm9rZS1vcGFjaXR5IHN0cm9rZS13aWR0aCB0ZXh0LWFuY2hvciB0ZXh0LWRlY29yYXRpb24gdGV4dC1yZW5kZXJpbmcgdW5kZXJsaW5lLXBvc2l0aW9uIHVuZGVybGluZS10aGlja25lc3MgdW5pY29kZS1iaWRpIHVuaWNvZGUtcmFuZ2UgdW5pdHMtcGVyLWVtIHYtYWxwaGFiZXRpYyB2LWhhbmdpbmcgdi1pZGVvZ3JhcGhpYyB2LW1hdGhlbWF0aWNhbCB2ZWN0b3ItZWZmZWN0IHZlcnQtYWR2LXkgdmVydC1vcmlnaW4teCB2ZXJ0LW9yaWdpbi15IHdvcmQtc3BhY2luZyB3cml0aW5nLW1vZGUgeG1sbnM6eGxpbmsgeC1oZWlnaHRcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UocmEsXG5zYSk7eltiXT1uZXcgdihiLDEsITEsYSxudWxsLCExLCExKX0pO1wieGxpbms6YWN0dWF0ZSB4bGluazphcmNyb2xlIHhsaW5rOnJvbGUgeGxpbms6c2hvdyB4bGluazp0aXRsZSB4bGluazp0eXBlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKHJhLHNhKTt6W2JdPW5ldyB2KGIsMSwhMSxhLFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLCExLCExKX0pO1tcInhtbDpiYXNlXCIsXCJ4bWw6bGFuZ1wiLFwieG1sOnNwYWNlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKHJhLHNhKTt6W2JdPW5ldyB2KGIsMSwhMSxhLFwiaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlXCIsITEsITEpfSk7W1widGFiSW5kZXhcIixcImNyb3NzT3JpZ2luXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDEsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEsITEpfSk7XG56LnhsaW5rSHJlZj1uZXcgdihcInhsaW5rSHJlZlwiLDEsITEsXCJ4bGluazpocmVmXCIsXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsITAsITEpO1tcInNyY1wiLFwiaHJlZlwiLFwiYWN0aW9uXCIsXCJmb3JtQWN0aW9uXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDEsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITAsITApfSk7XG5mdW5jdGlvbiB0YShhLGIsYyxkKXt2YXIgZT16Lmhhc093blByb3BlcnR5KGIpP3pbYl06bnVsbDtpZihudWxsIT09ZT8wIT09ZS50eXBlOmR8fCEoMjxiLmxlbmd0aCl8fFwib1wiIT09YlswXSYmXCJPXCIhPT1iWzBdfHxcIm5cIiE9PWJbMV0mJlwiTlwiIT09YlsxXSlxYShiLGMsZSxkKSYmKGM9bnVsbCksZHx8bnVsbD09PWU/b2EoYikmJihudWxsPT09Yz9hLnJlbW92ZUF0dHJpYnV0ZShiKTphLnNldEF0dHJpYnV0ZShiLFwiXCIrYykpOmUubXVzdFVzZVByb3BlcnR5P2FbZS5wcm9wZXJ0eU5hbWVdPW51bGw9PT1jPzM9PT1lLnR5cGU/ITE6XCJcIjpjOihiPWUuYXR0cmlidXRlTmFtZSxkPWUuYXR0cmlidXRlTmFtZXNwYWNlLG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOihlPWUudHlwZSxjPTM9PT1lfHw0PT09ZSYmITA9PT1jP1wiXCI6XCJcIitjLGQ/YS5zZXRBdHRyaWJ1dGVOUyhkLGIsYyk6YS5zZXRBdHRyaWJ1dGUoYixjKSkpfVxudmFyIHVhPWFhLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVELHZhPVN5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpLHdhPVN5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIikseWE9U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpLHphPVN5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKSxBYT1TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIiksQmE9U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpLENhPVN5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpLERhPVN5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKSxFYT1TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIiksRmE9U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlX2xpc3RcIiksR2E9U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIiksSGE9U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIik7U3ltYm9sLmZvcihcInJlYWN0LnNjb3BlXCIpO1N5bWJvbC5mb3IoXCJyZWFjdC5kZWJ1Z190cmFjZV9tb2RlXCIpO1xudmFyIElhPVN5bWJvbC5mb3IoXCJyZWFjdC5vZmZzY3JlZW5cIik7U3ltYm9sLmZvcihcInJlYWN0LmxlZ2FjeV9oaWRkZW5cIik7U3ltYm9sLmZvcihcInJlYWN0LmNhY2hlXCIpO1N5bWJvbC5mb3IoXCJyZWFjdC50cmFjaW5nX21hcmtlclwiKTt2YXIgSmE9U3ltYm9sLml0ZXJhdG9yO2Z1bmN0aW9uIEthKGEpe2lmKG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGEpcmV0dXJuIG51bGw7YT1KYSYmYVtKYV18fGFbXCJAQGl0ZXJhdG9yXCJdO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2E6bnVsbH12YXIgQT1PYmplY3QuYXNzaWduLExhO2Z1bmN0aW9uIE1hKGEpe2lmKHZvaWQgMD09PUxhKXRyeXt0aHJvdyBFcnJvcigpO31jYXRjaChjKXt2YXIgYj1jLnN0YWNrLnRyaW0oKS5tYXRjaCgvXFxuKCAqKGF0ICk/KS8pO0xhPWImJmJbMV18fFwiXCJ9cmV0dXJuXCJcXG5cIitMYSthfXZhciBOYT0hMTtcbmZ1bmN0aW9uIE9hKGEsYil7aWYoIWF8fE5hKXJldHVyblwiXCI7TmE9ITA7dmFyIGM9RXJyb3IucHJlcGFyZVN0YWNrVHJhY2U7RXJyb3IucHJlcGFyZVN0YWNrVHJhY2U9dm9pZCAwO3RyeXtpZihiKWlmKGI9ZnVuY3Rpb24oKXt0aHJvdyBFcnJvcigpO30sT2JqZWN0LmRlZmluZVByb3BlcnR5KGIucHJvdG90eXBlLFwicHJvcHNcIix7c2V0OmZ1bmN0aW9uKCl7dGhyb3cgRXJyb3IoKTt9fSksXCJvYmplY3RcIj09PXR5cGVvZiBSZWZsZWN0JiZSZWZsZWN0LmNvbnN0cnVjdCl7dHJ5e1JlZmxlY3QuY29uc3RydWN0KGIsW10pfWNhdGNoKGwpe3ZhciBkPWx9UmVmbGVjdC5jb25zdHJ1Y3QoYSxbXSxiKX1lbHNle3RyeXtiLmNhbGwoKX1jYXRjaChsKXtkPWx9YS5jYWxsKGIucHJvdG90eXBlKX1lbHNle3RyeXt0aHJvdyBFcnJvcigpO31jYXRjaChsKXtkPWx9YSgpfX1jYXRjaChsKXtpZihsJiZkJiZcInN0cmluZ1wiPT09dHlwZW9mIGwuc3RhY2spe2Zvcih2YXIgZT1sLnN0YWNrLnNwbGl0KFwiXFxuXCIpLFxuZj1kLnN0YWNrLnNwbGl0KFwiXFxuXCIpLGc9ZS5sZW5ndGgtMSxoPWYubGVuZ3RoLTE7MTw9ZyYmMDw9aCYmZVtnXSE9PWZbaF07KWgtLTtmb3IoOzE8PWcmJjA8PWg7Zy0tLGgtLSlpZihlW2ddIT09ZltoXSl7aWYoMSE9PWd8fDEhPT1oKXtkbyBpZihnLS0saC0tLDA+aHx8ZVtnXSE9PWZbaF0pe3ZhciBrPVwiXFxuXCIrZVtnXS5yZXBsYWNlKFwiIGF0IG5ldyBcIixcIiBhdCBcIik7YS5kaXNwbGF5TmFtZSYmay5pbmNsdWRlcyhcIjxhbm9ueW1vdXM+XCIpJiYoaz1rLnJlcGxhY2UoXCI8YW5vbnltb3VzPlwiLGEuZGlzcGxheU5hbWUpKTtyZXR1cm4ga313aGlsZSgxPD1nJiYwPD1oKX1icmVha319fWZpbmFsbHl7TmE9ITEsRXJyb3IucHJlcGFyZVN0YWNrVHJhY2U9Y31yZXR1cm4oYT1hP2EuZGlzcGxheU5hbWV8fGEubmFtZTpcIlwiKT9NYShhKTpcIlwifVxuZnVuY3Rpb24gUGEoYSl7c3dpdGNoKGEudGFnKXtjYXNlIDU6cmV0dXJuIE1hKGEudHlwZSk7Y2FzZSAxNjpyZXR1cm4gTWEoXCJMYXp5XCIpO2Nhc2UgMTM6cmV0dXJuIE1hKFwiU3VzcGVuc2VcIik7Y2FzZSAxOTpyZXR1cm4gTWEoXCJTdXNwZW5zZUxpc3RcIik7Y2FzZSAwOmNhc2UgMjpjYXNlIDE1OnJldHVybiBhPU9hKGEudHlwZSwhMSksYTtjYXNlIDExOnJldHVybiBhPU9hKGEudHlwZS5yZW5kZXIsITEpLGE7Y2FzZSAxOnJldHVybiBhPU9hKGEudHlwZSwhMCksYTtkZWZhdWx0OnJldHVyblwiXCJ9fVxuZnVuY3Rpb24gUWEoYSl7aWYobnVsbD09YSlyZXR1cm4gbnVsbDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlyZXR1cm4gYS5kaXNwbGF5TmFtZXx8YS5uYW1lfHxudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYSlyZXR1cm4gYTtzd2l0Y2goYSl7Y2FzZSB5YTpyZXR1cm5cIkZyYWdtZW50XCI7Y2FzZSB3YTpyZXR1cm5cIlBvcnRhbFwiO2Nhc2UgQWE6cmV0dXJuXCJQcm9maWxlclwiO2Nhc2UgemE6cmV0dXJuXCJTdHJpY3RNb2RlXCI7Y2FzZSBFYTpyZXR1cm5cIlN1c3BlbnNlXCI7Y2FzZSBGYTpyZXR1cm5cIlN1c3BlbnNlTGlzdFwifWlmKFwib2JqZWN0XCI9PT10eXBlb2YgYSlzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBDYTpyZXR1cm4oYS5kaXNwbGF5TmFtZXx8XCJDb250ZXh0XCIpK1wiLkNvbnN1bWVyXCI7Y2FzZSBCYTpyZXR1cm4oYS5fY29udGV4dC5kaXNwbGF5TmFtZXx8XCJDb250ZXh0XCIpK1wiLlByb3ZpZGVyXCI7Y2FzZSBEYTp2YXIgYj1hLnJlbmRlcjthPWEuZGlzcGxheU5hbWU7YXx8KGE9Yi5kaXNwbGF5TmFtZXx8XG5iLm5hbWV8fFwiXCIsYT1cIlwiIT09YT9cIkZvcndhcmRSZWYoXCIrYStcIilcIjpcIkZvcndhcmRSZWZcIik7cmV0dXJuIGE7Y2FzZSBHYTpyZXR1cm4gYj1hLmRpc3BsYXlOYW1lfHxudWxsLG51bGwhPT1iP2I6UWEoYS50eXBlKXx8XCJNZW1vXCI7Y2FzZSBIYTpiPWEuX3BheWxvYWQ7YT1hLl9pbml0O3RyeXtyZXR1cm4gUWEoYShiKSl9Y2F0Y2goYyl7fX1yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIFJhKGEpe3ZhciBiPWEudHlwZTtzd2l0Y2goYS50YWcpe2Nhc2UgMjQ6cmV0dXJuXCJDYWNoZVwiO2Nhc2UgOTpyZXR1cm4oYi5kaXNwbGF5TmFtZXx8XCJDb250ZXh0XCIpK1wiLkNvbnN1bWVyXCI7Y2FzZSAxMDpyZXR1cm4oYi5fY29udGV4dC5kaXNwbGF5TmFtZXx8XCJDb250ZXh0XCIpK1wiLlByb3ZpZGVyXCI7Y2FzZSAxODpyZXR1cm5cIkRlaHlkcmF0ZWRGcmFnbWVudFwiO2Nhc2UgMTE6cmV0dXJuIGE9Yi5yZW5kZXIsYT1hLmRpc3BsYXlOYW1lfHxhLm5hbWV8fFwiXCIsYi5kaXNwbGF5TmFtZXx8KFwiXCIhPT1hP1wiRm9yd2FyZFJlZihcIithK1wiKVwiOlwiRm9yd2FyZFJlZlwiKTtjYXNlIDc6cmV0dXJuXCJGcmFnbWVudFwiO2Nhc2UgNTpyZXR1cm4gYjtjYXNlIDQ6cmV0dXJuXCJQb3J0YWxcIjtjYXNlIDM6cmV0dXJuXCJSb290XCI7Y2FzZSA2OnJldHVyblwiVGV4dFwiO2Nhc2UgMTY6cmV0dXJuIFFhKGIpO2Nhc2UgODpyZXR1cm4gYj09PXphP1wiU3RyaWN0TW9kZVwiOlwiTW9kZVwiO2Nhc2UgMjI6cmV0dXJuXCJPZmZzY3JlZW5cIjtcbmNhc2UgMTI6cmV0dXJuXCJQcm9maWxlclwiO2Nhc2UgMjE6cmV0dXJuXCJTY29wZVwiO2Nhc2UgMTM6cmV0dXJuXCJTdXNwZW5zZVwiO2Nhc2UgMTk6cmV0dXJuXCJTdXNwZW5zZUxpc3RcIjtjYXNlIDI1OnJldHVyblwiVHJhY2luZ01hcmtlclwiO2Nhc2UgMTpjYXNlIDA6Y2FzZSAxNzpjYXNlIDI6Y2FzZSAxNDpjYXNlIDE1OmlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiKXJldHVybiBiLmRpc3BsYXlOYW1lfHxiLm5hbWV8fG51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBiKXJldHVybiBifXJldHVybiBudWxsfWZ1bmN0aW9uIFNhKGEpe3N3aXRjaCh0eXBlb2YgYSl7Y2FzZSBcImJvb2xlYW5cIjpjYXNlIFwibnVtYmVyXCI6Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJ1bmRlZmluZWRcIjpyZXR1cm4gYTtjYXNlIFwib2JqZWN0XCI6cmV0dXJuIGE7ZGVmYXVsdDpyZXR1cm5cIlwifX1cbmZ1bmN0aW9uIFRhKGEpe3ZhciBiPWEudHlwZTtyZXR1cm4oYT1hLm5vZGVOYW1lKSYmXCJpbnB1dFwiPT09YS50b0xvd2VyQ2FzZSgpJiYoXCJjaGVja2JveFwiPT09Ynx8XCJyYWRpb1wiPT09Yil9XG5mdW5jdGlvbiBVYShhKXt2YXIgYj1UYShhKT9cImNoZWNrZWRcIjpcInZhbHVlXCIsYz1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGEuY29uc3RydWN0b3IucHJvdG90eXBlLGIpLGQ9XCJcIithW2JdO2lmKCFhLmhhc093blByb3BlcnR5KGIpJiZcInVuZGVmaW5lZFwiIT09dHlwZW9mIGMmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmdldCYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuc2V0KXt2YXIgZT1jLmdldCxmPWMuc2V0O09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2NvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZS5jYWxsKHRoaXMpfSxzZXQ6ZnVuY3Rpb24oYSl7ZD1cIlwiK2E7Zi5jYWxsKHRoaXMsYSl9fSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7ZW51bWVyYWJsZTpjLmVudW1lcmFibGV9KTtyZXR1cm57Z2V0VmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gZH0sc2V0VmFsdWU6ZnVuY3Rpb24oYSl7ZD1cIlwiK2F9LHN0b3BUcmFja2luZzpmdW5jdGlvbigpe2EuX3ZhbHVlVHJhY2tlcj1cbm51bGw7ZGVsZXRlIGFbYl19fX19ZnVuY3Rpb24gVmEoYSl7YS5fdmFsdWVUcmFja2VyfHwoYS5fdmFsdWVUcmFja2VyPVVhKGEpKX1mdW5jdGlvbiBXYShhKXtpZighYSlyZXR1cm4hMTt2YXIgYj1hLl92YWx1ZVRyYWNrZXI7aWYoIWIpcmV0dXJuITA7dmFyIGM9Yi5nZXRWYWx1ZSgpO3ZhciBkPVwiXCI7YSYmKGQ9VGEoYSk/YS5jaGVja2VkP1widHJ1ZVwiOlwiZmFsc2VcIjphLnZhbHVlKTthPWQ7cmV0dXJuIGEhPT1jPyhiLnNldFZhbHVlKGEpLCEwKTohMX1mdW5jdGlvbiBYYShhKXthPWF8fChcInVuZGVmaW5lZFwiIT09dHlwZW9mIGRvY3VtZW50P2RvY3VtZW50OnZvaWQgMCk7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBhKXJldHVybiBudWxsO3RyeXtyZXR1cm4gYS5hY3RpdmVFbGVtZW50fHxhLmJvZHl9Y2F0Y2goYil7cmV0dXJuIGEuYm9keX19XG5mdW5jdGlvbiBZYShhLGIpe3ZhciBjPWIuY2hlY2tlZDtyZXR1cm4gQSh7fSxiLHtkZWZhdWx0Q2hlY2tlZDp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCx2YWx1ZTp2b2lkIDAsY2hlY2tlZDpudWxsIT1jP2M6YS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkfSl9ZnVuY3Rpb24gWmEoYSxiKXt2YXIgYz1udWxsPT1iLmRlZmF1bHRWYWx1ZT9cIlwiOmIuZGVmYXVsdFZhbHVlLGQ9bnVsbCE9Yi5jaGVja2VkP2IuY2hlY2tlZDpiLmRlZmF1bHRDaGVja2VkO2M9U2EobnVsbCE9Yi52YWx1ZT9iLnZhbHVlOmMpO2EuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbENoZWNrZWQ6ZCxpbml0aWFsVmFsdWU6Yyxjb250cm9sbGVkOlwiY2hlY2tib3hcIj09PWIudHlwZXx8XCJyYWRpb1wiPT09Yi50eXBlP251bGwhPWIuY2hlY2tlZDpudWxsIT1iLnZhbHVlfX1mdW5jdGlvbiBhYihhLGIpe2I9Yi5jaGVja2VkO251bGwhPWImJnRhKGEsXCJjaGVja2VkXCIsYiwhMSl9XG5mdW5jdGlvbiBiYihhLGIpe2FiKGEsYik7dmFyIGM9U2EoYi52YWx1ZSksZD1iLnR5cGU7aWYobnVsbCE9YylpZihcIm51bWJlclwiPT09ZCl7aWYoMD09PWMmJlwiXCI9PT1hLnZhbHVlfHxhLnZhbHVlIT1jKWEudmFsdWU9XCJcIitjfWVsc2UgYS52YWx1ZSE9PVwiXCIrYyYmKGEudmFsdWU9XCJcIitjKTtlbHNlIGlmKFwic3VibWl0XCI9PT1kfHxcInJlc2V0XCI9PT1kKXthLnJlbW92ZUF0dHJpYnV0ZShcInZhbHVlXCIpO3JldHVybn1iLmhhc093blByb3BlcnR5KFwidmFsdWVcIik/Y2IoYSxiLnR5cGUsYyk6Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSYmY2IoYSxiLnR5cGUsU2EoYi5kZWZhdWx0VmFsdWUpKTtudWxsPT1iLmNoZWNrZWQmJm51bGwhPWIuZGVmYXVsdENoZWNrZWQmJihhLmRlZmF1bHRDaGVja2VkPSEhYi5kZWZhdWx0Q2hlY2tlZCl9XG5mdW5jdGlvbiBkYihhLGIsYyl7aWYoYi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpfHxiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpKXt2YXIgZD1iLnR5cGU7aWYoIShcInN1Ym1pdFwiIT09ZCYmXCJyZXNldFwiIT09ZHx8dm9pZCAwIT09Yi52YWx1ZSYmbnVsbCE9PWIudmFsdWUpKXJldHVybjtiPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTtjfHxiPT09YS52YWx1ZXx8KGEudmFsdWU9Yik7YS5kZWZhdWx0VmFsdWU9Yn1jPWEubmFtZTtcIlwiIT09YyYmKGEubmFtZT1cIlwiKTthLmRlZmF1bHRDaGVja2VkPSEhYS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkO1wiXCIhPT1jJiYoYS5uYW1lPWMpfVxuZnVuY3Rpb24gY2IoYSxiLGMpe2lmKFwibnVtYmVyXCIhPT1ifHxYYShhLm93bmVyRG9jdW1lbnQpIT09YSludWxsPT1jP2EuZGVmYXVsdFZhbHVlPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTphLmRlZmF1bHRWYWx1ZSE9PVwiXCIrYyYmKGEuZGVmYXVsdFZhbHVlPVwiXCIrYyl9dmFyIGViPUFycmF5LmlzQXJyYXk7XG5mdW5jdGlvbiBmYihhLGIsYyxkKXthPWEub3B0aW9ucztpZihiKXtiPXt9O2Zvcih2YXIgZT0wO2U8Yy5sZW5ndGg7ZSsrKWJbXCIkXCIrY1tlXV09ITA7Zm9yKGM9MDtjPGEubGVuZ3RoO2MrKyllPWIuaGFzT3duUHJvcGVydHkoXCIkXCIrYVtjXS52YWx1ZSksYVtjXS5zZWxlY3RlZCE9PWUmJihhW2NdLnNlbGVjdGVkPWUpLGUmJmQmJihhW2NdLmRlZmF1bHRTZWxlY3RlZD0hMCl9ZWxzZXtjPVwiXCIrU2EoYyk7Yj1udWxsO2ZvcihlPTA7ZTxhLmxlbmd0aDtlKyspe2lmKGFbZV0udmFsdWU9PT1jKXthW2VdLnNlbGVjdGVkPSEwO2QmJihhW2VdLmRlZmF1bHRTZWxlY3RlZD0hMCk7cmV0dXJufW51bGwhPT1ifHxhW2VdLmRpc2FibGVkfHwoYj1hW2VdKX1udWxsIT09YiYmKGIuc2VsZWN0ZWQ9ITApfX1cbmZ1bmN0aW9uIGdiKGEsYil7aWYobnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCl0aHJvdyBFcnJvcihwKDkxKSk7cmV0dXJuIEEoe30sYix7dmFsdWU6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsY2hpbGRyZW46XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlfSl9ZnVuY3Rpb24gaGIoYSxiKXt2YXIgYz1iLnZhbHVlO2lmKG51bGw9PWMpe2M9Yi5jaGlsZHJlbjtiPWIuZGVmYXVsdFZhbHVlO2lmKG51bGwhPWMpe2lmKG51bGwhPWIpdGhyb3cgRXJyb3IocCg5MikpO2lmKGViKGMpKXtpZigxPGMubGVuZ3RoKXRocm93IEVycm9yKHAoOTMpKTtjPWNbMF19Yj1jfW51bGw9PWImJihiPVwiXCIpO2M9Yn1hLl93cmFwcGVyU3RhdGU9e2luaXRpYWxWYWx1ZTpTYShjKX19XG5mdW5jdGlvbiBpYihhLGIpe3ZhciBjPVNhKGIudmFsdWUpLGQ9U2EoYi5kZWZhdWx0VmFsdWUpO251bGwhPWMmJihjPVwiXCIrYyxjIT09YS52YWx1ZSYmKGEudmFsdWU9YyksbnVsbD09Yi5kZWZhdWx0VmFsdWUmJmEuZGVmYXVsdFZhbHVlIT09YyYmKGEuZGVmYXVsdFZhbHVlPWMpKTtudWxsIT1kJiYoYS5kZWZhdWx0VmFsdWU9XCJcIitkKX1mdW5jdGlvbiBqYihhKXt2YXIgYj1hLnRleHRDb250ZW50O2I9PT1hLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlJiZcIlwiIT09YiYmbnVsbCE9PWImJihhLnZhbHVlPWIpfWZ1bmN0aW9uIGtiKGEpe3N3aXRjaChhKXtjYXNlIFwic3ZnXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiO2Nhc2UgXCJtYXRoXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCI7ZGVmYXVsdDpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIn19XG5mdW5jdGlvbiBsYihhLGIpe3JldHVybiBudWxsPT1hfHxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIj09PWE/a2IoYik6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPT09YSYmXCJmb3JlaWduT2JqZWN0XCI9PT1iP1wiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiOmF9XG52YXIgbWIsbmI9ZnVuY3Rpb24oYSl7cmV0dXJuXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBNU0FwcCYmTVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24/ZnVuY3Rpb24oYixjLGQsZSl7TVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24oZnVuY3Rpb24oKXtyZXR1cm4gYShiLGMsZCxlKX0pfTphfShmdW5jdGlvbihhLGIpe2lmKFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiE9PWEubmFtZXNwYWNlVVJJfHxcImlubmVySFRNTFwiaW4gYSlhLmlubmVySFRNTD1iO2Vsc2V7bWI9bWJ8fGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7bWIuaW5uZXJIVE1MPVwiPHN2Zz5cIitiLnZhbHVlT2YoKS50b1N0cmluZygpK1wiPC9zdmc+XCI7Zm9yKGI9bWIuZmlyc3RDaGlsZDthLmZpcnN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoYS5maXJzdENoaWxkKTtmb3IoO2IuZmlyc3RDaGlsZDspYS5hcHBlbmRDaGlsZChiLmZpcnN0Q2hpbGQpfX0pO1xuZnVuY3Rpb24gb2IoYSxiKXtpZihiKXt2YXIgYz1hLmZpcnN0Q2hpbGQ7aWYoYyYmYz09PWEubGFzdENoaWxkJiYzPT09Yy5ub2RlVHlwZSl7Yy5ub2RlVmFsdWU9YjtyZXR1cm59fWEudGV4dENvbnRlbnQ9Yn1cbnZhciBwYj17YW5pbWF0aW9uSXRlcmF0aW9uQ291bnQ6ITAsYXNwZWN0UmF0aW86ITAsYm9yZGVySW1hZ2VPdXRzZXQ6ITAsYm9yZGVySW1hZ2VTbGljZTohMCxib3JkZXJJbWFnZVdpZHRoOiEwLGJveEZsZXg6ITAsYm94RmxleEdyb3VwOiEwLGJveE9yZGluYWxHcm91cDohMCxjb2x1bW5Db3VudDohMCxjb2x1bW5zOiEwLGZsZXg6ITAsZmxleEdyb3c6ITAsZmxleFBvc2l0aXZlOiEwLGZsZXhTaHJpbms6ITAsZmxleE5lZ2F0aXZlOiEwLGZsZXhPcmRlcjohMCxncmlkQXJlYTohMCxncmlkUm93OiEwLGdyaWRSb3dFbmQ6ITAsZ3JpZFJvd1NwYW46ITAsZ3JpZFJvd1N0YXJ0OiEwLGdyaWRDb2x1bW46ITAsZ3JpZENvbHVtbkVuZDohMCxncmlkQ29sdW1uU3BhbjohMCxncmlkQ29sdW1uU3RhcnQ6ITAsZm9udFdlaWdodDohMCxsaW5lQ2xhbXA6ITAsbGluZUhlaWdodDohMCxvcGFjaXR5OiEwLG9yZGVyOiEwLG9ycGhhbnM6ITAsdGFiU2l6ZTohMCx3aWRvd3M6ITAsekluZGV4OiEwLFxuem9vbTohMCxmaWxsT3BhY2l0eTohMCxmbG9vZE9wYWNpdHk6ITAsc3RvcE9wYWNpdHk6ITAsc3Ryb2tlRGFzaGFycmF5OiEwLHN0cm9rZURhc2hvZmZzZXQ6ITAsc3Ryb2tlTWl0ZXJsaW1pdDohMCxzdHJva2VPcGFjaXR5OiEwLHN0cm9rZVdpZHRoOiEwfSxxYj1bXCJXZWJraXRcIixcIm1zXCIsXCJNb3pcIixcIk9cIl07T2JqZWN0LmtleXMocGIpLmZvckVhY2goZnVuY3Rpb24oYSl7cWIuZm9yRWFjaChmdW5jdGlvbihiKXtiPWIrYS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSthLnN1YnN0cmluZygxKTtwYltiXT1wYlthXX0pfSk7ZnVuY3Rpb24gcmIoYSxiLGMpe3JldHVybiBudWxsPT1ifHxcImJvb2xlYW5cIj09PXR5cGVvZiBifHxcIlwiPT09Yj9cIlwiOmN8fFwibnVtYmVyXCIhPT10eXBlb2YgYnx8MD09PWJ8fHBiLmhhc093blByb3BlcnR5KGEpJiZwYlthXT8oXCJcIitiKS50cmltKCk6YitcInB4XCJ9XG5mdW5jdGlvbiBzYihhLGIpe2E9YS5zdHlsZTtmb3IodmFyIGMgaW4gYilpZihiLmhhc093blByb3BlcnR5KGMpKXt2YXIgZD0wPT09Yy5pbmRleE9mKFwiLS1cIiksZT1yYihjLGJbY10sZCk7XCJmbG9hdFwiPT09YyYmKGM9XCJjc3NGbG9hdFwiKTtkP2Euc2V0UHJvcGVydHkoYyxlKTphW2NdPWV9fXZhciB0Yj1BKHttZW51aXRlbTohMH0se2FyZWE6ITAsYmFzZTohMCxicjohMCxjb2w6ITAsZW1iZWQ6ITAsaHI6ITAsaW1nOiEwLGlucHV0OiEwLGtleWdlbjohMCxsaW5rOiEwLG1ldGE6ITAscGFyYW06ITAsc291cmNlOiEwLHRyYWNrOiEwLHdicjohMH0pO1xuZnVuY3Rpb24gdWIoYSxiKXtpZihiKXtpZih0YlthXSYmKG51bGwhPWIuY2hpbGRyZW58fG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpKXRocm93IEVycm9yKHAoMTM3LGEpKTtpZihudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKXtpZihudWxsIT1iLmNoaWxkcmVuKXRocm93IEVycm9yKHAoNjApKTtpZihcIm9iamVjdFwiIT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUx8fCEoXCJfX2h0bWxcImluIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpKXRocm93IEVycm9yKHAoNjEpKTt9aWYobnVsbCE9Yi5zdHlsZSYmXCJvYmplY3RcIiE9PXR5cGVvZiBiLnN0eWxlKXRocm93IEVycm9yKHAoNjIpKTt9fVxuZnVuY3Rpb24gdmIoYSxiKXtpZigtMT09PWEuaW5kZXhPZihcIi1cIikpcmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBiLmlzO3N3aXRjaChhKXtjYXNlIFwiYW5ub3RhdGlvbi14bWxcIjpjYXNlIFwiY29sb3ItcHJvZmlsZVwiOmNhc2UgXCJmb250LWZhY2VcIjpjYXNlIFwiZm9udC1mYWNlLXNyY1wiOmNhc2UgXCJmb250LWZhY2UtdXJpXCI6Y2FzZSBcImZvbnQtZmFjZS1mb3JtYXRcIjpjYXNlIFwiZm9udC1mYWNlLW5hbWVcIjpjYXNlIFwibWlzc2luZy1nbHlwaFwiOnJldHVybiExO2RlZmF1bHQ6cmV0dXJuITB9fXZhciB3Yj1udWxsO2Z1bmN0aW9uIHhiKGEpe2E9YS50YXJnZXR8fGEuc3JjRWxlbWVudHx8d2luZG93O2EuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQmJihhPWEuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQpO3JldHVybiAzPT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YX12YXIgeWI9bnVsbCx6Yj1udWxsLEFiPW51bGw7XG5mdW5jdGlvbiBCYihhKXtpZihhPUNiKGEpKXtpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgeWIpdGhyb3cgRXJyb3IocCgyODApKTt2YXIgYj1hLnN0YXRlTm9kZTtiJiYoYj1EYihiKSx5YihhLnN0YXRlTm9kZSxhLnR5cGUsYikpfX1mdW5jdGlvbiBFYihhKXt6Yj9BYj9BYi5wdXNoKGEpOkFiPVthXTp6Yj1hfWZ1bmN0aW9uIEZiKCl7aWYoemIpe3ZhciBhPXpiLGI9QWI7QWI9emI9bnVsbDtCYihhKTtpZihiKWZvcihhPTA7YTxiLmxlbmd0aDthKyspQmIoYlthXSl9fWZ1bmN0aW9uIEdiKGEsYil7cmV0dXJuIGEoYil9ZnVuY3Rpb24gSGIoKXt9dmFyIEliPSExO2Z1bmN0aW9uIEpiKGEsYixjKXtpZihJYilyZXR1cm4gYShiLGMpO0liPSEwO3RyeXtyZXR1cm4gR2IoYSxiLGMpfWZpbmFsbHl7aWYoSWI9ITEsbnVsbCE9PXpifHxudWxsIT09QWIpSGIoKSxGYigpfX1cbmZ1bmN0aW9uIEtiKGEsYil7dmFyIGM9YS5zdGF0ZU5vZGU7aWYobnVsbD09PWMpcmV0dXJuIG51bGw7dmFyIGQ9RGIoYyk7aWYobnVsbD09PWQpcmV0dXJuIG51bGw7Yz1kW2JdO2E6c3dpdGNoKGIpe2Nhc2UgXCJvbkNsaWNrXCI6Y2FzZSBcIm9uQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tcIjpjYXNlIFwib25Eb3VibGVDbGlja0NhcHR1cmVcIjpjYXNlIFwib25Nb3VzZURvd25cIjpjYXNlIFwib25Nb3VzZURvd25DYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlVXBcIjpjYXNlIFwib25Nb3VzZVVwQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlRW50ZXJcIjooZD0hZC5kaXNhYmxlZCl8fChhPWEudHlwZSxkPSEoXCJidXR0b25cIj09PWF8fFwiaW5wdXRcIj09PWF8fFwic2VsZWN0XCI9PT1hfHxcInRleHRhcmVhXCI9PT1hKSk7YT0hZDticmVhayBhO2RlZmF1bHQ6YT0hMX1pZihhKXJldHVybiBudWxsO2lmKGMmJlwiZnVuY3Rpb25cIiE9PVxudHlwZW9mIGMpdGhyb3cgRXJyb3IocCgyMzEsYix0eXBlb2YgYykpO3JldHVybiBjfXZhciBMYj0hMTtpZihpYSl0cnl7dmFyIE1iPXt9O09iamVjdC5kZWZpbmVQcm9wZXJ0eShNYixcInBhc3NpdmVcIix7Z2V0OmZ1bmN0aW9uKCl7TGI9ITB9fSk7d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJ0ZXN0XCIsTWIsTWIpO3dpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwidGVzdFwiLE1iLE1iKX1jYXRjaChhKXtMYj0hMX1mdW5jdGlvbiBOYihhLGIsYyxkLGUsZixnLGgsayl7dmFyIGw9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDMpO3RyeXtiLmFwcGx5KGMsbCl9Y2F0Y2gobSl7dGhpcy5vbkVycm9yKG0pfX12YXIgT2I9ITEsUGI9bnVsbCxRYj0hMSxSYj1udWxsLFNiPXtvbkVycm9yOmZ1bmN0aW9uKGEpe09iPSEwO1BiPWF9fTtmdW5jdGlvbiBUYihhLGIsYyxkLGUsZixnLGgsayl7T2I9ITE7UGI9bnVsbDtOYi5hcHBseShTYixhcmd1bWVudHMpfVxuZnVuY3Rpb24gVWIoYSxiLGMsZCxlLGYsZyxoLGspe1RiLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtpZihPYil7aWYoT2Ipe3ZhciBsPVBiO09iPSExO1BiPW51bGx9ZWxzZSB0aHJvdyBFcnJvcihwKDE5OCkpO1FifHwoUWI9ITAsUmI9bCl9fWZ1bmN0aW9uIFZiKGEpe3ZhciBiPWEsYz1hO2lmKGEuYWx0ZXJuYXRlKWZvcig7Yi5yZXR1cm47KWI9Yi5yZXR1cm47ZWxzZXthPWI7ZG8gYj1hLDAhPT0oYi5mbGFncyY0MDk4KSYmKGM9Yi5yZXR1cm4pLGE9Yi5yZXR1cm47d2hpbGUoYSl9cmV0dXJuIDM9PT1iLnRhZz9jOm51bGx9ZnVuY3Rpb24gV2IoYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9YS5tZW1vaXplZFN0YXRlO251bGw9PT1iJiYoYT1hLmFsdGVybmF0ZSxudWxsIT09YSYmKGI9YS5tZW1vaXplZFN0YXRlKSk7aWYobnVsbCE9PWIpcmV0dXJuIGIuZGVoeWRyYXRlZH1yZXR1cm4gbnVsbH1mdW5jdGlvbiBYYihhKXtpZihWYihhKSE9PWEpdGhyb3cgRXJyb3IocCgxODgpKTt9XG5mdW5jdGlvbiBZYihhKXt2YXIgYj1hLmFsdGVybmF0ZTtpZighYil7Yj1WYihhKTtpZihudWxsPT09Yil0aHJvdyBFcnJvcihwKDE4OCkpO3JldHVybiBiIT09YT9udWxsOmF9Zm9yKHZhciBjPWEsZD1iOzspe3ZhciBlPWMucmV0dXJuO2lmKG51bGw9PT1lKWJyZWFrO3ZhciBmPWUuYWx0ZXJuYXRlO2lmKG51bGw9PT1mKXtkPWUucmV0dXJuO2lmKG51bGwhPT1kKXtjPWQ7Y29udGludWV9YnJlYWt9aWYoZS5jaGlsZD09PWYuY2hpbGQpe2ZvcihmPWUuY2hpbGQ7Zjspe2lmKGY9PT1jKXJldHVybiBYYihlKSxhO2lmKGY9PT1kKXJldHVybiBYYihlKSxiO2Y9Zi5zaWJsaW5nfXRocm93IEVycm9yKHAoMTg4KSk7fWlmKGMucmV0dXJuIT09ZC5yZXR1cm4pYz1lLGQ9ZjtlbHNle2Zvcih2YXIgZz0hMSxoPWUuY2hpbGQ7aDspe2lmKGg9PT1jKXtnPSEwO2M9ZTtkPWY7YnJlYWt9aWYoaD09PWQpe2c9ITA7ZD1lO2M9ZjticmVha31oPWguc2libGluZ31pZighZyl7Zm9yKGg9Zi5jaGlsZDtoOyl7aWYoaD09PVxuYyl7Zz0hMDtjPWY7ZD1lO2JyZWFrfWlmKGg9PT1kKXtnPSEwO2Q9ZjtjPWU7YnJlYWt9aD1oLnNpYmxpbmd9aWYoIWcpdGhyb3cgRXJyb3IocCgxODkpKTt9fWlmKGMuYWx0ZXJuYXRlIT09ZCl0aHJvdyBFcnJvcihwKDE5MCkpO31pZigzIT09Yy50YWcpdGhyb3cgRXJyb3IocCgxODgpKTtyZXR1cm4gYy5zdGF0ZU5vZGUuY3VycmVudD09PWM/YTpifWZ1bmN0aW9uIFpiKGEpe2E9WWIoYSk7cmV0dXJuIG51bGwhPT1hPyRiKGEpOm51bGx9ZnVuY3Rpb24gJGIoYSl7aWYoNT09PWEudGFnfHw2PT09YS50YWcpcmV0dXJuIGE7Zm9yKGE9YS5jaGlsZDtudWxsIT09YTspe3ZhciBiPSRiKGEpO2lmKG51bGwhPT1iKXJldHVybiBiO2E9YS5zaWJsaW5nfXJldHVybiBudWxsfVxudmFyIGFjPWNhLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2ssYmM9Y2EudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2ssY2M9Y2EudW5zdGFibGVfc2hvdWxkWWllbGQsZGM9Y2EudW5zdGFibGVfcmVxdWVzdFBhaW50LEI9Y2EudW5zdGFibGVfbm93LGVjPWNhLnVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsLGZjPWNhLnVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5LGdjPWNhLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5LGhjPWNhLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5LGljPWNhLnVuc3RhYmxlX0xvd1ByaW9yaXR5LGpjPWNhLnVuc3RhYmxlX0lkbGVQcmlvcml0eSxrYz1udWxsLGxjPW51bGw7ZnVuY3Rpb24gbWMoYSl7aWYobGMmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBsYy5vbkNvbW1pdEZpYmVyUm9vdCl0cnl7bGMub25Db21taXRGaWJlclJvb3Qoa2MsYSx2b2lkIDAsMTI4PT09KGEuY3VycmVudC5mbGFncyYxMjgpKX1jYXRjaChiKXt9fVxudmFyIG9jPU1hdGguY2x6MzI/TWF0aC5jbHozMjpuYyxwYz1NYXRoLmxvZyxxYz1NYXRoLkxOMjtmdW5jdGlvbiBuYyhhKXthPj4+PTA7cmV0dXJuIDA9PT1hPzMyOjMxLShwYyhhKS9xY3wwKXwwfXZhciByYz02NCxzYz00MTk0MzA0O1xuZnVuY3Rpb24gdGMoYSl7c3dpdGNoKGEmLWEpe2Nhc2UgMTpyZXR1cm4gMTtjYXNlIDI6cmV0dXJuIDI7Y2FzZSA0OnJldHVybiA0O2Nhc2UgODpyZXR1cm4gODtjYXNlIDE2OnJldHVybiAxNjtjYXNlIDMyOnJldHVybiAzMjtjYXNlIDY0OmNhc2UgMTI4OmNhc2UgMjU2OmNhc2UgNTEyOmNhc2UgMTAyNDpjYXNlIDIwNDg6Y2FzZSA0MDk2OmNhc2UgODE5MjpjYXNlIDE2Mzg0OmNhc2UgMzI3Njg6Y2FzZSA2NTUzNjpjYXNlIDEzMTA3MjpjYXNlIDI2MjE0NDpjYXNlIDUyNDI4ODpjYXNlIDEwNDg1NzY6Y2FzZSAyMDk3MTUyOnJldHVybiBhJjQxOTQyNDA7Y2FzZSA0MTk0MzA0OmNhc2UgODM4ODYwODpjYXNlIDE2Nzc3MjE2OmNhc2UgMzM1NTQ0MzI6Y2FzZSA2NzEwODg2NDpyZXR1cm4gYSYxMzAwMjM0MjQ7Y2FzZSAxMzQyMTc3Mjg6cmV0dXJuIDEzNDIxNzcyODtjYXNlIDI2ODQzNTQ1NjpyZXR1cm4gMjY4NDM1NDU2O2Nhc2UgNTM2ODcwOTEyOnJldHVybiA1MzY4NzA5MTI7Y2FzZSAxMDczNzQxODI0OnJldHVybiAxMDczNzQxODI0O1xuZGVmYXVsdDpyZXR1cm4gYX19ZnVuY3Rpb24gdWMoYSxiKXt2YXIgYz1hLnBlbmRpbmdMYW5lcztpZigwPT09YylyZXR1cm4gMDt2YXIgZD0wLGU9YS5zdXNwZW5kZWRMYW5lcyxmPWEucGluZ2VkTGFuZXMsZz1jJjI2ODQzNTQ1NTtpZigwIT09Zyl7dmFyIGg9ZyZ+ZTswIT09aD9kPXRjKGgpOihmJj1nLDAhPT1mJiYoZD10YyhmKSkpfWVsc2UgZz1jJn5lLDAhPT1nP2Q9dGMoZyk6MCE9PWYmJihkPXRjKGYpKTtpZigwPT09ZClyZXR1cm4gMDtpZigwIT09YiYmYiE9PWQmJjA9PT0oYiZlKSYmKGU9ZCYtZCxmPWImLWIsZT49Znx8MTY9PT1lJiYwIT09KGYmNDE5NDI0MCkpKXJldHVybiBiOzAhPT0oZCY0KSYmKGR8PWMmMTYpO2I9YS5lbnRhbmdsZWRMYW5lcztpZigwIT09Yilmb3IoYT1hLmVudGFuZ2xlbWVudHMsYiY9ZDswPGI7KWM9MzEtb2MoYiksZT0xPDxjLGR8PWFbY10sYiY9fmU7cmV0dXJuIGR9XG5mdW5jdGlvbiB2YyhhLGIpe3N3aXRjaChhKXtjYXNlIDE6Y2FzZSAyOmNhc2UgNDpyZXR1cm4gYisyNTA7Y2FzZSA4OmNhc2UgMTY6Y2FzZSAzMjpjYXNlIDY0OmNhc2UgMTI4OmNhc2UgMjU2OmNhc2UgNTEyOmNhc2UgMTAyNDpjYXNlIDIwNDg6Y2FzZSA0MDk2OmNhc2UgODE5MjpjYXNlIDE2Mzg0OmNhc2UgMzI3Njg6Y2FzZSA2NTUzNjpjYXNlIDEzMTA3MjpjYXNlIDI2MjE0NDpjYXNlIDUyNDI4ODpjYXNlIDEwNDg1NzY6Y2FzZSAyMDk3MTUyOnJldHVybiBiKzVFMztjYXNlIDQxOTQzMDQ6Y2FzZSA4Mzg4NjA4OmNhc2UgMTY3NzcyMTY6Y2FzZSAzMzU1NDQzMjpjYXNlIDY3MTA4ODY0OnJldHVybi0xO2Nhc2UgMTM0MjE3NzI4OmNhc2UgMjY4NDM1NDU2OmNhc2UgNTM2ODcwOTEyOmNhc2UgMTA3Mzc0MTgyNDpyZXR1cm4tMTtkZWZhdWx0OnJldHVybi0xfX1cbmZ1bmN0aW9uIHdjKGEsYil7Zm9yKHZhciBjPWEuc3VzcGVuZGVkTGFuZXMsZD1hLnBpbmdlZExhbmVzLGU9YS5leHBpcmF0aW9uVGltZXMsZj1hLnBlbmRpbmdMYW5lczswPGY7KXt2YXIgZz0zMS1vYyhmKSxoPTE8PGcsaz1lW2ddO2lmKC0xPT09ayl7aWYoMD09PShoJmMpfHwwIT09KGgmZCkpZVtnXT12YyhoLGIpfWVsc2Ugazw9YiYmKGEuZXhwaXJlZExhbmVzfD1oKTtmJj1+aH19ZnVuY3Rpb24geGMoYSl7YT1hLnBlbmRpbmdMYW5lcyYtMTA3Mzc0MTgyNTtyZXR1cm4gMCE9PWE/YTphJjEwNzM3NDE4MjQ/MTA3Mzc0MTgyNDowfWZ1bmN0aW9uIHljKCl7dmFyIGE9cmM7cmM8PD0xOzA9PT0ocmMmNDE5NDI0MCkmJihyYz02NCk7cmV0dXJuIGF9ZnVuY3Rpb24gemMoYSl7Zm9yKHZhciBiPVtdLGM9MDszMT5jO2MrKyliLnB1c2goYSk7cmV0dXJuIGJ9XG5mdW5jdGlvbiBBYyhhLGIsYyl7YS5wZW5kaW5nTGFuZXN8PWI7NTM2ODcwOTEyIT09YiYmKGEuc3VzcGVuZGVkTGFuZXM9MCxhLnBpbmdlZExhbmVzPTApO2E9YS5ldmVudFRpbWVzO2I9MzEtb2MoYik7YVtiXT1jfWZ1bmN0aW9uIEJjKGEsYil7dmFyIGM9YS5wZW5kaW5nTGFuZXMmfmI7YS5wZW5kaW5nTGFuZXM9YjthLnN1c3BlbmRlZExhbmVzPTA7YS5waW5nZWRMYW5lcz0wO2EuZXhwaXJlZExhbmVzJj1iO2EubXV0YWJsZVJlYWRMYW5lcyY9YjthLmVudGFuZ2xlZExhbmVzJj1iO2I9YS5lbnRhbmdsZW1lbnRzO3ZhciBkPWEuZXZlbnRUaW1lcztmb3IoYT1hLmV4cGlyYXRpb25UaW1lczswPGM7KXt2YXIgZT0zMS1vYyhjKSxmPTE8PGU7YltlXT0wO2RbZV09LTE7YVtlXT0tMTtjJj1+Zn19XG5mdW5jdGlvbiBDYyhhLGIpe3ZhciBjPWEuZW50YW5nbGVkTGFuZXN8PWI7Zm9yKGE9YS5lbnRhbmdsZW1lbnRzO2M7KXt2YXIgZD0zMS1vYyhjKSxlPTE8PGQ7ZSZifGFbZF0mYiYmKGFbZF18PWIpO2MmPX5lfX12YXIgQz0wO2Z1bmN0aW9uIERjKGEpe2EmPS1hO3JldHVybiAxPGE/NDxhPzAhPT0oYSYyNjg0MzU0NTUpPzE2OjUzNjg3MDkxMjo0OjF9dmFyIEVjLEZjLEdjLEhjLEljLEpjPSExLEtjPVtdLExjPW51bGwsTWM9bnVsbCxOYz1udWxsLE9jPW5ldyBNYXAsUGM9bmV3IE1hcCxRYz1bXSxSYz1cIm1vdXNlZG93biBtb3VzZXVwIHRvdWNoY2FuY2VsIHRvdWNoZW5kIHRvdWNoc3RhcnQgYXV4Y2xpY2sgZGJsY2xpY2sgcG9pbnRlcmNhbmNlbCBwb2ludGVyZG93biBwb2ludGVydXAgZHJhZ2VuZCBkcmFnc3RhcnQgZHJvcCBjb21wb3NpdGlvbmVuZCBjb21wb3NpdGlvbnN0YXJ0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgaW5wdXQgdGV4dElucHV0IGNvcHkgY3V0IHBhc3RlIGNsaWNrIGNoYW5nZSBjb250ZXh0bWVudSByZXNldCBzdWJtaXRcIi5zcGxpdChcIiBcIik7XG5mdW5jdGlvbiBTYyhhLGIpe3N3aXRjaChhKXtjYXNlIFwiZm9jdXNpblwiOmNhc2UgXCJmb2N1c291dFwiOkxjPW51bGw7YnJlYWs7Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnbGVhdmVcIjpNYz1udWxsO2JyZWFrO2Nhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwibW91c2VvdXRcIjpOYz1udWxsO2JyZWFrO2Nhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJwb2ludGVyb3V0XCI6T2MuZGVsZXRlKGIucG9pbnRlcklkKTticmVhaztjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6UGMuZGVsZXRlKGIucG9pbnRlcklkKX19XG5mdW5jdGlvbiBUYyhhLGIsYyxkLGUsZil7aWYobnVsbD09PWF8fGEubmF0aXZlRXZlbnQhPT1mKXJldHVybiBhPXtibG9ja2VkT246Yixkb21FdmVudE5hbWU6YyxldmVudFN5c3RlbUZsYWdzOmQsbmF0aXZlRXZlbnQ6Zix0YXJnZXRDb250YWluZXJzOltlXX0sbnVsbCE9PWImJihiPUNiKGIpLG51bGwhPT1iJiZGYyhiKSksYTthLmV2ZW50U3lzdGVtRmxhZ3N8PWQ7Yj1hLnRhcmdldENvbnRhaW5lcnM7bnVsbCE9PWUmJi0xPT09Yi5pbmRleE9mKGUpJiZiLnB1c2goZSk7cmV0dXJuIGF9XG5mdW5jdGlvbiBVYyhhLGIsYyxkLGUpe3N3aXRjaChiKXtjYXNlIFwiZm9jdXNpblwiOnJldHVybiBMYz1UYyhMYyxhLGIsYyxkLGUpLCEwO2Nhc2UgXCJkcmFnZW50ZXJcIjpyZXR1cm4gTWM9VGMoTWMsYSxiLGMsZCxlKSwhMDtjYXNlIFwibW91c2VvdmVyXCI6cmV0dXJuIE5jPVRjKE5jLGEsYixjLGQsZSksITA7Y2FzZSBcInBvaW50ZXJvdmVyXCI6dmFyIGY9ZS5wb2ludGVySWQ7T2Muc2V0KGYsVGMoT2MuZ2V0KGYpfHxudWxsLGEsYixjLGQsZSkpO3JldHVybiEwO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOnJldHVybiBmPWUucG9pbnRlcklkLFBjLnNldChmLFRjKFBjLmdldChmKXx8bnVsbCxhLGIsYyxkLGUpKSwhMH1yZXR1cm4hMX1cbmZ1bmN0aW9uIFZjKGEpe3ZhciBiPVdjKGEudGFyZ2V0KTtpZihudWxsIT09Yil7dmFyIGM9VmIoYik7aWYobnVsbCE9PWMpaWYoYj1jLnRhZywxMz09PWIpe2lmKGI9V2IoYyksbnVsbCE9PWIpe2EuYmxvY2tlZE9uPWI7SWMoYS5wcmlvcml0eSxmdW5jdGlvbigpe0djKGMpfSk7cmV0dXJufX1lbHNlIGlmKDM9PT1iJiZjLnN0YXRlTm9kZS5jdXJyZW50Lm1lbW9pemVkU3RhdGUuaXNEZWh5ZHJhdGVkKXthLmJsb2NrZWRPbj0zPT09Yy50YWc/Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbzpudWxsO3JldHVybn19YS5ibG9ja2VkT249bnVsbH1cbmZ1bmN0aW9uIFhjKGEpe2lmKG51bGwhPT1hLmJsb2NrZWRPbilyZXR1cm4hMTtmb3IodmFyIGI9YS50YXJnZXRDb250YWluZXJzOzA8Yi5sZW5ndGg7KXt2YXIgYz1ZYyhhLmRvbUV2ZW50TmFtZSxhLmV2ZW50U3lzdGVtRmxhZ3MsYlswXSxhLm5hdGl2ZUV2ZW50KTtpZihudWxsPT09Yyl7Yz1hLm5hdGl2ZUV2ZW50O3ZhciBkPW5ldyBjLmNvbnN0cnVjdG9yKGMudHlwZSxjKTt3Yj1kO2MudGFyZ2V0LmRpc3BhdGNoRXZlbnQoZCk7d2I9bnVsbH1lbHNlIHJldHVybiBiPUNiKGMpLG51bGwhPT1iJiZGYyhiKSxhLmJsb2NrZWRPbj1jLCExO2Iuc2hpZnQoKX1yZXR1cm4hMH1mdW5jdGlvbiBaYyhhLGIsYyl7WGMoYSkmJmMuZGVsZXRlKGIpfWZ1bmN0aW9uICRjKCl7SmM9ITE7bnVsbCE9PUxjJiZYYyhMYykmJihMYz1udWxsKTtudWxsIT09TWMmJlhjKE1jKSYmKE1jPW51bGwpO251bGwhPT1OYyYmWGMoTmMpJiYoTmM9bnVsbCk7T2MuZm9yRWFjaChaYyk7UGMuZm9yRWFjaChaYyl9XG5mdW5jdGlvbiBhZChhLGIpe2EuYmxvY2tlZE9uPT09YiYmKGEuYmxvY2tlZE9uPW51bGwsSmN8fChKYz0hMCxjYS51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrKGNhLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5LCRjKSkpfVxuZnVuY3Rpb24gYmQoYSl7ZnVuY3Rpb24gYihiKXtyZXR1cm4gYWQoYixhKX1pZigwPEtjLmxlbmd0aCl7YWQoS2NbMF0sYSk7Zm9yKHZhciBjPTE7YzxLYy5sZW5ndGg7YysrKXt2YXIgZD1LY1tjXTtkLmJsb2NrZWRPbj09PWEmJihkLmJsb2NrZWRPbj1udWxsKX19bnVsbCE9PUxjJiZhZChMYyxhKTtudWxsIT09TWMmJmFkKE1jLGEpO251bGwhPT1OYyYmYWQoTmMsYSk7T2MuZm9yRWFjaChiKTtQYy5mb3JFYWNoKGIpO2ZvcihjPTA7YzxRYy5sZW5ndGg7YysrKWQ9UWNbY10sZC5ibG9ja2VkT249PT1hJiYoZC5ibG9ja2VkT249bnVsbCk7Zm9yKDswPFFjLmxlbmd0aCYmKGM9UWNbMF0sbnVsbD09PWMuYmxvY2tlZE9uKTspVmMoYyksbnVsbD09PWMuYmxvY2tlZE9uJiZRYy5zaGlmdCgpfXZhciBjZD11YS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZyxkZD0hMDtcbmZ1bmN0aW9uIGVkKGEsYixjLGQpe3ZhciBlPUMsZj1jZC50cmFuc2l0aW9uO2NkLnRyYW5zaXRpb249bnVsbDt0cnl7Qz0xLGZkKGEsYixjLGQpfWZpbmFsbHl7Qz1lLGNkLnRyYW5zaXRpb249Zn19ZnVuY3Rpb24gZ2QoYSxiLGMsZCl7dmFyIGU9QyxmPWNkLnRyYW5zaXRpb247Y2QudHJhbnNpdGlvbj1udWxsO3RyeXtDPTQsZmQoYSxiLGMsZCl9ZmluYWxseXtDPWUsY2QudHJhbnNpdGlvbj1mfX1cbmZ1bmN0aW9uIGZkKGEsYixjLGQpe2lmKGRkKXt2YXIgZT1ZYyhhLGIsYyxkKTtpZihudWxsPT09ZSloZChhLGIsZCxpZCxjKSxTYyhhLGQpO2Vsc2UgaWYoVWMoZSxhLGIsYyxkKSlkLnN0b3BQcm9wYWdhdGlvbigpO2Vsc2UgaWYoU2MoYSxkKSxiJjQmJi0xPFJjLmluZGV4T2YoYSkpe2Zvcig7bnVsbCE9PWU7KXt2YXIgZj1DYihlKTtudWxsIT09ZiYmRWMoZik7Zj1ZYyhhLGIsYyxkKTtudWxsPT09ZiYmaGQoYSxiLGQsaWQsYyk7aWYoZj09PWUpYnJlYWs7ZT1mfW51bGwhPT1lJiZkLnN0b3BQcm9wYWdhdGlvbigpfWVsc2UgaGQoYSxiLGQsbnVsbCxjKX19dmFyIGlkPW51bGw7XG5mdW5jdGlvbiBZYyhhLGIsYyxkKXtpZD1udWxsO2E9eGIoZCk7YT1XYyhhKTtpZihudWxsIT09YSlpZihiPVZiKGEpLG51bGw9PT1iKWE9bnVsbDtlbHNlIGlmKGM9Yi50YWcsMTM9PT1jKXthPVdiKGIpO2lmKG51bGwhPT1hKXJldHVybiBhO2E9bnVsbH1lbHNlIGlmKDM9PT1jKXtpZihiLnN0YXRlTm9kZS5jdXJyZW50Lm1lbW9pemVkU3RhdGUuaXNEZWh5ZHJhdGVkKXJldHVybiAzPT09Yi50YWc/Yi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbzpudWxsO2E9bnVsbH1lbHNlIGIhPT1hJiYoYT1udWxsKTtpZD1hO3JldHVybiBudWxsfVxuZnVuY3Rpb24gamQoYSl7c3dpdGNoKGEpe2Nhc2UgXCJjYW5jZWxcIjpjYXNlIFwiY2xpY2tcIjpjYXNlIFwiY2xvc2VcIjpjYXNlIFwiY29udGV4dG1lbnVcIjpjYXNlIFwiY29weVwiOmNhc2UgXCJjdXRcIjpjYXNlIFwiYXV4Y2xpY2tcIjpjYXNlIFwiZGJsY2xpY2tcIjpjYXNlIFwiZHJhZ2VuZFwiOmNhc2UgXCJkcmFnc3RhcnRcIjpjYXNlIFwiZHJvcFwiOmNhc2UgXCJmb2N1c2luXCI6Y2FzZSBcImZvY3Vzb3V0XCI6Y2FzZSBcImlucHV0XCI6Y2FzZSBcImludmFsaWRcIjpjYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXlwcmVzc1wiOmNhc2UgXCJrZXl1cFwiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJwYXN0ZVwiOmNhc2UgXCJwYXVzZVwiOmNhc2UgXCJwbGF5XCI6Y2FzZSBcInBvaW50ZXJjYW5jZWxcIjpjYXNlIFwicG9pbnRlcmRvd25cIjpjYXNlIFwicG9pbnRlcnVwXCI6Y2FzZSBcInJhdGVjaGFuZ2VcIjpjYXNlIFwicmVzZXRcIjpjYXNlIFwicmVzaXplXCI6Y2FzZSBcInNlZWtlZFwiOmNhc2UgXCJzdWJtaXRcIjpjYXNlIFwidG91Y2hjYW5jZWxcIjpjYXNlIFwidG91Y2hlbmRcIjpjYXNlIFwidG91Y2hzdGFydFwiOmNhc2UgXCJ2b2x1bWVjaGFuZ2VcIjpjYXNlIFwiY2hhbmdlXCI6Y2FzZSBcInNlbGVjdGlvbmNoYW5nZVwiOmNhc2UgXCJ0ZXh0SW5wdXRcIjpjYXNlIFwiY29tcG9zaXRpb25zdGFydFwiOmNhc2UgXCJjb21wb3NpdGlvbmVuZFwiOmNhc2UgXCJjb21wb3NpdGlvbnVwZGF0ZVwiOmNhc2UgXCJiZWZvcmVibHVyXCI6Y2FzZSBcImFmdGVyYmx1clwiOmNhc2UgXCJiZWZvcmVpbnB1dFwiOmNhc2UgXCJibHVyXCI6Y2FzZSBcImZ1bGxzY3JlZW5jaGFuZ2VcIjpjYXNlIFwiZm9jdXNcIjpjYXNlIFwiaGFzaGNoYW5nZVwiOmNhc2UgXCJwb3BzdGF0ZVwiOmNhc2UgXCJzZWxlY3RcIjpjYXNlIFwic2VsZWN0c3RhcnRcIjpyZXR1cm4gMTtjYXNlIFwiZHJhZ1wiOmNhc2UgXCJkcmFnZW50ZXJcIjpjYXNlIFwiZHJhZ2V4aXRcIjpjYXNlIFwiZHJhZ2xlYXZlXCI6Y2FzZSBcImRyYWdvdmVyXCI6Y2FzZSBcIm1vdXNlbW92ZVwiOmNhc2UgXCJtb3VzZW91dFwiOmNhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwicG9pbnRlcm1vdmVcIjpjYXNlIFwicG9pbnRlcm91dFwiOmNhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJzY3JvbGxcIjpjYXNlIFwidG9nZ2xlXCI6Y2FzZSBcInRvdWNobW92ZVwiOmNhc2UgXCJ3aGVlbFwiOmNhc2UgXCJtb3VzZWVudGVyXCI6Y2FzZSBcIm1vdXNlbGVhdmVcIjpjYXNlIFwicG9pbnRlcmVudGVyXCI6Y2FzZSBcInBvaW50ZXJsZWF2ZVwiOnJldHVybiA0O1xuY2FzZSBcIm1lc3NhZ2VcIjpzd2l0Y2goZWMoKSl7Y2FzZSBmYzpyZXR1cm4gMTtjYXNlIGdjOnJldHVybiA0O2Nhc2UgaGM6Y2FzZSBpYzpyZXR1cm4gMTY7Y2FzZSBqYzpyZXR1cm4gNTM2ODcwOTEyO2RlZmF1bHQ6cmV0dXJuIDE2fWRlZmF1bHQ6cmV0dXJuIDE2fX12YXIga2Q9bnVsbCxsZD1udWxsLG1kPW51bGw7ZnVuY3Rpb24gbmQoKXtpZihtZClyZXR1cm4gbWQ7dmFyIGEsYj1sZCxjPWIubGVuZ3RoLGQsZT1cInZhbHVlXCJpbiBrZD9rZC52YWx1ZTprZC50ZXh0Q29udGVudCxmPWUubGVuZ3RoO2ZvcihhPTA7YTxjJiZiW2FdPT09ZVthXTthKyspO3ZhciBnPWMtYTtmb3IoZD0xO2Q8PWcmJmJbYy1kXT09PWVbZi1kXTtkKyspO3JldHVybiBtZD1lLnNsaWNlKGEsMTxkPzEtZDp2b2lkIDApfVxuZnVuY3Rpb24gb2QoYSl7dmFyIGI9YS5rZXlDb2RlO1wiY2hhckNvZGVcImluIGE/KGE9YS5jaGFyQ29kZSwwPT09YSYmMTM9PT1iJiYoYT0xMykpOmE9YjsxMD09PWEmJihhPTEzKTtyZXR1cm4gMzI8PWF8fDEzPT09YT9hOjB9ZnVuY3Rpb24gcGQoKXtyZXR1cm4hMH1mdW5jdGlvbiBxZCgpe3JldHVybiExfVxuZnVuY3Rpb24gcmQoYSl7ZnVuY3Rpb24gYihiLGQsZSxmLGcpe3RoaXMuX3JlYWN0TmFtZT1iO3RoaXMuX3RhcmdldEluc3Q9ZTt0aGlzLnR5cGU9ZDt0aGlzLm5hdGl2ZUV2ZW50PWY7dGhpcy50YXJnZXQ9Zzt0aGlzLmN1cnJlbnRUYXJnZXQ9bnVsbDtmb3IodmFyIGMgaW4gYSlhLmhhc093blByb3BlcnR5KGMpJiYoYj1hW2NdLHRoaXNbY109Yj9iKGYpOmZbY10pO3RoaXMuaXNEZWZhdWx0UHJldmVudGVkPShudWxsIT1mLmRlZmF1bHRQcmV2ZW50ZWQ/Zi5kZWZhdWx0UHJldmVudGVkOiExPT09Zi5yZXR1cm5WYWx1ZSk/cGQ6cWQ7dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1xZDtyZXR1cm4gdGhpc31BKGIucHJvdG90eXBlLHtwcmV2ZW50RGVmYXVsdDpmdW5jdGlvbigpe3RoaXMuZGVmYXVsdFByZXZlbnRlZD0hMDt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnByZXZlbnREZWZhdWx0P2EucHJldmVudERlZmF1bHQoKTpcInVua25vd25cIiE9PXR5cGVvZiBhLnJldHVyblZhbHVlJiZcbihhLnJldHVyblZhbHVlPSExKSx0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD1wZCl9LHN0b3BQcm9wYWdhdGlvbjpmdW5jdGlvbigpe3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEuc3RvcFByb3BhZ2F0aW9uP2Euc3RvcFByb3BhZ2F0aW9uKCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5jYW5jZWxCdWJibGUmJihhLmNhbmNlbEJ1YmJsZT0hMCksdGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1wZCl9LHBlcnNpc3Q6ZnVuY3Rpb24oKXt9LGlzUGVyc2lzdGVudDpwZH0pO3JldHVybiBifVxudmFyIHNkPXtldmVudFBoYXNlOjAsYnViYmxlczowLGNhbmNlbGFibGU6MCx0aW1lU3RhbXA6ZnVuY3Rpb24oYSl7cmV0dXJuIGEudGltZVN0YW1wfHxEYXRlLm5vdygpfSxkZWZhdWx0UHJldmVudGVkOjAsaXNUcnVzdGVkOjB9LHRkPXJkKHNkKSx1ZD1BKHt9LHNkLHt2aWV3OjAsZGV0YWlsOjB9KSx2ZD1yZCh1ZCksd2QseGQseWQsQWQ9QSh7fSx1ZCx7c2NyZWVuWDowLHNjcmVlblk6MCxjbGllbnRYOjAsY2xpZW50WTowLHBhZ2VYOjAscGFnZVk6MCxjdHJsS2V5OjAsc2hpZnRLZXk6MCxhbHRLZXk6MCxtZXRhS2V5OjAsZ2V0TW9kaWZpZXJTdGF0ZTp6ZCxidXR0b246MCxidXR0b25zOjAscmVsYXRlZFRhcmdldDpmdW5jdGlvbihhKXtyZXR1cm4gdm9pZCAwPT09YS5yZWxhdGVkVGFyZ2V0P2EuZnJvbUVsZW1lbnQ9PT1hLnNyY0VsZW1lbnQ/YS50b0VsZW1lbnQ6YS5mcm9tRWxlbWVudDphLnJlbGF0ZWRUYXJnZXR9LG1vdmVtZW50WDpmdW5jdGlvbihhKXtpZihcIm1vdmVtZW50WFwiaW5cbmEpcmV0dXJuIGEubW92ZW1lbnRYO2EhPT15ZCYmKHlkJiZcIm1vdXNlbW92ZVwiPT09YS50eXBlPyh3ZD1hLnNjcmVlblgteWQuc2NyZWVuWCx4ZD1hLnNjcmVlblkteWQuc2NyZWVuWSk6eGQ9d2Q9MCx5ZD1hKTtyZXR1cm4gd2R9LG1vdmVtZW50WTpmdW5jdGlvbihhKXtyZXR1cm5cIm1vdmVtZW50WVwiaW4gYT9hLm1vdmVtZW50WTp4ZH19KSxCZD1yZChBZCksQ2Q9QSh7fSxBZCx7ZGF0YVRyYW5zZmVyOjB9KSxEZD1yZChDZCksRWQ9QSh7fSx1ZCx7cmVsYXRlZFRhcmdldDowfSksRmQ9cmQoRWQpLEdkPUEoe30sc2Qse2FuaW1hdGlvbk5hbWU6MCxlbGFwc2VkVGltZTowLHBzZXVkb0VsZW1lbnQ6MH0pLEhkPXJkKEdkKSxJZD1BKHt9LHNkLHtjbGlwYm9hcmREYXRhOmZ1bmN0aW9uKGEpe3JldHVyblwiY2xpcGJvYXJkRGF0YVwiaW4gYT9hLmNsaXBib2FyZERhdGE6d2luZG93LmNsaXBib2FyZERhdGF9fSksSmQ9cmQoSWQpLEtkPUEoe30sc2Qse2RhdGE6MH0pLExkPXJkKEtkKSxNZD17RXNjOlwiRXNjYXBlXCIsXG5TcGFjZWJhcjpcIiBcIixMZWZ0OlwiQXJyb3dMZWZ0XCIsVXA6XCJBcnJvd1VwXCIsUmlnaHQ6XCJBcnJvd1JpZ2h0XCIsRG93bjpcIkFycm93RG93blwiLERlbDpcIkRlbGV0ZVwiLFdpbjpcIk9TXCIsTWVudTpcIkNvbnRleHRNZW51XCIsQXBwczpcIkNvbnRleHRNZW51XCIsU2Nyb2xsOlwiU2Nyb2xsTG9ja1wiLE1velByaW50YWJsZUtleTpcIlVuaWRlbnRpZmllZFwifSxOZD17ODpcIkJhY2tzcGFjZVwiLDk6XCJUYWJcIiwxMjpcIkNsZWFyXCIsMTM6XCJFbnRlclwiLDE2OlwiU2hpZnRcIiwxNzpcIkNvbnRyb2xcIiwxODpcIkFsdFwiLDE5OlwiUGF1c2VcIiwyMDpcIkNhcHNMb2NrXCIsMjc6XCJFc2NhcGVcIiwzMjpcIiBcIiwzMzpcIlBhZ2VVcFwiLDM0OlwiUGFnZURvd25cIiwzNTpcIkVuZFwiLDM2OlwiSG9tZVwiLDM3OlwiQXJyb3dMZWZ0XCIsMzg6XCJBcnJvd1VwXCIsMzk6XCJBcnJvd1JpZ2h0XCIsNDA6XCJBcnJvd0Rvd25cIiw0NTpcIkluc2VydFwiLDQ2OlwiRGVsZXRlXCIsMTEyOlwiRjFcIiwxMTM6XCJGMlwiLDExNDpcIkYzXCIsMTE1OlwiRjRcIiwxMTY6XCJGNVwiLDExNzpcIkY2XCIsMTE4OlwiRjdcIixcbjExOTpcIkY4XCIsMTIwOlwiRjlcIiwxMjE6XCJGMTBcIiwxMjI6XCJGMTFcIiwxMjM6XCJGMTJcIiwxNDQ6XCJOdW1Mb2NrXCIsMTQ1OlwiU2Nyb2xsTG9ja1wiLDIyNDpcIk1ldGFcIn0sT2Q9e0FsdDpcImFsdEtleVwiLENvbnRyb2w6XCJjdHJsS2V5XCIsTWV0YTpcIm1ldGFLZXlcIixTaGlmdDpcInNoaWZ0S2V5XCJ9O2Z1bmN0aW9uIFBkKGEpe3ZhciBiPXRoaXMubmF0aXZlRXZlbnQ7cmV0dXJuIGIuZ2V0TW9kaWZpZXJTdGF0ZT9iLmdldE1vZGlmaWVyU3RhdGUoYSk6KGE9T2RbYV0pPyEhYlthXTohMX1mdW5jdGlvbiB6ZCgpe3JldHVybiBQZH1cbnZhciBRZD1BKHt9LHVkLHtrZXk6ZnVuY3Rpb24oYSl7aWYoYS5rZXkpe3ZhciBiPU1kW2Eua2V5XXx8YS5rZXk7aWYoXCJVbmlkZW50aWZpZWRcIiE9PWIpcmV0dXJuIGJ9cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlPyhhPW9kKGEpLDEzPT09YT9cIkVudGVyXCI6U3RyaW5nLmZyb21DaGFyQ29kZShhKSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9OZFthLmtleUNvZGVdfHxcIlVuaWRlbnRpZmllZFwiOlwiXCJ9LGNvZGU6MCxsb2NhdGlvbjowLGN0cmxLZXk6MCxzaGlmdEtleTowLGFsdEtleTowLG1ldGFLZXk6MCxyZXBlYXQ6MCxsb2NhbGU6MCxnZXRNb2RpZmllclN0YXRlOnpkLGNoYXJDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT9vZChhKTowfSxrZXlDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9LHdoaWNoOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PVxuYS50eXBlP29kKGEpOlwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9fSksUmQ9cmQoUWQpLFNkPUEoe30sQWQse3BvaW50ZXJJZDowLHdpZHRoOjAsaGVpZ2h0OjAscHJlc3N1cmU6MCx0YW5nZW50aWFsUHJlc3N1cmU6MCx0aWx0WDowLHRpbHRZOjAsdHdpc3Q6MCxwb2ludGVyVHlwZTowLGlzUHJpbWFyeTowfSksVGQ9cmQoU2QpLFVkPUEoe30sdWQse3RvdWNoZXM6MCx0YXJnZXRUb3VjaGVzOjAsY2hhbmdlZFRvdWNoZXM6MCxhbHRLZXk6MCxtZXRhS2V5OjAsY3RybEtleTowLHNoaWZ0S2V5OjAsZ2V0TW9kaWZpZXJTdGF0ZTp6ZH0pLFZkPXJkKFVkKSxXZD1BKHt9LHNkLHtwcm9wZXJ0eU5hbWU6MCxlbGFwc2VkVGltZTowLHBzZXVkb0VsZW1lbnQ6MH0pLFhkPXJkKFdkKSxZZD1BKHt9LEFkLHtkZWx0YVg6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVhcImluIGE/YS5kZWx0YVg6XCJ3aGVlbERlbHRhWFwiaW4gYT8tYS53aGVlbERlbHRhWDowfSxcbmRlbHRhWTpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWVwiaW4gYT9hLmRlbHRhWTpcIndoZWVsRGVsdGFZXCJpbiBhPy1hLndoZWVsRGVsdGFZOlwid2hlZWxEZWx0YVwiaW4gYT8tYS53aGVlbERlbHRhOjB9LGRlbHRhWjowLGRlbHRhTW9kZTowfSksWmQ9cmQoWWQpLCRkPVs5LDEzLDI3LDMyXSxhZT1pYSYmXCJDb21wb3NpdGlvbkV2ZW50XCJpbiB3aW5kb3csYmU9bnVsbDtpYSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYoYmU9ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKTt2YXIgY2U9aWEmJlwiVGV4dEV2ZW50XCJpbiB3aW5kb3cmJiFiZSxkZT1pYSYmKCFhZXx8YmUmJjg8YmUmJjExPj1iZSksZWU9U3RyaW5nLmZyb21DaGFyQ29kZSgzMiksZmU9ITE7XG5mdW5jdGlvbiBnZShhLGIpe3N3aXRjaChhKXtjYXNlIFwia2V5dXBcIjpyZXR1cm4tMSE9PSRkLmluZGV4T2YoYi5rZXlDb2RlKTtjYXNlIFwia2V5ZG93blwiOnJldHVybiAyMjkhPT1iLmtleUNvZGU7Y2FzZSBcImtleXByZXNzXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJmb2N1c291dFwiOnJldHVybiEwO2RlZmF1bHQ6cmV0dXJuITF9fWZ1bmN0aW9uIGhlKGEpe2E9YS5kZXRhaWw7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZcImRhdGFcImluIGE/YS5kYXRhOm51bGx9dmFyIGllPSExO2Z1bmN0aW9uIGplKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOnJldHVybiBoZShiKTtjYXNlIFwia2V5cHJlc3NcIjppZigzMiE9PWIud2hpY2gpcmV0dXJuIG51bGw7ZmU9ITA7cmV0dXJuIGVlO2Nhc2UgXCJ0ZXh0SW5wdXRcIjpyZXR1cm4gYT1iLmRhdGEsYT09PWVlJiZmZT9udWxsOmE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG5mdW5jdGlvbiBrZShhLGIpe2lmKGllKXJldHVyblwiY29tcG9zaXRpb25lbmRcIj09PWF8fCFhZSYmZ2UoYSxiKT8oYT1uZCgpLG1kPWxkPWtkPW51bGwsaWU9ITEsYSk6bnVsbDtzd2l0Y2goYSl7Y2FzZSBcInBhc3RlXCI6cmV0dXJuIG51bGw7Y2FzZSBcImtleXByZXNzXCI6aWYoIShiLmN0cmxLZXl8fGIuYWx0S2V5fHxiLm1ldGFLZXkpfHxiLmN0cmxLZXkmJmIuYWx0S2V5KXtpZihiLmNoYXImJjE8Yi5jaGFyLmxlbmd0aClyZXR1cm4gYi5jaGFyO2lmKGIud2hpY2gpcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoYi53aGljaCl9cmV0dXJuIG51bGw7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6cmV0dXJuIGRlJiZcImtvXCIhPT1iLmxvY2FsZT9udWxsOmIuZGF0YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbnZhciBsZT17Y29sb3I6ITAsZGF0ZTohMCxkYXRldGltZTohMCxcImRhdGV0aW1lLWxvY2FsXCI6ITAsZW1haWw6ITAsbW9udGg6ITAsbnVtYmVyOiEwLHBhc3N3b3JkOiEwLHJhbmdlOiEwLHNlYXJjaDohMCx0ZWw6ITAsdGV4dDohMCx0aW1lOiEwLHVybDohMCx3ZWVrOiEwfTtmdW5jdGlvbiBtZShhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuXCJpbnB1dFwiPT09Yj8hIWxlW2EudHlwZV06XCJ0ZXh0YXJlYVwiPT09Yj8hMDohMX1mdW5jdGlvbiBuZShhLGIsYyxkKXtFYihkKTtiPW9lKGIsXCJvbkNoYW5nZVwiKTswPGIubGVuZ3RoJiYoYz1uZXcgdGQoXCJvbkNoYW5nZVwiLFwiY2hhbmdlXCIsbnVsbCxjLGQpLGEucHVzaCh7ZXZlbnQ6YyxsaXN0ZW5lcnM6Yn0pKX12YXIgcGU9bnVsbCxxZT1udWxsO2Z1bmN0aW9uIHJlKGEpe3NlKGEsMCl9ZnVuY3Rpb24gdGUoYSl7dmFyIGI9dWUoYSk7aWYoV2EoYikpcmV0dXJuIGF9XG5mdW5jdGlvbiB2ZShhLGIpe2lmKFwiY2hhbmdlXCI9PT1hKXJldHVybiBifXZhciB3ZT0hMTtpZihpYSl7dmFyIHhlO2lmKGlhKXt2YXIgeWU9XCJvbmlucHV0XCJpbiBkb2N1bWVudDtpZigheWUpe3ZhciB6ZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO3plLnNldEF0dHJpYnV0ZShcIm9uaW5wdXRcIixcInJldHVybjtcIik7eWU9XCJmdW5jdGlvblwiPT09dHlwZW9mIHplLm9uaW5wdXR9eGU9eWV9ZWxzZSB4ZT0hMTt3ZT14ZSYmKCFkb2N1bWVudC5kb2N1bWVudE1vZGV8fDk8ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKX1mdW5jdGlvbiBBZSgpe3BlJiYocGUuZGV0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsQmUpLHFlPXBlPW51bGwpfWZ1bmN0aW9uIEJlKGEpe2lmKFwidmFsdWVcIj09PWEucHJvcGVydHlOYW1lJiZ0ZShxZSkpe3ZhciBiPVtdO25lKGIscWUsYSx4YihhKSk7SmIocmUsYil9fVxuZnVuY3Rpb24gQ2UoYSxiLGMpe1wiZm9jdXNpblwiPT09YT8oQWUoKSxwZT1iLHFlPWMscGUuYXR0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsQmUpKTpcImZvY3Vzb3V0XCI9PT1hJiZBZSgpfWZ1bmN0aW9uIERlKGEpe2lmKFwic2VsZWN0aW9uY2hhbmdlXCI9PT1hfHxcImtleXVwXCI9PT1hfHxcImtleWRvd25cIj09PWEpcmV0dXJuIHRlKHFlKX1mdW5jdGlvbiBFZShhLGIpe2lmKFwiY2xpY2tcIj09PWEpcmV0dXJuIHRlKGIpfWZ1bmN0aW9uIEZlKGEsYil7aWYoXCJpbnB1dFwiPT09YXx8XCJjaGFuZ2VcIj09PWEpcmV0dXJuIHRlKGIpfWZ1bmN0aW9uIEdlKGEsYil7cmV0dXJuIGE9PT1iJiYoMCE9PWF8fDEvYT09PTEvYil8fGEhPT1hJiZiIT09Yn12YXIgSGU9XCJmdW5jdGlvblwiPT09dHlwZW9mIE9iamVjdC5pcz9PYmplY3QuaXM6R2U7XG5mdW5jdGlvbiBJZShhLGIpe2lmKEhlKGEsYikpcmV0dXJuITA7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBhfHxudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBifHxudWxsPT09YilyZXR1cm4hMTt2YXIgYz1PYmplY3Qua2V5cyhhKSxkPU9iamVjdC5rZXlzKGIpO2lmKGMubGVuZ3RoIT09ZC5sZW5ndGgpcmV0dXJuITE7Zm9yKGQ9MDtkPGMubGVuZ3RoO2QrKyl7dmFyIGU9Y1tkXTtpZighamEuY2FsbChiLGUpfHwhSGUoYVtlXSxiW2VdKSlyZXR1cm4hMX1yZXR1cm4hMH1mdW5jdGlvbiBKZShhKXtmb3IoO2EmJmEuZmlyc3RDaGlsZDspYT1hLmZpcnN0Q2hpbGQ7cmV0dXJuIGF9XG5mdW5jdGlvbiBLZShhLGIpe3ZhciBjPUplKGEpO2E9MDtmb3IodmFyIGQ7Yzspe2lmKDM9PT1jLm5vZGVUeXBlKXtkPWErYy50ZXh0Q29udGVudC5sZW5ndGg7aWYoYTw9YiYmZD49YilyZXR1cm57bm9kZTpjLG9mZnNldDpiLWF9O2E9ZH1hOntmb3IoO2M7KXtpZihjLm5leHRTaWJsaW5nKXtjPWMubmV4dFNpYmxpbmc7YnJlYWsgYX1jPWMucGFyZW50Tm9kZX1jPXZvaWQgMH1jPUplKGMpfX1mdW5jdGlvbiBMZShhLGIpe3JldHVybiBhJiZiP2E9PT1iPyEwOmEmJjM9PT1hLm5vZGVUeXBlPyExOmImJjM9PT1iLm5vZGVUeXBlP0xlKGEsYi5wYXJlbnROb2RlKTpcImNvbnRhaW5zXCJpbiBhP2EuY29udGFpbnMoYik6YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbj8hIShhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGIpJjE2KTohMTohMX1cbmZ1bmN0aW9uIE1lKCl7Zm9yKHZhciBhPXdpbmRvdyxiPVhhKCk7YiBpbnN0YW5jZW9mIGEuSFRNTElGcmFtZUVsZW1lbnQ7KXt0cnl7dmFyIGM9XCJzdHJpbmdcIj09PXR5cGVvZiBiLmNvbnRlbnRXaW5kb3cubG9jYXRpb24uaHJlZn1jYXRjaChkKXtjPSExfWlmKGMpYT1iLmNvbnRlbnRXaW5kb3c7ZWxzZSBicmVhaztiPVhhKGEuZG9jdW1lbnQpfXJldHVybiBifWZ1bmN0aW9uIE5lKGEpe3ZhciBiPWEmJmEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm4gYiYmKFwiaW5wdXRcIj09PWImJihcInRleHRcIj09PWEudHlwZXx8XCJzZWFyY2hcIj09PWEudHlwZXx8XCJ0ZWxcIj09PWEudHlwZXx8XCJ1cmxcIj09PWEudHlwZXx8XCJwYXNzd29yZFwiPT09YS50eXBlKXx8XCJ0ZXh0YXJlYVwiPT09Ynx8XCJ0cnVlXCI9PT1hLmNvbnRlbnRFZGl0YWJsZSl9XG5mdW5jdGlvbiBPZShhKXt2YXIgYj1NZSgpLGM9YS5mb2N1c2VkRWxlbSxkPWEuc2VsZWN0aW9uUmFuZ2U7aWYoYiE9PWMmJmMmJmMub3duZXJEb2N1bWVudCYmTGUoYy5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudCxjKSl7aWYobnVsbCE9PWQmJk5lKGMpKWlmKGI9ZC5zdGFydCxhPWQuZW5kLHZvaWQgMD09PWEmJihhPWIpLFwic2VsZWN0aW9uU3RhcnRcImluIGMpYy5zZWxlY3Rpb25TdGFydD1iLGMuc2VsZWN0aW9uRW5kPU1hdGgubWluKGEsYy52YWx1ZS5sZW5ndGgpO2Vsc2UgaWYoYT0oYj1jLm93bmVyRG9jdW1lbnR8fGRvY3VtZW50KSYmYi5kZWZhdWx0Vmlld3x8d2luZG93LGEuZ2V0U2VsZWN0aW9uKXthPWEuZ2V0U2VsZWN0aW9uKCk7dmFyIGU9Yy50ZXh0Q29udGVudC5sZW5ndGgsZj1NYXRoLm1pbihkLnN0YXJ0LGUpO2Q9dm9pZCAwPT09ZC5lbmQ/ZjpNYXRoLm1pbihkLmVuZCxlKTshYS5leHRlbmQmJmY+ZCYmKGU9ZCxkPWYsZj1lKTtlPUtlKGMsZik7dmFyIGc9S2UoYyxcbmQpO2UmJmcmJigxIT09YS5yYW5nZUNvdW50fHxhLmFuY2hvck5vZGUhPT1lLm5vZGV8fGEuYW5jaG9yT2Zmc2V0IT09ZS5vZmZzZXR8fGEuZm9jdXNOb2RlIT09Zy5ub2RlfHxhLmZvY3VzT2Zmc2V0IT09Zy5vZmZzZXQpJiYoYj1iLmNyZWF0ZVJhbmdlKCksYi5zZXRTdGFydChlLm5vZGUsZS5vZmZzZXQpLGEucmVtb3ZlQWxsUmFuZ2VzKCksZj5kPyhhLmFkZFJhbmdlKGIpLGEuZXh0ZW5kKGcubm9kZSxnLm9mZnNldCkpOihiLnNldEVuZChnLm5vZGUsZy5vZmZzZXQpLGEuYWRkUmFuZ2UoYikpKX1iPVtdO2ZvcihhPWM7YT1hLnBhcmVudE5vZGU7KTE9PT1hLm5vZGVUeXBlJiZiLnB1c2goe2VsZW1lbnQ6YSxsZWZ0OmEuc2Nyb2xsTGVmdCx0b3A6YS5zY3JvbGxUb3B9KTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5mb2N1cyYmYy5mb2N1cygpO2ZvcihjPTA7YzxiLmxlbmd0aDtjKyspYT1iW2NdLGEuZWxlbWVudC5zY3JvbGxMZWZ0PWEubGVmdCxhLmVsZW1lbnQuc2Nyb2xsVG9wPWEudG9wfX1cbnZhciBQZT1pYSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYxMT49ZG9jdW1lbnQuZG9jdW1lbnRNb2RlLFFlPW51bGwsUmU9bnVsbCxTZT1udWxsLFRlPSExO1xuZnVuY3Rpb24gVWUoYSxiLGMpe3ZhciBkPWMud2luZG93PT09Yz9jLmRvY3VtZW50Ojk9PT1jLm5vZGVUeXBlP2M6Yy5vd25lckRvY3VtZW50O1RlfHxudWxsPT1RZXx8UWUhPT1YYShkKXx8KGQ9UWUsXCJzZWxlY3Rpb25TdGFydFwiaW4gZCYmTmUoZCk/ZD17c3RhcnQ6ZC5zZWxlY3Rpb25TdGFydCxlbmQ6ZC5zZWxlY3Rpb25FbmR9OihkPShkLm93bmVyRG9jdW1lbnQmJmQub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlld3x8d2luZG93KS5nZXRTZWxlY3Rpb24oKSxkPXthbmNob3JOb2RlOmQuYW5jaG9yTm9kZSxhbmNob3JPZmZzZXQ6ZC5hbmNob3JPZmZzZXQsZm9jdXNOb2RlOmQuZm9jdXNOb2RlLGZvY3VzT2Zmc2V0OmQuZm9jdXNPZmZzZXR9KSxTZSYmSWUoU2UsZCl8fChTZT1kLGQ9b2UoUmUsXCJvblNlbGVjdFwiKSwwPGQubGVuZ3RoJiYoYj1uZXcgdGQoXCJvblNlbGVjdFwiLFwic2VsZWN0XCIsbnVsbCxiLGMpLGEucHVzaCh7ZXZlbnQ6YixsaXN0ZW5lcnM6ZH0pLGIudGFyZ2V0PVFlKSkpfVxuZnVuY3Rpb24gVmUoYSxiKXt2YXIgYz17fTtjW2EudG9Mb3dlckNhc2UoKV09Yi50b0xvd2VyQ2FzZSgpO2NbXCJXZWJraXRcIithXT1cIndlYmtpdFwiK2I7Y1tcIk1velwiK2FdPVwibW96XCIrYjtyZXR1cm4gY312YXIgV2U9e2FuaW1hdGlvbmVuZDpWZShcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uRW5kXCIpLGFuaW1hdGlvbml0ZXJhdGlvbjpWZShcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uSXRlcmF0aW9uXCIpLGFuaW1hdGlvbnN0YXJ0OlZlKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25TdGFydFwiKSx0cmFuc2l0aW9uZW5kOlZlKFwiVHJhbnNpdGlvblwiLFwiVHJhbnNpdGlvbkVuZFwiKX0sWGU9e30sWWU9e307XG5pYSYmKFllPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikuc3R5bGUsXCJBbmltYXRpb25FdmVudFwiaW4gd2luZG93fHwoZGVsZXRlIFdlLmFuaW1hdGlvbmVuZC5hbmltYXRpb24sZGVsZXRlIFdlLmFuaW1hdGlvbml0ZXJhdGlvbi5hbmltYXRpb24sZGVsZXRlIFdlLmFuaW1hdGlvbnN0YXJ0LmFuaW1hdGlvbiksXCJUcmFuc2l0aW9uRXZlbnRcImluIHdpbmRvd3x8ZGVsZXRlIFdlLnRyYW5zaXRpb25lbmQudHJhbnNpdGlvbik7ZnVuY3Rpb24gWmUoYSl7aWYoWGVbYV0pcmV0dXJuIFhlW2FdO2lmKCFXZVthXSlyZXR1cm4gYTt2YXIgYj1XZVthXSxjO2ZvcihjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSYmYyBpbiBZZSlyZXR1cm4gWGVbYV09YltjXTtyZXR1cm4gYX12YXIgJGU9WmUoXCJhbmltYXRpb25lbmRcIiksYWY9WmUoXCJhbmltYXRpb25pdGVyYXRpb25cIiksYmY9WmUoXCJhbmltYXRpb25zdGFydFwiKSxjZj1aZShcInRyYW5zaXRpb25lbmRcIiksZGY9bmV3IE1hcCxlZj1cImFib3J0IGF1eENsaWNrIGNhbmNlbCBjYW5QbGF5IGNhblBsYXlUaHJvdWdoIGNsaWNrIGNsb3NlIGNvbnRleHRNZW51IGNvcHkgY3V0IGRyYWcgZHJhZ0VuZCBkcmFnRW50ZXIgZHJhZ0V4aXQgZHJhZ0xlYXZlIGRyYWdPdmVyIGRyYWdTdGFydCBkcm9wIGR1cmF0aW9uQ2hhbmdlIGVtcHRpZWQgZW5jcnlwdGVkIGVuZGVkIGVycm9yIGdvdFBvaW50ZXJDYXB0dXJlIGlucHV0IGludmFsaWQga2V5RG93biBrZXlQcmVzcyBrZXlVcCBsb2FkIGxvYWRlZERhdGEgbG9hZGVkTWV0YWRhdGEgbG9hZFN0YXJ0IGxvc3RQb2ludGVyQ2FwdHVyZSBtb3VzZURvd24gbW91c2VNb3ZlIG1vdXNlT3V0IG1vdXNlT3ZlciBtb3VzZVVwIHBhc3RlIHBhdXNlIHBsYXkgcGxheWluZyBwb2ludGVyQ2FuY2VsIHBvaW50ZXJEb3duIHBvaW50ZXJNb3ZlIHBvaW50ZXJPdXQgcG9pbnRlck92ZXIgcG9pbnRlclVwIHByb2dyZXNzIHJhdGVDaGFuZ2UgcmVzZXQgcmVzaXplIHNlZWtlZCBzZWVraW5nIHN0YWxsZWQgc3VibWl0IHN1c3BlbmQgdGltZVVwZGF0ZSB0b3VjaENhbmNlbCB0b3VjaEVuZCB0b3VjaFN0YXJ0IHZvbHVtZUNoYW5nZSBzY3JvbGwgdG9nZ2xlIHRvdWNoTW92ZSB3YWl0aW5nIHdoZWVsXCIuc3BsaXQoXCIgXCIpO1xuZnVuY3Rpb24gZmYoYSxiKXtkZi5zZXQoYSxiKTtmYShiLFthXSl9Zm9yKHZhciBnZj0wO2dmPGVmLmxlbmd0aDtnZisrKXt2YXIgaGY9ZWZbZ2ZdLGpmPWhmLnRvTG93ZXJDYXNlKCksa2Y9aGZbMF0udG9VcHBlckNhc2UoKStoZi5zbGljZSgxKTtmZihqZixcIm9uXCIra2YpfWZmKCRlLFwib25BbmltYXRpb25FbmRcIik7ZmYoYWYsXCJvbkFuaW1hdGlvbkl0ZXJhdGlvblwiKTtmZihiZixcIm9uQW5pbWF0aW9uU3RhcnRcIik7ZmYoXCJkYmxjbGlja1wiLFwib25Eb3VibGVDbGlja1wiKTtmZihcImZvY3VzaW5cIixcIm9uRm9jdXNcIik7ZmYoXCJmb2N1c291dFwiLFwib25CbHVyXCIpO2ZmKGNmLFwib25UcmFuc2l0aW9uRW5kXCIpO2hhKFwib25Nb3VzZUVudGVyXCIsW1wibW91c2VvdXRcIixcIm1vdXNlb3ZlclwiXSk7aGEoXCJvbk1vdXNlTGVhdmVcIixbXCJtb3VzZW91dFwiLFwibW91c2VvdmVyXCJdKTtoYShcIm9uUG9pbnRlckVudGVyXCIsW1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl0pO1xuaGEoXCJvblBvaW50ZXJMZWF2ZVwiLFtcInBvaW50ZXJvdXRcIixcInBvaW50ZXJvdmVyXCJdKTtmYShcIm9uQ2hhbmdlXCIsXCJjaGFuZ2UgY2xpY2sgZm9jdXNpbiBmb2N1c291dCBpbnB1dCBrZXlkb3duIGtleXVwIHNlbGVjdGlvbmNoYW5nZVwiLnNwbGl0KFwiIFwiKSk7ZmEoXCJvblNlbGVjdFwiLFwiZm9jdXNvdXQgY29udGV4dG1lbnUgZHJhZ2VuZCBmb2N1c2luIGtleWRvd24ga2V5dXAgbW91c2Vkb3duIG1vdXNldXAgc2VsZWN0aW9uY2hhbmdlXCIuc3BsaXQoXCIgXCIpKTtmYShcIm9uQmVmb3JlSW5wdXRcIixbXCJjb21wb3NpdGlvbmVuZFwiLFwia2V5cHJlc3NcIixcInRleHRJbnB1dFwiLFwicGFzdGVcIl0pO2ZhKFwib25Db21wb3NpdGlvbkVuZFwiLFwiY29tcG9zaXRpb25lbmQgZm9jdXNvdXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIikpO2ZhKFwib25Db21wb3NpdGlvblN0YXJ0XCIsXCJjb21wb3NpdGlvbnN0YXJ0IGZvY3Vzb3V0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpKTtcbmZhKFwib25Db21wb3NpdGlvblVwZGF0ZVwiLFwiY29tcG9zaXRpb251cGRhdGUgZm9jdXNvdXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIikpO3ZhciBsZj1cImFib3J0IGNhbnBsYXkgY2FucGxheXRocm91Z2ggZHVyYXRpb25jaGFuZ2UgZW1wdGllZCBlbmNyeXB0ZWQgZW5kZWQgZXJyb3IgbG9hZGVkZGF0YSBsb2FkZWRtZXRhZGF0YSBsb2Fkc3RhcnQgcGF1c2UgcGxheSBwbGF5aW5nIHByb2dyZXNzIHJhdGVjaGFuZ2UgcmVzaXplIHNlZWtlZCBzZWVraW5nIHN0YWxsZWQgc3VzcGVuZCB0aW1ldXBkYXRlIHZvbHVtZWNoYW5nZSB3YWl0aW5nXCIuc3BsaXQoXCIgXCIpLG1mPW5ldyBTZXQoXCJjYW5jZWwgY2xvc2UgaW52YWxpZCBsb2FkIHNjcm9sbCB0b2dnbGVcIi5zcGxpdChcIiBcIikuY29uY2F0KGxmKSk7XG5mdW5jdGlvbiBuZihhLGIsYyl7dmFyIGQ9YS50eXBlfHxcInVua25vd24tZXZlbnRcIjthLmN1cnJlbnRUYXJnZXQ9YztVYihkLGIsdm9pZCAwLGEpO2EuY3VycmVudFRhcmdldD1udWxsfVxuZnVuY3Rpb24gc2UoYSxiKXtiPTAhPT0oYiY0KTtmb3IodmFyIGM9MDtjPGEubGVuZ3RoO2MrKyl7dmFyIGQ9YVtjXSxlPWQuZXZlbnQ7ZD1kLmxpc3RlbmVyczthOnt2YXIgZj12b2lkIDA7aWYoYilmb3IodmFyIGc9ZC5sZW5ndGgtMTswPD1nO2ctLSl7dmFyIGg9ZFtnXSxrPWguaW5zdGFuY2UsbD1oLmN1cnJlbnRUYXJnZXQ7aD1oLmxpc3RlbmVyO2lmKGshPT1mJiZlLmlzUHJvcGFnYXRpb25TdG9wcGVkKCkpYnJlYWsgYTtuZihlLGgsbCk7Zj1rfWVsc2UgZm9yKGc9MDtnPGQubGVuZ3RoO2crKyl7aD1kW2ddO2s9aC5pbnN0YW5jZTtsPWguY3VycmVudFRhcmdldDtoPWgubGlzdGVuZXI7aWYoayE9PWYmJmUuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSlicmVhayBhO25mKGUsaCxsKTtmPWt9fX1pZihRYil0aHJvdyBhPVJiLFFiPSExLFJiPW51bGwsYTt9XG5mdW5jdGlvbiBEKGEsYil7dmFyIGM9YltvZl07dm9pZCAwPT09YyYmKGM9YltvZl09bmV3IFNldCk7dmFyIGQ9YStcIl9fYnViYmxlXCI7Yy5oYXMoZCl8fChwZihiLGEsMiwhMSksYy5hZGQoZCkpfWZ1bmN0aW9uIHFmKGEsYixjKXt2YXIgZD0wO2ImJihkfD00KTtwZihjLGEsZCxiKX12YXIgcmY9XCJfcmVhY3RMaXN0ZW5pbmdcIitNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKTtmdW5jdGlvbiBzZihhKXtpZighYVtyZl0pe2FbcmZdPSEwO2RhLmZvckVhY2goZnVuY3Rpb24oYil7XCJzZWxlY3Rpb25jaGFuZ2VcIiE9PWImJihtZi5oYXMoYil8fHFmKGIsITEsYSkscWYoYiwhMCxhKSl9KTt2YXIgYj05PT09YS5ub2RlVHlwZT9hOmEub3duZXJEb2N1bWVudDtudWxsPT09Ynx8YltyZl18fChiW3JmXT0hMCxxZihcInNlbGVjdGlvbmNoYW5nZVwiLCExLGIpKX19XG5mdW5jdGlvbiBwZihhLGIsYyxkKXtzd2l0Y2goamQoYikpe2Nhc2UgMTp2YXIgZT1lZDticmVhaztjYXNlIDQ6ZT1nZDticmVhaztkZWZhdWx0OmU9ZmR9Yz1lLmJpbmQobnVsbCxiLGMsYSk7ZT12b2lkIDA7IUxifHxcInRvdWNoc3RhcnRcIiE9PWImJlwidG91Y2htb3ZlXCIhPT1iJiZcIndoZWVsXCIhPT1ifHwoZT0hMCk7ZD92b2lkIDAhPT1lP2EuYWRkRXZlbnRMaXN0ZW5lcihiLGMse2NhcHR1cmU6ITAscGFzc2l2ZTplfSk6YS5hZGRFdmVudExpc3RlbmVyKGIsYywhMCk6dm9pZCAwIT09ZT9hLmFkZEV2ZW50TGlzdGVuZXIoYixjLHtwYXNzaXZlOmV9KTphLmFkZEV2ZW50TGlzdGVuZXIoYixjLCExKX1cbmZ1bmN0aW9uIGhkKGEsYixjLGQsZSl7dmFyIGY9ZDtpZigwPT09KGImMSkmJjA9PT0oYiYyKSYmbnVsbCE9PWQpYTpmb3IoOzspe2lmKG51bGw9PT1kKXJldHVybjt2YXIgZz1kLnRhZztpZigzPT09Z3x8ND09PWcpe3ZhciBoPWQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87aWYoaD09PWV8fDg9PT1oLm5vZGVUeXBlJiZoLnBhcmVudE5vZGU9PT1lKWJyZWFrO2lmKDQ9PT1nKWZvcihnPWQucmV0dXJuO251bGwhPT1nOyl7dmFyIGs9Zy50YWc7aWYoMz09PWt8fDQ9PT1rKWlmKGs9Zy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyxrPT09ZXx8OD09PWsubm9kZVR5cGUmJmsucGFyZW50Tm9kZT09PWUpcmV0dXJuO2c9Zy5yZXR1cm59Zm9yKDtudWxsIT09aDspe2c9V2MoaCk7aWYobnVsbD09PWcpcmV0dXJuO2s9Zy50YWc7aWYoNT09PWt8fDY9PT1rKXtkPWY9Zztjb250aW51ZSBhfWg9aC5wYXJlbnROb2RlfX1kPWQucmV0dXJufUpiKGZ1bmN0aW9uKCl7dmFyIGQ9ZixlPXhiKGMpLGc9W107XG5hOnt2YXIgaD1kZi5nZXQoYSk7aWYodm9pZCAwIT09aCl7dmFyIGs9dGQsbj1hO3N3aXRjaChhKXtjYXNlIFwia2V5cHJlc3NcIjppZigwPT09b2QoYykpYnJlYWsgYTtjYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXl1cFwiOms9UmQ7YnJlYWs7Y2FzZSBcImZvY3VzaW5cIjpuPVwiZm9jdXNcIjtrPUZkO2JyZWFrO2Nhc2UgXCJmb2N1c291dFwiOm49XCJibHVyXCI7az1GZDticmVhaztjYXNlIFwiYmVmb3JlYmx1clwiOmNhc2UgXCJhZnRlcmJsdXJcIjprPUZkO2JyZWFrO2Nhc2UgXCJjbGlja1wiOmlmKDI9PT1jLmJ1dHRvbilicmVhayBhO2Nhc2UgXCJhdXhjbGlja1wiOmNhc2UgXCJkYmxjbGlja1wiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwibW91c2Vtb3ZlXCI6Y2FzZSBcIm1vdXNldXBcIjpjYXNlIFwibW91c2VvdXRcIjpjYXNlIFwibW91c2VvdmVyXCI6Y2FzZSBcImNvbnRleHRtZW51XCI6az1CZDticmVhaztjYXNlIFwiZHJhZ1wiOmNhc2UgXCJkcmFnZW5kXCI6Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnZXhpdFwiOmNhc2UgXCJkcmFnbGVhdmVcIjpjYXNlIFwiZHJhZ292ZXJcIjpjYXNlIFwiZHJhZ3N0YXJ0XCI6Y2FzZSBcImRyb3BcIjprPVxuRGQ7YnJlYWs7Y2FzZSBcInRvdWNoY2FuY2VsXCI6Y2FzZSBcInRvdWNoZW5kXCI6Y2FzZSBcInRvdWNobW92ZVwiOmNhc2UgXCJ0b3VjaHN0YXJ0XCI6az1WZDticmVhaztjYXNlICRlOmNhc2UgYWY6Y2FzZSBiZjprPUhkO2JyZWFrO2Nhc2UgY2Y6az1YZDticmVhaztjYXNlIFwic2Nyb2xsXCI6az12ZDticmVhaztjYXNlIFwid2hlZWxcIjprPVpkO2JyZWFrO2Nhc2UgXCJjb3B5XCI6Y2FzZSBcImN1dFwiOmNhc2UgXCJwYXN0ZVwiOms9SmQ7YnJlYWs7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcImxvc3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJwb2ludGVyY2FuY2VsXCI6Y2FzZSBcInBvaW50ZXJkb3duXCI6Y2FzZSBcInBvaW50ZXJtb3ZlXCI6Y2FzZSBcInBvaW50ZXJvdXRcIjpjYXNlIFwicG9pbnRlcm92ZXJcIjpjYXNlIFwicG9pbnRlcnVwXCI6az1UZH12YXIgdD0wIT09KGImNCksSj0hdCYmXCJzY3JvbGxcIj09PWEseD10P251bGwhPT1oP2grXCJDYXB0dXJlXCI6bnVsbDpoO3Q9W107Zm9yKHZhciB3PWQsdTtudWxsIT09XG53Oyl7dT13O3ZhciBGPXUuc3RhdGVOb2RlOzU9PT11LnRhZyYmbnVsbCE9PUYmJih1PUYsbnVsbCE9PXgmJihGPUtiKHcseCksbnVsbCE9RiYmdC5wdXNoKHRmKHcsRix1KSkpKTtpZihKKWJyZWFrO3c9dy5yZXR1cm59MDx0Lmxlbmd0aCYmKGg9bmV3IGsoaCxuLG51bGwsYyxlKSxnLnB1c2goe2V2ZW50OmgsbGlzdGVuZXJzOnR9KSl9fWlmKDA9PT0oYiY3KSl7YTp7aD1cIm1vdXNlb3ZlclwiPT09YXx8XCJwb2ludGVyb3ZlclwiPT09YTtrPVwibW91c2VvdXRcIj09PWF8fFwicG9pbnRlcm91dFwiPT09YTtpZihoJiZjIT09d2ImJihuPWMucmVsYXRlZFRhcmdldHx8Yy5mcm9tRWxlbWVudCkmJihXYyhuKXx8blt1Zl0pKWJyZWFrIGE7aWYoa3x8aCl7aD1lLndpbmRvdz09PWU/ZTooaD1lLm93bmVyRG9jdW1lbnQpP2guZGVmYXVsdFZpZXd8fGgucGFyZW50V2luZG93OndpbmRvdztpZihrKXtpZihuPWMucmVsYXRlZFRhcmdldHx8Yy50b0VsZW1lbnQsaz1kLG49bj9XYyhuKTpudWxsLG51bGwhPT1cbm4mJihKPVZiKG4pLG4hPT1KfHw1IT09bi50YWcmJjYhPT1uLnRhZykpbj1udWxsfWVsc2Ugaz1udWxsLG49ZDtpZihrIT09bil7dD1CZDtGPVwib25Nb3VzZUxlYXZlXCI7eD1cIm9uTW91c2VFbnRlclwiO3c9XCJtb3VzZVwiO2lmKFwicG9pbnRlcm91dFwiPT09YXx8XCJwb2ludGVyb3ZlclwiPT09YSl0PVRkLEY9XCJvblBvaW50ZXJMZWF2ZVwiLHg9XCJvblBvaW50ZXJFbnRlclwiLHc9XCJwb2ludGVyXCI7Sj1udWxsPT1rP2g6dWUoayk7dT1udWxsPT1uP2g6dWUobik7aD1uZXcgdChGLHcrXCJsZWF2ZVwiLGssYyxlKTtoLnRhcmdldD1KO2gucmVsYXRlZFRhcmdldD11O0Y9bnVsbDtXYyhlKT09PWQmJih0PW5ldyB0KHgsdytcImVudGVyXCIsbixjLGUpLHQudGFyZ2V0PXUsdC5yZWxhdGVkVGFyZ2V0PUosRj10KTtKPUY7aWYoayYmbiliOnt0PWs7eD1uO3c9MDtmb3IodT10O3U7dT12Zih1KSl3Kys7dT0wO2ZvcihGPXg7RjtGPXZmKEYpKXUrKztmb3IoOzA8dy11Oyl0PXZmKHQpLHctLTtmb3IoOzA8dS13Oyl4PVxudmYoeCksdS0tO2Zvcig7dy0tOyl7aWYodD09PXh8fG51bGwhPT14JiZ0PT09eC5hbHRlcm5hdGUpYnJlYWsgYjt0PXZmKHQpO3g9dmYoeCl9dD1udWxsfWVsc2UgdD1udWxsO251bGwhPT1rJiZ3ZihnLGgsayx0LCExKTtudWxsIT09biYmbnVsbCE9PUomJndmKGcsSixuLHQsITApfX19YTp7aD1kP3VlKGQpOndpbmRvdztrPWgubm9kZU5hbWUmJmgubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtpZihcInNlbGVjdFwiPT09a3x8XCJpbnB1dFwiPT09ayYmXCJmaWxlXCI9PT1oLnR5cGUpdmFyIG5hPXZlO2Vsc2UgaWYobWUoaCkpaWYod2UpbmE9RmU7ZWxzZXtuYT1EZTt2YXIgeGE9Q2V9ZWxzZShrPWgubm9kZU5hbWUpJiZcImlucHV0XCI9PT1rLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1oLnR5cGV8fFwicmFkaW9cIj09PWgudHlwZSkmJihuYT1FZSk7aWYobmEmJihuYT1uYShhLGQpKSl7bmUoZyxuYSxjLGUpO2JyZWFrIGF9eGEmJnhhKGEsaCxkKTtcImZvY3Vzb3V0XCI9PT1hJiYoeGE9aC5fd3JhcHBlclN0YXRlKSYmXG54YS5jb250cm9sbGVkJiZcIm51bWJlclwiPT09aC50eXBlJiZjYihoLFwibnVtYmVyXCIsaC52YWx1ZSl9eGE9ZD91ZShkKTp3aW5kb3c7c3dpdGNoKGEpe2Nhc2UgXCJmb2N1c2luXCI6aWYobWUoeGEpfHxcInRydWVcIj09PXhhLmNvbnRlbnRFZGl0YWJsZSlRZT14YSxSZT1kLFNlPW51bGw7YnJlYWs7Y2FzZSBcImZvY3Vzb3V0XCI6U2U9UmU9UWU9bnVsbDticmVhaztjYXNlIFwibW91c2Vkb3duXCI6VGU9ITA7YnJlYWs7Y2FzZSBcImNvbnRleHRtZW51XCI6Y2FzZSBcIm1vdXNldXBcIjpjYXNlIFwiZHJhZ2VuZFwiOlRlPSExO1VlKGcsYyxlKTticmVhaztjYXNlIFwic2VsZWN0aW9uY2hhbmdlXCI6aWYoUGUpYnJlYWs7Y2FzZSBcImtleWRvd25cIjpjYXNlIFwia2V5dXBcIjpVZShnLGMsZSl9dmFyICRhO2lmKGFlKWI6e3N3aXRjaChhKXtjYXNlIFwiY29tcG9zaXRpb25zdGFydFwiOnZhciBiYT1cIm9uQ29tcG9zaXRpb25TdGFydFwiO2JyZWFrIGI7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6YmE9XCJvbkNvbXBvc2l0aW9uRW5kXCI7XG5icmVhayBiO2Nhc2UgXCJjb21wb3NpdGlvbnVwZGF0ZVwiOmJhPVwib25Db21wb3NpdGlvblVwZGF0ZVwiO2JyZWFrIGJ9YmE9dm9pZCAwfWVsc2UgaWU/Z2UoYSxjKSYmKGJhPVwib25Db21wb3NpdGlvbkVuZFwiKTpcImtleWRvd25cIj09PWEmJjIyOT09PWMua2V5Q29kZSYmKGJhPVwib25Db21wb3NpdGlvblN0YXJ0XCIpO2JhJiYoZGUmJlwia29cIiE9PWMubG9jYWxlJiYoaWV8fFwib25Db21wb3NpdGlvblN0YXJ0XCIhPT1iYT9cIm9uQ29tcG9zaXRpb25FbmRcIj09PWJhJiZpZSYmKCRhPW5kKCkpOihrZD1lLGxkPVwidmFsdWVcImluIGtkP2tkLnZhbHVlOmtkLnRleHRDb250ZW50LGllPSEwKSkseGE9b2UoZCxiYSksMDx4YS5sZW5ndGgmJihiYT1uZXcgTGQoYmEsYSxudWxsLGMsZSksZy5wdXNoKHtldmVudDpiYSxsaXN0ZW5lcnM6eGF9KSwkYT9iYS5kYXRhPSRhOigkYT1oZShjKSxudWxsIT09JGEmJihiYS5kYXRhPSRhKSkpKTtpZigkYT1jZT9qZShhLGMpOmtlKGEsYykpZD1vZShkLFwib25CZWZvcmVJbnB1dFwiKSxcbjA8ZC5sZW5ndGgmJihlPW5ldyBMZChcIm9uQmVmb3JlSW5wdXRcIixcImJlZm9yZWlucHV0XCIsbnVsbCxjLGUpLGcucHVzaCh7ZXZlbnQ6ZSxsaXN0ZW5lcnM6ZH0pLGUuZGF0YT0kYSl9c2UoZyxiKX0pfWZ1bmN0aW9uIHRmKGEsYixjKXtyZXR1cm57aW5zdGFuY2U6YSxsaXN0ZW5lcjpiLGN1cnJlbnRUYXJnZXQ6Y319ZnVuY3Rpb24gb2UoYSxiKXtmb3IodmFyIGM9YitcIkNhcHR1cmVcIixkPVtdO251bGwhPT1hOyl7dmFyIGU9YSxmPWUuc3RhdGVOb2RlOzU9PT1lLnRhZyYmbnVsbCE9PWYmJihlPWYsZj1LYihhLGMpLG51bGwhPWYmJmQudW5zaGlmdCh0ZihhLGYsZSkpLGY9S2IoYSxiKSxudWxsIT1mJiZkLnB1c2godGYoYSxmLGUpKSk7YT1hLnJldHVybn1yZXR1cm4gZH1mdW5jdGlvbiB2ZihhKXtpZihudWxsPT09YSlyZXR1cm4gbnVsbDtkbyBhPWEucmV0dXJuO3doaWxlKGEmJjUhPT1hLnRhZyk7cmV0dXJuIGE/YTpudWxsfVxuZnVuY3Rpb24gd2YoYSxiLGMsZCxlKXtmb3IodmFyIGY9Yi5fcmVhY3ROYW1lLGc9W107bnVsbCE9PWMmJmMhPT1kOyl7dmFyIGg9YyxrPWguYWx0ZXJuYXRlLGw9aC5zdGF0ZU5vZGU7aWYobnVsbCE9PWsmJms9PT1kKWJyZWFrOzU9PT1oLnRhZyYmbnVsbCE9PWwmJihoPWwsZT8oaz1LYihjLGYpLG51bGwhPWsmJmcudW5zaGlmdCh0ZihjLGssaCkpKTplfHwoaz1LYihjLGYpLG51bGwhPWsmJmcucHVzaCh0ZihjLGssaCkpKSk7Yz1jLnJldHVybn0wIT09Zy5sZW5ndGgmJmEucHVzaCh7ZXZlbnQ6YixsaXN0ZW5lcnM6Z30pfXZhciB4Zj0vXFxyXFxuPy9nLHlmPS9cXHUwMDAwfFxcdUZGRkQvZztmdW5jdGlvbiB6ZihhKXtyZXR1cm4oXCJzdHJpbmdcIj09PXR5cGVvZiBhP2E6XCJcIithKS5yZXBsYWNlKHhmLFwiXFxuXCIpLnJlcGxhY2UoeWYsXCJcIil9ZnVuY3Rpb24gQWYoYSxiLGMpe2I9emYoYik7aWYoemYoYSkhPT1iJiZjKXRocm93IEVycm9yKHAoNDI1KSk7fWZ1bmN0aW9uIEJmKCl7fVxudmFyIENmPW51bGwsRGY9bnVsbDtmdW5jdGlvbiBFZihhLGIpe3JldHVyblwidGV4dGFyZWFcIj09PWF8fFwibm9zY3JpcHRcIj09PWF8fFwic3RyaW5nXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJudW1iZXJcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm9iamVjdFwiPT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJm51bGwhPT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MLl9faHRtbH1cbnZhciBGZj1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygc2V0VGltZW91dD9zZXRUaW1lb3V0OnZvaWQgMCxHZj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgY2xlYXJUaW1lb3V0P2NsZWFyVGltZW91dDp2b2lkIDAsSGY9XCJmdW5jdGlvblwiPT09dHlwZW9mIFByb21pc2U/UHJvbWlzZTp2b2lkIDAsSmY9XCJmdW5jdGlvblwiPT09dHlwZW9mIHF1ZXVlTWljcm90YXNrP3F1ZXVlTWljcm90YXNrOlwidW5kZWZpbmVkXCIhPT10eXBlb2YgSGY/ZnVuY3Rpb24oYSl7cmV0dXJuIEhmLnJlc29sdmUobnVsbCkudGhlbihhKS5jYXRjaChJZil9OkZmO2Z1bmN0aW9uIElmKGEpe3NldFRpbWVvdXQoZnVuY3Rpb24oKXt0aHJvdyBhO30pfVxuZnVuY3Rpb24gS2YoYSxiKXt2YXIgYz1iLGQ9MDtkb3t2YXIgZT1jLm5leHRTaWJsaW5nO2EucmVtb3ZlQ2hpbGQoYyk7aWYoZSYmOD09PWUubm9kZVR5cGUpaWYoYz1lLmRhdGEsXCIvJFwiPT09Yyl7aWYoMD09PWQpe2EucmVtb3ZlQ2hpbGQoZSk7YmQoYik7cmV0dXJufWQtLX1lbHNlXCIkXCIhPT1jJiZcIiQ/XCIhPT1jJiZcIiQhXCIhPT1jfHxkKys7Yz1lfXdoaWxlKGMpO2JkKGIpfWZ1bmN0aW9uIExmKGEpe2Zvcig7bnVsbCE9YTthPWEubmV4dFNpYmxpbmcpe3ZhciBiPWEubm9kZVR5cGU7aWYoMT09PWJ8fDM9PT1iKWJyZWFrO2lmKDg9PT1iKXtiPWEuZGF0YTtpZihcIiRcIj09PWJ8fFwiJCFcIj09PWJ8fFwiJD9cIj09PWIpYnJlYWs7aWYoXCIvJFwiPT09YilyZXR1cm4gbnVsbH19cmV0dXJuIGF9XG5mdW5jdGlvbiBNZihhKXthPWEucHJldmlvdXNTaWJsaW5nO2Zvcih2YXIgYj0wO2E7KXtpZig4PT09YS5ub2RlVHlwZSl7dmFyIGM9YS5kYXRhO2lmKFwiJFwiPT09Y3x8XCIkIVwiPT09Y3x8XCIkP1wiPT09Yyl7aWYoMD09PWIpcmV0dXJuIGE7Yi0tfWVsc2VcIi8kXCI9PT1jJiZiKyt9YT1hLnByZXZpb3VzU2libGluZ31yZXR1cm4gbnVsbH12YXIgTmY9TWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMiksT2Y9XCJfX3JlYWN0RmliZXIkXCIrTmYsUGY9XCJfX3JlYWN0UHJvcHMkXCIrTmYsdWY9XCJfX3JlYWN0Q29udGFpbmVyJFwiK05mLG9mPVwiX19yZWFjdEV2ZW50cyRcIitOZixRZj1cIl9fcmVhY3RMaXN0ZW5lcnMkXCIrTmYsUmY9XCJfX3JlYWN0SGFuZGxlcyRcIitOZjtcbmZ1bmN0aW9uIFdjKGEpe3ZhciBiPWFbT2ZdO2lmKGIpcmV0dXJuIGI7Zm9yKHZhciBjPWEucGFyZW50Tm9kZTtjOyl7aWYoYj1jW3VmXXx8Y1tPZl0pe2M9Yi5hbHRlcm5hdGU7aWYobnVsbCE9PWIuY2hpbGR8fG51bGwhPT1jJiZudWxsIT09Yy5jaGlsZClmb3IoYT1NZihhKTtudWxsIT09YTspe2lmKGM9YVtPZl0pcmV0dXJuIGM7YT1NZihhKX1yZXR1cm4gYn1hPWM7Yz1hLnBhcmVudE5vZGV9cmV0dXJuIG51bGx9ZnVuY3Rpb24gQ2IoYSl7YT1hW09mXXx8YVt1Zl07cmV0dXJuIWF8fDUhPT1hLnRhZyYmNiE9PWEudGFnJiYxMyE9PWEudGFnJiYzIT09YS50YWc/bnVsbDphfWZ1bmN0aW9uIHVlKGEpe2lmKDU9PT1hLnRhZ3x8Nj09PWEudGFnKXJldHVybiBhLnN0YXRlTm9kZTt0aHJvdyBFcnJvcihwKDMzKSk7fWZ1bmN0aW9uIERiKGEpe3JldHVybiBhW1BmXXx8bnVsbH12YXIgU2Y9W10sVGY9LTE7ZnVuY3Rpb24gVWYoYSl7cmV0dXJue2N1cnJlbnQ6YX19XG5mdW5jdGlvbiBFKGEpezA+VGZ8fChhLmN1cnJlbnQ9U2ZbVGZdLFNmW1RmXT1udWxsLFRmLS0pfWZ1bmN0aW9uIEcoYSxiKXtUZisrO1NmW1RmXT1hLmN1cnJlbnQ7YS5jdXJyZW50PWJ9dmFyIFZmPXt9LEg9VWYoVmYpLFdmPVVmKCExKSxYZj1WZjtmdW5jdGlvbiBZZihhLGIpe3ZhciBjPWEudHlwZS5jb250ZXh0VHlwZXM7aWYoIWMpcmV0dXJuIFZmO3ZhciBkPWEuc3RhdGVOb2RlO2lmKGQmJmQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD09PWIpcmV0dXJuIGQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ7dmFyIGU9e30sZjtmb3IoZiBpbiBjKWVbZl09YltmXTtkJiYoYT1hLnN0YXRlTm9kZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9YixhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWUpO3JldHVybiBlfVxuZnVuY3Rpb24gWmYoYSl7YT1hLmNoaWxkQ29udGV4dFR5cGVzO3JldHVybiBudWxsIT09YSYmdm9pZCAwIT09YX1mdW5jdGlvbiAkZigpe0UoV2YpO0UoSCl9ZnVuY3Rpb24gYWcoYSxiLGMpe2lmKEguY3VycmVudCE9PVZmKXRocm93IEVycm9yKHAoMTY4KSk7RyhILGIpO0coV2YsYyl9ZnVuY3Rpb24gYmcoYSxiLGMpe3ZhciBkPWEuc3RhdGVOb2RlO2I9Yi5jaGlsZENvbnRleHRUeXBlcztpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZC5nZXRDaGlsZENvbnRleHQpcmV0dXJuIGM7ZD1kLmdldENoaWxkQ29udGV4dCgpO2Zvcih2YXIgZSBpbiBkKWlmKCEoZSBpbiBiKSl0aHJvdyBFcnJvcihwKDEwOCxSYShhKXx8XCJVbmtub3duXCIsZSkpO3JldHVybiBBKHt9LGMsZCl9XG5mdW5jdGlvbiBjZyhhKXthPShhPWEuc3RhdGVOb2RlKSYmYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dHx8VmY7WGY9SC5jdXJyZW50O0coSCxhKTtHKFdmLFdmLmN1cnJlbnQpO3JldHVybiEwfWZ1bmN0aW9uIGRnKGEsYixjKXt2YXIgZD1hLnN0YXRlTm9kZTtpZighZCl0aHJvdyBFcnJvcihwKDE2OSkpO2M/KGE9YmcoYSxiLFhmKSxkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0PWEsRShXZiksRShIKSxHKEgsYSkpOkUoV2YpO0coV2YsYyl9dmFyIGVnPW51bGwsZmc9ITEsZ2c9ITE7ZnVuY3Rpb24gaGcoYSl7bnVsbD09PWVnP2VnPVthXTplZy5wdXNoKGEpfWZ1bmN0aW9uIGlnKGEpe2ZnPSEwO2hnKGEpfVxuZnVuY3Rpb24gamcoKXtpZighZ2cmJm51bGwhPT1lZyl7Z2c9ITA7dmFyIGE9MCxiPUM7dHJ5e3ZhciBjPWVnO2ZvcihDPTE7YTxjLmxlbmd0aDthKyspe3ZhciBkPWNbYV07ZG8gZD1kKCEwKTt3aGlsZShudWxsIT09ZCl9ZWc9bnVsbDtmZz0hMX1jYXRjaChlKXt0aHJvdyBudWxsIT09ZWcmJihlZz1lZy5zbGljZShhKzEpKSxhYyhmYyxqZyksZTt9ZmluYWxseXtDPWIsZ2c9ITF9fXJldHVybiBudWxsfXZhciBrZz1bXSxsZz0wLG1nPW51bGwsbmc9MCxvZz1bXSxwZz0wLHFnPW51bGwscmc9MSxzZz1cIlwiO2Z1bmN0aW9uIHRnKGEsYil7a2dbbGcrK109bmc7a2dbbGcrK109bWc7bWc9YTtuZz1ifVxuZnVuY3Rpb24gdWcoYSxiLGMpe29nW3BnKytdPXJnO29nW3BnKytdPXNnO29nW3BnKytdPXFnO3FnPWE7dmFyIGQ9cmc7YT1zZzt2YXIgZT0zMi1vYyhkKS0xO2QmPX4oMTw8ZSk7Yys9MTt2YXIgZj0zMi1vYyhiKStlO2lmKDMwPGYpe3ZhciBnPWUtZSU1O2Y9KGQmKDE8PGcpLTEpLnRvU3RyaW5nKDMyKTtkPj49ZztlLT1nO3JnPTE8PDMyLW9jKGIpK2V8Yzw8ZXxkO3NnPWYrYX1lbHNlIHJnPTE8PGZ8Yzw8ZXxkLHNnPWF9ZnVuY3Rpb24gdmcoYSl7bnVsbCE9PWEucmV0dXJuJiYodGcoYSwxKSx1ZyhhLDEsMCkpfWZ1bmN0aW9uIHdnKGEpe2Zvcig7YT09PW1nOyltZz1rZ1stLWxnXSxrZ1tsZ109bnVsbCxuZz1rZ1stLWxnXSxrZ1tsZ109bnVsbDtmb3IoO2E9PT1xZzspcWc9b2dbLS1wZ10sb2dbcGddPW51bGwsc2c9b2dbLS1wZ10sb2dbcGddPW51bGwscmc9b2dbLS1wZ10sb2dbcGddPW51bGx9dmFyIHhnPW51bGwseWc9bnVsbCxJPSExLHpnPW51bGw7XG5mdW5jdGlvbiBBZyhhLGIpe3ZhciBjPUJnKDUsbnVsbCxudWxsLDApO2MuZWxlbWVudFR5cGU9XCJERUxFVEVEXCI7Yy5zdGF0ZU5vZGU9YjtjLnJldHVybj1hO2I9YS5kZWxldGlvbnM7bnVsbD09PWI/KGEuZGVsZXRpb25zPVtjXSxhLmZsYWdzfD0xNik6Yi5wdXNoKGMpfVxuZnVuY3Rpb24gQ2coYSxiKXtzd2l0Y2goYS50YWcpe2Nhc2UgNTp2YXIgYz1hLnR5cGU7Yj0xIT09Yi5ub2RlVHlwZXx8Yy50b0xvd2VyQ2FzZSgpIT09Yi5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpP251bGw6YjtyZXR1cm4gbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIseGc9YSx5Zz1MZihiLmZpcnN0Q2hpbGQpLCEwKTohMTtjYXNlIDY6cmV0dXJuIGI9XCJcIj09PWEucGVuZGluZ1Byb3BzfHwzIT09Yi5ub2RlVHlwZT9udWxsOmIsbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIseGc9YSx5Zz1udWxsLCEwKTohMTtjYXNlIDEzOnJldHVybiBiPTghPT1iLm5vZGVUeXBlP251bGw6YixudWxsIT09Yj8oYz1udWxsIT09cWc/e2lkOnJnLG92ZXJmbG93OnNnfTpudWxsLGEubWVtb2l6ZWRTdGF0ZT17ZGVoeWRyYXRlZDpiLHRyZWVDb250ZXh0OmMscmV0cnlMYW5lOjEwNzM3NDE4MjR9LGM9QmcoMTgsbnVsbCxudWxsLDApLGMuc3RhdGVOb2RlPWIsYy5yZXR1cm49YSxhLmNoaWxkPWMseGc9YSx5Zz1cbm51bGwsITApOiExO2RlZmF1bHQ6cmV0dXJuITF9fWZ1bmN0aW9uIERnKGEpe3JldHVybiAwIT09KGEubW9kZSYxKSYmMD09PShhLmZsYWdzJjEyOCl9ZnVuY3Rpb24gRWcoYSl7aWYoSSl7dmFyIGI9eWc7aWYoYil7dmFyIGM9YjtpZighQ2coYSxiKSl7aWYoRGcoYSkpdGhyb3cgRXJyb3IocCg0MTgpKTtiPUxmKGMubmV4dFNpYmxpbmcpO3ZhciBkPXhnO2ImJkNnKGEsYik/QWcoZCxjKTooYS5mbGFncz1hLmZsYWdzJi00MDk3fDIsST0hMSx4Zz1hKX19ZWxzZXtpZihEZyhhKSl0aHJvdyBFcnJvcihwKDQxOCkpO2EuZmxhZ3M9YS5mbGFncyYtNDA5N3wyO0k9ITE7eGc9YX19fWZ1bmN0aW9uIEZnKGEpe2ZvcihhPWEucmV0dXJuO251bGwhPT1hJiY1IT09YS50YWcmJjMhPT1hLnRhZyYmMTMhPT1hLnRhZzspYT1hLnJldHVybjt4Zz1hfVxuZnVuY3Rpb24gR2coYSl7aWYoYSE9PXhnKXJldHVybiExO2lmKCFJKXJldHVybiBGZyhhKSxJPSEwLCExO3ZhciBiOyhiPTMhPT1hLnRhZykmJiEoYj01IT09YS50YWcpJiYoYj1hLnR5cGUsYj1cImhlYWRcIiE9PWImJlwiYm9keVwiIT09YiYmIUVmKGEudHlwZSxhLm1lbW9pemVkUHJvcHMpKTtpZihiJiYoYj15Zykpe2lmKERnKGEpKXRocm93IEhnKCksRXJyb3IocCg0MTgpKTtmb3IoO2I7KUFnKGEsYiksYj1MZihiLm5leHRTaWJsaW5nKX1GZyhhKTtpZigxMz09PWEudGFnKXthPWEubWVtb2l6ZWRTdGF0ZTthPW51bGwhPT1hP2EuZGVoeWRyYXRlZDpudWxsO2lmKCFhKXRocm93IEVycm9yKHAoMzE3KSk7YTp7YT1hLm5leHRTaWJsaW5nO2ZvcihiPTA7YTspe2lmKDg9PT1hLm5vZGVUeXBlKXt2YXIgYz1hLmRhdGE7aWYoXCIvJFwiPT09Yyl7aWYoMD09PWIpe3lnPUxmKGEubmV4dFNpYmxpbmcpO2JyZWFrIGF9Yi0tfWVsc2VcIiRcIiE9PWMmJlwiJCFcIiE9PWMmJlwiJD9cIiE9PWN8fGIrK31hPWEubmV4dFNpYmxpbmd9eWc9XG5udWxsfX1lbHNlIHlnPXhnP0xmKGEuc3RhdGVOb2RlLm5leHRTaWJsaW5nKTpudWxsO3JldHVybiEwfWZ1bmN0aW9uIEhnKCl7Zm9yKHZhciBhPXlnO2E7KWE9TGYoYS5uZXh0U2libGluZyl9ZnVuY3Rpb24gSWcoKXt5Zz14Zz1udWxsO0k9ITF9ZnVuY3Rpb24gSmcoYSl7bnVsbD09PXpnP3pnPVthXTp6Zy5wdXNoKGEpfXZhciBLZz11YS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZztmdW5jdGlvbiBMZyhhLGIpe2lmKGEmJmEuZGVmYXVsdFByb3BzKXtiPUEoe30sYik7YT1hLmRlZmF1bHRQcm9wcztmb3IodmFyIGMgaW4gYSl2b2lkIDA9PT1iW2NdJiYoYltjXT1hW2NdKTtyZXR1cm4gYn1yZXR1cm4gYn12YXIgTWc9VWYobnVsbCksTmc9bnVsbCxPZz1udWxsLFBnPW51bGw7ZnVuY3Rpb24gUWcoKXtQZz1PZz1OZz1udWxsfWZ1bmN0aW9uIFJnKGEpe3ZhciBiPU1nLmN1cnJlbnQ7RShNZyk7YS5fY3VycmVudFZhbHVlPWJ9XG5mdW5jdGlvbiBTZyhhLGIsYyl7Zm9yKDtudWxsIT09YTspe3ZhciBkPWEuYWx0ZXJuYXRlOyhhLmNoaWxkTGFuZXMmYikhPT1iPyhhLmNoaWxkTGFuZXN8PWIsbnVsbCE9PWQmJihkLmNoaWxkTGFuZXN8PWIpKTpudWxsIT09ZCYmKGQuY2hpbGRMYW5lcyZiKSE9PWImJihkLmNoaWxkTGFuZXN8PWIpO2lmKGE9PT1jKWJyZWFrO2E9YS5yZXR1cm59fWZ1bmN0aW9uIFRnKGEsYil7Tmc9YTtQZz1PZz1udWxsO2E9YS5kZXBlbmRlbmNpZXM7bnVsbCE9PWEmJm51bGwhPT1hLmZpcnN0Q29udGV4dCYmKDAhPT0oYS5sYW5lcyZiKSYmKFVnPSEwKSxhLmZpcnN0Q29udGV4dD1udWxsKX1cbmZ1bmN0aW9uIFZnKGEpe3ZhciBiPWEuX2N1cnJlbnRWYWx1ZTtpZihQZyE9PWEpaWYoYT17Y29udGV4dDphLG1lbW9pemVkVmFsdWU6YixuZXh0Om51bGx9LG51bGw9PT1PZyl7aWYobnVsbD09PU5nKXRocm93IEVycm9yKHAoMzA4KSk7T2c9YTtOZy5kZXBlbmRlbmNpZXM9e2xhbmVzOjAsZmlyc3RDb250ZXh0OmF9fWVsc2UgT2c9T2cubmV4dD1hO3JldHVybiBifXZhciBXZz1udWxsO2Z1bmN0aW9uIFhnKGEpe251bGw9PT1XZz9XZz1bYV06V2cucHVzaChhKX1mdW5jdGlvbiBZZyhhLGIsYyxkKXt2YXIgZT1iLmludGVybGVhdmVkO251bGw9PT1lPyhjLm5leHQ9YyxYZyhiKSk6KGMubmV4dD1lLm5leHQsZS5uZXh0PWMpO2IuaW50ZXJsZWF2ZWQ9YztyZXR1cm4gWmcoYSxkKX1cbmZ1bmN0aW9uIFpnKGEsYil7YS5sYW5lc3w9Yjt2YXIgYz1hLmFsdGVybmF0ZTtudWxsIT09YyYmKGMubGFuZXN8PWIpO2M9YTtmb3IoYT1hLnJldHVybjtudWxsIT09YTspYS5jaGlsZExhbmVzfD1iLGM9YS5hbHRlcm5hdGUsbnVsbCE9PWMmJihjLmNoaWxkTGFuZXN8PWIpLGM9YSxhPWEucmV0dXJuO3JldHVybiAzPT09Yy50YWc/Yy5zdGF0ZU5vZGU6bnVsbH12YXIgJGc9ITE7ZnVuY3Rpb24gYWgoYSl7YS51cGRhdGVRdWV1ZT17YmFzZVN0YXRlOmEubWVtb2l6ZWRTdGF0ZSxmaXJzdEJhc2VVcGRhdGU6bnVsbCxsYXN0QmFzZVVwZGF0ZTpudWxsLHNoYXJlZDp7cGVuZGluZzpudWxsLGludGVybGVhdmVkOm51bGwsbGFuZXM6MH0sZWZmZWN0czpudWxsfX1cbmZ1bmN0aW9uIGJoKGEsYil7YT1hLnVwZGF0ZVF1ZXVlO2IudXBkYXRlUXVldWU9PT1hJiYoYi51cGRhdGVRdWV1ZT17YmFzZVN0YXRlOmEuYmFzZVN0YXRlLGZpcnN0QmFzZVVwZGF0ZTphLmZpcnN0QmFzZVVwZGF0ZSxsYXN0QmFzZVVwZGF0ZTphLmxhc3RCYXNlVXBkYXRlLHNoYXJlZDphLnNoYXJlZCxlZmZlY3RzOmEuZWZmZWN0c30pfWZ1bmN0aW9uIGNoKGEsYil7cmV0dXJue2V2ZW50VGltZTphLGxhbmU6Yix0YWc6MCxwYXlsb2FkOm51bGwsY2FsbGJhY2s6bnVsbCxuZXh0Om51bGx9fVxuZnVuY3Rpb24gZGgoYSxiLGMpe3ZhciBkPWEudXBkYXRlUXVldWU7aWYobnVsbD09PWQpcmV0dXJuIG51bGw7ZD1kLnNoYXJlZDtpZigwIT09KEsmMikpe3ZhciBlPWQucGVuZGluZztudWxsPT09ZT9iLm5leHQ9YjooYi5uZXh0PWUubmV4dCxlLm5leHQ9Yik7ZC5wZW5kaW5nPWI7cmV0dXJuIFpnKGEsYyl9ZT1kLmludGVybGVhdmVkO251bGw9PT1lPyhiLm5leHQ9YixYZyhkKSk6KGIubmV4dD1lLm5leHQsZS5uZXh0PWIpO2QuaW50ZXJsZWF2ZWQ9YjtyZXR1cm4gWmcoYSxjKX1mdW5jdGlvbiBlaChhLGIsYyl7Yj1iLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1iJiYoYj1iLnNoYXJlZCwwIT09KGMmNDE5NDI0MCkpKXt2YXIgZD1iLmxhbmVzO2QmPWEucGVuZGluZ0xhbmVzO2N8PWQ7Yi5sYW5lcz1jO0NjKGEsYyl9fVxuZnVuY3Rpb24gZmgoYSxiKXt2YXIgYz1hLnVwZGF0ZVF1ZXVlLGQ9YS5hbHRlcm5hdGU7aWYobnVsbCE9PWQmJihkPWQudXBkYXRlUXVldWUsYz09PWQpKXt2YXIgZT1udWxsLGY9bnVsbDtjPWMuZmlyc3RCYXNlVXBkYXRlO2lmKG51bGwhPT1jKXtkb3t2YXIgZz17ZXZlbnRUaW1lOmMuZXZlbnRUaW1lLGxhbmU6Yy5sYW5lLHRhZzpjLnRhZyxwYXlsb2FkOmMucGF5bG9hZCxjYWxsYmFjazpjLmNhbGxiYWNrLG5leHQ6bnVsbH07bnVsbD09PWY/ZT1mPWc6Zj1mLm5leHQ9ZztjPWMubmV4dH13aGlsZShudWxsIT09Yyk7bnVsbD09PWY/ZT1mPWI6Zj1mLm5leHQ9Yn1lbHNlIGU9Zj1iO2M9e2Jhc2VTdGF0ZTpkLmJhc2VTdGF0ZSxmaXJzdEJhc2VVcGRhdGU6ZSxsYXN0QmFzZVVwZGF0ZTpmLHNoYXJlZDpkLnNoYXJlZCxlZmZlY3RzOmQuZWZmZWN0c307YS51cGRhdGVRdWV1ZT1jO3JldHVybn1hPWMubGFzdEJhc2VVcGRhdGU7bnVsbD09PWE/Yy5maXJzdEJhc2VVcGRhdGU9YjphLm5leHQ9XG5iO2MubGFzdEJhc2VVcGRhdGU9Yn1cbmZ1bmN0aW9uIGdoKGEsYixjLGQpe3ZhciBlPWEudXBkYXRlUXVldWU7JGc9ITE7dmFyIGY9ZS5maXJzdEJhc2VVcGRhdGUsZz1lLmxhc3RCYXNlVXBkYXRlLGg9ZS5zaGFyZWQucGVuZGluZztpZihudWxsIT09aCl7ZS5zaGFyZWQucGVuZGluZz1udWxsO3ZhciBrPWgsbD1rLm5leHQ7ay5uZXh0PW51bGw7bnVsbD09PWc/Zj1sOmcubmV4dD1sO2c9azt2YXIgbT1hLmFsdGVybmF0ZTtudWxsIT09bSYmKG09bS51cGRhdGVRdWV1ZSxoPW0ubGFzdEJhc2VVcGRhdGUsaCE9PWcmJihudWxsPT09aD9tLmZpcnN0QmFzZVVwZGF0ZT1sOmgubmV4dD1sLG0ubGFzdEJhc2VVcGRhdGU9aykpfWlmKG51bGwhPT1mKXt2YXIgcT1lLmJhc2VTdGF0ZTtnPTA7bT1sPWs9bnVsbDtoPWY7ZG97dmFyIHI9aC5sYW5lLHk9aC5ldmVudFRpbWU7aWYoKGQmcik9PT1yKXtudWxsIT09bSYmKG09bS5uZXh0PXtldmVudFRpbWU6eSxsYW5lOjAsdGFnOmgudGFnLHBheWxvYWQ6aC5wYXlsb2FkLGNhbGxiYWNrOmguY2FsbGJhY2ssXG5uZXh0Om51bGx9KTthOnt2YXIgbj1hLHQ9aDtyPWI7eT1jO3N3aXRjaCh0LnRhZyl7Y2FzZSAxOm49dC5wYXlsb2FkO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBuKXtxPW4uY2FsbCh5LHEscik7YnJlYWsgYX1xPW47YnJlYWsgYTtjYXNlIDM6bi5mbGFncz1uLmZsYWdzJi02NTUzN3wxMjg7Y2FzZSAwOm49dC5wYXlsb2FkO3I9XCJmdW5jdGlvblwiPT09dHlwZW9mIG4/bi5jYWxsKHkscSxyKTpuO2lmKG51bGw9PT1yfHx2b2lkIDA9PT1yKWJyZWFrIGE7cT1BKHt9LHEscik7YnJlYWsgYTtjYXNlIDI6JGc9ITB9fW51bGwhPT1oLmNhbGxiYWNrJiYwIT09aC5sYW5lJiYoYS5mbGFnc3w9NjQscj1lLmVmZmVjdHMsbnVsbD09PXI/ZS5lZmZlY3RzPVtoXTpyLnB1c2goaCkpfWVsc2UgeT17ZXZlbnRUaW1lOnksbGFuZTpyLHRhZzpoLnRhZyxwYXlsb2FkOmgucGF5bG9hZCxjYWxsYmFjazpoLmNhbGxiYWNrLG5leHQ6bnVsbH0sbnVsbD09PW0/KGw9bT15LGs9cSk6bT1tLm5leHQ9eSxnfD1yO1xuaD1oLm5leHQ7aWYobnVsbD09PWgpaWYoaD1lLnNoYXJlZC5wZW5kaW5nLG51bGw9PT1oKWJyZWFrO2Vsc2Ugcj1oLGg9ci5uZXh0LHIubmV4dD1udWxsLGUubGFzdEJhc2VVcGRhdGU9cixlLnNoYXJlZC5wZW5kaW5nPW51bGx9d2hpbGUoMSk7bnVsbD09PW0mJihrPXEpO2UuYmFzZVN0YXRlPWs7ZS5maXJzdEJhc2VVcGRhdGU9bDtlLmxhc3RCYXNlVXBkYXRlPW07Yj1lLnNoYXJlZC5pbnRlcmxlYXZlZDtpZihudWxsIT09Yil7ZT1iO2RvIGd8PWUubGFuZSxlPWUubmV4dDt3aGlsZShlIT09Yil9ZWxzZSBudWxsPT09ZiYmKGUuc2hhcmVkLmxhbmVzPTApO2hofD1nO2EubGFuZXM9ZzthLm1lbW9pemVkU3RhdGU9cX19XG5mdW5jdGlvbiBpaChhLGIsYyl7YT1iLmVmZmVjdHM7Yi5lZmZlY3RzPW51bGw7aWYobnVsbCE9PWEpZm9yKGI9MDtiPGEubGVuZ3RoO2IrKyl7dmFyIGQ9YVtiXSxlPWQuY2FsbGJhY2s7aWYobnVsbCE9PWUpe2QuY2FsbGJhY2s9bnVsbDtkPWM7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGUpdGhyb3cgRXJyb3IocCgxOTEsZSkpO2UuY2FsbChkKX19fXZhciBqaD0obmV3IGFhLkNvbXBvbmVudCkucmVmcztmdW5jdGlvbiBraChhLGIsYyxkKXtiPWEubWVtb2l6ZWRTdGF0ZTtjPWMoZCxiKTtjPW51bGw9PT1jfHx2b2lkIDA9PT1jP2I6QSh7fSxiLGMpO2EubWVtb2l6ZWRTdGF0ZT1jOzA9PT1hLmxhbmVzJiYoYS51cGRhdGVRdWV1ZS5iYXNlU3RhdGU9Yyl9XG52YXIgbmg9e2lzTW91bnRlZDpmdW5jdGlvbihhKXtyZXR1cm4oYT1hLl9yZWFjdEludGVybmFscyk/VmIoYSk9PT1hOiExfSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbHM7dmFyIGQ9TCgpLGU9bGgoYSksZj1jaChkLGUpO2YucGF5bG9hZD1iO3ZvaWQgMCE9PWMmJm51bGwhPT1jJiYoZi5jYWxsYmFjaz1jKTtiPWRoKGEsZixlKTtudWxsIT09YiYmKG1oKGIsYSxlLGQpLGVoKGIsYSxlKSl9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbHM7dmFyIGQ9TCgpLGU9bGgoYSksZj1jaChkLGUpO2YudGFnPTE7Zi5wYXlsb2FkPWI7dm9pZCAwIT09YyYmbnVsbCE9PWMmJihmLmNhbGxiYWNrPWMpO2I9ZGgoYSxmLGUpO251bGwhPT1iJiYobWgoYixhLGUsZCksZWgoYixhLGUpKX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKGEsYil7YT1hLl9yZWFjdEludGVybmFsczt2YXIgYz1MKCksZD1cbmxoKGEpLGU9Y2goYyxkKTtlLnRhZz0yO3ZvaWQgMCE9PWImJm51bGwhPT1iJiYoZS5jYWxsYmFjaz1iKTtiPWRoKGEsZSxkKTtudWxsIT09YiYmKG1oKGIsYSxkLGMpLGVoKGIsYSxkKSl9fTtmdW5jdGlvbiBvaChhLGIsYyxkLGUsZixnKXthPWEuc3RhdGVOb2RlO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLnNob3VsZENvbXBvbmVudFVwZGF0ZT9hLnNob3VsZENvbXBvbmVudFVwZGF0ZShkLGYsZyk6Yi5wcm90b3R5cGUmJmIucHJvdG90eXBlLmlzUHVyZVJlYWN0Q29tcG9uZW50PyFJZShjLGQpfHwhSWUoZSxmKTohMH1cbmZ1bmN0aW9uIHBoKGEsYixjKXt2YXIgZD0hMSxlPVZmO3ZhciBmPWIuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09Zj9mPVZnKGYpOihlPVpmKGIpP1hmOkguY3VycmVudCxkPWIuY29udGV4dFR5cGVzLGY9KGQ9bnVsbCE9PWQmJnZvaWQgMCE9PWQpP1lmKGEsZSk6VmYpO2I9bmV3IGIoYyxmKTthLm1lbW9pemVkU3RhdGU9bnVsbCE9PWIuc3RhdGUmJnZvaWQgMCE9PWIuc3RhdGU/Yi5zdGF0ZTpudWxsO2IudXBkYXRlcj1uaDthLnN0YXRlTm9kZT1iO2IuX3JlYWN0SW50ZXJuYWxzPWE7ZCYmKGE9YS5zdGF0ZU5vZGUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1mKTtyZXR1cm4gYn1cbmZ1bmN0aW9uIHFoKGEsYixjLGQpe2E9Yi5zdGF0ZTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO2Iuc3RhdGUhPT1hJiZuaC5lbnF1ZXVlUmVwbGFjZVN0YXRlKGIsYi5zdGF0ZSxudWxsKX1cbmZ1bmN0aW9uIHJoKGEsYixjLGQpe3ZhciBlPWEuc3RhdGVOb2RlO2UucHJvcHM9YztlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtlLnJlZnM9amg7YWgoYSk7dmFyIGY9Yi5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mP2UuY29udGV4dD1WZyhmKTooZj1aZihiKT9YZjpILmN1cnJlbnQsZS5jb250ZXh0PVlmKGEsZikpO2Uuc3RhdGU9YS5tZW1vaXplZFN0YXRlO2Y9Yi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7XCJmdW5jdGlvblwiPT09dHlwZW9mIGYmJihraChhLGIsZixjKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50fHwoYj1lLnN0YXRlLFxuXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50JiZlLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJmUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpLGIhPT1lLnN0YXRlJiZuaC5lbnF1ZXVlUmVwbGFjZVN0YXRlKGUsZS5zdGF0ZSxudWxsKSxnaChhLGMsZSxkKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50RGlkTW91bnQmJihhLmZsYWdzfD00MTk0MzA4KX1cbmZ1bmN0aW9uIHNoKGEsYixjKXthPWMucmVmO2lmKG51bGwhPT1hJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmXCJvYmplY3RcIiE9PXR5cGVvZiBhKXtpZihjLl9vd25lcil7Yz1jLl9vd25lcjtpZihjKXtpZigxIT09Yy50YWcpdGhyb3cgRXJyb3IocCgzMDkpKTt2YXIgZD1jLnN0YXRlTm9kZX1pZighZCl0aHJvdyBFcnJvcihwKDE0NyxhKSk7dmFyIGU9ZCxmPVwiXCIrYTtpZihudWxsIT09YiYmbnVsbCE9PWIucmVmJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5yZWYmJmIucmVmLl9zdHJpbmdSZWY9PT1mKXJldHVybiBiLnJlZjtiPWZ1bmN0aW9uKGEpe3ZhciBiPWUucmVmcztiPT09amgmJihiPWUucmVmcz17fSk7bnVsbD09PWE/ZGVsZXRlIGJbZl06YltmXT1hfTtiLl9zdHJpbmdSZWY9ZjtyZXR1cm4gYn1pZihcInN0cmluZ1wiIT09dHlwZW9mIGEpdGhyb3cgRXJyb3IocCgyODQpKTtpZighYy5fb3duZXIpdGhyb3cgRXJyb3IocCgyOTAsYSkpO31yZXR1cm4gYX1cbmZ1bmN0aW9uIHRoKGEsYil7YT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYik7dGhyb3cgRXJyb3IocCgzMSxcIltvYmplY3QgT2JqZWN0XVwiPT09YT9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGIpLmpvaW4oXCIsIFwiKStcIn1cIjphKSk7fWZ1bmN0aW9uIHVoKGEpe3ZhciBiPWEuX2luaXQ7cmV0dXJuIGIoYS5fcGF5bG9hZCl9XG5mdW5jdGlvbiB2aChhKXtmdW5jdGlvbiBiKGIsYyl7aWYoYSl7dmFyIGQ9Yi5kZWxldGlvbnM7bnVsbD09PWQ/KGIuZGVsZXRpb25zPVtjXSxiLmZsYWdzfD0xNik6ZC5wdXNoKGMpfX1mdW5jdGlvbiBjKGMsZCl7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKDtudWxsIT09ZDspYihjLGQpLGQ9ZC5zaWJsaW5nO3JldHVybiBudWxsfWZ1bmN0aW9uIGQoYSxiKXtmb3IoYT1uZXcgTWFwO251bGwhPT1iOyludWxsIT09Yi5rZXk/YS5zZXQoYi5rZXksYik6YS5zZXQoYi5pbmRleCxiKSxiPWIuc2libGluZztyZXR1cm4gYX1mdW5jdGlvbiBlKGEsYil7YT13aChhLGIpO2EuaW5kZXg9MDthLnNpYmxpbmc9bnVsbDtyZXR1cm4gYX1mdW5jdGlvbiBmKGIsYyxkKXtiLmluZGV4PWQ7aWYoIWEpcmV0dXJuIGIuZmxhZ3N8PTEwNDg1NzYsYztkPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1kKXJldHVybiBkPWQuaW5kZXgsZDxjPyhiLmZsYWdzfD0yLGMpOmQ7Yi5mbGFnc3w9MjtyZXR1cm4gY31mdW5jdGlvbiBnKGIpe2EmJlxubnVsbD09PWIuYWx0ZXJuYXRlJiYoYi5mbGFnc3w9Mik7cmV0dXJuIGJ9ZnVuY3Rpb24gaChhLGIsYyxkKXtpZihudWxsPT09Ynx8NiE9PWIudGFnKXJldHVybiBiPXhoKGMsYS5tb2RlLGQpLGIucmV0dXJuPWEsYjtiPWUoYixjKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIGsoYSxiLGMsZCl7dmFyIGY9Yy50eXBlO2lmKGY9PT15YSlyZXR1cm4gbShhLGIsYy5wcm9wcy5jaGlsZHJlbixkLGMua2V5KTtpZihudWxsIT09YiYmKGIuZWxlbWVudFR5cGU9PT1mfHxcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mJiZmLiQkdHlwZW9mPT09SGEmJnVoKGYpPT09Yi50eXBlKSlyZXR1cm4gZD1lKGIsYy5wcm9wcyksZC5yZWY9c2goYSxiLGMpLGQucmV0dXJuPWEsZDtkPXloKGMudHlwZSxjLmtleSxjLnByb3BzLG51bGwsYS5tb2RlLGQpO2QucmVmPXNoKGEsYixjKTtkLnJldHVybj1hO3JldHVybiBkfWZ1bmN0aW9uIGwoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDQhPT1iLnRhZ3x8XG5iLnN0YXRlTm9kZS5jb250YWluZXJJbmZvIT09Yy5jb250YWluZXJJbmZvfHxiLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbiE9PWMuaW1wbGVtZW50YXRpb24pcmV0dXJuIGI9emgoYyxhLm1vZGUsZCksYi5yZXR1cm49YSxiO2I9ZShiLGMuY2hpbGRyZW58fFtdKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIG0oYSxiLGMsZCxmKXtpZihudWxsPT09Ynx8NyE9PWIudGFnKXJldHVybiBiPUFoKGMsYS5tb2RlLGQsZiksYi5yZXR1cm49YSxiO2I9ZShiLGMpO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gcShhLGIsYyl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBiJiZcIlwiIT09Ynx8XCJudW1iZXJcIj09PXR5cGVvZiBiKXJldHVybiBiPXhoKFwiXCIrYixhLm1vZGUsYyksYi5yZXR1cm49YSxiO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYiYmbnVsbCE9PWIpe3N3aXRjaChiLiQkdHlwZW9mKXtjYXNlIHZhOnJldHVybiBjPXloKGIudHlwZSxiLmtleSxiLnByb3BzLG51bGwsYS5tb2RlLGMpLFxuYy5yZWY9c2goYSxudWxsLGIpLGMucmV0dXJuPWEsYztjYXNlIHdhOnJldHVybiBiPXpoKGIsYS5tb2RlLGMpLGIucmV0dXJuPWEsYjtjYXNlIEhhOnZhciBkPWIuX2luaXQ7cmV0dXJuIHEoYSxkKGIuX3BheWxvYWQpLGMpfWlmKGViKGIpfHxLYShiKSlyZXR1cm4gYj1BaChiLGEubW9kZSxjLG51bGwpLGIucmV0dXJuPWEsYjt0aChhLGIpfXJldHVybiBudWxsfWZ1bmN0aW9uIHIoYSxiLGMsZCl7dmFyIGU9bnVsbCE9PWI/Yi5rZXk6bnVsbDtpZihcInN0cmluZ1wiPT09dHlwZW9mIGMmJlwiXCIhPT1jfHxcIm51bWJlclwiPT09dHlwZW9mIGMpcmV0dXJuIG51bGwhPT1lP251bGw6aChhLGIsXCJcIitjLGQpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYyYmbnVsbCE9PWMpe3N3aXRjaChjLiQkdHlwZW9mKXtjYXNlIHZhOnJldHVybiBjLmtleT09PWU/ayhhLGIsYyxkKTpudWxsO2Nhc2Ugd2E6cmV0dXJuIGMua2V5PT09ZT9sKGEsYixjLGQpOm51bGw7Y2FzZSBIYTpyZXR1cm4gZT1jLl9pbml0LHIoYSxcbmIsZShjLl9wYXlsb2FkKSxkKX1pZihlYihjKXx8S2EoYykpcmV0dXJuIG51bGwhPT1lP251bGw6bShhLGIsYyxkLG51bGwpO3RoKGEsYyl9cmV0dXJuIG51bGx9ZnVuY3Rpb24geShhLGIsYyxkLGUpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgZCYmXCJcIiE9PWR8fFwibnVtYmVyXCI9PT10eXBlb2YgZClyZXR1cm4gYT1hLmdldChjKXx8bnVsbCxoKGIsYSxcIlwiK2QsZSk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBkJiZudWxsIT09ZCl7c3dpdGNoKGQuJCR0eXBlb2Ype2Nhc2UgdmE6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLGsoYixhLGQsZSk7Y2FzZSB3YTpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsbChiLGEsZCxlKTtjYXNlIEhhOnZhciBmPWQuX2luaXQ7cmV0dXJuIHkoYSxiLGMsZihkLl9wYXlsb2FkKSxlKX1pZihlYihkKXx8S2EoZCkpcmV0dXJuIGE9YS5nZXQoYyl8fG51bGwsbShiLGEsZCxlLG51bGwpO3RoKGIsZCl9cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBuKGUsZyxoLGspe2Zvcih2YXIgbD1udWxsLG09bnVsbCx1PWcsdz1nPTAseD1udWxsO251bGwhPT11JiZ3PGgubGVuZ3RoO3crKyl7dS5pbmRleD53Pyh4PXUsdT1udWxsKTp4PXUuc2libGluZzt2YXIgbj1yKGUsdSxoW3ddLGspO2lmKG51bGw9PT1uKXtudWxsPT09dSYmKHU9eCk7YnJlYWt9YSYmdSYmbnVsbD09PW4uYWx0ZXJuYXRlJiZiKGUsdSk7Zz1mKG4sZyx3KTtudWxsPT09bT9sPW46bS5zaWJsaW5nPW47bT1uO3U9eH1pZih3PT09aC5sZW5ndGgpcmV0dXJuIGMoZSx1KSxJJiZ0ZyhlLHcpLGw7aWYobnVsbD09PXUpe2Zvcig7dzxoLmxlbmd0aDt3KyspdT1xKGUsaFt3XSxrKSxudWxsIT09dSYmKGc9Zih1LGcsdyksbnVsbD09PW0/bD11Om0uc2libGluZz11LG09dSk7SSYmdGcoZSx3KTtyZXR1cm4gbH1mb3IodT1kKGUsdSk7dzxoLmxlbmd0aDt3KyspeD15KHUsZSx3LGhbd10sayksbnVsbCE9PXgmJihhJiZudWxsIT09eC5hbHRlcm5hdGUmJnUuZGVsZXRlKG51bGw9PT1cbngua2V5P3c6eC5rZXkpLGc9Zih4LGcsdyksbnVsbD09PW0/bD14Om0uc2libGluZz14LG09eCk7YSYmdS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JldHVybiBiKGUsYSl9KTtJJiZ0ZyhlLHcpO3JldHVybiBsfWZ1bmN0aW9uIHQoZSxnLGgsayl7dmFyIGw9S2EoaCk7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGwpdGhyb3cgRXJyb3IocCgxNTApKTtoPWwuY2FsbChoKTtpZihudWxsPT1oKXRocm93IEVycm9yKHAoMTUxKSk7Zm9yKHZhciB1PWw9bnVsbCxtPWcsdz1nPTAseD1udWxsLG49aC5uZXh0KCk7bnVsbCE9PW0mJiFuLmRvbmU7dysrLG49aC5uZXh0KCkpe20uaW5kZXg+dz8oeD1tLG09bnVsbCk6eD1tLnNpYmxpbmc7dmFyIHQ9cihlLG0sbi52YWx1ZSxrKTtpZihudWxsPT09dCl7bnVsbD09PW0mJihtPXgpO2JyZWFrfWEmJm0mJm51bGw9PT10LmFsdGVybmF0ZSYmYihlLG0pO2c9Zih0LGcsdyk7bnVsbD09PXU/bD10OnUuc2libGluZz10O3U9dDttPXh9aWYobi5kb25lKXJldHVybiBjKGUsXG5tKSxJJiZ0ZyhlLHcpLGw7aWYobnVsbD09PW0pe2Zvcig7IW4uZG9uZTt3Kyssbj1oLm5leHQoKSluPXEoZSxuLnZhbHVlLGspLG51bGwhPT1uJiYoZz1mKG4sZyx3KSxudWxsPT09dT9sPW46dS5zaWJsaW5nPW4sdT1uKTtJJiZ0ZyhlLHcpO3JldHVybiBsfWZvcihtPWQoZSxtKTshbi5kb25lO3crKyxuPWgubmV4dCgpKW49eShtLGUsdyxuLnZhbHVlLGspLG51bGwhPT1uJiYoYSYmbnVsbCE9PW4uYWx0ZXJuYXRlJiZtLmRlbGV0ZShudWxsPT09bi5rZXk/dzpuLmtleSksZz1mKG4sZyx3KSxudWxsPT09dT9sPW46dS5zaWJsaW5nPW4sdT1uKTthJiZtLmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO0kmJnRnKGUsdyk7cmV0dXJuIGx9ZnVuY3Rpb24gSihhLGQsZixoKXtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mJiZmLnR5cGU9PT15YSYmbnVsbD09PWYua2V5JiYoZj1mLnByb3BzLmNoaWxkcmVuKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mKXtzd2l0Y2goZi4kJHR5cGVvZil7Y2FzZSB2YTphOntmb3IodmFyIGs9XG5mLmtleSxsPWQ7bnVsbCE9PWw7KXtpZihsLmtleT09PWspe2s9Zi50eXBlO2lmKGs9PT15YSl7aWYoNz09PWwudGFnKXtjKGEsbC5zaWJsaW5nKTtkPWUobCxmLnByb3BzLmNoaWxkcmVuKTtkLnJldHVybj1hO2E9ZDticmVhayBhfX1lbHNlIGlmKGwuZWxlbWVudFR5cGU9PT1rfHxcIm9iamVjdFwiPT09dHlwZW9mIGsmJm51bGwhPT1rJiZrLiQkdHlwZW9mPT09SGEmJnVoKGspPT09bC50eXBlKXtjKGEsbC5zaWJsaW5nKTtkPWUobCxmLnByb3BzKTtkLnJlZj1zaChhLGwsZik7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1jKGEsbCk7YnJlYWt9ZWxzZSBiKGEsbCk7bD1sLnNpYmxpbmd9Zi50eXBlPT09eWE/KGQ9QWgoZi5wcm9wcy5jaGlsZHJlbixhLm1vZGUsaCxmLmtleSksZC5yZXR1cm49YSxhPWQpOihoPXloKGYudHlwZSxmLmtleSxmLnByb3BzLG51bGwsYS5tb2RlLGgpLGgucmVmPXNoKGEsZCxmKSxoLnJldHVybj1hLGE9aCl9cmV0dXJuIGcoYSk7Y2FzZSB3YTphOntmb3IobD1mLmtleTtudWxsIT09XG5kOyl7aWYoZC5rZXk9PT1sKWlmKDQ9PT1kLnRhZyYmZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbz09PWYuY29udGFpbmVySW5mbyYmZC5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb249PT1mLmltcGxlbWVudGF0aW9uKXtjKGEsZC5zaWJsaW5nKTtkPWUoZCxmLmNoaWxkcmVufHxbXSk7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1lbHNle2MoYSxkKTticmVha31lbHNlIGIoYSxkKTtkPWQuc2libGluZ31kPXpoKGYsYS5tb2RlLGgpO2QucmV0dXJuPWE7YT1kfXJldHVybiBnKGEpO2Nhc2UgSGE6cmV0dXJuIGw9Zi5faW5pdCxKKGEsZCxsKGYuX3BheWxvYWQpLGgpfWlmKGViKGYpKXJldHVybiBuKGEsZCxmLGgpO2lmKEthKGYpKXJldHVybiB0KGEsZCxmLGgpO3RoKGEsZil9cmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBmJiZcIlwiIT09Znx8XCJudW1iZXJcIj09PXR5cGVvZiBmPyhmPVwiXCIrZixudWxsIT09ZCYmNj09PWQudGFnPyhjKGEsZC5zaWJsaW5nKSxkPWUoZCxmKSxkLnJldHVybj1hLGE9ZCk6XG4oYyhhLGQpLGQ9eGgoZixhLm1vZGUsaCksZC5yZXR1cm49YSxhPWQpLGcoYSkpOmMoYSxkKX1yZXR1cm4gSn12YXIgQmg9dmgoITApLENoPXZoKCExKSxEaD17fSxFaD1VZihEaCksRmg9VWYoRGgpLEdoPVVmKERoKTtmdW5jdGlvbiBIaChhKXtpZihhPT09RGgpdGhyb3cgRXJyb3IocCgxNzQpKTtyZXR1cm4gYX1mdW5jdGlvbiBJaChhLGIpe0coR2gsYik7RyhGaCxhKTtHKEVoLERoKTthPWIubm9kZVR5cGU7c3dpdGNoKGEpe2Nhc2UgOTpjYXNlIDExOmI9KGI9Yi5kb2N1bWVudEVsZW1lbnQpP2IubmFtZXNwYWNlVVJJOmxiKG51bGwsXCJcIik7YnJlYWs7ZGVmYXVsdDphPTg9PT1hP2IucGFyZW50Tm9kZTpiLGI9YS5uYW1lc3BhY2VVUkl8fG51bGwsYT1hLnRhZ05hbWUsYj1sYihiLGEpfUUoRWgpO0coRWgsYil9ZnVuY3Rpb24gSmgoKXtFKEVoKTtFKEZoKTtFKEdoKX1cbmZ1bmN0aW9uIEtoKGEpe0hoKEdoLmN1cnJlbnQpO3ZhciBiPUhoKEVoLmN1cnJlbnQpO3ZhciBjPWxiKGIsYS50eXBlKTtiIT09YyYmKEcoRmgsYSksRyhFaCxjKSl9ZnVuY3Rpb24gTGgoYSl7RmguY3VycmVudD09PWEmJihFKEVoKSxFKEZoKSl9dmFyIE09VWYoMCk7XG5mdW5jdGlvbiBNaChhKXtmb3IodmFyIGI9YTtudWxsIT09Yjspe2lmKDEzPT09Yi50YWcpe3ZhciBjPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09YyYmKGM9Yy5kZWh5ZHJhdGVkLG51bGw9PT1jfHxcIiQ/XCI9PT1jLmRhdGF8fFwiJCFcIj09PWMuZGF0YSkpcmV0dXJuIGJ9ZWxzZSBpZigxOT09PWIudGFnJiZ2b2lkIDAhPT1iLm1lbW9pemVkUHJvcHMucmV2ZWFsT3JkZXIpe2lmKDAhPT0oYi5mbGFncyYxMjgpKXJldHVybiBifWVsc2UgaWYobnVsbCE9PWIuY2hpbGQpe2IuY2hpbGQucmV0dXJuPWI7Yj1iLmNoaWxkO2NvbnRpbnVlfWlmKGI9PT1hKWJyZWFrO2Zvcig7bnVsbD09PWIuc2libGluZzspe2lmKG51bGw9PT1iLnJldHVybnx8Yi5yZXR1cm49PT1hKXJldHVybiBudWxsO2I9Yi5yZXR1cm59Yi5zaWJsaW5nLnJldHVybj1iLnJldHVybjtiPWIuc2libGluZ31yZXR1cm4gbnVsbH12YXIgTmg9W107XG5mdW5jdGlvbiBPaCgpe2Zvcih2YXIgYT0wO2E8TmgubGVuZ3RoO2ErKylOaFthXS5fd29ya0luUHJvZ3Jlc3NWZXJzaW9uUHJpbWFyeT1udWxsO05oLmxlbmd0aD0wfXZhciBQaD11YS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLFFoPXVhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnLFJoPTAsTj1udWxsLE89bnVsbCxQPW51bGwsU2g9ITEsVGg9ITEsVWg9MCxWaD0wO2Z1bmN0aW9uIFEoKXt0aHJvdyBFcnJvcihwKDMyMSkpO31mdW5jdGlvbiBXaChhLGIpe2lmKG51bGw9PT1iKXJldHVybiExO2Zvcih2YXIgYz0wO2M8Yi5sZW5ndGgmJmM8YS5sZW5ndGg7YysrKWlmKCFIZShhW2NdLGJbY10pKXJldHVybiExO3JldHVybiEwfVxuZnVuY3Rpb24gWGgoYSxiLGMsZCxlLGYpe1JoPWY7Tj1iO2IubWVtb2l6ZWRTdGF0ZT1udWxsO2IudXBkYXRlUXVldWU9bnVsbDtiLmxhbmVzPTA7UGguY3VycmVudD1udWxsPT09YXx8bnVsbD09PWEubWVtb2l6ZWRTdGF0ZT9ZaDpaaDthPWMoZCxlKTtpZihUaCl7Zj0wO2Rve1RoPSExO1VoPTA7aWYoMjU8PWYpdGhyb3cgRXJyb3IocCgzMDEpKTtmKz0xO1A9Tz1udWxsO2IudXBkYXRlUXVldWU9bnVsbDtQaC5jdXJyZW50PSRoO2E9YyhkLGUpfXdoaWxlKFRoKX1QaC5jdXJyZW50PWFpO2I9bnVsbCE9PU8mJm51bGwhPT1PLm5leHQ7Umg9MDtQPU89Tj1udWxsO1NoPSExO2lmKGIpdGhyb3cgRXJyb3IocCgzMDApKTtyZXR1cm4gYX1mdW5jdGlvbiBiaSgpe3ZhciBhPTAhPT1VaDtVaD0wO3JldHVybiBhfVxuZnVuY3Rpb24gY2koKXt2YXIgYT17bWVtb2l6ZWRTdGF0ZTpudWxsLGJhc2VTdGF0ZTpudWxsLGJhc2VRdWV1ZTpudWxsLHF1ZXVlOm51bGwsbmV4dDpudWxsfTtudWxsPT09UD9OLm1lbW9pemVkU3RhdGU9UD1hOlA9UC5uZXh0PWE7cmV0dXJuIFB9ZnVuY3Rpb24gZGkoKXtpZihudWxsPT09Tyl7dmFyIGE9Ti5hbHRlcm5hdGU7YT1udWxsIT09YT9hLm1lbW9pemVkU3RhdGU6bnVsbH1lbHNlIGE9Ty5uZXh0O3ZhciBiPW51bGw9PT1QP04ubWVtb2l6ZWRTdGF0ZTpQLm5leHQ7aWYobnVsbCE9PWIpUD1iLE89YTtlbHNle2lmKG51bGw9PT1hKXRocm93IEVycm9yKHAoMzEwKSk7Tz1hO2E9e21lbW9pemVkU3RhdGU6Ty5tZW1vaXplZFN0YXRlLGJhc2VTdGF0ZTpPLmJhc2VTdGF0ZSxiYXNlUXVldWU6Ty5iYXNlUXVldWUscXVldWU6Ty5xdWV1ZSxuZXh0Om51bGx9O251bGw9PT1QP04ubWVtb2l6ZWRTdGF0ZT1QPWE6UD1QLm5leHQ9YX1yZXR1cm4gUH1cbmZ1bmN0aW9uIGVpKGEsYil7cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGI/YihhKTpifVxuZnVuY3Rpb24gZmkoYSl7dmFyIGI9ZGkoKSxjPWIucXVldWU7aWYobnVsbD09PWMpdGhyb3cgRXJyb3IocCgzMTEpKTtjLmxhc3RSZW5kZXJlZFJlZHVjZXI9YTt2YXIgZD1PLGU9ZC5iYXNlUXVldWUsZj1jLnBlbmRpbmc7aWYobnVsbCE9PWYpe2lmKG51bGwhPT1lKXt2YXIgZz1lLm5leHQ7ZS5uZXh0PWYubmV4dDtmLm5leHQ9Z31kLmJhc2VRdWV1ZT1lPWY7Yy5wZW5kaW5nPW51bGx9aWYobnVsbCE9PWUpe2Y9ZS5uZXh0O2Q9ZC5iYXNlU3RhdGU7dmFyIGg9Zz1udWxsLGs9bnVsbCxsPWY7ZG97dmFyIG09bC5sYW5lO2lmKChSaCZtKT09PW0pbnVsbCE9PWsmJihrPWsubmV4dD17bGFuZTowLGFjdGlvbjpsLmFjdGlvbixoYXNFYWdlclN0YXRlOmwuaGFzRWFnZXJTdGF0ZSxlYWdlclN0YXRlOmwuZWFnZXJTdGF0ZSxuZXh0Om51bGx9KSxkPWwuaGFzRWFnZXJTdGF0ZT9sLmVhZ2VyU3RhdGU6YShkLGwuYWN0aW9uKTtlbHNle3ZhciBxPXtsYW5lOm0sYWN0aW9uOmwuYWN0aW9uLGhhc0VhZ2VyU3RhdGU6bC5oYXNFYWdlclN0YXRlLFxuZWFnZXJTdGF0ZTpsLmVhZ2VyU3RhdGUsbmV4dDpudWxsfTtudWxsPT09az8oaD1rPXEsZz1kKTprPWsubmV4dD1xO04ubGFuZXN8PW07aGh8PW19bD1sLm5leHR9d2hpbGUobnVsbCE9PWwmJmwhPT1mKTtudWxsPT09az9nPWQ6ay5uZXh0PWg7SGUoZCxiLm1lbW9pemVkU3RhdGUpfHwoVWc9ITApO2IubWVtb2l6ZWRTdGF0ZT1kO2IuYmFzZVN0YXRlPWc7Yi5iYXNlUXVldWU9aztjLmxhc3RSZW5kZXJlZFN0YXRlPWR9YT1jLmludGVybGVhdmVkO2lmKG51bGwhPT1hKXtlPWE7ZG8gZj1lLmxhbmUsTi5sYW5lc3w9ZixoaHw9ZixlPWUubmV4dDt3aGlsZShlIT09YSl9ZWxzZSBudWxsPT09ZSYmKGMubGFuZXM9MCk7cmV0dXJuW2IubWVtb2l6ZWRTdGF0ZSxjLmRpc3BhdGNoXX1cbmZ1bmN0aW9uIGdpKGEpe3ZhciBiPWRpKCksYz1iLnF1ZXVlO2lmKG51bGw9PT1jKXRocm93IEVycm9yKHAoMzExKSk7Yy5sYXN0UmVuZGVyZWRSZWR1Y2VyPWE7dmFyIGQ9Yy5kaXNwYXRjaCxlPWMucGVuZGluZyxmPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZSl7Yy5wZW5kaW5nPW51bGw7dmFyIGc9ZT1lLm5leHQ7ZG8gZj1hKGYsZy5hY3Rpb24pLGc9Zy5uZXh0O3doaWxlKGchPT1lKTtIZShmLGIubWVtb2l6ZWRTdGF0ZSl8fChVZz0hMCk7Yi5tZW1vaXplZFN0YXRlPWY7bnVsbD09PWIuYmFzZVF1ZXVlJiYoYi5iYXNlU3RhdGU9Zik7Yy5sYXN0UmVuZGVyZWRTdGF0ZT1mfXJldHVybltmLGRdfWZ1bmN0aW9uIGhpKCl7fVxuZnVuY3Rpb24gaWkoYSxiKXt2YXIgYz1OLGQ9ZGkoKSxlPWIoKSxmPSFIZShkLm1lbW9pemVkU3RhdGUsZSk7ZiYmKGQubWVtb2l6ZWRTdGF0ZT1lLFVnPSEwKTtkPWQucXVldWU7amkoa2kuYmluZChudWxsLGMsZCxhKSxbYV0pO2lmKGQuZ2V0U25hcHNob3QhPT1ifHxmfHxudWxsIT09UCYmUC5tZW1vaXplZFN0YXRlLnRhZyYxKXtjLmZsYWdzfD0yMDQ4O2xpKDksbWkuYmluZChudWxsLGMsZCxlLGIpLHZvaWQgMCxudWxsKTtpZihudWxsPT09Uil0aHJvdyBFcnJvcihwKDM0OSkpOzAhPT0oUmgmMzApfHxuaShjLGIsZSl9cmV0dXJuIGV9ZnVuY3Rpb24gbmkoYSxiLGMpe2EuZmxhZ3N8PTE2Mzg0O2E9e2dldFNuYXBzaG90OmIsdmFsdWU6Y307Yj1OLnVwZGF0ZVF1ZXVlO251bGw9PT1iPyhiPXtsYXN0RWZmZWN0Om51bGwsc3RvcmVzOm51bGx9LE4udXBkYXRlUXVldWU9YixiLnN0b3Jlcz1bYV0pOihjPWIuc3RvcmVzLG51bGw9PT1jP2Iuc3RvcmVzPVthXTpjLnB1c2goYSkpfVxuZnVuY3Rpb24gbWkoYSxiLGMsZCl7Yi52YWx1ZT1jO2IuZ2V0U25hcHNob3Q9ZDtvaShiKSYmcGkoYSl9ZnVuY3Rpb24ga2koYSxiLGMpe3JldHVybiBjKGZ1bmN0aW9uKCl7b2koYikmJnBpKGEpfSl9ZnVuY3Rpb24gb2koYSl7dmFyIGI9YS5nZXRTbmFwc2hvdDthPWEudmFsdWU7dHJ5e3ZhciBjPWIoKTtyZXR1cm4hSGUoYSxjKX1jYXRjaChkKXtyZXR1cm4hMH19ZnVuY3Rpb24gcGkoYSl7dmFyIGI9WmcoYSwxKTtudWxsIT09YiYmbWgoYixhLDEsLTEpfVxuZnVuY3Rpb24gcWkoYSl7dmFyIGI9Y2koKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSYmKGE9YSgpKTtiLm1lbW9pemVkU3RhdGU9Yi5iYXNlU3RhdGU9YTthPXtwZW5kaW5nOm51bGwsaW50ZXJsZWF2ZWQ6bnVsbCxsYW5lczowLGRpc3BhdGNoOm51bGwsbGFzdFJlbmRlcmVkUmVkdWNlcjplaSxsYXN0UmVuZGVyZWRTdGF0ZTphfTtiLnF1ZXVlPWE7YT1hLmRpc3BhdGNoPXJpLmJpbmQobnVsbCxOLGEpO3JldHVybltiLm1lbW9pemVkU3RhdGUsYV19XG5mdW5jdGlvbiBsaShhLGIsYyxkKXthPXt0YWc6YSxjcmVhdGU6YixkZXN0cm95OmMsZGVwczpkLG5leHQ6bnVsbH07Yj1OLnVwZGF0ZVF1ZXVlO251bGw9PT1iPyhiPXtsYXN0RWZmZWN0Om51bGwsc3RvcmVzOm51bGx9LE4udXBkYXRlUXVldWU9YixiLmxhc3RFZmZlY3Q9YS5uZXh0PWEpOihjPWIubGFzdEVmZmVjdCxudWxsPT09Yz9iLmxhc3RFZmZlY3Q9YS5uZXh0PWE6KGQ9Yy5uZXh0LGMubmV4dD1hLGEubmV4dD1kLGIubGFzdEVmZmVjdD1hKSk7cmV0dXJuIGF9ZnVuY3Rpb24gc2koKXtyZXR1cm4gZGkoKS5tZW1vaXplZFN0YXRlfWZ1bmN0aW9uIHRpKGEsYixjLGQpe3ZhciBlPWNpKCk7Ti5mbGFnc3w9YTtlLm1lbW9pemVkU3RhdGU9bGkoMXxiLGMsdm9pZCAwLHZvaWQgMD09PWQ/bnVsbDpkKX1cbmZ1bmN0aW9uIHVpKGEsYixjLGQpe3ZhciBlPWRpKCk7ZD12b2lkIDA9PT1kP251bGw6ZDt2YXIgZj12b2lkIDA7aWYobnVsbCE9PU8pe3ZhciBnPU8ubWVtb2l6ZWRTdGF0ZTtmPWcuZGVzdHJveTtpZihudWxsIT09ZCYmV2goZCxnLmRlcHMpKXtlLm1lbW9pemVkU3RhdGU9bGkoYixjLGYsZCk7cmV0dXJufX1OLmZsYWdzfD1hO2UubWVtb2l6ZWRTdGF0ZT1saSgxfGIsYyxmLGQpfWZ1bmN0aW9uIHZpKGEsYil7cmV0dXJuIHRpKDgzOTA2NTYsOCxhLGIpfWZ1bmN0aW9uIGppKGEsYil7cmV0dXJuIHVpKDIwNDgsOCxhLGIpfWZ1bmN0aW9uIHdpKGEsYil7cmV0dXJuIHVpKDQsMixhLGIpfWZ1bmN0aW9uIHhpKGEsYil7cmV0dXJuIHVpKDQsNCxhLGIpfVxuZnVuY3Rpb24geWkoYSxiKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYilyZXR1cm4gYT1hKCksYihhKSxmdW5jdGlvbigpe2IobnVsbCl9O2lmKG51bGwhPT1iJiZ2b2lkIDAhPT1iKXJldHVybiBhPWEoKSxiLmN1cnJlbnQ9YSxmdW5jdGlvbigpe2IuY3VycmVudD1udWxsfX1mdW5jdGlvbiB6aShhLGIsYyl7Yz1udWxsIT09YyYmdm9pZCAwIT09Yz9jLmNvbmNhdChbYV0pOm51bGw7cmV0dXJuIHVpKDQsNCx5aS5iaW5kKG51bGwsYixhKSxjKX1mdW5jdGlvbiBBaSgpe31mdW5jdGlvbiBCaShhLGIpe3ZhciBjPWRpKCk7Yj12b2lkIDA9PT1iP251bGw6Yjt2YXIgZD1jLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWQmJm51bGwhPT1iJiZXaChiLGRbMV0pKXJldHVybiBkWzBdO2MubWVtb2l6ZWRTdGF0ZT1bYSxiXTtyZXR1cm4gYX1cbmZ1bmN0aW9uIENpKGEsYil7dmFyIGM9ZGkoKTtiPXZvaWQgMD09PWI/bnVsbDpiO3ZhciBkPWMubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZCYmbnVsbCE9PWImJldoKGIsZFsxXSkpcmV0dXJuIGRbMF07YT1hKCk7Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfWZ1bmN0aW9uIERpKGEsYixjKXtpZigwPT09KFJoJjIxKSlyZXR1cm4gYS5iYXNlU3RhdGUmJihhLmJhc2VTdGF0ZT0hMSxVZz0hMCksYS5tZW1vaXplZFN0YXRlPWM7SGUoYyxiKXx8KGM9eWMoKSxOLmxhbmVzfD1jLGhofD1jLGEuYmFzZVN0YXRlPSEwKTtyZXR1cm4gYn1mdW5jdGlvbiBFaShhLGIpe3ZhciBjPUM7Qz0wIT09YyYmND5jP2M6NDthKCEwKTt2YXIgZD1RaC50cmFuc2l0aW9uO1FoLnRyYW5zaXRpb249e307dHJ5e2EoITEpLGIoKX1maW5hbGx5e0M9YyxRaC50cmFuc2l0aW9uPWR9fWZ1bmN0aW9uIEZpKCl7cmV0dXJuIGRpKCkubWVtb2l6ZWRTdGF0ZX1cbmZ1bmN0aW9uIEdpKGEsYixjKXt2YXIgZD1saChhKTtjPXtsYW5lOmQsYWN0aW9uOmMsaGFzRWFnZXJTdGF0ZTohMSxlYWdlclN0YXRlOm51bGwsbmV4dDpudWxsfTtpZihIaShhKSlJaShiLGMpO2Vsc2UgaWYoYz1ZZyhhLGIsYyxkKSxudWxsIT09Yyl7dmFyIGU9TCgpO21oKGMsYSxkLGUpO0ppKGMsYixkKX19XG5mdW5jdGlvbiByaShhLGIsYyl7dmFyIGQ9bGgoYSksZT17bGFuZTpkLGFjdGlvbjpjLGhhc0VhZ2VyU3RhdGU6ITEsZWFnZXJTdGF0ZTpudWxsLG5leHQ6bnVsbH07aWYoSGkoYSkpSWkoYixlKTtlbHNle3ZhciBmPWEuYWx0ZXJuYXRlO2lmKDA9PT1hLmxhbmVzJiYobnVsbD09PWZ8fDA9PT1mLmxhbmVzKSYmKGY9Yi5sYXN0UmVuZGVyZWRSZWR1Y2VyLG51bGwhPT1mKSl0cnl7dmFyIGc9Yi5sYXN0UmVuZGVyZWRTdGF0ZSxoPWYoZyxjKTtlLmhhc0VhZ2VyU3RhdGU9ITA7ZS5lYWdlclN0YXRlPWg7aWYoSGUoaCxnKSl7dmFyIGs9Yi5pbnRlcmxlYXZlZDtudWxsPT09az8oZS5uZXh0PWUsWGcoYikpOihlLm5leHQ9ay5uZXh0LGsubmV4dD1lKTtiLmludGVybGVhdmVkPWU7cmV0dXJufX1jYXRjaChsKXt9ZmluYWxseXt9Yz1ZZyhhLGIsZSxkKTtudWxsIT09YyYmKGU9TCgpLG1oKGMsYSxkLGUpLEppKGMsYixkKSl9fVxuZnVuY3Rpb24gSGkoYSl7dmFyIGI9YS5hbHRlcm5hdGU7cmV0dXJuIGE9PT1OfHxudWxsIT09YiYmYj09PU59ZnVuY3Rpb24gSWkoYSxiKXtUaD1TaD0hMDt2YXIgYz1hLnBlbmRpbmc7bnVsbD09PWM/Yi5uZXh0PWI6KGIubmV4dD1jLm5leHQsYy5uZXh0PWIpO2EucGVuZGluZz1ifWZ1bmN0aW9uIEppKGEsYixjKXtpZigwIT09KGMmNDE5NDI0MCkpe3ZhciBkPWIubGFuZXM7ZCY9YS5wZW5kaW5nTGFuZXM7Y3w9ZDtiLmxhbmVzPWM7Q2MoYSxjKX19XG52YXIgYWk9e3JlYWRDb250ZXh0OlZnLHVzZUNhbGxiYWNrOlEsdXNlQ29udGV4dDpRLHVzZUVmZmVjdDpRLHVzZUltcGVyYXRpdmVIYW5kbGU6USx1c2VJbnNlcnRpb25FZmZlY3Q6USx1c2VMYXlvdXRFZmZlY3Q6USx1c2VNZW1vOlEsdXNlUmVkdWNlcjpRLHVzZVJlZjpRLHVzZVN0YXRlOlEsdXNlRGVidWdWYWx1ZTpRLHVzZURlZmVycmVkVmFsdWU6USx1c2VUcmFuc2l0aW9uOlEsdXNlTXV0YWJsZVNvdXJjZTpRLHVzZVN5bmNFeHRlcm5hbFN0b3JlOlEsdXNlSWQ6USx1bnN0YWJsZV9pc05ld1JlY29uY2lsZXI6ITF9LFloPXtyZWFkQ29udGV4dDpWZyx1c2VDYWxsYmFjazpmdW5jdGlvbihhLGIpe2NpKCkubWVtb2l6ZWRTdGF0ZT1bYSx2b2lkIDA9PT1iP251bGw6Yl07cmV0dXJuIGF9LHVzZUNvbnRleHQ6VmcsdXNlRWZmZWN0OnZpLHVzZUltcGVyYXRpdmVIYW5kbGU6ZnVuY3Rpb24oYSxiLGMpe2M9bnVsbCE9PWMmJnZvaWQgMCE9PWM/Yy5jb25jYXQoW2FdKTpudWxsO3JldHVybiB0aSg0MTk0MzA4LFxuNCx5aS5iaW5kKG51bGwsYixhKSxjKX0sdXNlTGF5b3V0RWZmZWN0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIHRpKDQxOTQzMDgsNCxhLGIpfSx1c2VJbnNlcnRpb25FZmZlY3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gdGkoNCwyLGEsYil9LHVzZU1lbW86ZnVuY3Rpb24oYSxiKXt2YXIgYz1jaSgpO2I9dm9pZCAwPT09Yj9udWxsOmI7YT1hKCk7Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfSx1c2VSZWR1Y2VyOmZ1bmN0aW9uKGEsYixjKXt2YXIgZD1jaSgpO2I9dm9pZCAwIT09Yz9jKGIpOmI7ZC5tZW1vaXplZFN0YXRlPWQuYmFzZVN0YXRlPWI7YT17cGVuZGluZzpudWxsLGludGVybGVhdmVkOm51bGwsbGFuZXM6MCxkaXNwYXRjaDpudWxsLGxhc3RSZW5kZXJlZFJlZHVjZXI6YSxsYXN0UmVuZGVyZWRTdGF0ZTpifTtkLnF1ZXVlPWE7YT1hLmRpc3BhdGNoPUdpLmJpbmQobnVsbCxOLGEpO3JldHVybltkLm1lbW9pemVkU3RhdGUsYV19LHVzZVJlZjpmdW5jdGlvbihhKXt2YXIgYj1cbmNpKCk7YT17Y3VycmVudDphfTtyZXR1cm4gYi5tZW1vaXplZFN0YXRlPWF9LHVzZVN0YXRlOnFpLHVzZURlYnVnVmFsdWU6QWksdXNlRGVmZXJyZWRWYWx1ZTpmdW5jdGlvbihhKXtyZXR1cm4gY2koKS5tZW1vaXplZFN0YXRlPWF9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oKXt2YXIgYT1xaSghMSksYj1hWzBdO2E9RWkuYmluZChudWxsLGFbMV0pO2NpKCkubWVtb2l6ZWRTdGF0ZT1hO3JldHVybltiLGFdfSx1c2VNdXRhYmxlU291cmNlOmZ1bmN0aW9uKCl7fSx1c2VTeW5jRXh0ZXJuYWxTdG9yZTpmdW5jdGlvbihhLGIsYyl7dmFyIGQ9TixlPWNpKCk7aWYoSSl7aWYodm9pZCAwPT09Yyl0aHJvdyBFcnJvcihwKDQwNykpO2M9YygpfWVsc2V7Yz1iKCk7aWYobnVsbD09PVIpdGhyb3cgRXJyb3IocCgzNDkpKTswIT09KFJoJjMwKXx8bmkoZCxiLGMpfWUubWVtb2l6ZWRTdGF0ZT1jO3ZhciBmPXt2YWx1ZTpjLGdldFNuYXBzaG90OmJ9O2UucXVldWU9Zjt2aShraS5iaW5kKG51bGwsZCxcbmYsYSksW2FdKTtkLmZsYWdzfD0yMDQ4O2xpKDksbWkuYmluZChudWxsLGQsZixjLGIpLHZvaWQgMCxudWxsKTtyZXR1cm4gY30sdXNlSWQ6ZnVuY3Rpb24oKXt2YXIgYT1jaSgpLGI9Ui5pZGVudGlmaWVyUHJlZml4O2lmKEkpe3ZhciBjPXNnO3ZhciBkPXJnO2M9KGQmfigxPDwzMi1vYyhkKS0xKSkudG9TdHJpbmcoMzIpK2M7Yj1cIjpcIitiK1wiUlwiK2M7Yz1VaCsrOzA8YyYmKGIrPVwiSFwiK2MudG9TdHJpbmcoMzIpKTtiKz1cIjpcIn1lbHNlIGM9VmgrKyxiPVwiOlwiK2IrXCJyXCIrYy50b1N0cmluZygzMikrXCI6XCI7cmV0dXJuIGEubWVtb2l6ZWRTdGF0ZT1ifSx1bnN0YWJsZV9pc05ld1JlY29uY2lsZXI6ITF9LFpoPXtyZWFkQ29udGV4dDpWZyx1c2VDYWxsYmFjazpCaSx1c2VDb250ZXh0OlZnLHVzZUVmZmVjdDpqaSx1c2VJbXBlcmF0aXZlSGFuZGxlOnppLHVzZUluc2VydGlvbkVmZmVjdDp3aSx1c2VMYXlvdXRFZmZlY3Q6eGksdXNlTWVtbzpDaSx1c2VSZWR1Y2VyOmZpLHVzZVJlZjpzaSx1c2VTdGF0ZTpmdW5jdGlvbigpe3JldHVybiBmaShlaSl9LFxudXNlRGVidWdWYWx1ZTpBaSx1c2VEZWZlcnJlZFZhbHVlOmZ1bmN0aW9uKGEpe3ZhciBiPWRpKCk7cmV0dXJuIERpKGIsTy5tZW1vaXplZFN0YXRlLGEpfSx1c2VUcmFuc2l0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9ZmkoZWkpWzBdLGI9ZGkoKS5tZW1vaXplZFN0YXRlO3JldHVyblthLGJdfSx1c2VNdXRhYmxlU291cmNlOmhpLHVzZVN5bmNFeHRlcm5hbFN0b3JlOmlpLHVzZUlkOkZpLHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjohMX0sJGg9e3JlYWRDb250ZXh0OlZnLHVzZUNhbGxiYWNrOkJpLHVzZUNvbnRleHQ6VmcsdXNlRWZmZWN0OmppLHVzZUltcGVyYXRpdmVIYW5kbGU6emksdXNlSW5zZXJ0aW9uRWZmZWN0OndpLHVzZUxheW91dEVmZmVjdDp4aSx1c2VNZW1vOkNpLHVzZVJlZHVjZXI6Z2ksdXNlUmVmOnNpLHVzZVN0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuIGdpKGVpKX0sdXNlRGVidWdWYWx1ZTpBaSx1c2VEZWZlcnJlZFZhbHVlOmZ1bmN0aW9uKGEpe3ZhciBiPWRpKCk7cmV0dXJuIG51bGw9PT1cbk8/Yi5tZW1vaXplZFN0YXRlPWE6RGkoYixPLm1lbW9pemVkU3RhdGUsYSl9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oKXt2YXIgYT1naShlaSlbMF0sYj1kaSgpLm1lbW9pemVkU3RhdGU7cmV0dXJuW2EsYl19LHVzZU11dGFibGVTb3VyY2U6aGksdXNlU3luY0V4dGVybmFsU3RvcmU6aWksdXNlSWQ6RmksdW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyOiExfTtmdW5jdGlvbiBLaShhLGIpe3RyeXt2YXIgYz1cIlwiLGQ9YjtkbyBjKz1QYShkKSxkPWQucmV0dXJuO3doaWxlKGQpO3ZhciBlPWN9Y2F0Y2goZil7ZT1cIlxcbkVycm9yIGdlbmVyYXRpbmcgc3RhY2s6IFwiK2YubWVzc2FnZStcIlxcblwiK2Yuc3RhY2t9cmV0dXJue3ZhbHVlOmEsc291cmNlOmIsc3RhY2s6ZSxkaWdlc3Q6bnVsbH19ZnVuY3Rpb24gTGkoYSxiLGMpe3JldHVybnt2YWx1ZTphLHNvdXJjZTpudWxsLHN0YWNrOm51bGwhPWM/YzpudWxsLGRpZ2VzdDpudWxsIT1iP2I6bnVsbH19XG5mdW5jdGlvbiBNaShhLGIpe3RyeXtjb25zb2xlLmVycm9yKGIudmFsdWUpfWNhdGNoKGMpe3NldFRpbWVvdXQoZnVuY3Rpb24oKXt0aHJvdyBjO30pfX12YXIgTmk9XCJmdW5jdGlvblwiPT09dHlwZW9mIFdlYWtNYXA/V2Vha01hcDpNYXA7ZnVuY3Rpb24gT2koYSxiLGMpe2M9Y2goLTEsYyk7Yy50YWc9MztjLnBheWxvYWQ9e2VsZW1lbnQ6bnVsbH07dmFyIGQ9Yi52YWx1ZTtjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7UGl8fChQaT0hMCxRaT1kKTtNaShhLGIpfTtyZXR1cm4gY31cbmZ1bmN0aW9uIFJpKGEsYixjKXtjPWNoKC0xLGMpO2MudGFnPTM7dmFyIGQ9YS50eXBlLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcjtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7dmFyIGU9Yi52YWx1ZTtjLnBheWxvYWQ9ZnVuY3Rpb24oKXtyZXR1cm4gZChlKX07Yy5jYWxsYmFjaz1mdW5jdGlvbigpe01pKGEsYil9fXZhciBmPWEuc3RhdGVOb2RlO251bGwhPT1mJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5jb21wb25lbnREaWRDYXRjaCYmKGMuY2FsbGJhY2s9ZnVuY3Rpb24oKXtNaShhLGIpO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBkJiYobnVsbD09PVNpP1NpPW5ldyBTZXQoW3RoaXNdKTpTaS5hZGQodGhpcykpO3ZhciBjPWIuc3RhY2s7dGhpcy5jb21wb25lbnREaWRDYXRjaChiLnZhbHVlLHtjb21wb25lbnRTdGFjazpudWxsIT09Yz9jOlwiXCJ9KX0pO3JldHVybiBjfVxuZnVuY3Rpb24gVGkoYSxiLGMpe3ZhciBkPWEucGluZ0NhY2hlO2lmKG51bGw9PT1kKXtkPWEucGluZ0NhY2hlPW5ldyBOaTt2YXIgZT1uZXcgU2V0O2Quc2V0KGIsZSl9ZWxzZSBlPWQuZ2V0KGIpLHZvaWQgMD09PWUmJihlPW5ldyBTZXQsZC5zZXQoYixlKSk7ZS5oYXMoYyl8fChlLmFkZChjKSxhPVVpLmJpbmQobnVsbCxhLGIsYyksYi50aGVuKGEsYSkpfWZ1bmN0aW9uIFZpKGEpe2Rve3ZhciBiO2lmKGI9MTM9PT1hLnRhZyliPWEubWVtb2l6ZWRTdGF0ZSxiPW51bGwhPT1iP251bGwhPT1iLmRlaHlkcmF0ZWQ/ITA6ITE6ITA7aWYoYilyZXR1cm4gYTthPWEucmV0dXJufXdoaWxlKG51bGwhPT1hKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIFdpKGEsYixjLGQsZSl7aWYoMD09PShhLm1vZGUmMSkpcmV0dXJuIGE9PT1iP2EuZmxhZ3N8PTY1NTM2OihhLmZsYWdzfD0xMjgsYy5mbGFnc3w9MTMxMDcyLGMuZmxhZ3MmPS01MjgwNSwxPT09Yy50YWcmJihudWxsPT09Yy5hbHRlcm5hdGU/Yy50YWc9MTc6KGI9Y2goLTEsMSksYi50YWc9MixkaChjLGIsMSkpKSxjLmxhbmVzfD0xKSxhO2EuZmxhZ3N8PTY1NTM2O2EubGFuZXM9ZTtyZXR1cm4gYX12YXIgWGk9dWEuUmVhY3RDdXJyZW50T3duZXIsVWc9ITE7ZnVuY3Rpb24gWWkoYSxiLGMsZCl7Yi5jaGlsZD1udWxsPT09YT9DaChiLG51bGwsYyxkKTpCaChiLGEuY2hpbGQsYyxkKX1cbmZ1bmN0aW9uIFppKGEsYixjLGQsZSl7Yz1jLnJlbmRlcjt2YXIgZj1iLnJlZjtUZyhiLGUpO2Q9WGgoYSxiLGMsZCxmLGUpO2M9YmkoKTtpZihudWxsIT09YSYmIVVnKXJldHVybiBiLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWUsYi5mbGFncyY9LTIwNTMsYS5sYW5lcyY9fmUsJGkoYSxiLGUpO0kmJmMmJnZnKGIpO2IuZmxhZ3N8PTE7WWkoYSxiLGQsZSk7cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBhaihhLGIsYyxkLGUpe2lmKG51bGw9PT1hKXt2YXIgZj1jLnR5cGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGYmJiFiaihmKSYmdm9pZCAwPT09Zi5kZWZhdWx0UHJvcHMmJm51bGw9PT1jLmNvbXBhcmUmJnZvaWQgMD09PWMuZGVmYXVsdFByb3BzKXJldHVybiBiLnRhZz0xNSxiLnR5cGU9ZixjaihhLGIsZixkLGUpO2E9eWgoYy50eXBlLG51bGwsZCxiLGIubW9kZSxlKTthLnJlZj1iLnJlZjthLnJldHVybj1iO3JldHVybiBiLmNoaWxkPWF9Zj1hLmNoaWxkO2lmKDA9PT0oYS5sYW5lcyZlKSl7dmFyIGc9Zi5tZW1vaXplZFByb3BzO2M9Yy5jb21wYXJlO2M9bnVsbCE9PWM/YzpJZTtpZihjKGcsZCkmJmEucmVmPT09Yi5yZWYpcmV0dXJuICRpKGEsYixlKX1iLmZsYWdzfD0xO2E9d2goZixkKTthLnJlZj1iLnJlZjthLnJldHVybj1iO3JldHVybiBiLmNoaWxkPWF9XG5mdW5jdGlvbiBjaihhLGIsYyxkLGUpe2lmKG51bGwhPT1hKXt2YXIgZj1hLm1lbW9pemVkUHJvcHM7aWYoSWUoZixkKSYmYS5yZWY9PT1iLnJlZilpZihVZz0hMSxiLnBlbmRpbmdQcm9wcz1kPWYsMCE9PShhLmxhbmVzJmUpKTAhPT0oYS5mbGFncyYxMzEwNzIpJiYoVWc9ITApO2Vsc2UgcmV0dXJuIGIubGFuZXM9YS5sYW5lcywkaShhLGIsZSl9cmV0dXJuIGRqKGEsYixjLGQsZSl9XG5mdW5jdGlvbiBlaihhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHMsZT1kLmNoaWxkcmVuLGY9bnVsbCE9PWE/YS5tZW1vaXplZFN0YXRlOm51bGw7aWYoXCJoaWRkZW5cIj09PWQubW9kZSlpZigwPT09KGIubW9kZSYxKSliLm1lbW9pemVkU3RhdGU9e2Jhc2VMYW5lczowLGNhY2hlUG9vbDpudWxsLHRyYW5zaXRpb25zOm51bGx9LEcoZmosZ2opLGdqfD1jO2Vsc2V7aWYoMD09PShjJjEwNzM3NDE4MjQpKXJldHVybiBhPW51bGwhPT1mP2YuYmFzZUxhbmVzfGM6YyxiLmxhbmVzPWIuY2hpbGRMYW5lcz0xMDczNzQxODI0LGIubWVtb2l6ZWRTdGF0ZT17YmFzZUxhbmVzOmEsY2FjaGVQb29sOm51bGwsdHJhbnNpdGlvbnM6bnVsbH0sYi51cGRhdGVRdWV1ZT1udWxsLEcoZmosZ2opLGdqfD1hLG51bGw7Yi5tZW1vaXplZFN0YXRlPXtiYXNlTGFuZXM6MCxjYWNoZVBvb2w6bnVsbCx0cmFuc2l0aW9uczpudWxsfTtkPW51bGwhPT1mP2YuYmFzZUxhbmVzOmM7Ryhmaixnaik7Z2p8PWR9ZWxzZSBudWxsIT09XG5mPyhkPWYuYmFzZUxhbmVzfGMsYi5tZW1vaXplZFN0YXRlPW51bGwpOmQ9YyxHKGZqLGdqKSxnanw9ZDtZaShhLGIsZSxjKTtyZXR1cm4gYi5jaGlsZH1mdW5jdGlvbiBoaihhLGIpe3ZhciBjPWIucmVmO2lmKG51bGw9PT1hJiZudWxsIT09Y3x8bnVsbCE9PWEmJmEucmVmIT09YyliLmZsYWdzfD01MTIsYi5mbGFnc3w9MjA5NzE1Mn1mdW5jdGlvbiBkaihhLGIsYyxkLGUpe3ZhciBmPVpmKGMpP1hmOkguY3VycmVudDtmPVlmKGIsZik7VGcoYixlKTtjPVhoKGEsYixjLGQsZixlKTtkPWJpKCk7aWYobnVsbCE9PWEmJiFVZylyZXR1cm4gYi51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlLGIuZmxhZ3MmPS0yMDUzLGEubGFuZXMmPX5lLCRpKGEsYixlKTtJJiZkJiZ2ZyhiKTtiLmZsYWdzfD0xO1lpKGEsYixjLGUpO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gaWooYSxiLGMsZCxlKXtpZihaZihjKSl7dmFyIGY9ITA7Y2coYil9ZWxzZSBmPSExO1RnKGIsZSk7aWYobnVsbD09PWIuc3RhdGVOb2RlKWpqKGEsYikscGgoYixjLGQpLHJoKGIsYyxkLGUpLGQ9ITA7ZWxzZSBpZihudWxsPT09YSl7dmFyIGc9Yi5zdGF0ZU5vZGUsaD1iLm1lbW9pemVkUHJvcHM7Zy5wcm9wcz1oO3ZhciBrPWcuY29udGV4dCxsPWMuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBsJiZudWxsIT09bD9sPVZnKGwpOihsPVpmKGMpP1hmOkguY3VycmVudCxsPVlmKGIsbCkpO3ZhciBtPWMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLHE9XCJmdW5jdGlvblwiPT09dHlwZW9mIG18fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlO3F8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzfHxcbihoIT09ZHx8ayE9PWwpJiZxaChiLGcsZCxsKTskZz0hMTt2YXIgcj1iLm1lbW9pemVkU3RhdGU7Zy5zdGF0ZT1yO2doKGIsZCxnLGUpO2s9Yi5tZW1vaXplZFN0YXRlO2ghPT1kfHxyIT09a3x8V2YuY3VycmVudHx8JGc/KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBtJiYoa2goYixjLG0sZCksaz1iLm1lbW9pemVkU3RhdGUpLChoPSRnfHxvaChiLGMsaCxkLHIsayxsKSk/KHF8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxNb3VudHx8KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxNb3VudCYmZy5jb21wb25lbnRXaWxsTW91bnQoKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQoKSksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmZsYWdzfD00MTk0MzA4KSk6XG4oXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmZsYWdzfD00MTk0MzA4KSxiLm1lbW9pemVkUHJvcHM9ZCxiLm1lbW9pemVkU3RhdGU9ayksZy5wcm9wcz1kLGcuc3RhdGU9ayxnLmNvbnRleHQ9bCxkPWgpOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZmxhZ3N8PTQxOTQzMDgpLGQ9ITEpfWVsc2V7Zz1iLnN0YXRlTm9kZTtiaChhLGIpO2g9Yi5tZW1vaXplZFByb3BzO2w9Yi50eXBlPT09Yi5lbGVtZW50VHlwZT9oOkxnKGIudHlwZSxoKTtnLnByb3BzPWw7cT1iLnBlbmRpbmdQcm9wcztyPWcuY29udGV4dDtrPWMuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBrJiZudWxsIT09az9rPVZnKGspOihrPVpmKGMpP1hmOkguY3VycmVudCxrPVlmKGIsaykpO3ZhciB5PWMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzOyhtPVwiZnVuY3Rpb25cIj09PXR5cGVvZiB5fHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSl8fFxuXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fChoIT09cXx8ciE9PWspJiZxaChiLGcsZCxrKTskZz0hMTtyPWIubWVtb2l6ZWRTdGF0ZTtnLnN0YXRlPXI7Z2goYixkLGcsZSk7dmFyIG49Yi5tZW1vaXplZFN0YXRlO2ghPT1xfHxyIT09bnx8V2YuY3VycmVudHx8JGc/KFwiZnVuY3Rpb25cIj09PXR5cGVvZiB5JiYoa2goYixjLHksZCksbj1iLm1lbW9pemVkU3RhdGUpLChsPSRnfHxvaChiLGMsbCxkLHIsbixrKXx8ITEpPyhtfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFVwZGF0ZXx8KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxVcGRhdGUmJmcuY29tcG9uZW50V2lsbFVwZGF0ZShkLG4sayksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUmJlxuZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZShkLG4saykpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZSYmKGIuZmxhZ3N8PTQpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlJiYoYi5mbGFnc3w9MTAyNCkpOihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJnI9PT1hLm1lbW9pemVkU3RhdGV8fChiLmZsYWdzfD00KSxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmcj09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZmxhZ3N8PTEwMjQpLGIubWVtb2l6ZWRQcm9wcz1kLGIubWVtb2l6ZWRTdGF0ZT1uKSxnLnByb3BzPWQsZy5zdGF0ZT1uLGcuY29udGV4dD1rLGQ9bCk6KFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmcj09PVxuYS5tZW1vaXplZFN0YXRlfHwoYi5mbGFnc3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJnI9PT1hLm1lbW9pemVkU3RhdGV8fChiLmZsYWdzfD0xMDI0KSxkPSExKX1yZXR1cm4ga2ooYSxiLGMsZCxmLGUpfVxuZnVuY3Rpb24ga2ooYSxiLGMsZCxlLGYpe2hqKGEsYik7dmFyIGc9MCE9PShiLmZsYWdzJjEyOCk7aWYoIWQmJiFnKXJldHVybiBlJiZkZyhiLGMsITEpLCRpKGEsYixmKTtkPWIuc3RhdGVOb2RlO1hpLmN1cnJlbnQ9Yjt2YXIgaD1nJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYy5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I/bnVsbDpkLnJlbmRlcigpO2IuZmxhZ3N8PTE7bnVsbCE9PWEmJmc/KGIuY2hpbGQ9QmgoYixhLmNoaWxkLG51bGwsZiksYi5jaGlsZD1CaChiLG51bGwsaCxmKSk6WWkoYSxiLGgsZik7Yi5tZW1vaXplZFN0YXRlPWQuc3RhdGU7ZSYmZGcoYixjLCEwKTtyZXR1cm4gYi5jaGlsZH1mdW5jdGlvbiBsaihhKXt2YXIgYj1hLnN0YXRlTm9kZTtiLnBlbmRpbmdDb250ZXh0P2FnKGEsYi5wZW5kaW5nQ29udGV4dCxiLnBlbmRpbmdDb250ZXh0IT09Yi5jb250ZXh0KTpiLmNvbnRleHQmJmFnKGEsYi5jb250ZXh0LCExKTtJaChhLGIuY29udGFpbmVySW5mbyl9XG5mdW5jdGlvbiBtaihhLGIsYyxkLGUpe0lnKCk7SmcoZSk7Yi5mbGFnc3w9MjU2O1lpKGEsYixjLGQpO3JldHVybiBiLmNoaWxkfXZhciBuaj17ZGVoeWRyYXRlZDpudWxsLHRyZWVDb250ZXh0Om51bGwscmV0cnlMYW5lOjB9O2Z1bmN0aW9uIG9qKGEpe3JldHVybntiYXNlTGFuZXM6YSxjYWNoZVBvb2w6bnVsbCx0cmFuc2l0aW9uczpudWxsfX1cbmZ1bmN0aW9uIHBqKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wcyxlPU0uY3VycmVudCxmPSExLGc9MCE9PShiLmZsYWdzJjEyOCksaDsoaD1nKXx8KGg9bnVsbCE9PWEmJm51bGw9PT1hLm1lbW9pemVkU3RhdGU/ITE6MCE9PShlJjIpKTtpZihoKWY9ITAsYi5mbGFncyY9LTEyOTtlbHNlIGlmKG51bGw9PT1hfHxudWxsIT09YS5tZW1vaXplZFN0YXRlKWV8PTE7RyhNLGUmMSk7aWYobnVsbD09PWEpe0VnKGIpO2E9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1hJiYoYT1hLmRlaHlkcmF0ZWQsbnVsbCE9PWEpKXJldHVybiAwPT09KGIubW9kZSYxKT9iLmxhbmVzPTE6XCIkIVwiPT09YS5kYXRhP2IubGFuZXM9ODpiLmxhbmVzPTEwNzM3NDE4MjQsbnVsbDtnPWQuY2hpbGRyZW47YT1kLmZhbGxiYWNrO3JldHVybiBmPyhkPWIubW9kZSxmPWIuY2hpbGQsZz17bW9kZTpcImhpZGRlblwiLGNoaWxkcmVuOmd9LDA9PT0oZCYxKSYmbnVsbCE9PWY/KGYuY2hpbGRMYW5lcz0wLGYucGVuZGluZ1Byb3BzPVxuZyk6Zj1xaihnLGQsMCxudWxsKSxhPUFoKGEsZCxjLG51bGwpLGYucmV0dXJuPWIsYS5yZXR1cm49YixmLnNpYmxpbmc9YSxiLmNoaWxkPWYsYi5jaGlsZC5tZW1vaXplZFN0YXRlPW9qKGMpLGIubWVtb2l6ZWRTdGF0ZT1uaixhKTpyaihiLGcpfWU9YS5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1lJiYoaD1lLmRlaHlkcmF0ZWQsbnVsbCE9PWgpKXJldHVybiBzaihhLGIsZyxkLGgsZSxjKTtpZihmKXtmPWQuZmFsbGJhY2s7Zz1iLm1vZGU7ZT1hLmNoaWxkO2g9ZS5zaWJsaW5nO3ZhciBrPXttb2RlOlwiaGlkZGVuXCIsY2hpbGRyZW46ZC5jaGlsZHJlbn07MD09PShnJjEpJiZiLmNoaWxkIT09ZT8oZD1iLmNoaWxkLGQuY2hpbGRMYW5lcz0wLGQucGVuZGluZ1Byb3BzPWssYi5kZWxldGlvbnM9bnVsbCk6KGQ9d2goZSxrKSxkLnN1YnRyZWVGbGFncz1lLnN1YnRyZWVGbGFncyYxNDY4MDA2NCk7bnVsbCE9PWg/Zj13aChoLGYpOihmPUFoKGYsZyxjLG51bGwpLGYuZmxhZ3N8PTIpO2YucmV0dXJuPVxuYjtkLnJldHVybj1iO2Quc2libGluZz1mO2IuY2hpbGQ9ZDtkPWY7Zj1iLmNoaWxkO2c9YS5jaGlsZC5tZW1vaXplZFN0YXRlO2c9bnVsbD09PWc/b2ooYyk6e2Jhc2VMYW5lczpnLmJhc2VMYW5lc3xjLGNhY2hlUG9vbDpudWxsLHRyYW5zaXRpb25zOmcudHJhbnNpdGlvbnN9O2YubWVtb2l6ZWRTdGF0ZT1nO2YuY2hpbGRMYW5lcz1hLmNoaWxkTGFuZXMmfmM7Yi5tZW1vaXplZFN0YXRlPW5qO3JldHVybiBkfWY9YS5jaGlsZDthPWYuc2libGluZztkPXdoKGYse21vZGU6XCJ2aXNpYmxlXCIsY2hpbGRyZW46ZC5jaGlsZHJlbn0pOzA9PT0oYi5tb2RlJjEpJiYoZC5sYW5lcz1jKTtkLnJldHVybj1iO2Quc2libGluZz1udWxsO251bGwhPT1hJiYoYz1iLmRlbGV0aW9ucyxudWxsPT09Yz8oYi5kZWxldGlvbnM9W2FdLGIuZmxhZ3N8PTE2KTpjLnB1c2goYSkpO2IuY2hpbGQ9ZDtiLm1lbW9pemVkU3RhdGU9bnVsbDtyZXR1cm4gZH1cbmZ1bmN0aW9uIHJqKGEsYil7Yj1xaih7bW9kZTpcInZpc2libGVcIixjaGlsZHJlbjpifSxhLm1vZGUsMCxudWxsKTtiLnJldHVybj1hO3JldHVybiBhLmNoaWxkPWJ9ZnVuY3Rpb24gdGooYSxiLGMsZCl7bnVsbCE9PWQmJkpnKGQpO0JoKGIsYS5jaGlsZCxudWxsLGMpO2E9cmooYixiLnBlbmRpbmdQcm9wcy5jaGlsZHJlbik7YS5mbGFnc3w9MjtiLm1lbW9pemVkU3RhdGU9bnVsbDtyZXR1cm4gYX1cbmZ1bmN0aW9uIHNqKGEsYixjLGQsZSxmLGcpe2lmKGMpe2lmKGIuZmxhZ3MmMjU2KXJldHVybiBiLmZsYWdzJj0tMjU3LGQ9TGkoRXJyb3IocCg0MjIpKSksdGooYSxiLGcsZCk7aWYobnVsbCE9PWIubWVtb2l6ZWRTdGF0ZSlyZXR1cm4gYi5jaGlsZD1hLmNoaWxkLGIuZmxhZ3N8PTEyOCxudWxsO2Y9ZC5mYWxsYmFjaztlPWIubW9kZTtkPXFqKHttb2RlOlwidmlzaWJsZVwiLGNoaWxkcmVuOmQuY2hpbGRyZW59LGUsMCxudWxsKTtmPUFoKGYsZSxnLG51bGwpO2YuZmxhZ3N8PTI7ZC5yZXR1cm49YjtmLnJldHVybj1iO2Quc2libGluZz1mO2IuY2hpbGQ9ZDswIT09KGIubW9kZSYxKSYmQmgoYixhLmNoaWxkLG51bGwsZyk7Yi5jaGlsZC5tZW1vaXplZFN0YXRlPW9qKGcpO2IubWVtb2l6ZWRTdGF0ZT1uajtyZXR1cm4gZn1pZigwPT09KGIubW9kZSYxKSlyZXR1cm4gdGooYSxiLGcsbnVsbCk7aWYoXCIkIVwiPT09ZS5kYXRhKXtkPWUubmV4dFNpYmxpbmcmJmUubmV4dFNpYmxpbmcuZGF0YXNldDtcbmlmKGQpdmFyIGg9ZC5kZ3N0O2Q9aDtmPUVycm9yKHAoNDE5KSk7ZD1MaShmLGQsdm9pZCAwKTtyZXR1cm4gdGooYSxiLGcsZCl9aD0wIT09KGcmYS5jaGlsZExhbmVzKTtpZihVZ3x8aCl7ZD1SO2lmKG51bGwhPT1kKXtzd2l0Y2goZyYtZyl7Y2FzZSA0OmU9MjticmVhaztjYXNlIDE2OmU9ODticmVhaztjYXNlIDY0OmNhc2UgMTI4OmNhc2UgMjU2OmNhc2UgNTEyOmNhc2UgMTAyNDpjYXNlIDIwNDg6Y2FzZSA0MDk2OmNhc2UgODE5MjpjYXNlIDE2Mzg0OmNhc2UgMzI3Njg6Y2FzZSA2NTUzNjpjYXNlIDEzMTA3MjpjYXNlIDI2MjE0NDpjYXNlIDUyNDI4ODpjYXNlIDEwNDg1NzY6Y2FzZSAyMDk3MTUyOmNhc2UgNDE5NDMwNDpjYXNlIDgzODg2MDg6Y2FzZSAxNjc3NzIxNjpjYXNlIDMzNTU0NDMyOmNhc2UgNjcxMDg4NjQ6ZT0zMjticmVhaztjYXNlIDUzNjg3MDkxMjplPTI2ODQzNTQ1NjticmVhaztkZWZhdWx0OmU9MH1lPTAhPT0oZSYoZC5zdXNwZW5kZWRMYW5lc3xnKSk/MDplO1xuMCE9PWUmJmUhPT1mLnJldHJ5TGFuZSYmKGYucmV0cnlMYW5lPWUsWmcoYSxlKSxtaChkLGEsZSwtMSkpfXVqKCk7ZD1MaShFcnJvcihwKDQyMSkpKTtyZXR1cm4gdGooYSxiLGcsZCl9aWYoXCIkP1wiPT09ZS5kYXRhKXJldHVybiBiLmZsYWdzfD0xMjgsYi5jaGlsZD1hLmNoaWxkLGI9dmouYmluZChudWxsLGEpLGUuX3JlYWN0UmV0cnk9YixudWxsO2E9Zi50cmVlQ29udGV4dDt5Zz1MZihlLm5leHRTaWJsaW5nKTt4Zz1iO0k9ITA7emc9bnVsbDtudWxsIT09YSYmKG9nW3BnKytdPXJnLG9nW3BnKytdPXNnLG9nW3BnKytdPXFnLHJnPWEuaWQsc2c9YS5vdmVyZmxvdyxxZz1iKTtiPXJqKGIsZC5jaGlsZHJlbik7Yi5mbGFnc3w9NDA5NjtyZXR1cm4gYn1mdW5jdGlvbiB3aihhLGIsYyl7YS5sYW5lc3w9Yjt2YXIgZD1hLmFsdGVybmF0ZTtudWxsIT09ZCYmKGQubGFuZXN8PWIpO1NnKGEucmV0dXJuLGIsYyl9XG5mdW5jdGlvbiB4aihhLGIsYyxkLGUpe3ZhciBmPWEubWVtb2l6ZWRTdGF0ZTtudWxsPT09Zj9hLm1lbW9pemVkU3RhdGU9e2lzQmFja3dhcmRzOmIscmVuZGVyaW5nOm51bGwscmVuZGVyaW5nU3RhcnRUaW1lOjAsbGFzdDpkLHRhaWw6Yyx0YWlsTW9kZTplfTooZi5pc0JhY2t3YXJkcz1iLGYucmVuZGVyaW5nPW51bGwsZi5yZW5kZXJpbmdTdGFydFRpbWU9MCxmLmxhc3Q9ZCxmLnRhaWw9YyxmLnRhaWxNb2RlPWUpfVxuZnVuY3Rpb24geWooYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzLGU9ZC5yZXZlYWxPcmRlcixmPWQudGFpbDtZaShhLGIsZC5jaGlsZHJlbixjKTtkPU0uY3VycmVudDtpZigwIT09KGQmMikpZD1kJjF8MixiLmZsYWdzfD0xMjg7ZWxzZXtpZihudWxsIT09YSYmMCE9PShhLmZsYWdzJjEyOCkpYTpmb3IoYT1iLmNoaWxkO251bGwhPT1hOyl7aWYoMTM9PT1hLnRhZyludWxsIT09YS5tZW1vaXplZFN0YXRlJiZ3aihhLGMsYik7ZWxzZSBpZigxOT09PWEudGFnKXdqKGEsYyxiKTtlbHNlIGlmKG51bGwhPT1hLmNoaWxkKXthLmNoaWxkLnJldHVybj1hO2E9YS5jaGlsZDtjb250aW51ZX1pZihhPT09YilicmVhayBhO2Zvcig7bnVsbD09PWEuc2libGluZzspe2lmKG51bGw9PT1hLnJldHVybnx8YS5yZXR1cm49PT1iKWJyZWFrIGE7YT1hLnJldHVybn1hLnNpYmxpbmcucmV0dXJuPWEucmV0dXJuO2E9YS5zaWJsaW5nfWQmPTF9RyhNLGQpO2lmKDA9PT0oYi5tb2RlJjEpKWIubWVtb2l6ZWRTdGF0ZT1cbm51bGw7ZWxzZSBzd2l0Y2goZSl7Y2FzZSBcImZvcndhcmRzXCI6Yz1iLmNoaWxkO2ZvcihlPW51bGw7bnVsbCE9PWM7KWE9Yy5hbHRlcm5hdGUsbnVsbCE9PWEmJm51bGw9PT1NaChhKSYmKGU9YyksYz1jLnNpYmxpbmc7Yz1lO251bGw9PT1jPyhlPWIuY2hpbGQsYi5jaGlsZD1udWxsKTooZT1jLnNpYmxpbmcsYy5zaWJsaW5nPW51bGwpO3hqKGIsITEsZSxjLGYpO2JyZWFrO2Nhc2UgXCJiYWNrd2FyZHNcIjpjPW51bGw7ZT1iLmNoaWxkO2ZvcihiLmNoaWxkPW51bGw7bnVsbCE9PWU7KXthPWUuYWx0ZXJuYXRlO2lmKG51bGwhPT1hJiZudWxsPT09TWgoYSkpe2IuY2hpbGQ9ZTticmVha31hPWUuc2libGluZztlLnNpYmxpbmc9YztjPWU7ZT1hfXhqKGIsITAsYyxudWxsLGYpO2JyZWFrO2Nhc2UgXCJ0b2dldGhlclwiOnhqKGIsITEsbnVsbCxudWxsLHZvaWQgMCk7YnJlYWs7ZGVmYXVsdDpiLm1lbW9pemVkU3RhdGU9bnVsbH1yZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIGpqKGEsYil7MD09PShiLm1vZGUmMSkmJm51bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZmxhZ3N8PTIpfWZ1bmN0aW9uICRpKGEsYixjKXtudWxsIT09YSYmKGIuZGVwZW5kZW5jaWVzPWEuZGVwZW5kZW5jaWVzKTtoaHw9Yi5sYW5lcztpZigwPT09KGMmYi5jaGlsZExhbmVzKSlyZXR1cm4gbnVsbDtpZihudWxsIT09YSYmYi5jaGlsZCE9PWEuY2hpbGQpdGhyb3cgRXJyb3IocCgxNTMpKTtpZihudWxsIT09Yi5jaGlsZCl7YT1iLmNoaWxkO2M9d2goYSxhLnBlbmRpbmdQcm9wcyk7Yi5jaGlsZD1jO2ZvcihjLnJldHVybj1iO251bGwhPT1hLnNpYmxpbmc7KWE9YS5zaWJsaW5nLGM9Yy5zaWJsaW5nPXdoKGEsYS5wZW5kaW5nUHJvcHMpLGMucmV0dXJuPWI7Yy5zaWJsaW5nPW51bGx9cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiB6aihhLGIsYyl7c3dpdGNoKGIudGFnKXtjYXNlIDM6bGooYik7SWcoKTticmVhaztjYXNlIDU6S2goYik7YnJlYWs7Y2FzZSAxOlpmKGIudHlwZSkmJmNnKGIpO2JyZWFrO2Nhc2UgNDpJaChiLGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pO2JyZWFrO2Nhc2UgMTA6dmFyIGQ9Yi50eXBlLl9jb250ZXh0LGU9Yi5tZW1vaXplZFByb3BzLnZhbHVlO0coTWcsZC5fY3VycmVudFZhbHVlKTtkLl9jdXJyZW50VmFsdWU9ZTticmVhaztjYXNlIDEzOmQ9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1kKXtpZihudWxsIT09ZC5kZWh5ZHJhdGVkKXJldHVybiBHKE0sTS5jdXJyZW50JjEpLGIuZmxhZ3N8PTEyOCxudWxsO2lmKDAhPT0oYyZiLmNoaWxkLmNoaWxkTGFuZXMpKXJldHVybiBwaihhLGIsYyk7RyhNLE0uY3VycmVudCYxKTthPSRpKGEsYixjKTtyZXR1cm4gbnVsbCE9PWE/YS5zaWJsaW5nOm51bGx9RyhNLE0uY3VycmVudCYxKTticmVhaztjYXNlIDE5OmQ9MCE9PShjJlxuYi5jaGlsZExhbmVzKTtpZigwIT09KGEuZmxhZ3MmMTI4KSl7aWYoZClyZXR1cm4geWooYSxiLGMpO2IuZmxhZ3N8PTEyOH1lPWIubWVtb2l6ZWRTdGF0ZTtudWxsIT09ZSYmKGUucmVuZGVyaW5nPW51bGwsZS50YWlsPW51bGwsZS5sYXN0RWZmZWN0PW51bGwpO0coTSxNLmN1cnJlbnQpO2lmKGQpYnJlYWs7ZWxzZSByZXR1cm4gbnVsbDtjYXNlIDIyOmNhc2UgMjM6cmV0dXJuIGIubGFuZXM9MCxlaihhLGIsYyl9cmV0dXJuICRpKGEsYixjKX12YXIgQWosQmosQ2osRGo7XG5Baj1mdW5jdGlvbihhLGIpe2Zvcih2YXIgYz1iLmNoaWxkO251bGwhPT1jOyl7aWYoNT09PWMudGFnfHw2PT09Yy50YWcpYS5hcHBlbmRDaGlsZChjLnN0YXRlTm9kZSk7ZWxzZSBpZig0IT09Yy50YWcmJm51bGwhPT1jLmNoaWxkKXtjLmNoaWxkLnJldHVybj1jO2M9Yy5jaGlsZDtjb250aW51ZX1pZihjPT09YilicmVhaztmb3IoO251bGw9PT1jLnNpYmxpbmc7KXtpZihudWxsPT09Yy5yZXR1cm58fGMucmV0dXJuPT09YilyZXR1cm47Yz1jLnJldHVybn1jLnNpYmxpbmcucmV0dXJuPWMucmV0dXJuO2M9Yy5zaWJsaW5nfX07Qmo9ZnVuY3Rpb24oKXt9O1xuQ2o9ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9YS5tZW1vaXplZFByb3BzO2lmKGUhPT1kKXthPWIuc3RhdGVOb2RlO0hoKEVoLmN1cnJlbnQpO3ZhciBmPW51bGw7c3dpdGNoKGMpe2Nhc2UgXCJpbnB1dFwiOmU9WWEoYSxlKTtkPVlhKGEsZCk7Zj1bXTticmVhaztjYXNlIFwic2VsZWN0XCI6ZT1BKHt9LGUse3ZhbHVlOnZvaWQgMH0pO2Q9QSh7fSxkLHt2YWx1ZTp2b2lkIDB9KTtmPVtdO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmU9Z2IoYSxlKTtkPWdiKGEsZCk7Zj1bXTticmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlLm9uQ2xpY2smJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLm9uQ2xpY2smJihhLm9uY2xpY2s9QmYpfXViKGMsZCk7dmFyIGc7Yz1udWxsO2ZvcihsIGluIGUpaWYoIWQuaGFzT3duUHJvcGVydHkobCkmJmUuaGFzT3duUHJvcGVydHkobCkmJm51bGwhPWVbbF0paWYoXCJzdHlsZVwiPT09bCl7dmFyIGg9ZVtsXTtmb3IoZyBpbiBoKWguaGFzT3duUHJvcGVydHkoZykmJlxuKGN8fChjPXt9KSxjW2ddPVwiXCIpfWVsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCIhPT1sJiZcImNoaWxkcmVuXCIhPT1sJiZcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09bCYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWwmJlwiYXV0b0ZvY3VzXCIhPT1sJiYoZWEuaGFzT3duUHJvcGVydHkobCk/Znx8KGY9W10pOihmPWZ8fFtdKS5wdXNoKGwsbnVsbCkpO2ZvcihsIGluIGQpe3ZhciBrPWRbbF07aD1udWxsIT1lP2VbbF06dm9pZCAwO2lmKGQuaGFzT3duUHJvcGVydHkobCkmJmshPT1oJiYobnVsbCE9a3x8bnVsbCE9aCkpaWYoXCJzdHlsZVwiPT09bClpZihoKXtmb3IoZyBpbiBoKSFoLmhhc093blByb3BlcnR5KGcpfHxrJiZrLmhhc093blByb3BlcnR5KGcpfHwoY3x8KGM9e30pLGNbZ109XCJcIik7Zm9yKGcgaW4gaylrLmhhc093blByb3BlcnR5KGcpJiZoW2ddIT09a1tnXSYmKGN8fChjPXt9KSxjW2ddPWtbZ10pfWVsc2UgY3x8KGZ8fChmPVtdKSxmLnB1c2gobCxcbmMpKSxjPWs7ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWw/KGs9az9rLl9faHRtbDp2b2lkIDAsaD1oP2guX19odG1sOnZvaWQgMCxudWxsIT1rJiZoIT09ayYmKGY9Znx8W10pLnB1c2gobCxrKSk6XCJjaGlsZHJlblwiPT09bD9cInN0cmluZ1wiIT09dHlwZW9mIGsmJlwibnVtYmVyXCIhPT10eXBlb2Yga3x8KGY9Znx8W10pLnB1c2gobCxcIlwiK2spOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1sJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09bCYmKGVhLmhhc093blByb3BlcnR5KGwpPyhudWxsIT1rJiZcIm9uU2Nyb2xsXCI9PT1sJiZEKFwic2Nyb2xsXCIsYSksZnx8aD09PWt8fChmPVtdKSk6KGY9Znx8W10pLnB1c2gobCxrKSl9YyYmKGY9Znx8W10pLnB1c2goXCJzdHlsZVwiLGMpO3ZhciBsPWY7aWYoYi51cGRhdGVRdWV1ZT1sKWIuZmxhZ3N8PTR9fTtEaj1mdW5jdGlvbihhLGIsYyxkKXtjIT09ZCYmKGIuZmxhZ3N8PTQpfTtcbmZ1bmN0aW9uIEVqKGEsYil7aWYoIUkpc3dpdGNoKGEudGFpbE1vZGUpe2Nhc2UgXCJoaWRkZW5cIjpiPWEudGFpbDtmb3IodmFyIGM9bnVsbDtudWxsIT09YjspbnVsbCE9PWIuYWx0ZXJuYXRlJiYoYz1iKSxiPWIuc2libGluZztudWxsPT09Yz9hLnRhaWw9bnVsbDpjLnNpYmxpbmc9bnVsbDticmVhaztjYXNlIFwiY29sbGFwc2VkXCI6Yz1hLnRhaWw7Zm9yKHZhciBkPW51bGw7bnVsbCE9PWM7KW51bGwhPT1jLmFsdGVybmF0ZSYmKGQ9YyksYz1jLnNpYmxpbmc7bnVsbD09PWQ/Ynx8bnVsbD09PWEudGFpbD9hLnRhaWw9bnVsbDphLnRhaWwuc2libGluZz1udWxsOmQuc2libGluZz1udWxsfX1cbmZ1bmN0aW9uIFMoYSl7dmFyIGI9bnVsbCE9PWEuYWx0ZXJuYXRlJiZhLmFsdGVybmF0ZS5jaGlsZD09PWEuY2hpbGQsYz0wLGQ9MDtpZihiKWZvcih2YXIgZT1hLmNoaWxkO251bGwhPT1lOyljfD1lLmxhbmVzfGUuY2hpbGRMYW5lcyxkfD1lLnN1YnRyZWVGbGFncyYxNDY4MDA2NCxkfD1lLmZsYWdzJjE0NjgwMDY0LGUucmV0dXJuPWEsZT1lLnNpYmxpbmc7ZWxzZSBmb3IoZT1hLmNoaWxkO251bGwhPT1lOyljfD1lLmxhbmVzfGUuY2hpbGRMYW5lcyxkfD1lLnN1YnRyZWVGbGFncyxkfD1lLmZsYWdzLGUucmV0dXJuPWEsZT1lLnNpYmxpbmc7YS5zdWJ0cmVlRmxhZ3N8PWQ7YS5jaGlsZExhbmVzPWM7cmV0dXJuIGJ9XG5mdW5jdGlvbiBGaihhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHM7d2coYik7c3dpdGNoKGIudGFnKXtjYXNlIDI6Y2FzZSAxNjpjYXNlIDE1OmNhc2UgMDpjYXNlIDExOmNhc2UgNzpjYXNlIDg6Y2FzZSAxMjpjYXNlIDk6Y2FzZSAxNDpyZXR1cm4gUyhiKSxudWxsO2Nhc2UgMTpyZXR1cm4gWmYoYi50eXBlKSYmJGYoKSxTKGIpLG51bGw7Y2FzZSAzOmQ9Yi5zdGF0ZU5vZGU7SmgoKTtFKFdmKTtFKEgpO09oKCk7ZC5wZW5kaW5nQ29udGV4dCYmKGQuY29udGV4dD1kLnBlbmRpbmdDb250ZXh0LGQucGVuZGluZ0NvbnRleHQ9bnVsbCk7aWYobnVsbD09PWF8fG51bGw9PT1hLmNoaWxkKUdnKGIpP2IuZmxhZ3N8PTQ6bnVsbD09PWF8fGEubWVtb2l6ZWRTdGF0ZS5pc0RlaHlkcmF0ZWQmJjA9PT0oYi5mbGFncyYyNTYpfHwoYi5mbGFnc3w9MTAyNCxudWxsIT09emcmJihHaih6Zyksemc9bnVsbCkpO0JqKGEsYik7UyhiKTtyZXR1cm4gbnVsbDtjYXNlIDU6TGgoYik7dmFyIGU9SGgoR2guY3VycmVudCk7XG5jPWIudHlwZTtpZihudWxsIT09YSYmbnVsbCE9Yi5zdGF0ZU5vZGUpQ2ooYSxiLGMsZCxlKSxhLnJlZiE9PWIucmVmJiYoYi5mbGFnc3w9NTEyLGIuZmxhZ3N8PTIwOTcxNTIpO2Vsc2V7aWYoIWQpe2lmKG51bGw9PT1iLnN0YXRlTm9kZSl0aHJvdyBFcnJvcihwKDE2NikpO1MoYik7cmV0dXJuIG51bGx9YT1IaChFaC5jdXJyZW50KTtpZihHZyhiKSl7ZD1iLnN0YXRlTm9kZTtjPWIudHlwZTt2YXIgZj1iLm1lbW9pemVkUHJvcHM7ZFtPZl09YjtkW1BmXT1mO2E9MCE9PShiLm1vZGUmMSk7c3dpdGNoKGMpe2Nhc2UgXCJkaWFsb2dcIjpEKFwiY2FuY2VsXCIsZCk7RChcImNsb3NlXCIsZCk7YnJlYWs7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwiZW1iZWRcIjpEKFwibG9hZFwiLGQpO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcihlPTA7ZTxsZi5sZW5ndGg7ZSsrKUQobGZbZV0sZCk7YnJlYWs7Y2FzZSBcInNvdXJjZVwiOkQoXCJlcnJvclwiLGQpO2JyZWFrO2Nhc2UgXCJpbWdcIjpjYXNlIFwiaW1hZ2VcIjpjYXNlIFwibGlua1wiOkQoXCJlcnJvclwiLFxuZCk7RChcImxvYWRcIixkKTticmVhaztjYXNlIFwiZGV0YWlsc1wiOkQoXCJ0b2dnbGVcIixkKTticmVhaztjYXNlIFwiaW5wdXRcIjpaYShkLGYpO0QoXCJpbnZhbGlkXCIsZCk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmQuX3dyYXBwZXJTdGF0ZT17d2FzTXVsdGlwbGU6ISFmLm11bHRpcGxlfTtEKFwiaW52YWxpZFwiLGQpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmhiKGQsZiksRChcImludmFsaWRcIixkKX11YihjLGYpO2U9bnVsbDtmb3IodmFyIGcgaW4gZilpZihmLmhhc093blByb3BlcnR5KGcpKXt2YXIgaD1mW2ddO1wiY2hpbGRyZW5cIj09PWc/XCJzdHJpbmdcIj09PXR5cGVvZiBoP2QudGV4dENvbnRlbnQhPT1oJiYoITAhPT1mLnN1cHByZXNzSHlkcmF0aW9uV2FybmluZyYmQWYoZC50ZXh0Q29udGVudCxoLGEpLGU9W1wiY2hpbGRyZW5cIixoXSk6XCJudW1iZXJcIj09PXR5cGVvZiBoJiZkLnRleHRDb250ZW50IT09XCJcIitoJiYoITAhPT1mLnN1cHByZXNzSHlkcmF0aW9uV2FybmluZyYmQWYoZC50ZXh0Q29udGVudCxcbmgsYSksZT1bXCJjaGlsZHJlblwiLFwiXCIraF0pOmVhLmhhc093blByb3BlcnR5KGcpJiZudWxsIT1oJiZcIm9uU2Nyb2xsXCI9PT1nJiZEKFwic2Nyb2xsXCIsZCl9c3dpdGNoKGMpe2Nhc2UgXCJpbnB1dFwiOlZhKGQpO2RiKGQsZiwhMCk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6VmEoZCk7amIoZCk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJvcHRpb25cIjpicmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLm9uQ2xpY2smJihkLm9uY2xpY2s9QmYpfWQ9ZTtiLnVwZGF0ZVF1ZXVlPWQ7bnVsbCE9PWQmJihiLmZsYWdzfD00KX1lbHNle2c9OT09PWUubm9kZVR5cGU/ZTplLm93bmVyRG9jdW1lbnQ7XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI9PT1hJiYoYT1rYihjKSk7XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI9PT1hP1wic2NyaXB0XCI9PT1jPyhhPWcuY3JlYXRlRWxlbWVudChcImRpdlwiKSxhLmlubmVySFRNTD1cIjxzY3JpcHQ+XFx4M2Mvc2NyaXB0PlwiLGE9YS5yZW1vdmVDaGlsZChhLmZpcnN0Q2hpbGQpKTpcblwic3RyaW5nXCI9PT10eXBlb2YgZC5pcz9hPWcuY3JlYXRlRWxlbWVudChjLHtpczpkLmlzfSk6KGE9Zy5jcmVhdGVFbGVtZW50KGMpLFwic2VsZWN0XCI9PT1jJiYoZz1hLGQubXVsdGlwbGU/Zy5tdWx0aXBsZT0hMDpkLnNpemUmJihnLnNpemU9ZC5zaXplKSkpOmE9Zy5jcmVhdGVFbGVtZW50TlMoYSxjKTthW09mXT1iO2FbUGZdPWQ7QWooYSxiLCExLCExKTtiLnN0YXRlTm9kZT1hO2E6e2c9dmIoYyxkKTtzd2l0Y2goYyl7Y2FzZSBcImRpYWxvZ1wiOkQoXCJjYW5jZWxcIixhKTtEKFwiY2xvc2VcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwiZW1iZWRcIjpEKFwibG9hZFwiLGEpO2U9ZDticmVhaztjYXNlIFwidmlkZW9cIjpjYXNlIFwiYXVkaW9cIjpmb3IoZT0wO2U8bGYubGVuZ3RoO2UrKylEKGxmW2VdLGEpO2U9ZDticmVhaztjYXNlIFwic291cmNlXCI6RChcImVycm9yXCIsYSk7ZT1kO2JyZWFrO2Nhc2UgXCJpbWdcIjpjYXNlIFwiaW1hZ2VcIjpjYXNlIFwibGlua1wiOkQoXCJlcnJvclwiLFxuYSk7RChcImxvYWRcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcImRldGFpbHNcIjpEKFwidG9nZ2xlXCIsYSk7ZT1kO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOlphKGEsZCk7ZT1ZYShhLGQpO0QoXCJpbnZhbGlkXCIsYSk7YnJlYWs7Y2FzZSBcIm9wdGlvblwiOmU9ZDticmVhaztjYXNlIFwic2VsZWN0XCI6YS5fd3JhcHBlclN0YXRlPXt3YXNNdWx0aXBsZTohIWQubXVsdGlwbGV9O2U9QSh7fSxkLHt2YWx1ZTp2b2lkIDB9KTtEKFwiaW52YWxpZFwiLGEpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmhiKGEsZCk7ZT1nYihhLGQpO0QoXCJpbnZhbGlkXCIsYSk7YnJlYWs7ZGVmYXVsdDplPWR9dWIoYyxlKTtoPWU7Zm9yKGYgaW4gaClpZihoLmhhc093blByb3BlcnR5KGYpKXt2YXIgaz1oW2ZdO1wic3R5bGVcIj09PWY/c2IoYSxrKTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1mPyhrPWs/ay5fX2h0bWw6dm9pZCAwLG51bGwhPWsmJm5iKGEsaykpOlwiY2hpbGRyZW5cIj09PWY/XCJzdHJpbmdcIj09PXR5cGVvZiBrPyhcInRleHRhcmVhXCIhPT1cbmN8fFwiXCIhPT1rKSYmb2IoYSxrKTpcIm51bWJlclwiPT09dHlwZW9mIGsmJm9iKGEsXCJcIitrKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09ZiYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWYmJlwiYXV0b0ZvY3VzXCIhPT1mJiYoZWEuaGFzT3duUHJvcGVydHkoZik/bnVsbCE9ayYmXCJvblNjcm9sbFwiPT09ZiYmRChcInNjcm9sbFwiLGEpOm51bGwhPWsmJnRhKGEsZixrLGcpKX1zd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6VmEoYSk7ZGIoYSxkLCExKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpWYShhKTtqYihhKTticmVhaztjYXNlIFwib3B0aW9uXCI6bnVsbCE9ZC52YWx1ZSYmYS5zZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiLFwiXCIrU2EoZC52YWx1ZSkpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjphLm11bHRpcGxlPSEhZC5tdWx0aXBsZTtmPWQudmFsdWU7bnVsbCE9Zj9mYihhLCEhZC5tdWx0aXBsZSxmLCExKTpudWxsIT1kLmRlZmF1bHRWYWx1ZSYmZmIoYSwhIWQubXVsdGlwbGUsZC5kZWZhdWx0VmFsdWUsXG4hMCk7YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5vbkNsaWNrJiYoYS5vbmNsaWNrPUJmKX1zd2l0Y2goYyl7Y2FzZSBcImJ1dHRvblwiOmNhc2UgXCJpbnB1dFwiOmNhc2UgXCJzZWxlY3RcIjpjYXNlIFwidGV4dGFyZWFcIjpkPSEhZC5hdXRvRm9jdXM7YnJlYWsgYTtjYXNlIFwiaW1nXCI6ZD0hMDticmVhayBhO2RlZmF1bHQ6ZD0hMX19ZCYmKGIuZmxhZ3N8PTQpfW51bGwhPT1iLnJlZiYmKGIuZmxhZ3N8PTUxMixiLmZsYWdzfD0yMDk3MTUyKX1TKGIpO3JldHVybiBudWxsO2Nhc2UgNjppZihhJiZudWxsIT1iLnN0YXRlTm9kZSlEaihhLGIsYS5tZW1vaXplZFByb3BzLGQpO2Vsc2V7aWYoXCJzdHJpbmdcIiE9PXR5cGVvZiBkJiZudWxsPT09Yi5zdGF0ZU5vZGUpdGhyb3cgRXJyb3IocCgxNjYpKTtjPUhoKEdoLmN1cnJlbnQpO0hoKEVoLmN1cnJlbnQpO2lmKEdnKGIpKXtkPWIuc3RhdGVOb2RlO2M9Yi5tZW1vaXplZFByb3BzO2RbT2ZdPWI7aWYoZj1kLm5vZGVWYWx1ZSE9PWMpaWYoYT1cbnhnLG51bGwhPT1hKXN3aXRjaChhLnRhZyl7Y2FzZSAzOkFmKGQubm9kZVZhbHVlLGMsMCE9PShhLm1vZGUmMSkpO2JyZWFrO2Nhc2UgNTohMCE9PWEubWVtb2l6ZWRQcm9wcy5zdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcmJkFmKGQubm9kZVZhbHVlLGMsMCE9PShhLm1vZGUmMSkpfWYmJihiLmZsYWdzfD00KX1lbHNlIGQ9KDk9PT1jLm5vZGVUeXBlP2M6Yy5vd25lckRvY3VtZW50KS5jcmVhdGVUZXh0Tm9kZShkKSxkW09mXT1iLGIuc3RhdGVOb2RlPWR9UyhiKTtyZXR1cm4gbnVsbDtjYXNlIDEzOkUoTSk7ZD1iLm1lbW9pemVkU3RhdGU7aWYobnVsbD09PWF8fG51bGwhPT1hLm1lbW9pemVkU3RhdGUmJm51bGwhPT1hLm1lbW9pemVkU3RhdGUuZGVoeWRyYXRlZCl7aWYoSSYmbnVsbCE9PXlnJiYwIT09KGIubW9kZSYxKSYmMD09PShiLmZsYWdzJjEyOCkpSGcoKSxJZygpLGIuZmxhZ3N8PTk4NTYwLGY9ITE7ZWxzZSBpZihmPUdnKGIpLG51bGwhPT1kJiZudWxsIT09ZC5kZWh5ZHJhdGVkKXtpZihudWxsPT09XG5hKXtpZighZil0aHJvdyBFcnJvcihwKDMxOCkpO2Y9Yi5tZW1vaXplZFN0YXRlO2Y9bnVsbCE9PWY/Zi5kZWh5ZHJhdGVkOm51bGw7aWYoIWYpdGhyb3cgRXJyb3IocCgzMTcpKTtmW09mXT1ifWVsc2UgSWcoKSwwPT09KGIuZmxhZ3MmMTI4KSYmKGIubWVtb2l6ZWRTdGF0ZT1udWxsKSxiLmZsYWdzfD00O1MoYik7Zj0hMX1lbHNlIG51bGwhPT16ZyYmKEdqKHpnKSx6Zz1udWxsKSxmPSEwO2lmKCFmKXJldHVybiBiLmZsYWdzJjY1NTM2P2I6bnVsbH1pZigwIT09KGIuZmxhZ3MmMTI4KSlyZXR1cm4gYi5sYW5lcz1jLGI7ZD1udWxsIT09ZDtkIT09KG51bGwhPT1hJiZudWxsIT09YS5tZW1vaXplZFN0YXRlKSYmZCYmKGIuY2hpbGQuZmxhZ3N8PTgxOTIsMCE9PShiLm1vZGUmMSkmJihudWxsPT09YXx8MCE9PShNLmN1cnJlbnQmMSk/MD09PVQmJihUPTMpOnVqKCkpKTtudWxsIT09Yi51cGRhdGVRdWV1ZSYmKGIuZmxhZ3N8PTQpO1MoYik7cmV0dXJuIG51bGw7Y2FzZSA0OnJldHVybiBKaCgpLFxuQmooYSxiKSxudWxsPT09YSYmc2YoYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyksUyhiKSxudWxsO2Nhc2UgMTA6cmV0dXJuIFJnKGIudHlwZS5fY29udGV4dCksUyhiKSxudWxsO2Nhc2UgMTc6cmV0dXJuIFpmKGIudHlwZSkmJiRmKCksUyhiKSxudWxsO2Nhc2UgMTk6RShNKTtmPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsPT09ZilyZXR1cm4gUyhiKSxudWxsO2Q9MCE9PShiLmZsYWdzJjEyOCk7Zz1mLnJlbmRlcmluZztpZihudWxsPT09ZylpZihkKUVqKGYsITEpO2Vsc2V7aWYoMCE9PVR8fG51bGwhPT1hJiYwIT09KGEuZmxhZ3MmMTI4KSlmb3IoYT1iLmNoaWxkO251bGwhPT1hOyl7Zz1NaChhKTtpZihudWxsIT09Zyl7Yi5mbGFnc3w9MTI4O0VqKGYsITEpO2Q9Zy51cGRhdGVRdWV1ZTtudWxsIT09ZCYmKGIudXBkYXRlUXVldWU9ZCxiLmZsYWdzfD00KTtiLnN1YnRyZWVGbGFncz0wO2Q9Yztmb3IoYz1iLmNoaWxkO251bGwhPT1jOylmPWMsYT1kLGYuZmxhZ3MmPTE0NjgwMDY2LFxuZz1mLmFsdGVybmF0ZSxudWxsPT09Zz8oZi5jaGlsZExhbmVzPTAsZi5sYW5lcz1hLGYuY2hpbGQ9bnVsbCxmLnN1YnRyZWVGbGFncz0wLGYubWVtb2l6ZWRQcm9wcz1udWxsLGYubWVtb2l6ZWRTdGF0ZT1udWxsLGYudXBkYXRlUXVldWU9bnVsbCxmLmRlcGVuZGVuY2llcz1udWxsLGYuc3RhdGVOb2RlPW51bGwpOihmLmNoaWxkTGFuZXM9Zy5jaGlsZExhbmVzLGYubGFuZXM9Zy5sYW5lcyxmLmNoaWxkPWcuY2hpbGQsZi5zdWJ0cmVlRmxhZ3M9MCxmLmRlbGV0aW9ucz1udWxsLGYubWVtb2l6ZWRQcm9wcz1nLm1lbW9pemVkUHJvcHMsZi5tZW1vaXplZFN0YXRlPWcubWVtb2l6ZWRTdGF0ZSxmLnVwZGF0ZVF1ZXVlPWcudXBkYXRlUXVldWUsZi50eXBlPWcudHlwZSxhPWcuZGVwZW5kZW5jaWVzLGYuZGVwZW5kZW5jaWVzPW51bGw9PT1hP251bGw6e2xhbmVzOmEubGFuZXMsZmlyc3RDb250ZXh0OmEuZmlyc3RDb250ZXh0fSksYz1jLnNpYmxpbmc7RyhNLE0uY3VycmVudCYxfDIpO3JldHVybiBiLmNoaWxkfWE9XG5hLnNpYmxpbmd9bnVsbCE9PWYudGFpbCYmQigpPkhqJiYoYi5mbGFnc3w9MTI4LGQ9ITAsRWooZiwhMSksYi5sYW5lcz00MTk0MzA0KX1lbHNle2lmKCFkKWlmKGE9TWgoZyksbnVsbCE9PWEpe2lmKGIuZmxhZ3N8PTEyOCxkPSEwLGM9YS51cGRhdGVRdWV1ZSxudWxsIT09YyYmKGIudXBkYXRlUXVldWU9YyxiLmZsYWdzfD00KSxFaihmLCEwKSxudWxsPT09Zi50YWlsJiZcImhpZGRlblwiPT09Zi50YWlsTW9kZSYmIWcuYWx0ZXJuYXRlJiYhSSlyZXR1cm4gUyhiKSxudWxsfWVsc2UgMipCKCktZi5yZW5kZXJpbmdTdGFydFRpbWU+SGomJjEwNzM3NDE4MjQhPT1jJiYoYi5mbGFnc3w9MTI4LGQ9ITAsRWooZiwhMSksYi5sYW5lcz00MTk0MzA0KTtmLmlzQmFja3dhcmRzPyhnLnNpYmxpbmc9Yi5jaGlsZCxiLmNoaWxkPWcpOihjPWYubGFzdCxudWxsIT09Yz9jLnNpYmxpbmc9ZzpiLmNoaWxkPWcsZi5sYXN0PWcpfWlmKG51bGwhPT1mLnRhaWwpcmV0dXJuIGI9Zi50YWlsLGYucmVuZGVyaW5nPVxuYixmLnRhaWw9Yi5zaWJsaW5nLGYucmVuZGVyaW5nU3RhcnRUaW1lPUIoKSxiLnNpYmxpbmc9bnVsbCxjPU0uY3VycmVudCxHKE0sZD9jJjF8MjpjJjEpLGI7UyhiKTtyZXR1cm4gbnVsbDtjYXNlIDIyOmNhc2UgMjM6cmV0dXJuIElqKCksZD1udWxsIT09Yi5tZW1vaXplZFN0YXRlLG51bGwhPT1hJiZudWxsIT09YS5tZW1vaXplZFN0YXRlIT09ZCYmKGIuZmxhZ3N8PTgxOTIpLGQmJjAhPT0oYi5tb2RlJjEpPzAhPT0oZ2omMTA3Mzc0MTgyNCkmJihTKGIpLGIuc3VidHJlZUZsYWdzJjYmJihiLmZsYWdzfD04MTkyKSk6UyhiKSxudWxsO2Nhc2UgMjQ6cmV0dXJuIG51bGw7Y2FzZSAyNTpyZXR1cm4gbnVsbH10aHJvdyBFcnJvcihwKDE1NixiLnRhZykpO31cbmZ1bmN0aW9uIEpqKGEsYil7d2coYik7c3dpdGNoKGIudGFnKXtjYXNlIDE6cmV0dXJuIFpmKGIudHlwZSkmJiRmKCksYT1iLmZsYWdzLGEmNjU1MzY/KGIuZmxhZ3M9YSYtNjU1Mzd8MTI4LGIpOm51bGw7Y2FzZSAzOnJldHVybiBKaCgpLEUoV2YpLEUoSCksT2goKSxhPWIuZmxhZ3MsMCE9PShhJjY1NTM2KSYmMD09PShhJjEyOCk/KGIuZmxhZ3M9YSYtNjU1Mzd8MTI4LGIpOm51bGw7Y2FzZSA1OnJldHVybiBMaChiKSxudWxsO2Nhc2UgMTM6RShNKTthPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09YSYmbnVsbCE9PWEuZGVoeWRyYXRlZCl7aWYobnVsbD09PWIuYWx0ZXJuYXRlKXRocm93IEVycm9yKHAoMzQwKSk7SWcoKX1hPWIuZmxhZ3M7cmV0dXJuIGEmNjU1MzY/KGIuZmxhZ3M9YSYtNjU1Mzd8MTI4LGIpOm51bGw7Y2FzZSAxOTpyZXR1cm4gRShNKSxudWxsO2Nhc2UgNDpyZXR1cm4gSmgoKSxudWxsO2Nhc2UgMTA6cmV0dXJuIFJnKGIudHlwZS5fY29udGV4dCksbnVsbDtjYXNlIDIyOmNhc2UgMjM6cmV0dXJuIElqKCksXG5udWxsO2Nhc2UgMjQ6cmV0dXJuIG51bGw7ZGVmYXVsdDpyZXR1cm4gbnVsbH19dmFyIEtqPSExLFU9ITEsTGo9XCJmdW5jdGlvblwiPT09dHlwZW9mIFdlYWtTZXQ/V2Vha1NldDpTZXQsVj1udWxsO2Z1bmN0aW9uIE1qKGEsYil7dmFyIGM9YS5yZWY7aWYobnVsbCE9PWMpaWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGMpdHJ5e2MobnVsbCl9Y2F0Y2goZCl7VyhhLGIsZCl9ZWxzZSBjLmN1cnJlbnQ9bnVsbH1mdW5jdGlvbiBOaihhLGIsYyl7dHJ5e2MoKX1jYXRjaChkKXtXKGEsYixkKX19dmFyIE9qPSExO1xuZnVuY3Rpb24gUGooYSxiKXtDZj1kZDthPU1lKCk7aWYoTmUoYSkpe2lmKFwic2VsZWN0aW9uU3RhcnRcImluIGEpdmFyIGM9e3N0YXJ0OmEuc2VsZWN0aW9uU3RhcnQsZW5kOmEuc2VsZWN0aW9uRW5kfTtlbHNlIGE6e2M9KGM9YS5vd25lckRvY3VtZW50KSYmYy5kZWZhdWx0Vmlld3x8d2luZG93O3ZhciBkPWMuZ2V0U2VsZWN0aW9uJiZjLmdldFNlbGVjdGlvbigpO2lmKGQmJjAhPT1kLnJhbmdlQ291bnQpe2M9ZC5hbmNob3JOb2RlO3ZhciBlPWQuYW5jaG9yT2Zmc2V0LGY9ZC5mb2N1c05vZGU7ZD1kLmZvY3VzT2Zmc2V0O3RyeXtjLm5vZGVUeXBlLGYubm9kZVR5cGV9Y2F0Y2goRil7Yz1udWxsO2JyZWFrIGF9dmFyIGc9MCxoPS0xLGs9LTEsbD0wLG09MCxxPWEscj1udWxsO2I6Zm9yKDs7KXtmb3IodmFyIHk7Oyl7cSE9PWN8fDAhPT1lJiYzIT09cS5ub2RlVHlwZXx8KGg9ZytlKTtxIT09Znx8MCE9PWQmJjMhPT1xLm5vZGVUeXBlfHwoaz1nK2QpOzM9PT1xLm5vZGVUeXBlJiYoZys9XG5xLm5vZGVWYWx1ZS5sZW5ndGgpO2lmKG51bGw9PT0oeT1xLmZpcnN0Q2hpbGQpKWJyZWFrO3I9cTtxPXl9Zm9yKDs7KXtpZihxPT09YSlicmVhayBiO3I9PT1jJiYrK2w9PT1lJiYoaD1nKTtyPT09ZiYmKyttPT09ZCYmKGs9Zyk7aWYobnVsbCE9PSh5PXEubmV4dFNpYmxpbmcpKWJyZWFrO3E9cjtyPXEucGFyZW50Tm9kZX1xPXl9Yz0tMT09PWh8fC0xPT09az9udWxsOntzdGFydDpoLGVuZDprfX1lbHNlIGM9bnVsbH1jPWN8fHtzdGFydDowLGVuZDowfX1lbHNlIGM9bnVsbDtEZj17Zm9jdXNlZEVsZW06YSxzZWxlY3Rpb25SYW5nZTpjfTtkZD0hMTtmb3IoVj1iO251bGwhPT1WOylpZihiPVYsYT1iLmNoaWxkLDAhPT0oYi5zdWJ0cmVlRmxhZ3MmMTAyOCkmJm51bGwhPT1hKWEucmV0dXJuPWIsVj1hO2Vsc2UgZm9yKDtudWxsIT09Vjspe2I9Vjt0cnl7dmFyIG49Yi5hbHRlcm5hdGU7aWYoMCE9PShiLmZsYWdzJjEwMjQpKXN3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpicmVhaztcbmNhc2UgMTppZihudWxsIT09bil7dmFyIHQ9bi5tZW1vaXplZFByb3BzLEo9bi5tZW1vaXplZFN0YXRlLHg9Yi5zdGF0ZU5vZGUsdz14LmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKGIuZWxlbWVudFR5cGU9PT1iLnR5cGU/dDpMZyhiLnR5cGUsdCksSik7eC5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZT13fWJyZWFrO2Nhc2UgMzp2YXIgdT1iLnN0YXRlTm9kZS5jb250YWluZXJJbmZvOzE9PT11Lm5vZGVUeXBlP3UudGV4dENvbnRlbnQ9XCJcIjo5PT09dS5ub2RlVHlwZSYmdS5kb2N1bWVudEVsZW1lbnQmJnUucmVtb3ZlQ2hpbGQodS5kb2N1bWVudEVsZW1lbnQpO2JyZWFrO2Nhc2UgNTpjYXNlIDY6Y2FzZSA0OmNhc2UgMTc6YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcihwKDE2MykpO319Y2F0Y2goRil7VyhiLGIucmV0dXJuLEYpfWE9Yi5zaWJsaW5nO2lmKG51bGwhPT1hKXthLnJldHVybj1iLnJldHVybjtWPWE7YnJlYWt9Vj1iLnJldHVybn1uPU9qO09qPSExO3JldHVybiBufVxuZnVuY3Rpb24gUWooYSxiLGMpe3ZhciBkPWIudXBkYXRlUXVldWU7ZD1udWxsIT09ZD9kLmxhc3RFZmZlY3Q6bnVsbDtpZihudWxsIT09ZCl7dmFyIGU9ZD1kLm5leHQ7ZG97aWYoKGUudGFnJmEpPT09YSl7dmFyIGY9ZS5kZXN0cm95O2UuZGVzdHJveT12b2lkIDA7dm9pZCAwIT09ZiYmTmooYixjLGYpfWU9ZS5uZXh0fXdoaWxlKGUhPT1kKX19ZnVuY3Rpb24gUmooYSxiKXtiPWIudXBkYXRlUXVldWU7Yj1udWxsIT09Yj9iLmxhc3RFZmZlY3Q6bnVsbDtpZihudWxsIT09Yil7dmFyIGM9Yj1iLm5leHQ7ZG97aWYoKGMudGFnJmEpPT09YSl7dmFyIGQ9Yy5jcmVhdGU7Yy5kZXN0cm95PWQoKX1jPWMubmV4dH13aGlsZShjIT09Yil9fWZ1bmN0aW9uIFNqKGEpe3ZhciBiPWEucmVmO2lmKG51bGwhPT1iKXt2YXIgYz1hLnN0YXRlTm9kZTtzd2l0Y2goYS50YWcpe2Nhc2UgNTphPWM7YnJlYWs7ZGVmYXVsdDphPWN9XCJmdW5jdGlvblwiPT09dHlwZW9mIGI/YihhKTpiLmN1cnJlbnQ9YX19XG5mdW5jdGlvbiBUaihhKXt2YXIgYj1hLmFsdGVybmF0ZTtudWxsIT09YiYmKGEuYWx0ZXJuYXRlPW51bGwsVGooYikpO2EuY2hpbGQ9bnVsbDthLmRlbGV0aW9ucz1udWxsO2Euc2libGluZz1udWxsOzU9PT1hLnRhZyYmKGI9YS5zdGF0ZU5vZGUsbnVsbCE9PWImJihkZWxldGUgYltPZl0sZGVsZXRlIGJbUGZdLGRlbGV0ZSBiW29mXSxkZWxldGUgYltRZl0sZGVsZXRlIGJbUmZdKSk7YS5zdGF0ZU5vZGU9bnVsbDthLnJldHVybj1udWxsO2EuZGVwZW5kZW5jaWVzPW51bGw7YS5tZW1vaXplZFByb3BzPW51bGw7YS5tZW1vaXplZFN0YXRlPW51bGw7YS5wZW5kaW5nUHJvcHM9bnVsbDthLnN0YXRlTm9kZT1udWxsO2EudXBkYXRlUXVldWU9bnVsbH1mdW5jdGlvbiBVaihhKXtyZXR1cm4gNT09PWEudGFnfHwzPT09YS50YWd8fDQ9PT1hLnRhZ31cbmZ1bmN0aW9uIFZqKGEpe2E6Zm9yKDs7KXtmb3IoO251bGw9PT1hLnNpYmxpbmc7KXtpZihudWxsPT09YS5yZXR1cm58fFVqKGEucmV0dXJuKSlyZXR1cm4gbnVsbDthPWEucmV0dXJufWEuc2libGluZy5yZXR1cm49YS5yZXR1cm47Zm9yKGE9YS5zaWJsaW5nOzUhPT1hLnRhZyYmNiE9PWEudGFnJiYxOCE9PWEudGFnOyl7aWYoYS5mbGFncyYyKWNvbnRpbnVlIGE7aWYobnVsbD09PWEuY2hpbGR8fDQ9PT1hLnRhZyljb250aW51ZSBhO2Vsc2UgYS5jaGlsZC5yZXR1cm49YSxhPWEuY2hpbGR9aWYoIShhLmZsYWdzJjIpKXJldHVybiBhLnN0YXRlTm9kZX19XG5mdW5jdGlvbiBXaihhLGIsYyl7dmFyIGQ9YS50YWc7aWYoNT09PWR8fDY9PT1kKWE9YS5zdGF0ZU5vZGUsYj84PT09Yy5ub2RlVHlwZT9jLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGEsYik6Yy5pbnNlcnRCZWZvcmUoYSxiKTooOD09PWMubm9kZVR5cGU/KGI9Yy5wYXJlbnROb2RlLGIuaW5zZXJ0QmVmb3JlKGEsYykpOihiPWMsYi5hcHBlbmRDaGlsZChhKSksYz1jLl9yZWFjdFJvb3RDb250YWluZXIsbnVsbCE9PWMmJnZvaWQgMCE9PWN8fG51bGwhPT1iLm9uY2xpY2t8fChiLm9uY2xpY2s9QmYpKTtlbHNlIGlmKDQhPT1kJiYoYT1hLmNoaWxkLG51bGwhPT1hKSlmb3IoV2ooYSxiLGMpLGE9YS5zaWJsaW5nO251bGwhPT1hOylXaihhLGIsYyksYT1hLnNpYmxpbmd9XG5mdW5jdGlvbiBYaihhLGIsYyl7dmFyIGQ9YS50YWc7aWYoNT09PWR8fDY9PT1kKWE9YS5zdGF0ZU5vZGUsYj9jLmluc2VydEJlZm9yZShhLGIpOmMuYXBwZW5kQ2hpbGQoYSk7ZWxzZSBpZig0IT09ZCYmKGE9YS5jaGlsZCxudWxsIT09YSkpZm9yKFhqKGEsYixjKSxhPWEuc2libGluZztudWxsIT09YTspWGooYSxiLGMpLGE9YS5zaWJsaW5nfXZhciBYPW51bGwsWWo9ITE7ZnVuY3Rpb24gWmooYSxiLGMpe2ZvcihjPWMuY2hpbGQ7bnVsbCE9PWM7KWFrKGEsYixjKSxjPWMuc2libGluZ31cbmZ1bmN0aW9uIGFrKGEsYixjKXtpZihsYyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGxjLm9uQ29tbWl0RmliZXJVbm1vdW50KXRyeXtsYy5vbkNvbW1pdEZpYmVyVW5tb3VudChrYyxjKX1jYXRjaChoKXt9c3dpdGNoKGMudGFnKXtjYXNlIDU6VXx8TWooYyxiKTtjYXNlIDY6dmFyIGQ9WCxlPVlqO1g9bnVsbDtaaihhLGIsYyk7WD1kO1lqPWU7bnVsbCE9PVgmJihZaj8oYT1YLGM9Yy5zdGF0ZU5vZGUsOD09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGMpOmEucmVtb3ZlQ2hpbGQoYykpOlgucmVtb3ZlQ2hpbGQoYy5zdGF0ZU5vZGUpKTticmVhaztjYXNlIDE4Om51bGwhPT1YJiYoWWo/KGE9WCxjPWMuc3RhdGVOb2RlLDg9PT1hLm5vZGVUeXBlP0tmKGEucGFyZW50Tm9kZSxjKToxPT09YS5ub2RlVHlwZSYmS2YoYSxjKSxiZChhKSk6S2YoWCxjLnN0YXRlTm9kZSkpO2JyZWFrO2Nhc2UgNDpkPVg7ZT1ZajtYPWMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87WWo9ITA7XG5aaihhLGIsYyk7WD1kO1lqPWU7YnJlYWs7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNDpjYXNlIDE1OmlmKCFVJiYoZD1jLnVwZGF0ZVF1ZXVlLG51bGwhPT1kJiYoZD1kLmxhc3RFZmZlY3QsbnVsbCE9PWQpKSl7ZT1kPWQubmV4dDtkb3t2YXIgZj1lLGc9Zi5kZXN0cm95O2Y9Zi50YWc7dm9pZCAwIT09ZyYmKDAhPT0oZiYyKT9OaihjLGIsZyk6MCE9PShmJjQpJiZOaihjLGIsZykpO2U9ZS5uZXh0fXdoaWxlKGUhPT1kKX1aaihhLGIsYyk7YnJlYWs7Y2FzZSAxOmlmKCFVJiYoTWooYyxiKSxkPWMuc3RhdGVOb2RlLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudFdpbGxVbm1vdW50KSl0cnl7ZC5wcm9wcz1jLm1lbW9pemVkUHJvcHMsZC5zdGF0ZT1jLm1lbW9pemVkU3RhdGUsZC5jb21wb25lbnRXaWxsVW5tb3VudCgpfWNhdGNoKGgpe1coYyxiLGgpfVpqKGEsYixjKTticmVhaztjYXNlIDIxOlpqKGEsYixjKTticmVhaztjYXNlIDIyOmMubW9kZSYxPyhVPShkPVUpfHxudWxsIT09XG5jLm1lbW9pemVkU3RhdGUsWmooYSxiLGMpLFU9ZCk6WmooYSxiLGMpO2JyZWFrO2RlZmF1bHQ6WmooYSxiLGMpfX1mdW5jdGlvbiBiayhhKXt2YXIgYj1hLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1iKXthLnVwZGF0ZVF1ZXVlPW51bGw7dmFyIGM9YS5zdGF0ZU5vZGU7bnVsbD09PWMmJihjPWEuc3RhdGVOb2RlPW5ldyBMaik7Yi5mb3JFYWNoKGZ1bmN0aW9uKGIpe3ZhciBkPWNrLmJpbmQobnVsbCxhLGIpO2MuaGFzKGIpfHwoYy5hZGQoYiksYi50aGVuKGQsZCkpfSl9fVxuZnVuY3Rpb24gZGsoYSxiKXt2YXIgYz1iLmRlbGV0aW9ucztpZihudWxsIT09Yylmb3IodmFyIGQ9MDtkPGMubGVuZ3RoO2QrKyl7dmFyIGU9Y1tkXTt0cnl7dmFyIGY9YSxnPWIsaD1nO2E6Zm9yKDtudWxsIT09aDspe3N3aXRjaChoLnRhZyl7Y2FzZSA1Olg9aC5zdGF0ZU5vZGU7WWo9ITE7YnJlYWsgYTtjYXNlIDM6WD1oLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO1lqPSEwO2JyZWFrIGE7Y2FzZSA0Olg9aC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztZaj0hMDticmVhayBhfWg9aC5yZXR1cm59aWYobnVsbD09PVgpdGhyb3cgRXJyb3IocCgxNjApKTthayhmLGcsZSk7WD1udWxsO1lqPSExO3ZhciBrPWUuYWx0ZXJuYXRlO251bGwhPT1rJiYoay5yZXR1cm49bnVsbCk7ZS5yZXR1cm49bnVsbH1jYXRjaChsKXtXKGUsYixsKX19aWYoYi5zdWJ0cmVlRmxhZ3MmMTI4NTQpZm9yKGI9Yi5jaGlsZDtudWxsIT09YjspZWsoYixhKSxiPWIuc2libGluZ31cbmZ1bmN0aW9uIGVrKGEsYil7dmFyIGM9YS5hbHRlcm5hdGUsZD1hLmZsYWdzO3N3aXRjaChhLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNDpjYXNlIDE1OmRrKGIsYSk7ZmsoYSk7aWYoZCY0KXt0cnl7UWooMyxhLGEucmV0dXJuKSxSaigzLGEpfWNhdGNoKHQpe1coYSxhLnJldHVybix0KX10cnl7UWooNSxhLGEucmV0dXJuKX1jYXRjaCh0KXtXKGEsYS5yZXR1cm4sdCl9fWJyZWFrO2Nhc2UgMTpkayhiLGEpO2ZrKGEpO2QmNTEyJiZudWxsIT09YyYmTWooYyxjLnJldHVybik7YnJlYWs7Y2FzZSA1OmRrKGIsYSk7ZmsoYSk7ZCY1MTImJm51bGwhPT1jJiZNaihjLGMucmV0dXJuKTtpZihhLmZsYWdzJjMyKXt2YXIgZT1hLnN0YXRlTm9kZTt0cnl7b2IoZSxcIlwiKX1jYXRjaCh0KXtXKGEsYS5yZXR1cm4sdCl9fWlmKGQmNCYmKGU9YS5zdGF0ZU5vZGUsbnVsbCE9ZSkpe3ZhciBmPWEubWVtb2l6ZWRQcm9wcyxnPW51bGwhPT1jP2MubWVtb2l6ZWRQcm9wczpmLGg9YS50eXBlLGs9YS51cGRhdGVRdWV1ZTtcbmEudXBkYXRlUXVldWU9bnVsbDtpZihudWxsIT09ayl0cnl7XCJpbnB1dFwiPT09aCYmXCJyYWRpb1wiPT09Zi50eXBlJiZudWxsIT1mLm5hbWUmJmFiKGUsZik7dmIoaCxnKTt2YXIgbD12YihoLGYpO2ZvcihnPTA7ZzxrLmxlbmd0aDtnKz0yKXt2YXIgbT1rW2ddLHE9a1tnKzFdO1wic3R5bGVcIj09PW0/c2IoZSxxKTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1tP25iKGUscSk6XCJjaGlsZHJlblwiPT09bT9vYihlLHEpOnRhKGUsbSxxLGwpfXN3aXRjaChoKXtjYXNlIFwiaW5wdXRcIjpiYihlLGYpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmliKGUsZik7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOnZhciByPWUuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZTtlLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGU9ISFmLm11bHRpcGxlO3ZhciB5PWYudmFsdWU7bnVsbCE9eT9mYihlLCEhZi5tdWx0aXBsZSx5LCExKTpyIT09ISFmLm11bHRpcGxlJiYobnVsbCE9Zi5kZWZhdWx0VmFsdWU/ZmIoZSwhIWYubXVsdGlwbGUsXG5mLmRlZmF1bHRWYWx1ZSwhMCk6ZmIoZSwhIWYubXVsdGlwbGUsZi5tdWx0aXBsZT9bXTpcIlwiLCExKSl9ZVtQZl09Zn1jYXRjaCh0KXtXKGEsYS5yZXR1cm4sdCl9fWJyZWFrO2Nhc2UgNjpkayhiLGEpO2ZrKGEpO2lmKGQmNCl7aWYobnVsbD09PWEuc3RhdGVOb2RlKXRocm93IEVycm9yKHAoMTYyKSk7ZT1hLnN0YXRlTm9kZTtmPWEubWVtb2l6ZWRQcm9wczt0cnl7ZS5ub2RlVmFsdWU9Zn1jYXRjaCh0KXtXKGEsYS5yZXR1cm4sdCl9fWJyZWFrO2Nhc2UgMzpkayhiLGEpO2ZrKGEpO2lmKGQmNCYmbnVsbCE9PWMmJmMubWVtb2l6ZWRTdGF0ZS5pc0RlaHlkcmF0ZWQpdHJ5e2JkKGIuY29udGFpbmVySW5mbyl9Y2F0Y2godCl7VyhhLGEucmV0dXJuLHQpfWJyZWFrO2Nhc2UgNDpkayhiLGEpO2ZrKGEpO2JyZWFrO2Nhc2UgMTM6ZGsoYixhKTtmayhhKTtlPWEuY2hpbGQ7ZS5mbGFncyY4MTkyJiYoZj1udWxsIT09ZS5tZW1vaXplZFN0YXRlLGUuc3RhdGVOb2RlLmlzSGlkZGVuPWYsIWZ8fFxubnVsbCE9PWUuYWx0ZXJuYXRlJiZudWxsIT09ZS5hbHRlcm5hdGUubWVtb2l6ZWRTdGF0ZXx8KGdrPUIoKSkpO2QmNCYmYmsoYSk7YnJlYWs7Y2FzZSAyMjptPW51bGwhPT1jJiZudWxsIT09Yy5tZW1vaXplZFN0YXRlO2EubW9kZSYxPyhVPShsPVUpfHxtLGRrKGIsYSksVT1sKTpkayhiLGEpO2ZrKGEpO2lmKGQmODE5Mil7bD1udWxsIT09YS5tZW1vaXplZFN0YXRlO2lmKChhLnN0YXRlTm9kZS5pc0hpZGRlbj1sKSYmIW0mJjAhPT0oYS5tb2RlJjEpKWZvcihWPWEsbT1hLmNoaWxkO251bGwhPT1tOyl7Zm9yKHE9Vj1tO251bGwhPT1WOyl7cj1WO3k9ci5jaGlsZDtzd2l0Y2goci50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTQ6Y2FzZSAxNTpRaig0LHIsci5yZXR1cm4pO2JyZWFrO2Nhc2UgMTpNaihyLHIucmV0dXJuKTt2YXIgbj1yLnN0YXRlTm9kZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2Ygbi5jb21wb25lbnRXaWxsVW5tb3VudCl7ZD1yO2M9ci5yZXR1cm47dHJ5e2I9ZCxuLnByb3BzPVxuYi5tZW1vaXplZFByb3BzLG4uc3RhdGU9Yi5tZW1vaXplZFN0YXRlLG4uY29tcG9uZW50V2lsbFVubW91bnQoKX1jYXRjaCh0KXtXKGQsYyx0KX19YnJlYWs7Y2FzZSA1Ok1qKHIsci5yZXR1cm4pO2JyZWFrO2Nhc2UgMjI6aWYobnVsbCE9PXIubWVtb2l6ZWRTdGF0ZSl7aGsocSk7Y29udGludWV9fW51bGwhPT15Pyh5LnJldHVybj1yLFY9eSk6aGsocSl9bT1tLnNpYmxpbmd9YTpmb3IobT1udWxsLHE9YTs7KXtpZig1PT09cS50YWcpe2lmKG51bGw9PT1tKXttPXE7dHJ5e2U9cS5zdGF0ZU5vZGUsbD8oZj1lLnN0eWxlLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLnNldFByb3BlcnR5P2Yuc2V0UHJvcGVydHkoXCJkaXNwbGF5XCIsXCJub25lXCIsXCJpbXBvcnRhbnRcIik6Zi5kaXNwbGF5PVwibm9uZVwiKTooaD1xLnN0YXRlTm9kZSxrPXEubWVtb2l6ZWRQcm9wcy5zdHlsZSxnPXZvaWQgMCE9PWsmJm51bGwhPT1rJiZrLmhhc093blByb3BlcnR5KFwiZGlzcGxheVwiKT9rLmRpc3BsYXk6bnVsbCxoLnN0eWxlLmRpc3BsYXk9XG5yYihcImRpc3BsYXlcIixnKSl9Y2F0Y2godCl7VyhhLGEucmV0dXJuLHQpfX19ZWxzZSBpZig2PT09cS50YWcpe2lmKG51bGw9PT1tKXRyeXtxLnN0YXRlTm9kZS5ub2RlVmFsdWU9bD9cIlwiOnEubWVtb2l6ZWRQcm9wc31jYXRjaCh0KXtXKGEsYS5yZXR1cm4sdCl9fWVsc2UgaWYoKDIyIT09cS50YWcmJjIzIT09cS50YWd8fG51bGw9PT1xLm1lbW9pemVkU3RhdGV8fHE9PT1hKSYmbnVsbCE9PXEuY2hpbGQpe3EuY2hpbGQucmV0dXJuPXE7cT1xLmNoaWxkO2NvbnRpbnVlfWlmKHE9PT1hKWJyZWFrIGE7Zm9yKDtudWxsPT09cS5zaWJsaW5nOyl7aWYobnVsbD09PXEucmV0dXJufHxxLnJldHVybj09PWEpYnJlYWsgYTttPT09cSYmKG09bnVsbCk7cT1xLnJldHVybn1tPT09cSYmKG09bnVsbCk7cS5zaWJsaW5nLnJldHVybj1xLnJldHVybjtxPXEuc2libGluZ319YnJlYWs7Y2FzZSAxOTpkayhiLGEpO2ZrKGEpO2QmNCYmYmsoYSk7YnJlYWs7Y2FzZSAyMTpicmVhaztkZWZhdWx0OmRrKGIsXG5hKSxmayhhKX19ZnVuY3Rpb24gZmsoYSl7dmFyIGI9YS5mbGFncztpZihiJjIpe3RyeXthOntmb3IodmFyIGM9YS5yZXR1cm47bnVsbCE9PWM7KXtpZihVaihjKSl7dmFyIGQ9YzticmVhayBhfWM9Yy5yZXR1cm59dGhyb3cgRXJyb3IocCgxNjApKTt9c3dpdGNoKGQudGFnKXtjYXNlIDU6dmFyIGU9ZC5zdGF0ZU5vZGU7ZC5mbGFncyYzMiYmKG9iKGUsXCJcIiksZC5mbGFncyY9LTMzKTt2YXIgZj1WaihhKTtYaihhLGYsZSk7YnJlYWs7Y2FzZSAzOmNhc2UgNDp2YXIgZz1kLnN0YXRlTm9kZS5jb250YWluZXJJbmZvLGg9VmooYSk7V2ooYSxoLGcpO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IocCgxNjEpKTt9fWNhdGNoKGspe1coYSxhLnJldHVybixrKX1hLmZsYWdzJj0tM31iJjQwOTYmJihhLmZsYWdzJj0tNDA5Nyl9ZnVuY3Rpb24gaWsoYSxiLGMpe1Y9YTtqayhhLGIsYyl9XG5mdW5jdGlvbiBqayhhLGIsYyl7Zm9yKHZhciBkPTAhPT0oYS5tb2RlJjEpO251bGwhPT1WOyl7dmFyIGU9VixmPWUuY2hpbGQ7aWYoMjI9PT1lLnRhZyYmZCl7dmFyIGc9bnVsbCE9PWUubWVtb2l6ZWRTdGF0ZXx8S2o7aWYoIWcpe3ZhciBoPWUuYWx0ZXJuYXRlLGs9bnVsbCE9PWgmJm51bGwhPT1oLm1lbW9pemVkU3RhdGV8fFU7aD1Lajt2YXIgbD1VO0tqPWc7aWYoKFU9aykmJiFsKWZvcihWPWU7bnVsbCE9PVY7KWc9VixrPWcuY2hpbGQsMjI9PT1nLnRhZyYmbnVsbCE9PWcubWVtb2l6ZWRTdGF0ZT9rayhlKTpudWxsIT09az8oay5yZXR1cm49ZyxWPWspOmtrKGUpO2Zvcig7bnVsbCE9PWY7KVY9ZixqayhmLGIsYyksZj1mLnNpYmxpbmc7Vj1lO0tqPWg7VT1sfWxrKGEsYixjKX1lbHNlIDAhPT0oZS5zdWJ0cmVlRmxhZ3MmODc3MikmJm51bGwhPT1mPyhmLnJldHVybj1lLFY9Zik6bGsoYSxiLGMpfX1cbmZ1bmN0aW9uIGxrKGEpe2Zvcig7bnVsbCE9PVY7KXt2YXIgYj1WO2lmKDAhPT0oYi5mbGFncyY4NzcyKSl7dmFyIGM9Yi5hbHRlcm5hdGU7dHJ5e2lmKDAhPT0oYi5mbGFncyY4NzcyKSlzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6VXx8UmooNSxiKTticmVhaztjYXNlIDE6dmFyIGQ9Yi5zdGF0ZU5vZGU7aWYoYi5mbGFncyY0JiYhVSlpZihudWxsPT09YylkLmNvbXBvbmVudERpZE1vdW50KCk7ZWxzZXt2YXIgZT1iLmVsZW1lbnRUeXBlPT09Yi50eXBlP2MubWVtb2l6ZWRQcm9wczpMZyhiLnR5cGUsYy5tZW1vaXplZFByb3BzKTtkLmNvbXBvbmVudERpZFVwZGF0ZShlLGMubWVtb2l6ZWRTdGF0ZSxkLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlKX12YXIgZj1iLnVwZGF0ZVF1ZXVlO251bGwhPT1mJiZpaChiLGYsZCk7YnJlYWs7Y2FzZSAzOnZhciBnPWIudXBkYXRlUXVldWU7aWYobnVsbCE9PWcpe2M9bnVsbDtpZihudWxsIT09Yi5jaGlsZClzd2l0Y2goYi5jaGlsZC50YWcpe2Nhc2UgNTpjPVxuYi5jaGlsZC5zdGF0ZU5vZGU7YnJlYWs7Y2FzZSAxOmM9Yi5jaGlsZC5zdGF0ZU5vZGV9aWgoYixnLGMpfWJyZWFrO2Nhc2UgNTp2YXIgaD1iLnN0YXRlTm9kZTtpZihudWxsPT09YyYmYi5mbGFncyY0KXtjPWg7dmFyIGs9Yi5tZW1vaXplZFByb3BzO3N3aXRjaChiLnR5cGUpe2Nhc2UgXCJidXR0b25cIjpjYXNlIFwiaW5wdXRcIjpjYXNlIFwic2VsZWN0XCI6Y2FzZSBcInRleHRhcmVhXCI6ay5hdXRvRm9jdXMmJmMuZm9jdXMoKTticmVhaztjYXNlIFwiaW1nXCI6ay5zcmMmJihjLnNyYz1rLnNyYyl9fWJyZWFrO2Nhc2UgNjpicmVhaztjYXNlIDQ6YnJlYWs7Y2FzZSAxMjpicmVhaztjYXNlIDEzOmlmKG51bGw9PT1iLm1lbW9pemVkU3RhdGUpe3ZhciBsPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1sKXt2YXIgbT1sLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PW0pe3ZhciBxPW0uZGVoeWRyYXRlZDtudWxsIT09cSYmYmQocSl9fX1icmVhaztjYXNlIDE5OmNhc2UgMTc6Y2FzZSAyMTpjYXNlIDIyOmNhc2UgMjM6Y2FzZSAyNTpicmVhaztcbmRlZmF1bHQ6dGhyb3cgRXJyb3IocCgxNjMpKTt9VXx8Yi5mbGFncyY1MTImJlNqKGIpfWNhdGNoKHIpe1coYixiLnJldHVybixyKX19aWYoYj09PWEpe1Y9bnVsbDticmVha31jPWIuc2libGluZztpZihudWxsIT09Yyl7Yy5yZXR1cm49Yi5yZXR1cm47Vj1jO2JyZWFrfVY9Yi5yZXR1cm59fWZ1bmN0aW9uIGhrKGEpe2Zvcig7bnVsbCE9PVY7KXt2YXIgYj1WO2lmKGI9PT1hKXtWPW51bGw7YnJlYWt9dmFyIGM9Yi5zaWJsaW5nO2lmKG51bGwhPT1jKXtjLnJldHVybj1iLnJldHVybjtWPWM7YnJlYWt9Vj1iLnJldHVybn19XG5mdW5jdGlvbiBrayhhKXtmb3IoO251bGwhPT1WOyl7dmFyIGI9Vjt0cnl7c3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OnZhciBjPWIucmV0dXJuO3RyeXtSaig0LGIpfWNhdGNoKGspe1coYixjLGspfWJyZWFrO2Nhc2UgMTp2YXIgZD1iLnN0YXRlTm9kZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRNb3VudCl7dmFyIGU9Yi5yZXR1cm47dHJ5e2QuY29tcG9uZW50RGlkTW91bnQoKX1jYXRjaChrKXtXKGIsZSxrKX19dmFyIGY9Yi5yZXR1cm47dHJ5e1NqKGIpfWNhdGNoKGspe1coYixmLGspfWJyZWFrO2Nhc2UgNTp2YXIgZz1iLnJldHVybjt0cnl7U2ooYil9Y2F0Y2goayl7VyhiLGcsayl9fX1jYXRjaChrKXtXKGIsYi5yZXR1cm4sayl9aWYoYj09PWEpe1Y9bnVsbDticmVha312YXIgaD1iLnNpYmxpbmc7aWYobnVsbCE9PWgpe2gucmV0dXJuPWIucmV0dXJuO1Y9aDticmVha31WPWIucmV0dXJufX1cbnZhciBtaz1NYXRoLmNlaWwsbms9dWEuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcixvaz11YS5SZWFjdEN1cnJlbnRPd25lcixwaz11YS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZyxLPTAsUj1udWxsLFk9bnVsbCxaPTAsZ2o9MCxmaj1VZigwKSxUPTAscWs9bnVsbCxoaD0wLHJrPTAsc2s9MCx0az1udWxsLHVrPW51bGwsZ2s9MCxIaj1JbmZpbml0eSx2az1udWxsLFBpPSExLFFpPW51bGwsU2k9bnVsbCx3az0hMSx4az1udWxsLHlrPTAsems9MCxBaz1udWxsLEJrPS0xLENrPTA7ZnVuY3Rpb24gTCgpe3JldHVybiAwIT09KEsmNik/QigpOi0xIT09Qms/Qms6Qms9QigpfVxuZnVuY3Rpb24gbGgoYSl7aWYoMD09PShhLm1vZGUmMSkpcmV0dXJuIDE7aWYoMCE9PShLJjIpJiYwIT09WilyZXR1cm4gWiYtWjtpZihudWxsIT09S2cudHJhbnNpdGlvbilyZXR1cm4gMD09PUNrJiYoQ2s9eWMoKSksQ2s7YT1DO2lmKDAhPT1hKXJldHVybiBhO2E9d2luZG93LmV2ZW50O2E9dm9pZCAwPT09YT8xNjpqZChhLnR5cGUpO3JldHVybiBhfWZ1bmN0aW9uIG1oKGEsYixjLGQpe2lmKDUwPHprKXRocm93IHprPTAsQWs9bnVsbCxFcnJvcihwKDE4NSkpO0FjKGEsYyxkKTtpZigwPT09KEsmMil8fGEhPT1SKWE9PT1SJiYoMD09PShLJjIpJiYocmt8PWMpLDQ9PT1UJiZEayhhLFopKSxFayhhLGQpLDE9PT1jJiYwPT09SyYmMD09PShiLm1vZGUmMSkmJihIaj1CKCkrNTAwLGZnJiZqZygpKX1cbmZ1bmN0aW9uIEVrKGEsYil7dmFyIGM9YS5jYWxsYmFja05vZGU7d2MoYSxiKTt2YXIgZD11YyhhLGE9PT1SP1o6MCk7aWYoMD09PWQpbnVsbCE9PWMmJmJjKGMpLGEuY2FsbGJhY2tOb2RlPW51bGwsYS5jYWxsYmFja1ByaW9yaXR5PTA7ZWxzZSBpZihiPWQmLWQsYS5jYWxsYmFja1ByaW9yaXR5IT09Yil7bnVsbCE9YyYmYmMoYyk7aWYoMT09PWIpMD09PWEudGFnP2lnKEZrLmJpbmQobnVsbCxhKSk6aGcoRmsuYmluZChudWxsLGEpKSxKZihmdW5jdGlvbigpezA9PT0oSyY2KSYmamcoKX0pLGM9bnVsbDtlbHNle3N3aXRjaChEYyhkKSl7Y2FzZSAxOmM9ZmM7YnJlYWs7Y2FzZSA0OmM9Z2M7YnJlYWs7Y2FzZSAxNjpjPWhjO2JyZWFrO2Nhc2UgNTM2ODcwOTEyOmM9amM7YnJlYWs7ZGVmYXVsdDpjPWhjfWM9R2soYyxIay5iaW5kKG51bGwsYSkpfWEuY2FsbGJhY2tQcmlvcml0eT1iO2EuY2FsbGJhY2tOb2RlPWN9fVxuZnVuY3Rpb24gSGsoYSxiKXtCaz0tMTtDaz0wO2lmKDAhPT0oSyY2KSl0aHJvdyBFcnJvcihwKDMyNykpO3ZhciBjPWEuY2FsbGJhY2tOb2RlO2lmKElrKCkmJmEuY2FsbGJhY2tOb2RlIT09YylyZXR1cm4gbnVsbDt2YXIgZD11YyhhLGE9PT1SP1o6MCk7aWYoMD09PWQpcmV0dXJuIG51bGw7aWYoMCE9PShkJjMwKXx8MCE9PShkJmEuZXhwaXJlZExhbmVzKXx8YiliPUprKGEsZCk7ZWxzZXtiPWQ7dmFyIGU9SztLfD0yO3ZhciBmPUtrKCk7aWYoUiE9PWF8fFohPT1iKXZrPW51bGwsSGo9QigpKzUwMCxMayhhLGIpO2RvIHRyeXtNaygpO2JyZWFrfWNhdGNoKGgpe05rKGEsaCl9d2hpbGUoMSk7UWcoKTtuay5jdXJyZW50PWY7Sz1lO251bGwhPT1ZP2I9MDooUj1udWxsLFo9MCxiPVQpfWlmKDAhPT1iKXsyPT09YiYmKGU9eGMoYSksMCE9PWUmJihkPWUsYj1PayhhLGUpKSk7aWYoMT09PWIpdGhyb3cgYz1xayxMayhhLDApLERrKGEsZCksRWsoYSxCKCkpLGM7aWYoNj09PWIpRGsoYSxkKTtcbmVsc2V7ZT1hLmN1cnJlbnQuYWx0ZXJuYXRlO2lmKDA9PT0oZCYzMCkmJiFQayhlKSYmKGI9SmsoYSxkKSwyPT09YiYmKGY9eGMoYSksMCE9PWYmJihkPWYsYj1PayhhLGYpKSksMT09PWIpKXRocm93IGM9cWssTGsoYSwwKSxEayhhLGQpLEVrKGEsQigpKSxjO2EuZmluaXNoZWRXb3JrPWU7YS5maW5pc2hlZExhbmVzPWQ7c3dpdGNoKGIpe2Nhc2UgMDpjYXNlIDE6dGhyb3cgRXJyb3IocCgzNDUpKTtjYXNlIDI6UWsoYSx1ayx2ayk7YnJlYWs7Y2FzZSAzOkRrKGEsZCk7aWYoKGQmMTMwMDIzNDI0KT09PWQmJihiPWdrKzUwMC1CKCksMTA8Yikpe2lmKDAhPT11YyhhLDApKWJyZWFrO2U9YS5zdXNwZW5kZWRMYW5lcztpZigoZSZkKSE9PWQpe0woKTthLnBpbmdlZExhbmVzfD1hLnN1c3BlbmRlZExhbmVzJmU7YnJlYWt9YS50aW1lb3V0SGFuZGxlPUZmKFFrLmJpbmQobnVsbCxhLHVrLHZrKSxiKTticmVha31RayhhLHVrLHZrKTticmVhaztjYXNlIDQ6RGsoYSxkKTtpZigoZCY0MTk0MjQwKT09PVxuZClicmVhaztiPWEuZXZlbnRUaW1lcztmb3IoZT0tMTswPGQ7KXt2YXIgZz0zMS1vYyhkKTtmPTE8PGc7Zz1iW2ddO2c+ZSYmKGU9Zyk7ZCY9fmZ9ZD1lO2Q9QigpLWQ7ZD0oMTIwPmQ/MTIwOjQ4MD5kPzQ4MDoxMDgwPmQ/MTA4MDoxOTIwPmQ/MTkyMDozRTM+ZD8zRTM6NDMyMD5kPzQzMjA6MTk2MCptayhkLzE5NjApKS1kO2lmKDEwPGQpe2EudGltZW91dEhhbmRsZT1GZihRay5iaW5kKG51bGwsYSx1ayx2ayksZCk7YnJlYWt9UWsoYSx1ayx2ayk7YnJlYWs7Y2FzZSA1OlFrKGEsdWssdmspO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IocCgzMjkpKTt9fX1FayhhLEIoKSk7cmV0dXJuIGEuY2FsbGJhY2tOb2RlPT09Yz9Iay5iaW5kKG51bGwsYSk6bnVsbH1cbmZ1bmN0aW9uIE9rKGEsYil7dmFyIGM9dGs7YS5jdXJyZW50Lm1lbW9pemVkU3RhdGUuaXNEZWh5ZHJhdGVkJiYoTGsoYSxiKS5mbGFnc3w9MjU2KTthPUprKGEsYik7MiE9PWEmJihiPXVrLHVrPWMsbnVsbCE9PWImJkdqKGIpKTtyZXR1cm4gYX1mdW5jdGlvbiBHaihhKXtudWxsPT09dWs/dWs9YTp1ay5wdXNoLmFwcGx5KHVrLGEpfVxuZnVuY3Rpb24gUGsoYSl7Zm9yKHZhciBiPWE7Oyl7aWYoYi5mbGFncyYxNjM4NCl7dmFyIGM9Yi51cGRhdGVRdWV1ZTtpZihudWxsIT09YyYmKGM9Yy5zdG9yZXMsbnVsbCE9PWMpKWZvcih2YXIgZD0wO2Q8Yy5sZW5ndGg7ZCsrKXt2YXIgZT1jW2RdLGY9ZS5nZXRTbmFwc2hvdDtlPWUudmFsdWU7dHJ5e2lmKCFIZShmKCksZSkpcmV0dXJuITF9Y2F0Y2goZyl7cmV0dXJuITF9fX1jPWIuY2hpbGQ7aWYoYi5zdWJ0cmVlRmxhZ3MmMTYzODQmJm51bGwhPT1jKWMucmV0dXJuPWIsYj1jO2Vsc2V7aWYoYj09PWEpYnJlYWs7Zm9yKDtudWxsPT09Yi5zaWJsaW5nOyl7aWYobnVsbD09PWIucmV0dXJufHxiLnJldHVybj09PWEpcmV0dXJuITA7Yj1iLnJldHVybn1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfX1yZXR1cm4hMH1cbmZ1bmN0aW9uIERrKGEsYil7YiY9fnNrO2ImPX5yazthLnN1c3BlbmRlZExhbmVzfD1iO2EucGluZ2VkTGFuZXMmPX5iO2ZvcihhPWEuZXhwaXJhdGlvblRpbWVzOzA8Yjspe3ZhciBjPTMxLW9jKGIpLGQ9MTw8YzthW2NdPS0xO2ImPX5kfX1mdW5jdGlvbiBGayhhKXtpZigwIT09KEsmNikpdGhyb3cgRXJyb3IocCgzMjcpKTtJaygpO3ZhciBiPXVjKGEsMCk7aWYoMD09PShiJjEpKXJldHVybiBFayhhLEIoKSksbnVsbDt2YXIgYz1KayhhLGIpO2lmKDAhPT1hLnRhZyYmMj09PWMpe3ZhciBkPXhjKGEpOzAhPT1kJiYoYj1kLGM9T2soYSxkKSl9aWYoMT09PWMpdGhyb3cgYz1xayxMayhhLDApLERrKGEsYiksRWsoYSxCKCkpLGM7aWYoNj09PWMpdGhyb3cgRXJyb3IocCgzNDUpKTthLmZpbmlzaGVkV29yaz1hLmN1cnJlbnQuYWx0ZXJuYXRlO2EuZmluaXNoZWRMYW5lcz1iO1FrKGEsdWssdmspO0VrKGEsQigpKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIFJrKGEsYil7dmFyIGM9SztLfD0xO3RyeXtyZXR1cm4gYShiKX1maW5hbGx5e0s9YywwPT09SyYmKEhqPUIoKSs1MDAsZmcmJmpnKCkpfX1mdW5jdGlvbiBTayhhKXtudWxsIT09eGsmJjA9PT14ay50YWcmJjA9PT0oSyY2KSYmSWsoKTt2YXIgYj1LO0t8PTE7dmFyIGM9cGsudHJhbnNpdGlvbixkPUM7dHJ5e2lmKHBrLnRyYW5zaXRpb249bnVsbCxDPTEsYSlyZXR1cm4gYSgpfWZpbmFsbHl7Qz1kLHBrLnRyYW5zaXRpb249YyxLPWIsMD09PShLJjYpJiZqZygpfX1mdW5jdGlvbiBJaigpe2dqPWZqLmN1cnJlbnQ7RShmail9XG5mdW5jdGlvbiBMayhhLGIpe2EuZmluaXNoZWRXb3JrPW51bGw7YS5maW5pc2hlZExhbmVzPTA7dmFyIGM9YS50aW1lb3V0SGFuZGxlOy0xIT09YyYmKGEudGltZW91dEhhbmRsZT0tMSxHZihjKSk7aWYobnVsbCE9PVkpZm9yKGM9WS5yZXR1cm47bnVsbCE9PWM7KXt2YXIgZD1jO3dnKGQpO3N3aXRjaChkLnRhZyl7Y2FzZSAxOmQ9ZC50eXBlLmNoaWxkQ29udGV4dFR5cGVzO251bGwhPT1kJiZ2b2lkIDAhPT1kJiYkZigpO2JyZWFrO2Nhc2UgMzpKaCgpO0UoV2YpO0UoSCk7T2goKTticmVhaztjYXNlIDU6TGgoZCk7YnJlYWs7Y2FzZSA0OkpoKCk7YnJlYWs7Y2FzZSAxMzpFKE0pO2JyZWFrO2Nhc2UgMTk6RShNKTticmVhaztjYXNlIDEwOlJnKGQudHlwZS5fY29udGV4dCk7YnJlYWs7Y2FzZSAyMjpjYXNlIDIzOklqKCl9Yz1jLnJldHVybn1SPWE7WT1hPXdoKGEuY3VycmVudCxudWxsKTtaPWdqPWI7VD0wO3FrPW51bGw7c2s9cms9aGg9MDt1az10az1udWxsO2lmKG51bGwhPT1XZyl7Zm9yKGI9XG4wO2I8V2cubGVuZ3RoO2IrKylpZihjPVdnW2JdLGQ9Yy5pbnRlcmxlYXZlZCxudWxsIT09ZCl7Yy5pbnRlcmxlYXZlZD1udWxsO3ZhciBlPWQubmV4dCxmPWMucGVuZGluZztpZihudWxsIT09Zil7dmFyIGc9Zi5uZXh0O2YubmV4dD1lO2QubmV4dD1nfWMucGVuZGluZz1kfVdnPW51bGx9cmV0dXJuIGF9XG5mdW5jdGlvbiBOayhhLGIpe2Rve3ZhciBjPVk7dHJ5e1FnKCk7UGguY3VycmVudD1haTtpZihTaCl7Zm9yKHZhciBkPU4ubWVtb2l6ZWRTdGF0ZTtudWxsIT09ZDspe3ZhciBlPWQucXVldWU7bnVsbCE9PWUmJihlLnBlbmRpbmc9bnVsbCk7ZD1kLm5leHR9U2g9ITF9Umg9MDtQPU89Tj1udWxsO1RoPSExO1VoPTA7b2suY3VycmVudD1udWxsO2lmKG51bGw9PT1jfHxudWxsPT09Yy5yZXR1cm4pe1Q9MTtxaz1iO1k9bnVsbDticmVha31hOnt2YXIgZj1hLGc9Yy5yZXR1cm4saD1jLGs9YjtiPVo7aC5mbGFnc3w9MzI3Njg7aWYobnVsbCE9PWsmJlwib2JqZWN0XCI9PT10eXBlb2YgayYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGsudGhlbil7dmFyIGw9ayxtPWgscT1tLnRhZztpZigwPT09KG0ubW9kZSYxKSYmKDA9PT1xfHwxMT09PXF8fDE1PT09cSkpe3ZhciByPW0uYWx0ZXJuYXRlO3I/KG0udXBkYXRlUXVldWU9ci51cGRhdGVRdWV1ZSxtLm1lbW9pemVkU3RhdGU9ci5tZW1vaXplZFN0YXRlLFxubS5sYW5lcz1yLmxhbmVzKToobS51cGRhdGVRdWV1ZT1udWxsLG0ubWVtb2l6ZWRTdGF0ZT1udWxsKX12YXIgeT1WaShnKTtpZihudWxsIT09eSl7eS5mbGFncyY9LTI1NztXaSh5LGcsaCxmLGIpO3kubW9kZSYxJiZUaShmLGwsYik7Yj15O2s9bDt2YXIgbj1iLnVwZGF0ZVF1ZXVlO2lmKG51bGw9PT1uKXt2YXIgdD1uZXcgU2V0O3QuYWRkKGspO2IudXBkYXRlUXVldWU9dH1lbHNlIG4uYWRkKGspO2JyZWFrIGF9ZWxzZXtpZigwPT09KGImMSkpe1RpKGYsbCxiKTt1aigpO2JyZWFrIGF9az1FcnJvcihwKDQyNikpfX1lbHNlIGlmKEkmJmgubW9kZSYxKXt2YXIgSj1WaShnKTtpZihudWxsIT09Sil7MD09PShKLmZsYWdzJjY1NTM2KSYmKEouZmxhZ3N8PTI1Nik7V2koSixnLGgsZixiKTtKZyhLaShrLGgpKTticmVhayBhfX1mPWs9S2koayxoKTs0IT09VCYmKFQ9Mik7bnVsbD09PXRrP3RrPVtmXTp0ay5wdXNoKGYpO2Y9Zztkb3tzd2l0Y2goZi50YWcpe2Nhc2UgMzpmLmZsYWdzfD02NTUzNjtcbmImPS1iO2YubGFuZXN8PWI7dmFyIHg9T2koZixrLGIpO2ZoKGYseCk7YnJlYWsgYTtjYXNlIDE6aD1rO3ZhciB3PWYudHlwZSx1PWYuc3RhdGVOb2RlO2lmKDA9PT0oZi5mbGFncyYxMjgpJiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIHcuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yfHxudWxsIT09dSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIHUuY29tcG9uZW50RGlkQ2F0Y2gmJihudWxsPT09U2l8fCFTaS5oYXModSkpKSl7Zi5mbGFnc3w9NjU1MzY7YiY9LWI7Zi5sYW5lc3w9Yjt2YXIgRj1SaShmLGgsYik7ZmgoZixGKTticmVhayBhfX1mPWYucmV0dXJufXdoaWxlKG51bGwhPT1mKX1UayhjKX1jYXRjaChuYSl7Yj1uYTtZPT09YyYmbnVsbCE9PWMmJihZPWM9Yy5yZXR1cm4pO2NvbnRpbnVlfWJyZWFrfXdoaWxlKDEpfWZ1bmN0aW9uIEtrKCl7dmFyIGE9bmsuY3VycmVudDtuay5jdXJyZW50PWFpO3JldHVybiBudWxsPT09YT9haTphfVxuZnVuY3Rpb24gdWooKXtpZigwPT09VHx8Mz09PVR8fDI9PT1UKVQ9NDtudWxsPT09Unx8MD09PShoaCYyNjg0MzU0NTUpJiYwPT09KHJrJjI2ODQzNTQ1NSl8fERrKFIsWil9ZnVuY3Rpb24gSmsoYSxiKXt2YXIgYz1LO0t8PTI7dmFyIGQ9S2soKTtpZihSIT09YXx8WiE9PWIpdms9bnVsbCxMayhhLGIpO2RvIHRyeXtVaygpO2JyZWFrfWNhdGNoKGUpe05rKGEsZSl9d2hpbGUoMSk7UWcoKTtLPWM7bmsuY3VycmVudD1kO2lmKG51bGwhPT1ZKXRocm93IEVycm9yKHAoMjYxKSk7Uj1udWxsO1o9MDtyZXR1cm4gVH1mdW5jdGlvbiBVaygpe2Zvcig7bnVsbCE9PVk7KVZrKFkpfWZ1bmN0aW9uIE1rKCl7Zm9yKDtudWxsIT09WSYmIWNjKCk7KVZrKFkpfWZ1bmN0aW9uIFZrKGEpe3ZhciBiPVdrKGEuYWx0ZXJuYXRlLGEsZ2opO2EubWVtb2l6ZWRQcm9wcz1hLnBlbmRpbmdQcm9wcztudWxsPT09Yj9UayhhKTpZPWI7b2suY3VycmVudD1udWxsfVxuZnVuY3Rpb24gVGsoYSl7dmFyIGI9YTtkb3t2YXIgYz1iLmFsdGVybmF0ZTthPWIucmV0dXJuO2lmKDA9PT0oYi5mbGFncyYzMjc2OCkpe2lmKGM9RmooYyxiLGdqKSxudWxsIT09Yyl7WT1jO3JldHVybn19ZWxzZXtjPUpqKGMsYik7aWYobnVsbCE9PWMpe2MuZmxhZ3MmPTMyNzY3O1k9YztyZXR1cm59aWYobnVsbCE9PWEpYS5mbGFnc3w9MzI3NjgsYS5zdWJ0cmVlRmxhZ3M9MCxhLmRlbGV0aW9ucz1udWxsO2Vsc2V7VD02O1k9bnVsbDtyZXR1cm59fWI9Yi5zaWJsaW5nO2lmKG51bGwhPT1iKXtZPWI7cmV0dXJufVk9Yj1hfXdoaWxlKG51bGwhPT1iKTswPT09VCYmKFQ9NSl9ZnVuY3Rpb24gUWsoYSxiLGMpe3ZhciBkPUMsZT1way50cmFuc2l0aW9uO3RyeXtway50cmFuc2l0aW9uPW51bGwsQz0xLFhrKGEsYixjLGQpfWZpbmFsbHl7cGsudHJhbnNpdGlvbj1lLEM9ZH1yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIFhrKGEsYixjLGQpe2RvIElrKCk7d2hpbGUobnVsbCE9PXhrKTtpZigwIT09KEsmNikpdGhyb3cgRXJyb3IocCgzMjcpKTtjPWEuZmluaXNoZWRXb3JrO3ZhciBlPWEuZmluaXNoZWRMYW5lcztpZihudWxsPT09YylyZXR1cm4gbnVsbDthLmZpbmlzaGVkV29yaz1udWxsO2EuZmluaXNoZWRMYW5lcz0wO2lmKGM9PT1hLmN1cnJlbnQpdGhyb3cgRXJyb3IocCgxNzcpKTthLmNhbGxiYWNrTm9kZT1udWxsO2EuY2FsbGJhY2tQcmlvcml0eT0wO3ZhciBmPWMubGFuZXN8Yy5jaGlsZExhbmVzO0JjKGEsZik7YT09PVImJihZPVI9bnVsbCxaPTApOzA9PT0oYy5zdWJ0cmVlRmxhZ3MmMjA2NCkmJjA9PT0oYy5mbGFncyYyMDY0KXx8d2t8fCh3az0hMCxHayhoYyxmdW5jdGlvbigpe0lrKCk7cmV0dXJuIG51bGx9KSk7Zj0wIT09KGMuZmxhZ3MmMTU5OTApO2lmKDAhPT0oYy5zdWJ0cmVlRmxhZ3MmMTU5OTApfHxmKXtmPXBrLnRyYW5zaXRpb247cGsudHJhbnNpdGlvbj1udWxsO1xudmFyIGc9QztDPTE7dmFyIGg9SztLfD00O29rLmN1cnJlbnQ9bnVsbDtQaihhLGMpO2VrKGMsYSk7T2UoRGYpO2RkPSEhQ2Y7RGY9Q2Y9bnVsbDthLmN1cnJlbnQ9YztpayhjLGEsZSk7ZGMoKTtLPWg7Qz1nO3BrLnRyYW5zaXRpb249Zn1lbHNlIGEuY3VycmVudD1jO3drJiYod2s9ITEseGs9YSx5az1lKTtmPWEucGVuZGluZ0xhbmVzOzA9PT1mJiYoU2k9bnVsbCk7bWMoYy5zdGF0ZU5vZGUsZCk7RWsoYSxCKCkpO2lmKG51bGwhPT1iKWZvcihkPWEub25SZWNvdmVyYWJsZUVycm9yLGM9MDtjPGIubGVuZ3RoO2MrKyllPWJbY10sZChlLnZhbHVlLHtjb21wb25lbnRTdGFjazplLnN0YWNrLGRpZ2VzdDplLmRpZ2VzdH0pO2lmKFBpKXRocm93IFBpPSExLGE9UWksUWk9bnVsbCxhOzAhPT0oeWsmMSkmJjAhPT1hLnRhZyYmSWsoKTtmPWEucGVuZGluZ0xhbmVzOzAhPT0oZiYxKT9hPT09QWs/emsrKzooems9MCxBaz1hKTp6az0wO2pnKCk7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBJaygpe2lmKG51bGwhPT14ayl7dmFyIGE9RGMoeWspLGI9cGsudHJhbnNpdGlvbixjPUM7dHJ5e3BrLnRyYW5zaXRpb249bnVsbDtDPTE2PmE/MTY6YTtpZihudWxsPT09eGspdmFyIGQ9ITE7ZWxzZXthPXhrO3hrPW51bGw7eWs9MDtpZigwIT09KEsmNikpdGhyb3cgRXJyb3IocCgzMzEpKTt2YXIgZT1LO0t8PTQ7Zm9yKFY9YS5jdXJyZW50O251bGwhPT1WOyl7dmFyIGY9VixnPWYuY2hpbGQ7aWYoMCE9PShWLmZsYWdzJjE2KSl7dmFyIGg9Zi5kZWxldGlvbnM7aWYobnVsbCE9PWgpe2Zvcih2YXIgaz0wO2s8aC5sZW5ndGg7aysrKXt2YXIgbD1oW2tdO2ZvcihWPWw7bnVsbCE9PVY7KXt2YXIgbT1WO3N3aXRjaChtLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpRaig4LG0sZil9dmFyIHE9bS5jaGlsZDtpZihudWxsIT09cSlxLnJldHVybj1tLFY9cTtlbHNlIGZvcig7bnVsbCE9PVY7KXttPVY7dmFyIHI9bS5zaWJsaW5nLHk9bS5yZXR1cm47VGoobSk7aWYobT09PVxubCl7Vj1udWxsO2JyZWFrfWlmKG51bGwhPT1yKXtyLnJldHVybj15O1Y9cjticmVha31WPXl9fX12YXIgbj1mLmFsdGVybmF0ZTtpZihudWxsIT09bil7dmFyIHQ9bi5jaGlsZDtpZihudWxsIT09dCl7bi5jaGlsZD1udWxsO2Rve3ZhciBKPXQuc2libGluZzt0LnNpYmxpbmc9bnVsbDt0PUp9d2hpbGUobnVsbCE9PXQpfX1WPWZ9fWlmKDAhPT0oZi5zdWJ0cmVlRmxhZ3MmMjA2NCkmJm51bGwhPT1nKWcucmV0dXJuPWYsVj1nO2Vsc2UgYjpmb3IoO251bGwhPT1WOyl7Zj1WO2lmKDAhPT0oZi5mbGFncyYyMDQ4KSlzd2l0Y2goZi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6UWooOSxmLGYucmV0dXJuKX12YXIgeD1mLnNpYmxpbmc7aWYobnVsbCE9PXgpe3gucmV0dXJuPWYucmV0dXJuO1Y9eDticmVhayBifVY9Zi5yZXR1cm59fXZhciB3PWEuY3VycmVudDtmb3IoVj13O251bGwhPT1WOyl7Zz1WO3ZhciB1PWcuY2hpbGQ7aWYoMCE9PShnLnN1YnRyZWVGbGFncyYyMDY0KSYmbnVsbCE9PVxudSl1LnJldHVybj1nLFY9dTtlbHNlIGI6Zm9yKGc9dztudWxsIT09Vjspe2g9VjtpZigwIT09KGguZmxhZ3MmMjA0OCkpdHJ5e3N3aXRjaChoLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpSaig5LGgpfX1jYXRjaChuYSl7VyhoLGgucmV0dXJuLG5hKX1pZihoPT09Zyl7Vj1udWxsO2JyZWFrIGJ9dmFyIEY9aC5zaWJsaW5nO2lmKG51bGwhPT1GKXtGLnJldHVybj1oLnJldHVybjtWPUY7YnJlYWsgYn1WPWgucmV0dXJufX1LPWU7amcoKTtpZihsYyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGxjLm9uUG9zdENvbW1pdEZpYmVyUm9vdCl0cnl7bGMub25Qb3N0Q29tbWl0RmliZXJSb290KGtjLGEpfWNhdGNoKG5hKXt9ZD0hMH1yZXR1cm4gZH1maW5hbGx5e0M9Yyxway50cmFuc2l0aW9uPWJ9fXJldHVybiExfWZ1bmN0aW9uIFlrKGEsYixjKXtiPUtpKGMsYik7Yj1PaShhLGIsMSk7YT1kaChhLGIsMSk7Yj1MKCk7bnVsbCE9PWEmJihBYyhhLDEsYiksRWsoYSxiKSl9XG5mdW5jdGlvbiBXKGEsYixjKXtpZigzPT09YS50YWcpWWsoYSxhLGMpO2Vsc2UgZm9yKDtudWxsIT09Yjspe2lmKDM9PT1iLnRhZyl7WWsoYixhLGMpO2JyZWFrfWVsc2UgaWYoMT09PWIudGFnKXt2YXIgZD1iLnN0YXRlTm9kZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi50eXBlLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcnx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50RGlkQ2F0Y2gmJihudWxsPT09U2l8fCFTaS5oYXMoZCkpKXthPUtpKGMsYSk7YT1SaShiLGEsMSk7Yj1kaChiLGEsMSk7YT1MKCk7bnVsbCE9PWImJihBYyhiLDEsYSksRWsoYixhKSk7YnJlYWt9fWI9Yi5yZXR1cm59fVxuZnVuY3Rpb24gVWkoYSxiLGMpe3ZhciBkPWEucGluZ0NhY2hlO251bGwhPT1kJiZkLmRlbGV0ZShiKTtiPUwoKTthLnBpbmdlZExhbmVzfD1hLnN1c3BlbmRlZExhbmVzJmM7Uj09PWEmJihaJmMpPT09YyYmKDQ9PT1UfHwzPT09VCYmKFomMTMwMDIzNDI0KT09PVomJjUwMD5CKCktZ2s/TGsoYSwwKTpza3w9Yyk7RWsoYSxiKX1mdW5jdGlvbiBaayhhLGIpezA9PT1iJiYoMD09PShhLm1vZGUmMSk/Yj0xOihiPXNjLHNjPDw9MSwwPT09KHNjJjEzMDAyMzQyNCkmJihzYz00MTk0MzA0KSkpO3ZhciBjPUwoKTthPVpnKGEsYik7bnVsbCE9PWEmJihBYyhhLGIsYyksRWsoYSxjKSl9ZnVuY3Rpb24gdmooYSl7dmFyIGI9YS5tZW1vaXplZFN0YXRlLGM9MDtudWxsIT09YiYmKGM9Yi5yZXRyeUxhbmUpO1prKGEsYyl9XG5mdW5jdGlvbiBjayhhLGIpe3ZhciBjPTA7c3dpdGNoKGEudGFnKXtjYXNlIDEzOnZhciBkPWEuc3RhdGVOb2RlO3ZhciBlPWEubWVtb2l6ZWRTdGF0ZTtudWxsIT09ZSYmKGM9ZS5yZXRyeUxhbmUpO2JyZWFrO2Nhc2UgMTk6ZD1hLnN0YXRlTm9kZTticmVhaztkZWZhdWx0OnRocm93IEVycm9yKHAoMzE0KSk7fW51bGwhPT1kJiZkLmRlbGV0ZShiKTtaayhhLGMpfXZhciBXaztcbldrPWZ1bmN0aW9uKGEsYixjKXtpZihudWxsIT09YSlpZihhLm1lbW9pemVkUHJvcHMhPT1iLnBlbmRpbmdQcm9wc3x8V2YuY3VycmVudClVZz0hMDtlbHNle2lmKDA9PT0oYS5sYW5lcyZjKSYmMD09PShiLmZsYWdzJjEyOCkpcmV0dXJuIFVnPSExLHpqKGEsYixjKTtVZz0wIT09KGEuZmxhZ3MmMTMxMDcyKT8hMDohMX1lbHNlIFVnPSExLEkmJjAhPT0oYi5mbGFncyYxMDQ4NTc2KSYmdWcoYixuZyxiLmluZGV4KTtiLmxhbmVzPTA7c3dpdGNoKGIudGFnKXtjYXNlIDI6dmFyIGQ9Yi50eXBlO2pqKGEsYik7YT1iLnBlbmRpbmdQcm9wczt2YXIgZT1ZZihiLEguY3VycmVudCk7VGcoYixjKTtlPVhoKG51bGwsYixkLGEsZSxjKTt2YXIgZj1iaSgpO2IuZmxhZ3N8PTE7XCJvYmplY3RcIj09PXR5cGVvZiBlJiZudWxsIT09ZSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGUucmVuZGVyJiZ2b2lkIDA9PT1lLiQkdHlwZW9mPyhiLnRhZz0xLGIubWVtb2l6ZWRTdGF0ZT1udWxsLGIudXBkYXRlUXVldWU9XG5udWxsLFpmKGQpPyhmPSEwLGNnKGIpKTpmPSExLGIubWVtb2l6ZWRTdGF0ZT1udWxsIT09ZS5zdGF0ZSYmdm9pZCAwIT09ZS5zdGF0ZT9lLnN0YXRlOm51bGwsYWgoYiksZS51cGRhdGVyPW5oLGIuc3RhdGVOb2RlPWUsZS5fcmVhY3RJbnRlcm5hbHM9YixyaChiLGQsYSxjKSxiPWtqKG51bGwsYixkLCEwLGYsYykpOihiLnRhZz0wLEkmJmYmJnZnKGIpLFlpKG51bGwsYixlLGMpLGI9Yi5jaGlsZCk7cmV0dXJuIGI7Y2FzZSAxNjpkPWIuZWxlbWVudFR5cGU7YTp7amooYSxiKTthPWIucGVuZGluZ1Byb3BzO2U9ZC5faW5pdDtkPWUoZC5fcGF5bG9hZCk7Yi50eXBlPWQ7ZT1iLnRhZz0kayhkKTthPUxnKGQsYSk7c3dpdGNoKGUpe2Nhc2UgMDpiPWRqKG51bGwsYixkLGEsYyk7YnJlYWsgYTtjYXNlIDE6Yj1paihudWxsLGIsZCxhLGMpO2JyZWFrIGE7Y2FzZSAxMTpiPVppKG51bGwsYixkLGEsYyk7YnJlYWsgYTtjYXNlIDE0OmI9YWoobnVsbCxiLGQsTGcoZC50eXBlLGEpLGMpO2JyZWFrIGF9dGhyb3cgRXJyb3IocCgzMDYsXG5kLFwiXCIpKTt9cmV0dXJuIGI7Y2FzZSAwOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpMZyhkLGUpLGRqKGEsYixkLGUsYyk7Y2FzZSAxOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpMZyhkLGUpLGlqKGEsYixkLGUsYyk7Y2FzZSAzOmE6e2xqKGIpO2lmKG51bGw9PT1hKXRocm93IEVycm9yKHAoMzg3KSk7ZD1iLnBlbmRpbmdQcm9wcztmPWIubWVtb2l6ZWRTdGF0ZTtlPWYuZWxlbWVudDtiaChhLGIpO2doKGIsZCxudWxsLGMpO3ZhciBnPWIubWVtb2l6ZWRTdGF0ZTtkPWcuZWxlbWVudDtpZihmLmlzRGVoeWRyYXRlZClpZihmPXtlbGVtZW50OmQsaXNEZWh5ZHJhdGVkOiExLGNhY2hlOmcuY2FjaGUscGVuZGluZ1N1c3BlbnNlQm91bmRhcmllczpnLnBlbmRpbmdTdXNwZW5zZUJvdW5kYXJpZXMsdHJhbnNpdGlvbnM6Zy50cmFuc2l0aW9uc30sYi51cGRhdGVRdWV1ZS5iYXNlU3RhdGU9XG5mLGIubWVtb2l6ZWRTdGF0ZT1mLGIuZmxhZ3MmMjU2KXtlPUtpKEVycm9yKHAoNDIzKSksYik7Yj1taihhLGIsZCxjLGUpO2JyZWFrIGF9ZWxzZSBpZihkIT09ZSl7ZT1LaShFcnJvcihwKDQyNCkpLGIpO2I9bWooYSxiLGQsYyxlKTticmVhayBhfWVsc2UgZm9yKHlnPUxmKGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8uZmlyc3RDaGlsZCkseGc9YixJPSEwLHpnPW51bGwsYz1DaChiLG51bGwsZCxjKSxiLmNoaWxkPWM7YzspYy5mbGFncz1jLmZsYWdzJi0zfDQwOTYsYz1jLnNpYmxpbmc7ZWxzZXtJZygpO2lmKGQ9PT1lKXtiPSRpKGEsYixjKTticmVhayBhfVlpKGEsYixkLGMpfWI9Yi5jaGlsZH1yZXR1cm4gYjtjYXNlIDU6cmV0dXJuIEtoKGIpLG51bGw9PT1hJiZFZyhiKSxkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGY9bnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOm51bGwsZz1lLmNoaWxkcmVuLEVmKGQsZSk/Zz1udWxsOm51bGwhPT1mJiZFZihkLGYpJiYoYi5mbGFnc3w9MzIpLFxuaGooYSxiKSxZaShhLGIsZyxjKSxiLmNoaWxkO2Nhc2UgNjpyZXR1cm4gbnVsbD09PWEmJkVnKGIpLG51bGw7Y2FzZSAxMzpyZXR1cm4gcGooYSxiLGMpO2Nhc2UgNDpyZXR1cm4gSWgoYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKSxkPWIucGVuZGluZ1Byb3BzLG51bGw9PT1hP2IuY2hpbGQ9QmgoYixudWxsLGQsYyk6WWkoYSxiLGQsYyksYi5jaGlsZDtjYXNlIDExOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpMZyhkLGUpLFppKGEsYixkLGUsYyk7Y2FzZSA3OnJldHVybiBZaShhLGIsYi5wZW5kaW5nUHJvcHMsYyksYi5jaGlsZDtjYXNlIDg6cmV0dXJuIFlpKGEsYixiLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixjKSxiLmNoaWxkO2Nhc2UgMTI6cmV0dXJuIFlpKGEsYixiLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixjKSxiLmNoaWxkO2Nhc2UgMTA6YTp7ZD1iLnR5cGUuX2NvbnRleHQ7ZT1iLnBlbmRpbmdQcm9wcztmPWIubWVtb2l6ZWRQcm9wcztcbmc9ZS52YWx1ZTtHKE1nLGQuX2N1cnJlbnRWYWx1ZSk7ZC5fY3VycmVudFZhbHVlPWc7aWYobnVsbCE9PWYpaWYoSGUoZi52YWx1ZSxnKSl7aWYoZi5jaGlsZHJlbj09PWUuY2hpbGRyZW4mJiFXZi5jdXJyZW50KXtiPSRpKGEsYixjKTticmVhayBhfX1lbHNlIGZvcihmPWIuY2hpbGQsbnVsbCE9PWYmJihmLnJldHVybj1iKTtudWxsIT09Zjspe3ZhciBoPWYuZGVwZW5kZW5jaWVzO2lmKG51bGwhPT1oKXtnPWYuY2hpbGQ7Zm9yKHZhciBrPWguZmlyc3RDb250ZXh0O251bGwhPT1rOyl7aWYoay5jb250ZXh0PT09ZCl7aWYoMT09PWYudGFnKXtrPWNoKC0xLGMmLWMpO2sudGFnPTI7dmFyIGw9Zi51cGRhdGVRdWV1ZTtpZihudWxsIT09bCl7bD1sLnNoYXJlZDt2YXIgbT1sLnBlbmRpbmc7bnVsbD09PW0/ay5uZXh0PWs6KGsubmV4dD1tLm5leHQsbS5uZXh0PWspO2wucGVuZGluZz1rfX1mLmxhbmVzfD1jO2s9Zi5hbHRlcm5hdGU7bnVsbCE9PWsmJihrLmxhbmVzfD1jKTtTZyhmLnJldHVybixcbmMsYik7aC5sYW5lc3w9YzticmVha31rPWsubmV4dH19ZWxzZSBpZigxMD09PWYudGFnKWc9Zi50eXBlPT09Yi50eXBlP251bGw6Zi5jaGlsZDtlbHNlIGlmKDE4PT09Zi50YWcpe2c9Zi5yZXR1cm47aWYobnVsbD09PWcpdGhyb3cgRXJyb3IocCgzNDEpKTtnLmxhbmVzfD1jO2g9Zy5hbHRlcm5hdGU7bnVsbCE9PWgmJihoLmxhbmVzfD1jKTtTZyhnLGMsYik7Zz1mLnNpYmxpbmd9ZWxzZSBnPWYuY2hpbGQ7aWYobnVsbCE9PWcpZy5yZXR1cm49ZjtlbHNlIGZvcihnPWY7bnVsbCE9PWc7KXtpZihnPT09Yil7Zz1udWxsO2JyZWFrfWY9Zy5zaWJsaW5nO2lmKG51bGwhPT1mKXtmLnJldHVybj1nLnJldHVybjtnPWY7YnJlYWt9Zz1nLnJldHVybn1mPWd9WWkoYSxiLGUuY2hpbGRyZW4sYyk7Yj1iLmNoaWxkfXJldHVybiBiO2Nhc2UgOTpyZXR1cm4gZT1iLnR5cGUsZD1iLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixUZyhiLGMpLGU9VmcoZSksZD1kKGUpLGIuZmxhZ3N8PTEsWWkoYSxiLGQsYyksXG5iLmNoaWxkO2Nhc2UgMTQ6cmV0dXJuIGQ9Yi50eXBlLGU9TGcoZCxiLnBlbmRpbmdQcm9wcyksZT1MZyhkLnR5cGUsZSksYWooYSxiLGQsZSxjKTtjYXNlIDE1OnJldHVybiBjaihhLGIsYi50eXBlLGIucGVuZGluZ1Byb3BzLGMpO2Nhc2UgMTc6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOkxnKGQsZSksamooYSxiKSxiLnRhZz0xLFpmKGQpPyhhPSEwLGNnKGIpKTphPSExLFRnKGIsYykscGgoYixkLGUpLHJoKGIsZCxlLGMpLGtqKG51bGwsYixkLCEwLGEsYyk7Y2FzZSAxOTpyZXR1cm4geWooYSxiLGMpO2Nhc2UgMjI6cmV0dXJuIGVqKGEsYixjKX10aHJvdyBFcnJvcihwKDE1NixiLnRhZykpO307ZnVuY3Rpb24gR2soYSxiKXtyZXR1cm4gYWMoYSxiKX1cbmZ1bmN0aW9uIGFsKGEsYixjLGQpe3RoaXMudGFnPWE7dGhpcy5rZXk9Yzt0aGlzLnNpYmxpbmc9dGhpcy5jaGlsZD10aGlzLnJldHVybj10aGlzLnN0YXRlTm9kZT10aGlzLnR5cGU9dGhpcy5lbGVtZW50VHlwZT1udWxsO3RoaXMuaW5kZXg9MDt0aGlzLnJlZj1udWxsO3RoaXMucGVuZGluZ1Byb3BzPWI7dGhpcy5kZXBlbmRlbmNpZXM9dGhpcy5tZW1vaXplZFN0YXRlPXRoaXMudXBkYXRlUXVldWU9dGhpcy5tZW1vaXplZFByb3BzPW51bGw7dGhpcy5tb2RlPWQ7dGhpcy5zdWJ0cmVlRmxhZ3M9dGhpcy5mbGFncz0wO3RoaXMuZGVsZXRpb25zPW51bGw7dGhpcy5jaGlsZExhbmVzPXRoaXMubGFuZXM9MDt0aGlzLmFsdGVybmF0ZT1udWxsfWZ1bmN0aW9uIEJnKGEsYixjLGQpe3JldHVybiBuZXcgYWwoYSxiLGMsZCl9ZnVuY3Rpb24gYmooYSl7YT1hLnByb3RvdHlwZTtyZXR1cm4hKCFhfHwhYS5pc1JlYWN0Q29tcG9uZW50KX1cbmZ1bmN0aW9uICRrKGEpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKXJldHVybiBiaihhKT8xOjA7aWYodm9pZCAwIT09YSYmbnVsbCE9PWEpe2E9YS4kJHR5cGVvZjtpZihhPT09RGEpcmV0dXJuIDExO2lmKGE9PT1HYSlyZXR1cm4gMTR9cmV0dXJuIDJ9XG5mdW5jdGlvbiB3aChhLGIpe3ZhciBjPWEuYWx0ZXJuYXRlO251bGw9PT1jPyhjPUJnKGEudGFnLGIsYS5rZXksYS5tb2RlKSxjLmVsZW1lbnRUeXBlPWEuZWxlbWVudFR5cGUsYy50eXBlPWEudHlwZSxjLnN0YXRlTm9kZT1hLnN0YXRlTm9kZSxjLmFsdGVybmF0ZT1hLGEuYWx0ZXJuYXRlPWMpOihjLnBlbmRpbmdQcm9wcz1iLGMudHlwZT1hLnR5cGUsYy5mbGFncz0wLGMuc3VidHJlZUZsYWdzPTAsYy5kZWxldGlvbnM9bnVsbCk7Yy5mbGFncz1hLmZsYWdzJjE0NjgwMDY0O2MuY2hpbGRMYW5lcz1hLmNoaWxkTGFuZXM7Yy5sYW5lcz1hLmxhbmVzO2MuY2hpbGQ9YS5jaGlsZDtjLm1lbW9pemVkUHJvcHM9YS5tZW1vaXplZFByb3BzO2MubWVtb2l6ZWRTdGF0ZT1hLm1lbW9pemVkU3RhdGU7Yy51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlO2I9YS5kZXBlbmRlbmNpZXM7Yy5kZXBlbmRlbmNpZXM9bnVsbD09PWI/bnVsbDp7bGFuZXM6Yi5sYW5lcyxmaXJzdENvbnRleHQ6Yi5maXJzdENvbnRleHR9O1xuYy5zaWJsaW5nPWEuc2libGluZztjLmluZGV4PWEuaW5kZXg7Yy5yZWY9YS5yZWY7cmV0dXJuIGN9XG5mdW5jdGlvbiB5aChhLGIsYyxkLGUsZil7dmFyIGc9MjtkPWE7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpYmooYSkmJihnPTEpO2Vsc2UgaWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKWc9NTtlbHNlIGE6c3dpdGNoKGEpe2Nhc2UgeWE6cmV0dXJuIEFoKGMuY2hpbGRyZW4sZSxmLGIpO2Nhc2UgemE6Zz04O2V8PTg7YnJlYWs7Y2FzZSBBYTpyZXR1cm4gYT1CZygxMixjLGIsZXwyKSxhLmVsZW1lbnRUeXBlPUFhLGEubGFuZXM9ZixhO2Nhc2UgRWE6cmV0dXJuIGE9QmcoMTMsYyxiLGUpLGEuZWxlbWVudFR5cGU9RWEsYS5sYW5lcz1mLGE7Y2FzZSBGYTpyZXR1cm4gYT1CZygxOSxjLGIsZSksYS5lbGVtZW50VHlwZT1GYSxhLmxhbmVzPWYsYTtjYXNlIElhOnJldHVybiBxaihjLGUsZixiKTtkZWZhdWx0OmlmKFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEpc3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgQmE6Zz0xMDticmVhayBhO2Nhc2UgQ2E6Zz05O2JyZWFrIGE7Y2FzZSBEYTpnPTExO1xuYnJlYWsgYTtjYXNlIEdhOmc9MTQ7YnJlYWsgYTtjYXNlIEhhOmc9MTY7ZD1udWxsO2JyZWFrIGF9dGhyb3cgRXJyb3IocCgxMzAsbnVsbD09YT9hOnR5cGVvZiBhLFwiXCIpKTt9Yj1CZyhnLGMsYixlKTtiLmVsZW1lbnRUeXBlPWE7Yi50eXBlPWQ7Yi5sYW5lcz1mO3JldHVybiBifWZ1bmN0aW9uIEFoKGEsYixjLGQpe2E9QmcoNyxhLGQsYik7YS5sYW5lcz1jO3JldHVybiBhfWZ1bmN0aW9uIHFqKGEsYixjLGQpe2E9QmcoMjIsYSxkLGIpO2EuZWxlbWVudFR5cGU9SWE7YS5sYW5lcz1jO2Euc3RhdGVOb2RlPXtpc0hpZGRlbjohMX07cmV0dXJuIGF9ZnVuY3Rpb24geGgoYSxiLGMpe2E9QmcoNixhLG51bGwsYik7YS5sYW5lcz1jO3JldHVybiBhfVxuZnVuY3Rpb24gemgoYSxiLGMpe2I9QmcoNCxudWxsIT09YS5jaGlsZHJlbj9hLmNoaWxkcmVuOltdLGEua2V5LGIpO2IubGFuZXM9YztiLnN0YXRlTm9kZT17Y29udGFpbmVySW5mbzphLmNvbnRhaW5lckluZm8scGVuZGluZ0NoaWxkcmVuOm51bGwsaW1wbGVtZW50YXRpb246YS5pbXBsZW1lbnRhdGlvbn07cmV0dXJuIGJ9XG5mdW5jdGlvbiBibChhLGIsYyxkLGUpe3RoaXMudGFnPWI7dGhpcy5jb250YWluZXJJbmZvPWE7dGhpcy5maW5pc2hlZFdvcms9dGhpcy5waW5nQ2FjaGU9dGhpcy5jdXJyZW50PXRoaXMucGVuZGluZ0NoaWxkcmVuPW51bGw7dGhpcy50aW1lb3V0SGFuZGxlPS0xO3RoaXMuY2FsbGJhY2tOb2RlPXRoaXMucGVuZGluZ0NvbnRleHQ9dGhpcy5jb250ZXh0PW51bGw7dGhpcy5jYWxsYmFja1ByaW9yaXR5PTA7dGhpcy5ldmVudFRpbWVzPXpjKDApO3RoaXMuZXhwaXJhdGlvblRpbWVzPXpjKC0xKTt0aGlzLmVudGFuZ2xlZExhbmVzPXRoaXMuZmluaXNoZWRMYW5lcz10aGlzLm11dGFibGVSZWFkTGFuZXM9dGhpcy5leHBpcmVkTGFuZXM9dGhpcy5waW5nZWRMYW5lcz10aGlzLnN1c3BlbmRlZExhbmVzPXRoaXMucGVuZGluZ0xhbmVzPTA7dGhpcy5lbnRhbmdsZW1lbnRzPXpjKDApO3RoaXMuaWRlbnRpZmllclByZWZpeD1kO3RoaXMub25SZWNvdmVyYWJsZUVycm9yPWU7dGhpcy5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhPVxubnVsbH1mdW5jdGlvbiBjbChhLGIsYyxkLGUsZixnLGgsayl7YT1uZXcgYmwoYSxiLGMsaCxrKTsxPT09Yj8oYj0xLCEwPT09ZiYmKGJ8PTgpKTpiPTA7Zj1CZygzLG51bGwsbnVsbCxiKTthLmN1cnJlbnQ9ZjtmLnN0YXRlTm9kZT1hO2YubWVtb2l6ZWRTdGF0ZT17ZWxlbWVudDpkLGlzRGVoeWRyYXRlZDpjLGNhY2hlOm51bGwsdHJhbnNpdGlvbnM6bnVsbCxwZW5kaW5nU3VzcGVuc2VCb3VuZGFyaWVzOm51bGx9O2FoKGYpO3JldHVybiBhfWZ1bmN0aW9uIGRsKGEsYixjKXt2YXIgZD0zPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1szXT9hcmd1bWVudHNbM106bnVsbDtyZXR1cm57JCR0eXBlb2Y6d2Esa2V5Om51bGw9PWQ/bnVsbDpcIlwiK2QsY2hpbGRyZW46YSxjb250YWluZXJJbmZvOmIsaW1wbGVtZW50YXRpb246Y319XG5mdW5jdGlvbiBlbChhKXtpZighYSlyZXR1cm4gVmY7YT1hLl9yZWFjdEludGVybmFsczthOntpZihWYihhKSE9PWF8fDEhPT1hLnRhZyl0aHJvdyBFcnJvcihwKDE3MCkpO3ZhciBiPWE7ZG97c3dpdGNoKGIudGFnKXtjYXNlIDM6Yj1iLnN0YXRlTm9kZS5jb250ZXh0O2JyZWFrIGE7Y2FzZSAxOmlmKFpmKGIudHlwZSkpe2I9Yi5zdGF0ZU5vZGUuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ7YnJlYWsgYX19Yj1iLnJldHVybn13aGlsZShudWxsIT09Yik7dGhyb3cgRXJyb3IocCgxNzEpKTt9aWYoMT09PWEudGFnKXt2YXIgYz1hLnR5cGU7aWYoWmYoYykpcmV0dXJuIGJnKGEsYyxiKX1yZXR1cm4gYn1cbmZ1bmN0aW9uIGZsKGEsYixjLGQsZSxmLGcsaCxrKXthPWNsKGMsZCwhMCxhLGUsZixnLGgsayk7YS5jb250ZXh0PWVsKG51bGwpO2M9YS5jdXJyZW50O2Q9TCgpO2U9bGgoYyk7Zj1jaChkLGUpO2YuY2FsbGJhY2s9dm9pZCAwIT09YiYmbnVsbCE9PWI/YjpudWxsO2RoKGMsZixlKTthLmN1cnJlbnQubGFuZXM9ZTtBYyhhLGUsZCk7RWsoYSxkKTtyZXR1cm4gYX1mdW5jdGlvbiBnbChhLGIsYyxkKXt2YXIgZT1iLmN1cnJlbnQsZj1MKCksZz1saChlKTtjPWVsKGMpO251bGw9PT1iLmNvbnRleHQ/Yi5jb250ZXh0PWM6Yi5wZW5kaW5nQ29udGV4dD1jO2I9Y2goZixnKTtiLnBheWxvYWQ9e2VsZW1lbnQ6YX07ZD12b2lkIDA9PT1kP251bGw6ZDtudWxsIT09ZCYmKGIuY2FsbGJhY2s9ZCk7YT1kaChlLGIsZyk7bnVsbCE9PWEmJihtaChhLGUsZyxmKSxlaChhLGUsZykpO3JldHVybiBnfVxuZnVuY3Rpb24gaGwoYSl7YT1hLmN1cnJlbnQ7aWYoIWEuY2hpbGQpcmV0dXJuIG51bGw7c3dpdGNoKGEuY2hpbGQudGFnKXtjYXNlIDU6cmV0dXJuIGEuY2hpbGQuc3RhdGVOb2RlO2RlZmF1bHQ6cmV0dXJuIGEuY2hpbGQuc3RhdGVOb2RlfX1mdW5jdGlvbiBpbChhLGIpe2E9YS5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1hJiZudWxsIT09YS5kZWh5ZHJhdGVkKXt2YXIgYz1hLnJldHJ5TGFuZTthLnJldHJ5TGFuZT0wIT09YyYmYzxiP2M6Yn19ZnVuY3Rpb24gamwoYSxiKXtpbChhLGIpOyhhPWEuYWx0ZXJuYXRlKSYmaWwoYSxiKX1mdW5jdGlvbiBrbCgpe3JldHVybiBudWxsfXZhciBsbD1cImZ1bmN0aW9uXCI9PT10eXBlb2YgcmVwb3J0RXJyb3I/cmVwb3J0RXJyb3I6ZnVuY3Rpb24oYSl7Y29uc29sZS5lcnJvcihhKX07ZnVuY3Rpb24gbWwoYSl7dGhpcy5faW50ZXJuYWxSb290PWF9XG5ubC5wcm90b3R5cGUucmVuZGVyPW1sLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5faW50ZXJuYWxSb290O2lmKG51bGw9PT1iKXRocm93IEVycm9yKHAoNDA5KSk7Z2woYSxiLG51bGwsbnVsbCl9O25sLnByb3RvdHlwZS51bm1vdW50PW1sLnByb3RvdHlwZS51bm1vdW50PWZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5faW50ZXJuYWxSb290O2lmKG51bGwhPT1hKXt0aGlzLl9pbnRlcm5hbFJvb3Q9bnVsbDt2YXIgYj1hLmNvbnRhaW5lckluZm87U2soZnVuY3Rpb24oKXtnbChudWxsLGEsbnVsbCxudWxsKX0pO2JbdWZdPW51bGx9fTtmdW5jdGlvbiBubChhKXt0aGlzLl9pbnRlcm5hbFJvb3Q9YX1cbm5sLnByb3RvdHlwZS51bnN0YWJsZV9zY2hlZHVsZUh5ZHJhdGlvbj1mdW5jdGlvbihhKXtpZihhKXt2YXIgYj1IYygpO2E9e2Jsb2NrZWRPbjpudWxsLHRhcmdldDphLHByaW9yaXR5OmJ9O2Zvcih2YXIgYz0wO2M8UWMubGVuZ3RoJiYwIT09YiYmYjxRY1tjXS5wcmlvcml0eTtjKyspO1FjLnNwbGljZShjLDAsYSk7MD09PWMmJlZjKGEpfX07ZnVuY3Rpb24gb2woYSl7cmV0dXJuISghYXx8MSE9PWEubm9kZVR5cGUmJjkhPT1hLm5vZGVUeXBlJiYxMSE9PWEubm9kZVR5cGUpfWZ1bmN0aW9uIHBsKGEpe3JldHVybiEoIWF8fDEhPT1hLm5vZGVUeXBlJiY5IT09YS5ub2RlVHlwZSYmMTEhPT1hLm5vZGVUeXBlJiYoOCE9PWEubm9kZVR5cGV8fFwiIHJlYWN0LW1vdW50LXBvaW50LXVuc3RhYmxlIFwiIT09YS5ub2RlVmFsdWUpKX1mdW5jdGlvbiBxbCgpe31cbmZ1bmN0aW9uIHJsKGEsYixjLGQsZSl7aWYoZSl7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQpe3ZhciBmPWQ7ZD1mdW5jdGlvbigpe3ZhciBhPWhsKGcpO2YuY2FsbChhKX19dmFyIGc9ZmwoYixkLGEsMCxudWxsLCExLCExLFwiXCIscWwpO2EuX3JlYWN0Um9vdENvbnRhaW5lcj1nO2FbdWZdPWcuY3VycmVudDtzZig4PT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YSk7U2soKTtyZXR1cm4gZ31mb3IoO2U9YS5sYXN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoZSk7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQpe3ZhciBoPWQ7ZD1mdW5jdGlvbigpe3ZhciBhPWhsKGspO2guY2FsbChhKX19dmFyIGs9Y2woYSwwLCExLG51bGwsbnVsbCwhMSwhMSxcIlwiLHFsKTthLl9yZWFjdFJvb3RDb250YWluZXI9azthW3VmXT1rLmN1cnJlbnQ7c2YoOD09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlOmEpO1NrKGZ1bmN0aW9uKCl7Z2woYixrLGMsZCl9KTtyZXR1cm4ga31cbmZ1bmN0aW9uIHNsKGEsYixjLGQsZSl7dmFyIGY9Yy5fcmVhY3RSb290Q29udGFpbmVyO2lmKGYpe3ZhciBnPWY7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGUpe3ZhciBoPWU7ZT1mdW5jdGlvbigpe3ZhciBhPWhsKGcpO2guY2FsbChhKX19Z2woYixnLGEsZSl9ZWxzZSBnPXJsKGMsYixhLGUsZCk7cmV0dXJuIGhsKGcpfUVjPWZ1bmN0aW9uKGEpe3N3aXRjaChhLnRhZyl7Y2FzZSAzOnZhciBiPWEuc3RhdGVOb2RlO2lmKGIuY3VycmVudC5tZW1vaXplZFN0YXRlLmlzRGVoeWRyYXRlZCl7dmFyIGM9dGMoYi5wZW5kaW5nTGFuZXMpOzAhPT1jJiYoQ2MoYixjfDEpLEVrKGIsQigpKSwwPT09KEsmNikmJihIaj1CKCkrNTAwLGpnKCkpKX1icmVhaztjYXNlIDEzOlNrKGZ1bmN0aW9uKCl7dmFyIGI9WmcoYSwxKTtpZihudWxsIT09Yil7dmFyIGM9TCgpO21oKGIsYSwxLGMpfX0pLGpsKGEsMSl9fTtcbkZjPWZ1bmN0aW9uKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPVpnKGEsMTM0MjE3NzI4KTtpZihudWxsIT09Yil7dmFyIGM9TCgpO21oKGIsYSwxMzQyMTc3MjgsYyl9amwoYSwxMzQyMTc3MjgpfX07R2M9ZnVuY3Rpb24oYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9bGgoYSksYz1aZyhhLGIpO2lmKG51bGwhPT1jKXt2YXIgZD1MKCk7bWgoYyxhLGIsZCl9amwoYSxiKX19O0hjPWZ1bmN0aW9uKCl7cmV0dXJuIEN9O0ljPWZ1bmN0aW9uKGEsYil7dmFyIGM9Qzt0cnl7cmV0dXJuIEM9YSxiKCl9ZmluYWxseXtDPWN9fTtcbnliPWZ1bmN0aW9uKGEsYixjKXtzd2l0Y2goYil7Y2FzZSBcImlucHV0XCI6YmIoYSxjKTtiPWMubmFtZTtpZihcInJhZGlvXCI9PT1jLnR5cGUmJm51bGwhPWIpe2ZvcihjPWE7Yy5wYXJlbnROb2RlOyljPWMucGFyZW50Tm9kZTtjPWMucXVlcnlTZWxlY3RvckFsbChcImlucHV0W25hbWU9XCIrSlNPTi5zdHJpbmdpZnkoXCJcIitiKSsnXVt0eXBlPVwicmFkaW9cIl0nKTtmb3IoYj0wO2I8Yy5sZW5ndGg7YisrKXt2YXIgZD1jW2JdO2lmKGQhPT1hJiZkLmZvcm09PT1hLmZvcm0pe3ZhciBlPURiKGQpO2lmKCFlKXRocm93IEVycm9yKHAoOTApKTtXYShkKTtiYihkLGUpfX19YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6aWIoYSxjKTticmVhaztjYXNlIFwic2VsZWN0XCI6Yj1jLnZhbHVlLG51bGwhPWImJmZiKGEsISFjLm11bHRpcGxlLGIsITEpfX07R2I9Ums7SGI9U2s7XG52YXIgdGw9e3VzaW5nQ2xpZW50RW50cnlQb2ludDohMSxFdmVudHM6W0NiLHVlLERiLEViLEZiLFJrXX0sdWw9e2ZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOldjLGJ1bmRsZVR5cGU6MCx2ZXJzaW9uOlwiMTguMi4wXCIscmVuZGVyZXJQYWNrYWdlTmFtZTpcInJlYWN0LWRvbVwifTtcbnZhciB2bD17YnVuZGxlVHlwZTp1bC5idW5kbGVUeXBlLHZlcnNpb246dWwudmVyc2lvbixyZW5kZXJlclBhY2thZ2VOYW1lOnVsLnJlbmRlcmVyUGFja2FnZU5hbWUscmVuZGVyZXJDb25maWc6dWwucmVuZGVyZXJDb25maWcsb3ZlcnJpZGVIb29rU3RhdGU6bnVsbCxvdmVycmlkZUhvb2tTdGF0ZURlbGV0ZVBhdGg6bnVsbCxvdmVycmlkZUhvb2tTdGF0ZVJlbmFtZVBhdGg6bnVsbCxvdmVycmlkZVByb3BzOm51bGwsb3ZlcnJpZGVQcm9wc0RlbGV0ZVBhdGg6bnVsbCxvdmVycmlkZVByb3BzUmVuYW1lUGF0aDpudWxsLHNldEVycm9ySGFuZGxlcjpudWxsLHNldFN1c3BlbnNlSGFuZGxlcjpudWxsLHNjaGVkdWxlVXBkYXRlOm51bGwsY3VycmVudERpc3BhdGNoZXJSZWY6dWEuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcixmaW5kSG9zdEluc3RhbmNlQnlGaWJlcjpmdW5jdGlvbihhKXthPVpiKGEpO3JldHVybiBudWxsPT09YT9udWxsOmEuc3RhdGVOb2RlfSxmaW5kRmliZXJCeUhvc3RJbnN0YW5jZTp1bC5maW5kRmliZXJCeUhvc3RJbnN0YW5jZXx8XG5rbCxmaW5kSG9zdEluc3RhbmNlc0ZvclJlZnJlc2g6bnVsbCxzY2hlZHVsZVJlZnJlc2g6bnVsbCxzY2hlZHVsZVJvb3Q6bnVsbCxzZXRSZWZyZXNoSGFuZGxlcjpudWxsLGdldEN1cnJlbnRGaWJlcjpudWxsLHJlY29uY2lsZXJWZXJzaW9uOlwiMTguMi4wLW5leHQtOWUzYjc3MmI4LTIwMjIwNjA4XCJ9O2lmKFwidW5kZWZpbmVkXCIhPT10eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fKXt2YXIgd2w9X19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fO2lmKCF3bC5pc0Rpc2FibGVkJiZ3bC5zdXBwb3J0c0ZpYmVyKXRyeXtrYz13bC5pbmplY3QodmwpLGxjPXdsfWNhdGNoKGEpe319ZXhwb3J0cy5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRD10bDtcbmV4cG9ydHMuY3JlYXRlUG9ydGFsPWZ1bmN0aW9uKGEsYil7dmFyIGM9Mjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOm51bGw7aWYoIW9sKGIpKXRocm93IEVycm9yKHAoMjAwKSk7cmV0dXJuIGRsKGEsYixudWxsLGMpfTtleHBvcnRzLmNyZWF0ZVJvb3Q9ZnVuY3Rpb24oYSxiKXtpZighb2woYSkpdGhyb3cgRXJyb3IocCgyOTkpKTt2YXIgYz0hMSxkPVwiXCIsZT1sbDtudWxsIT09YiYmdm9pZCAwIT09YiYmKCEwPT09Yi51bnN0YWJsZV9zdHJpY3RNb2RlJiYoYz0hMCksdm9pZCAwIT09Yi5pZGVudGlmaWVyUHJlZml4JiYoZD1iLmlkZW50aWZpZXJQcmVmaXgpLHZvaWQgMCE9PWIub25SZWNvdmVyYWJsZUVycm9yJiYoZT1iLm9uUmVjb3ZlcmFibGVFcnJvcikpO2I9Y2woYSwxLCExLG51bGwsbnVsbCxjLCExLGQsZSk7YVt1Zl09Yi5jdXJyZW50O3NmKDg9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphKTtyZXR1cm4gbmV3IG1sKGIpfTtcbmV4cG9ydHMuZmluZERPTU5vZGU9ZnVuY3Rpb24oYSl7aWYobnVsbD09YSlyZXR1cm4gbnVsbDtpZigxPT09YS5ub2RlVHlwZSlyZXR1cm4gYTt2YXIgYj1hLl9yZWFjdEludGVybmFscztpZih2b2lkIDA9PT1iKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5yZW5kZXIpdGhyb3cgRXJyb3IocCgxODgpKTthPU9iamVjdC5rZXlzKGEpLmpvaW4oXCIsXCIpO3Rocm93IEVycm9yKHAoMjY4LGEpKTt9YT1aYihiKTthPW51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGU7cmV0dXJuIGF9O2V4cG9ydHMuZmx1c2hTeW5jPWZ1bmN0aW9uKGEpe3JldHVybiBTayhhKX07ZXhwb3J0cy5oeWRyYXRlPWZ1bmN0aW9uKGEsYixjKXtpZighcGwoYikpdGhyb3cgRXJyb3IocCgyMDApKTtyZXR1cm4gc2wobnVsbCxhLGIsITAsYyl9O1xuZXhwb3J0cy5oeWRyYXRlUm9vdD1mdW5jdGlvbihhLGIsYyl7aWYoIW9sKGEpKXRocm93IEVycm9yKHAoNDA1KSk7dmFyIGQ9bnVsbCE9YyYmYy5oeWRyYXRlZFNvdXJjZXN8fG51bGwsZT0hMSxmPVwiXCIsZz1sbDtudWxsIT09YyYmdm9pZCAwIT09YyYmKCEwPT09Yy51bnN0YWJsZV9zdHJpY3RNb2RlJiYoZT0hMCksdm9pZCAwIT09Yy5pZGVudGlmaWVyUHJlZml4JiYoZj1jLmlkZW50aWZpZXJQcmVmaXgpLHZvaWQgMCE9PWMub25SZWNvdmVyYWJsZUVycm9yJiYoZz1jLm9uUmVjb3ZlcmFibGVFcnJvcikpO2I9ZmwoYixudWxsLGEsMSxudWxsIT1jP2M6bnVsbCxlLCExLGYsZyk7YVt1Zl09Yi5jdXJyZW50O3NmKGEpO2lmKGQpZm9yKGE9MDthPGQubGVuZ3RoO2ErKyljPWRbYV0sZT1jLl9nZXRWZXJzaW9uLGU9ZShjLl9zb3VyY2UpLG51bGw9PWIubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YT9iLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGE9W2MsZV06Yi5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhLnB1c2goYyxcbmUpO3JldHVybiBuZXcgbmwoYil9O2V4cG9ydHMucmVuZGVyPWZ1bmN0aW9uKGEsYixjKXtpZighcGwoYikpdGhyb3cgRXJyb3IocCgyMDApKTtyZXR1cm4gc2wobnVsbCxhLGIsITEsYyl9O2V4cG9ydHMudW5tb3VudENvbXBvbmVudEF0Tm9kZT1mdW5jdGlvbihhKXtpZighcGwoYSkpdGhyb3cgRXJyb3IocCg0MCkpO3JldHVybiBhLl9yZWFjdFJvb3RDb250YWluZXI/KFNrKGZ1bmN0aW9uKCl7c2wobnVsbCxudWxsLGEsITEsZnVuY3Rpb24oKXthLl9yZWFjdFJvb3RDb250YWluZXI9bnVsbDthW3VmXT1udWxsfSl9KSwhMCk6ITF9O2V4cG9ydHMudW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXM9Ums7XG5leHBvcnRzLnVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyPWZ1bmN0aW9uKGEsYixjLGQpe2lmKCFwbChjKSl0aHJvdyBFcnJvcihwKDIwMCkpO2lmKG51bGw9PWF8fHZvaWQgMD09PWEuX3JlYWN0SW50ZXJuYWxzKXRocm93IEVycm9yKHAoMzgpKTtyZXR1cm4gc2woYSxiLGMsITEsZCl9O2V4cG9ydHMudmVyc2lvbj1cIjE4LjIuMC1uZXh0LTllM2I3NzJiOC0yMDIyMDYwOFwiO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgbSA9IHJlcXVpcmUoJ3JlYWN0LWRvbScpO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgZXhwb3J0cy5jcmVhdGVSb290ID0gbS5jcmVhdGVSb290O1xuICBleHBvcnRzLmh5ZHJhdGVSb290ID0gbS5oeWRyYXRlUm9vdDtcbn0gZWxzZSB7XG4gIHZhciBpID0gbS5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRDtcbiAgZXhwb3J0cy5jcmVhdGVSb290ID0gZnVuY3Rpb24oYywgbykge1xuICAgIGkudXNpbmdDbGllbnRFbnRyeVBvaW50ID0gdHJ1ZTtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIG0uY3JlYXRlUm9vdChjLCBvKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgaS51c2luZ0NsaWVudEVudHJ5UG9pbnQgPSBmYWxzZTtcbiAgICB9XG4gIH07XG4gIGV4cG9ydHMuaHlkcmF0ZVJvb3QgPSBmdW5jdGlvbihjLCBoLCBvKSB7XG4gICAgaS51c2luZ0NsaWVudEVudHJ5UG9pbnQgPSB0cnVlO1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gbS5oeWRyYXRlUm9vdChjLCBoLCBvKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgaS51c2luZ0NsaWVudEVudHJ5UG9pbnQgPSBmYWxzZTtcbiAgICB9XG4gIH07XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGNoZWNrRENFKCkge1xuICAvKiBnbG9iYWwgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fICovXG4gIGlmIChcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fID09PSAndW5kZWZpbmVkJyB8fFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UgIT09ICdmdW5jdGlvbidcbiAgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gVGhpcyBicmFuY2ggaXMgdW5yZWFjaGFibGUgYmVjYXVzZSB0aGlzIGZ1bmN0aW9uIGlzIG9ubHkgY2FsbGVkXG4gICAgLy8gaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBjb25kaXRpb24gaXMgdHJ1ZSBvbmx5IGluIGRldmVsb3BtZW50LlxuICAgIC8vIFRoZXJlZm9yZSBpZiB0aGUgYnJhbmNoIGlzIHN0aWxsIGhlcmUsIGRlYWQgY29kZSBlbGltaW5hdGlvbiB3YXNuJ3RcbiAgICAvLyBwcm9wZXJseSBhcHBsaWVkLlxuICAgIC8vIERvbid0IGNoYW5nZSB0aGUgbWVzc2FnZS4gUmVhY3QgRGV2VG9vbHMgcmVsaWVzIG9uIGl0LiBBbHNvIG1ha2Ugc3VyZVxuICAgIC8vIHRoaXMgbWVzc2FnZSBkb2Vzbid0IG9jY3VyIGVsc2V3aGVyZSBpbiB0aGlzIGZ1bmN0aW9uLCBvciBpdCB3aWxsIGNhdXNlXG4gICAgLy8gYSBmYWxzZSBwb3NpdGl2ZS5cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ15fXicpO1xuICB9XG4gIHRyeSB7XG4gICAgLy8gVmVyaWZ5IHRoYXQgdGhlIGNvZGUgYWJvdmUgaGFzIGJlZW4gZGVhZCBjb2RlIGVsaW1pbmF0ZWQgKERDRSdkKS5cbiAgICBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UoY2hlY2tEQ0UpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyBEZXZUb29scyBzaG91bGRuJ3QgY3Jhc2ggUmVhY3QsIG5vIG1hdHRlciB3aGF0LlxuICAgIC8vIFdlIHNob3VsZCBzdGlsbCByZXBvcnQgaW4gY2FzZSB3ZSBicmVhayB0aGlzIGNvZGUuXG4gICAgY29uc29sZS5lcnJvcihlcnIpO1xuICB9XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIC8vIERDRSBjaGVjayBzaG91bGQgaGFwcGVuIGJlZm9yZSBSZWFjdERPTSBidW5kbGUgZXhlY3V0ZXMgc28gdGhhdFxuICAvLyBEZXZUb29scyBjYW4gcmVwb3J0IGJhZCBtaW5pZmljYXRpb24gZHVyaW5nIGluamVjdGlvbi5cbiAgY2hlY2tEQ0UoKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKipcbiAqIEBsaWNlbnNlIFJlYWN0XG4gKiByZWFjdC1qc3gtcnVudGltZS5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCc7dmFyIGY9cmVxdWlyZShcInJlYWN0XCIpLGs9U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIiksbD1TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIiksbT1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LG49Zi5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRC5SZWFjdEN1cnJlbnRPd25lcixwPXtrZXk6ITAscmVmOiEwLF9fc2VsZjohMCxfX3NvdXJjZTohMH07XG5mdW5jdGlvbiBxKGMsYSxnKXt2YXIgYixkPXt9LGU9bnVsbCxoPW51bGw7dm9pZCAwIT09ZyYmKGU9XCJcIitnKTt2b2lkIDAhPT1hLmtleSYmKGU9XCJcIithLmtleSk7dm9pZCAwIT09YS5yZWYmJihoPWEucmVmKTtmb3IoYiBpbiBhKW0uY2FsbChhLGIpJiYhcC5oYXNPd25Qcm9wZXJ0eShiKSYmKGRbYl09YVtiXSk7aWYoYyYmYy5kZWZhdWx0UHJvcHMpZm9yKGIgaW4gYT1jLmRlZmF1bHRQcm9wcyxhKXZvaWQgMD09PWRbYl0mJihkW2JdPWFbYl0pO3JldHVybnskJHR5cGVvZjprLHR5cGU6YyxrZXk6ZSxyZWY6aCxwcm9wczpkLF9vd25lcjpuLmN1cnJlbnR9fWV4cG9ydHMuRnJhZ21lbnQ9bDtleHBvcnRzLmpzeD1xO2V4cG9ydHMuanN4cz1xO1xuIiwiLyoqXG4gKiBAbGljZW5zZSBSZWFjdFxuICogcmVhY3QucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuJ3VzZSBzdHJpY3QnO3ZhciBsPVN5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpLG49U3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKSxwPVN5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKSxxPVN5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKSxyPVN5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKSx0PVN5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKSx1PVN5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpLHY9U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpLHc9U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlXCIpLHg9U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIikseT1TeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKSx6PVN5bWJvbC5pdGVyYXRvcjtmdW5jdGlvbiBBKGEpe2lmKG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGEpcmV0dXJuIG51bGw7YT16JiZhW3pdfHxhW1wiQEBpdGVyYXRvclwiXTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hOm51bGx9XG52YXIgQj17aXNNb3VudGVkOmZ1bmN0aW9uKCl7cmV0dXJuITF9LGVucXVldWVGb3JjZVVwZGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKCl7fX0sQz1PYmplY3QuYXNzaWduLEQ9e307ZnVuY3Rpb24gRShhLGIsZSl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1EO3RoaXMudXBkYXRlcj1lfHxCfUUucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQ9e307XG5FLnByb3RvdHlwZS5zZXRTdGF0ZT1mdW5jdGlvbihhLGIpe2lmKFwib2JqZWN0XCIhPT10eXBlb2YgYSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGEmJm51bGwhPWEpdGhyb3cgRXJyb3IoXCJzZXRTdGF0ZSguLi4pOiB0YWtlcyBhbiBvYmplY3Qgb2Ygc3RhdGUgdmFyaWFibGVzIHRvIHVwZGF0ZSBvciBhIGZ1bmN0aW9uIHdoaWNoIHJldHVybnMgYW4gb2JqZWN0IG9mIHN0YXRlIHZhcmlhYmxlcy5cIik7dGhpcy51cGRhdGVyLmVucXVldWVTZXRTdGF0ZSh0aGlzLGEsYixcInNldFN0YXRlXCIpfTtFLnByb3RvdHlwZS5mb3JjZVVwZGF0ZT1mdW5jdGlvbihhKXt0aGlzLnVwZGF0ZXIuZW5xdWV1ZUZvcmNlVXBkYXRlKHRoaXMsYSxcImZvcmNlVXBkYXRlXCIpfTtmdW5jdGlvbiBGKCl7fUYucHJvdG90eXBlPUUucHJvdG90eXBlO2Z1bmN0aW9uIEcoYSxiLGUpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9RDt0aGlzLnVwZGF0ZXI9ZXx8Qn12YXIgSD1HLnByb3RvdHlwZT1uZXcgRjtcbkguY29uc3RydWN0b3I9RztDKEgsRS5wcm90b3R5cGUpO0guaXNQdXJlUmVhY3RDb21wb25lbnQ9ITA7dmFyIEk9QXJyYXkuaXNBcnJheSxKPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksSz17Y3VycmVudDpudWxsfSxMPXtrZXk6ITAscmVmOiEwLF9fc2VsZjohMCxfX3NvdXJjZTohMH07XG5mdW5jdGlvbiBNKGEsYixlKXt2YXIgZCxjPXt9LGs9bnVsbCxoPW51bGw7aWYobnVsbCE9Yilmb3IoZCBpbiB2b2lkIDAhPT1iLnJlZiYmKGg9Yi5yZWYpLHZvaWQgMCE9PWIua2V5JiYoaz1cIlwiK2Iua2V5KSxiKUouY2FsbChiLGQpJiYhTC5oYXNPd25Qcm9wZXJ0eShkKSYmKGNbZF09YltkXSk7dmFyIGc9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1nKWMuY2hpbGRyZW49ZTtlbHNlIGlmKDE8Zyl7Zm9yKHZhciBmPUFycmF5KGcpLG09MDttPGc7bSsrKWZbbV09YXJndW1lbnRzW20rMl07Yy5jaGlsZHJlbj1mfWlmKGEmJmEuZGVmYXVsdFByb3BzKWZvcihkIGluIGc9YS5kZWZhdWx0UHJvcHMsZyl2b2lkIDA9PT1jW2RdJiYoY1tkXT1nW2RdKTtyZXR1cm57JCR0eXBlb2Y6bCx0eXBlOmEsa2V5OmsscmVmOmgscHJvcHM6Yyxfb3duZXI6Sy5jdXJyZW50fX1cbmZ1bmN0aW9uIE4oYSxiKXtyZXR1cm57JCR0eXBlb2Y6bCx0eXBlOmEudHlwZSxrZXk6YixyZWY6YS5yZWYscHJvcHM6YS5wcm9wcyxfb3duZXI6YS5fb3duZXJ9fWZ1bmN0aW9uIE8oYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PWx9ZnVuY3Rpb24gZXNjYXBlKGEpe3ZhciBiPXtcIj1cIjpcIj0wXCIsXCI6XCI6XCI9MlwifTtyZXR1cm5cIiRcIithLnJlcGxhY2UoL1s9Ol0vZyxmdW5jdGlvbihhKXtyZXR1cm4gYlthXX0pfXZhciBQPS9cXC8rL2c7ZnVuY3Rpb24gUShhLGIpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJm51bGwhPWEua2V5P2VzY2FwZShcIlwiK2Eua2V5KTpiLnRvU3RyaW5nKDM2KX1cbmZ1bmN0aW9uIFIoYSxiLGUsZCxjKXt2YXIgaz10eXBlb2YgYTtpZihcInVuZGVmaW5lZFwiPT09a3x8XCJib29sZWFuXCI9PT1rKWE9bnVsbDt2YXIgaD0hMTtpZihudWxsPT09YSloPSEwO2Vsc2Ugc3dpdGNoKGspe2Nhc2UgXCJzdHJpbmdcIjpjYXNlIFwibnVtYmVyXCI6aD0hMDticmVhaztjYXNlIFwib2JqZWN0XCI6c3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgbDpjYXNlIG46aD0hMH19aWYoaClyZXR1cm4gaD1hLGM9YyhoKSxhPVwiXCI9PT1kP1wiLlwiK1EoaCwwKTpkLEkoYyk/KGU9XCJcIixudWxsIT1hJiYoZT1hLnJlcGxhY2UoUCxcIiQmL1wiKStcIi9cIiksUihjLGIsZSxcIlwiLGZ1bmN0aW9uKGEpe3JldHVybiBhfSkpOm51bGwhPWMmJihPKGMpJiYoYz1OKGMsZSsoIWMua2V5fHxoJiZoLmtleT09PWMua2V5P1wiXCI6KFwiXCIrYy5rZXkpLnJlcGxhY2UoUCxcIiQmL1wiKStcIi9cIikrYSkpLGIucHVzaChjKSksMTtoPTA7ZD1cIlwiPT09ZD9cIi5cIjpkK1wiOlwiO2lmKEkoYSkpZm9yKHZhciBnPTA7ZzxhLmxlbmd0aDtnKyspe2s9XG5hW2ddO3ZhciBmPWQrUShrLGcpO2grPVIoayxiLGUsZixjKX1lbHNlIGlmKGY9QShhKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZilmb3IoYT1mLmNhbGwoYSksZz0wOyEoaz1hLm5leHQoKSkuZG9uZTspaz1rLnZhbHVlLGY9ZCtRKGssZysrKSxoKz1SKGssYixlLGYsYyk7ZWxzZSBpZihcIm9iamVjdFwiPT09ayl0aHJvdyBiPVN0cmluZyhhKSxFcnJvcihcIk9iamVjdHMgYXJlIG5vdCB2YWxpZCBhcyBhIFJlYWN0IGNoaWxkIChmb3VuZDogXCIrKFwiW29iamVjdCBPYmplY3RdXCI9PT1iP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYSkuam9pbihcIiwgXCIpK1wifVwiOmIpK1wiKS4gSWYgeW91IG1lYW50IHRvIHJlbmRlciBhIGNvbGxlY3Rpb24gb2YgY2hpbGRyZW4sIHVzZSBhbiBhcnJheSBpbnN0ZWFkLlwiKTtyZXR1cm4gaH1cbmZ1bmN0aW9uIFMoYSxiLGUpe2lmKG51bGw9PWEpcmV0dXJuIGE7dmFyIGQ9W10sYz0wO1IoYSxkLFwiXCIsXCJcIixmdW5jdGlvbihhKXtyZXR1cm4gYi5jYWxsKGUsYSxjKyspfSk7cmV0dXJuIGR9ZnVuY3Rpb24gVChhKXtpZigtMT09PWEuX3N0YXR1cyl7dmFyIGI9YS5fcmVzdWx0O2I9YigpO2IudGhlbihmdW5jdGlvbihiKXtpZigwPT09YS5fc3RhdHVzfHwtMT09PWEuX3N0YXR1cylhLl9zdGF0dXM9MSxhLl9yZXN1bHQ9Yn0sZnVuY3Rpb24oYil7aWYoMD09PWEuX3N0YXR1c3x8LTE9PT1hLl9zdGF0dXMpYS5fc3RhdHVzPTIsYS5fcmVzdWx0PWJ9KTstMT09PWEuX3N0YXR1cyYmKGEuX3N0YXR1cz0wLGEuX3Jlc3VsdD1iKX1pZigxPT09YS5fc3RhdHVzKXJldHVybiBhLl9yZXN1bHQuZGVmYXVsdDt0aHJvdyBhLl9yZXN1bHQ7fVxudmFyIFU9e2N1cnJlbnQ6bnVsbH0sVj17dHJhbnNpdGlvbjpudWxsfSxXPXtSZWFjdEN1cnJlbnREaXNwYXRjaGVyOlUsUmVhY3RDdXJyZW50QmF0Y2hDb25maWc6VixSZWFjdEN1cnJlbnRPd25lcjpLfTtleHBvcnRzLkNoaWxkcmVuPXttYXA6Uyxmb3JFYWNoOmZ1bmN0aW9uKGEsYixlKXtTKGEsZnVuY3Rpb24oKXtiLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0sZSl9LGNvdW50OmZ1bmN0aW9uKGEpe3ZhciBiPTA7UyhhLGZ1bmN0aW9uKCl7YisrfSk7cmV0dXJuIGJ9LHRvQXJyYXk6ZnVuY3Rpb24oYSl7cmV0dXJuIFMoYSxmdW5jdGlvbihhKXtyZXR1cm4gYX0pfHxbXX0sb25seTpmdW5jdGlvbihhKXtpZighTyhhKSl0aHJvdyBFcnJvcihcIlJlYWN0LkNoaWxkcmVuLm9ubHkgZXhwZWN0ZWQgdG8gcmVjZWl2ZSBhIHNpbmdsZSBSZWFjdCBlbGVtZW50IGNoaWxkLlwiKTtyZXR1cm4gYX19O2V4cG9ydHMuQ29tcG9uZW50PUU7ZXhwb3J0cy5GcmFnbWVudD1wO1xuZXhwb3J0cy5Qcm9maWxlcj1yO2V4cG9ydHMuUHVyZUNvbXBvbmVudD1HO2V4cG9ydHMuU3RyaWN0TW9kZT1xO2V4cG9ydHMuU3VzcGVuc2U9dztleHBvcnRzLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEPVc7XG5leHBvcnRzLmNsb25lRWxlbWVudD1mdW5jdGlvbihhLGIsZSl7aWYobnVsbD09PWF8fHZvaWQgMD09PWEpdGhyb3cgRXJyb3IoXCJSZWFjdC5jbG9uZUVsZW1lbnQoLi4uKTogVGhlIGFyZ3VtZW50IG11c3QgYmUgYSBSZWFjdCBlbGVtZW50LCBidXQgeW91IHBhc3NlZCBcIithK1wiLlwiKTt2YXIgZD1DKHt9LGEucHJvcHMpLGM9YS5rZXksaz1hLnJlZixoPWEuX293bmVyO2lmKG51bGwhPWIpe3ZvaWQgMCE9PWIucmVmJiYoaz1iLnJlZixoPUsuY3VycmVudCk7dm9pZCAwIT09Yi5rZXkmJihjPVwiXCIrYi5rZXkpO2lmKGEudHlwZSYmYS50eXBlLmRlZmF1bHRQcm9wcyl2YXIgZz1hLnR5cGUuZGVmYXVsdFByb3BzO2ZvcihmIGluIGIpSi5jYWxsKGIsZikmJiFMLmhhc093blByb3BlcnR5KGYpJiYoZFtmXT12b2lkIDA9PT1iW2ZdJiZ2b2lkIDAhPT1nP2dbZl06YltmXSl9dmFyIGY9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1mKWQuY2hpbGRyZW49ZTtlbHNlIGlmKDE8Zil7Zz1BcnJheShmKTtcbmZvcih2YXIgbT0wO208ZjttKyspZ1ttXT1hcmd1bWVudHNbbSsyXTtkLmNoaWxkcmVuPWd9cmV0dXJueyQkdHlwZW9mOmwsdHlwZTphLnR5cGUsa2V5OmMscmVmOmsscHJvcHM6ZCxfb3duZXI6aH19O2V4cG9ydHMuY3JlYXRlQ29udGV4dD1mdW5jdGlvbihhKXthPXskJHR5cGVvZjp1LF9jdXJyZW50VmFsdWU6YSxfY3VycmVudFZhbHVlMjphLF90aHJlYWRDb3VudDowLFByb3ZpZGVyOm51bGwsQ29uc3VtZXI6bnVsbCxfZGVmYXVsdFZhbHVlOm51bGwsX2dsb2JhbE5hbWU6bnVsbH07YS5Qcm92aWRlcj17JCR0eXBlb2Y6dCxfY29udGV4dDphfTtyZXR1cm4gYS5Db25zdW1lcj1hfTtleHBvcnRzLmNyZWF0ZUVsZW1lbnQ9TTtleHBvcnRzLmNyZWF0ZUZhY3Rvcnk9ZnVuY3Rpb24oYSl7dmFyIGI9TS5iaW5kKG51bGwsYSk7Yi50eXBlPWE7cmV0dXJuIGJ9O2V4cG9ydHMuY3JlYXRlUmVmPWZ1bmN0aW9uKCl7cmV0dXJue2N1cnJlbnQ6bnVsbH19O1xuZXhwb3J0cy5mb3J3YXJkUmVmPWZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjp2LHJlbmRlcjphfX07ZXhwb3J0cy5pc1ZhbGlkRWxlbWVudD1PO2V4cG9ydHMubGF6eT1mdW5jdGlvbihhKXtyZXR1cm57JCR0eXBlb2Y6eSxfcGF5bG9hZDp7X3N0YXR1czotMSxfcmVzdWx0OmF9LF9pbml0OlR9fTtleHBvcnRzLm1lbW89ZnVuY3Rpb24oYSxiKXtyZXR1cm57JCR0eXBlb2Y6eCx0eXBlOmEsY29tcGFyZTp2b2lkIDA9PT1iP251bGw6Yn19O2V4cG9ydHMuc3RhcnRUcmFuc2l0aW9uPWZ1bmN0aW9uKGEpe3ZhciBiPVYudHJhbnNpdGlvbjtWLnRyYW5zaXRpb249e307dHJ5e2EoKX1maW5hbGx5e1YudHJhbnNpdGlvbj1ifX07ZXhwb3J0cy51bnN0YWJsZV9hY3Q9ZnVuY3Rpb24oKXt0aHJvdyBFcnJvcihcImFjdCguLi4pIGlzIG5vdCBzdXBwb3J0ZWQgaW4gcHJvZHVjdGlvbiBidWlsZHMgb2YgUmVhY3QuXCIpO307XG5leHBvcnRzLnVzZUNhbGxiYWNrPWZ1bmN0aW9uKGEsYil7cmV0dXJuIFUuY3VycmVudC51c2VDYWxsYmFjayhhLGIpfTtleHBvcnRzLnVzZUNvbnRleHQ9ZnVuY3Rpb24oYSl7cmV0dXJuIFUuY3VycmVudC51c2VDb250ZXh0KGEpfTtleHBvcnRzLnVzZURlYnVnVmFsdWU9ZnVuY3Rpb24oKXt9O2V4cG9ydHMudXNlRGVmZXJyZWRWYWx1ZT1mdW5jdGlvbihhKXtyZXR1cm4gVS5jdXJyZW50LnVzZURlZmVycmVkVmFsdWUoYSl9O2V4cG9ydHMudXNlRWZmZWN0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIFUuY3VycmVudC51c2VFZmZlY3QoYSxiKX07ZXhwb3J0cy51c2VJZD1mdW5jdGlvbigpe3JldHVybiBVLmN1cnJlbnQudXNlSWQoKX07ZXhwb3J0cy51c2VJbXBlcmF0aXZlSGFuZGxlPWZ1bmN0aW9uKGEsYixlKXtyZXR1cm4gVS5jdXJyZW50LnVzZUltcGVyYXRpdmVIYW5kbGUoYSxiLGUpfTtcbmV4cG9ydHMudXNlSW5zZXJ0aW9uRWZmZWN0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIFUuY3VycmVudC51c2VJbnNlcnRpb25FZmZlY3QoYSxiKX07ZXhwb3J0cy51c2VMYXlvdXRFZmZlY3Q9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVS5jdXJyZW50LnVzZUxheW91dEVmZmVjdChhLGIpfTtleHBvcnRzLnVzZU1lbW89ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVS5jdXJyZW50LnVzZU1lbW8oYSxiKX07ZXhwb3J0cy51c2VSZWR1Y2VyPWZ1bmN0aW9uKGEsYixlKXtyZXR1cm4gVS5jdXJyZW50LnVzZVJlZHVjZXIoYSxiLGUpfTtleHBvcnRzLnVzZVJlZj1mdW5jdGlvbihhKXtyZXR1cm4gVS5jdXJyZW50LnVzZVJlZihhKX07ZXhwb3J0cy51c2VTdGF0ZT1mdW5jdGlvbihhKXtyZXR1cm4gVS5jdXJyZW50LnVzZVN0YXRlKGEpfTtleHBvcnRzLnVzZVN5bmNFeHRlcm5hbFN0b3JlPWZ1bmN0aW9uKGEsYixlKXtyZXR1cm4gVS5jdXJyZW50LnVzZVN5bmNFeHRlcm5hbFN0b3JlKGEsYixlKX07XG5leHBvcnRzLnVzZVRyYW5zaXRpb249ZnVuY3Rpb24oKXtyZXR1cm4gVS5jdXJyZW50LnVzZVRyYW5zaXRpb24oKX07ZXhwb3J0cy52ZXJzaW9uPVwiMTguMi4wXCI7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1qc3gtcnVudGltZS5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1qc3gtcnVudGltZS5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLyoqXG4gKiBAbGljZW5zZSBSZWFjdFxuICogc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0JztmdW5jdGlvbiBmKGEsYil7dmFyIGM9YS5sZW5ndGg7YS5wdXNoKGIpO2E6Zm9yKDswPGM7KXt2YXIgZD1jLTE+Pj4xLGU9YVtkXTtpZigwPGcoZSxiKSlhW2RdPWIsYVtjXT1lLGM9ZDtlbHNlIGJyZWFrIGF9fWZ1bmN0aW9uIGgoYSl7cmV0dXJuIDA9PT1hLmxlbmd0aD9udWxsOmFbMF19ZnVuY3Rpb24gayhhKXtpZigwPT09YS5sZW5ndGgpcmV0dXJuIG51bGw7dmFyIGI9YVswXSxjPWEucG9wKCk7aWYoYyE9PWIpe2FbMF09YzthOmZvcih2YXIgZD0wLGU9YS5sZW5ndGgsdz1lPj4+MTtkPHc7KXt2YXIgbT0yKihkKzEpLTEsQz1hW21dLG49bSsxLHg9YVtuXTtpZigwPmcoQyxjKSluPGUmJjA+Zyh4LEMpPyhhW2RdPXgsYVtuXT1jLGQ9bik6KGFbZF09QyxhW21dPWMsZD1tKTtlbHNlIGlmKG48ZSYmMD5nKHgsYykpYVtkXT14LGFbbl09YyxkPW47ZWxzZSBicmVhayBhfX1yZXR1cm4gYn1cbmZ1bmN0aW9uIGcoYSxiKXt2YXIgYz1hLnNvcnRJbmRleC1iLnNvcnRJbmRleDtyZXR1cm4gMCE9PWM/YzphLmlkLWIuaWR9aWYoXCJvYmplY3RcIj09PXR5cGVvZiBwZXJmb3JtYW5jZSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIHBlcmZvcm1hbmNlLm5vdyl7dmFyIGw9cGVyZm9ybWFuY2U7ZXhwb3J0cy51bnN0YWJsZV9ub3c9ZnVuY3Rpb24oKXtyZXR1cm4gbC5ub3coKX19ZWxzZXt2YXIgcD1EYXRlLHE9cC5ub3coKTtleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiBwLm5vdygpLXF9fXZhciByPVtdLHQ9W10sdT0xLHY9bnVsbCx5PTMsej0hMSxBPSExLEI9ITEsRD1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygc2V0VGltZW91dD9zZXRUaW1lb3V0Om51bGwsRT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgY2xlYXJUaW1lb3V0P2NsZWFyVGltZW91dDpudWxsLEY9XCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBzZXRJbW1lZGlhdGU/c2V0SW1tZWRpYXRlOm51bGw7XG5cInVuZGVmaW5lZFwiIT09dHlwZW9mIG5hdmlnYXRvciYmdm9pZCAwIT09bmF2aWdhdG9yLnNjaGVkdWxpbmcmJnZvaWQgMCE9PW5hdmlnYXRvci5zY2hlZHVsaW5nLmlzSW5wdXRQZW5kaW5nJiZuYXZpZ2F0b3Iuc2NoZWR1bGluZy5pc0lucHV0UGVuZGluZy5iaW5kKG5hdmlnYXRvci5zY2hlZHVsaW5nKTtmdW5jdGlvbiBHKGEpe2Zvcih2YXIgYj1oKHQpO251bGwhPT1iOyl7aWYobnVsbD09PWIuY2FsbGJhY2spayh0KTtlbHNlIGlmKGIuc3RhcnRUaW1lPD1hKWsodCksYi5zb3J0SW5kZXg9Yi5leHBpcmF0aW9uVGltZSxmKHIsYik7ZWxzZSBicmVhaztiPWgodCl9fWZ1bmN0aW9uIEgoYSl7Qj0hMTtHKGEpO2lmKCFBKWlmKG51bGwhPT1oKHIpKUE9ITAsSShKKTtlbHNle3ZhciBiPWgodCk7bnVsbCE9PWImJksoSCxiLnN0YXJ0VGltZS1hKX19XG5mdW5jdGlvbiBKKGEsYil7QT0hMTtCJiYoQj0hMSxFKEwpLEw9LTEpO3o9ITA7dmFyIGM9eTt0cnl7RyhiKTtmb3Iodj1oKHIpO251bGwhPT12JiYoISh2LmV4cGlyYXRpb25UaW1lPmIpfHxhJiYhTSgpKTspe3ZhciBkPXYuY2FsbGJhY2s7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQpe3YuY2FsbGJhY2s9bnVsbDt5PXYucHJpb3JpdHlMZXZlbDt2YXIgZT1kKHYuZXhwaXJhdGlvblRpbWU8PWIpO2I9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgZT92LmNhbGxiYWNrPWU6dj09PWgocikmJmsocik7RyhiKX1lbHNlIGsocik7dj1oKHIpfWlmKG51bGwhPT12KXZhciB3PSEwO2Vsc2V7dmFyIG09aCh0KTtudWxsIT09bSYmSyhILG0uc3RhcnRUaW1lLWIpO3c9ITF9cmV0dXJuIHd9ZmluYWxseXt2PW51bGwseT1jLHo9ITF9fXZhciBOPSExLE89bnVsbCxMPS0xLFA9NSxRPS0xO1xuZnVuY3Rpb24gTSgpe3JldHVybiBleHBvcnRzLnVuc3RhYmxlX25vdygpLVE8UD8hMTohMH1mdW5jdGlvbiBSKCl7aWYobnVsbCE9PU8pe3ZhciBhPWV4cG9ydHMudW5zdGFibGVfbm93KCk7UT1hO3ZhciBiPSEwO3RyeXtiPU8oITAsYSl9ZmluYWxseXtiP1MoKTooTj0hMSxPPW51bGwpfX1lbHNlIE49ITF9dmFyIFM7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIEYpUz1mdW5jdGlvbigpe0YoUil9O2Vsc2UgaWYoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBNZXNzYWdlQ2hhbm5lbCl7dmFyIFQ9bmV3IE1lc3NhZ2VDaGFubmVsLFU9VC5wb3J0MjtULnBvcnQxLm9ubWVzc2FnZT1SO1M9ZnVuY3Rpb24oKXtVLnBvc3RNZXNzYWdlKG51bGwpfX1lbHNlIFM9ZnVuY3Rpb24oKXtEKFIsMCl9O2Z1bmN0aW9uIEkoYSl7Tz1hO058fChOPSEwLFMoKSl9ZnVuY3Rpb24gSyhhLGIpe0w9RChmdW5jdGlvbigpe2EoZXhwb3J0cy51bnN0YWJsZV9ub3coKSl9LGIpfVxuZXhwb3J0cy51bnN0YWJsZV9JZGxlUHJpb3JpdHk9NTtleHBvcnRzLnVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5PTE7ZXhwb3J0cy51bnN0YWJsZV9Mb3dQcmlvcml0eT00O2V4cG9ydHMudW5zdGFibGVfTm9ybWFsUHJpb3JpdHk9MztleHBvcnRzLnVuc3RhYmxlX1Byb2ZpbGluZz1udWxsO2V4cG9ydHMudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHk9MjtleHBvcnRzLnVuc3RhYmxlX2NhbmNlbENhbGxiYWNrPWZ1bmN0aW9uKGEpe2EuY2FsbGJhY2s9bnVsbH07ZXhwb3J0cy51bnN0YWJsZV9jb250aW51ZUV4ZWN1dGlvbj1mdW5jdGlvbigpe0F8fHp8fChBPSEwLEkoSikpfTtcbmV4cG9ydHMudW5zdGFibGVfZm9yY2VGcmFtZVJhdGU9ZnVuY3Rpb24oYSl7MD5hfHwxMjU8YT9jb25zb2xlLmVycm9yKFwiZm9yY2VGcmFtZVJhdGUgdGFrZXMgYSBwb3NpdGl2ZSBpbnQgYmV0d2VlbiAwIGFuZCAxMjUsIGZvcmNpbmcgZnJhbWUgcmF0ZXMgaGlnaGVyIHRoYW4gMTI1IGZwcyBpcyBub3Qgc3VwcG9ydGVkXCIpOlA9MDxhP01hdGguZmxvb3IoMUUzL2EpOjV9O2V4cG9ydHMudW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWw9ZnVuY3Rpb24oKXtyZXR1cm4geX07ZXhwb3J0cy51bnN0YWJsZV9nZXRGaXJzdENhbGxiYWNrTm9kZT1mdW5jdGlvbigpe3JldHVybiBoKHIpfTtleHBvcnRzLnVuc3RhYmxlX25leHQ9ZnVuY3Rpb24oYSl7c3dpdGNoKHkpe2Nhc2UgMTpjYXNlIDI6Y2FzZSAzOnZhciBiPTM7YnJlYWs7ZGVmYXVsdDpiPXl9dmFyIGM9eTt5PWI7dHJ5e3JldHVybiBhKCl9ZmluYWxseXt5PWN9fTtleHBvcnRzLnVuc3RhYmxlX3BhdXNlRXhlY3V0aW9uPWZ1bmN0aW9uKCl7fTtcbmV4cG9ydHMudW5zdGFibGVfcmVxdWVzdFBhaW50PWZ1bmN0aW9uKCl7fTtleHBvcnRzLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eT1mdW5jdGlvbihhLGIpe3N3aXRjaChhKXtjYXNlIDE6Y2FzZSAyOmNhc2UgMzpjYXNlIDQ6Y2FzZSA1OmJyZWFrO2RlZmF1bHQ6YT0zfXZhciBjPXk7eT1hO3RyeXtyZXR1cm4gYigpfWZpbmFsbHl7eT1jfX07XG5leHBvcnRzLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2s9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWV4cG9ydHMudW5zdGFibGVfbm93KCk7XCJvYmplY3RcIj09PXR5cGVvZiBjJiZudWxsIT09Yz8oYz1jLmRlbGF5LGM9XCJudW1iZXJcIj09PXR5cGVvZiBjJiYwPGM/ZCtjOmQpOmM9ZDtzd2l0Y2goYSl7Y2FzZSAxOnZhciBlPS0xO2JyZWFrO2Nhc2UgMjplPTI1MDticmVhaztjYXNlIDU6ZT0xMDczNzQxODIzO2JyZWFrO2Nhc2UgNDplPTFFNDticmVhaztkZWZhdWx0OmU9NUUzfWU9YytlO2E9e2lkOnUrKyxjYWxsYmFjazpiLHByaW9yaXR5TGV2ZWw6YSxzdGFydFRpbWU6YyxleHBpcmF0aW9uVGltZTplLHNvcnRJbmRleDotMX07Yz5kPyhhLnNvcnRJbmRleD1jLGYodCxhKSxudWxsPT09aChyKSYmYT09PWgodCkmJihCPyhFKEwpLEw9LTEpOkI9ITAsSyhILGMtZCkpKTooYS5zb3J0SW5kZXg9ZSxmKHIsYSksQXx8enx8KEE9ITAsSShKKSkpO3JldHVybiBhfTtcbmV4cG9ydHMudW5zdGFibGVfc2hvdWxkWWllbGQ9TTtleHBvcnRzLnVuc3RhYmxlX3dyYXBDYWxsYmFjaz1mdW5jdGlvbihhKXt2YXIgYj15O3JldHVybiBmdW5jdGlvbigpe3ZhciBjPXk7eT1iO3RyeXtyZXR1cm4gYS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9ZmluYWxseXt5PWN9fX07XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3NjaGVkdWxlci5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBzdHlsZXNJbkRPTSA9IFtdO1xuXG5mdW5jdGlvbiBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKSB7XG4gIHZhciByZXN1bHQgPSAtMTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlc0luRE9NLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHN0eWxlc0luRE9NW2ldLmlkZW50aWZpZXIgPT09IGlkZW50aWZpZXIpIHtcbiAgICAgIHJlc3VsdCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucykge1xuICB2YXIgaWRDb3VudE1hcCA9IHt9O1xuICB2YXIgaWRlbnRpZmllcnMgPSBbXTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV07XG4gICAgdmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG4gICAgdmFyIGNvdW50ID0gaWRDb3VudE1hcFtpZF0gfHwgMDtcbiAgICB2YXIgaWRlbnRpZmllciA9IFwiXCIuY29uY2F0KGlkLCBcIiBcIikuY29uY2F0KGNvdW50KTtcbiAgICBpZENvdW50TWFwW2lkXSA9IGNvdW50ICsgMTtcbiAgICB2YXIgaW5kZXhCeUlkZW50aWZpZXIgPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICB2YXIgb2JqID0ge1xuICAgICAgY3NzOiBpdGVtWzFdLFxuICAgICAgbWVkaWE6IGl0ZW1bMl0sXG4gICAgICBzb3VyY2VNYXA6IGl0ZW1bM10sXG4gICAgICBzdXBwb3J0czogaXRlbVs0XSxcbiAgICAgIGxheWVyOiBpdGVtWzVdXG4gICAgfTtcblxuICAgIGlmIChpbmRleEJ5SWRlbnRpZmllciAhPT0gLTEpIHtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS5yZWZlcmVuY2VzKys7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0udXBkYXRlcihvYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgdXBkYXRlciA9IGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpO1xuICAgICAgb3B0aW9ucy5ieUluZGV4ID0gaTtcbiAgICAgIHN0eWxlc0luRE9NLnNwbGljZShpLCAwLCB7XG4gICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsXG4gICAgICAgIHVwZGF0ZXI6IHVwZGF0ZXIsXG4gICAgICAgIHJlZmVyZW5jZXM6IDFcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cblxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5cbmZ1bmN0aW9uIGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpIHtcbiAgdmFyIGFwaSA9IG9wdGlvbnMuZG9tQVBJKG9wdGlvbnMpO1xuICBhcGkudXBkYXRlKG9iaik7XG5cbiAgdmFyIHVwZGF0ZXIgPSBmdW5jdGlvbiB1cGRhdGVyKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXAgJiYgbmV3T2JqLnN1cHBvcnRzID09PSBvYmouc3VwcG9ydHMgJiYgbmV3T2JqLmxheWVyID09PSBvYmoubGF5ZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBhcGkudXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZW1vdmUoKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIHVwZGF0ZXI7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tpXTtcbiAgICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhdLnJlZmVyZW5jZXMtLTtcbiAgICB9XG5cbiAgICB2YXIgbmV3TGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKG5ld0xpc3QsIG9wdGlvbnMpO1xuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG5cbiAgICAgIHZhciBfaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihfaWRlbnRpZmllcik7XG5cbiAgICAgIGlmIChzdHlsZXNJbkRPTVtfaW5kZXhdLnJlZmVyZW5jZXMgPT09IDApIHtcbiAgICAgICAgc3R5bGVzSW5ET01bX2luZGV4XS51cGRhdGVyKCk7XG5cbiAgICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGFzdElkZW50aWZpZXJzID0gbmV3TGFzdElkZW50aWZpZXJzO1xuICB9O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIG1lbW8gPSB7fTtcbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5mdW5jdGlvbiBnZXRUYXJnZXQodGFyZ2V0KSB7XG4gIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpOyAvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuXG4gICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBudWxsO1xuICAgICAgfVxuICAgIH1cblxuICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICB9XG5cbiAgcmV0dXJuIG1lbW9bdGFyZ2V0XTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbmZ1bmN0aW9uIGluc2VydEJ5U2VsZWN0b3IoaW5zZXJ0LCBzdHlsZSkge1xuICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KGluc2VydCk7XG5cbiAgaWYgKCF0YXJnZXQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICB9XG5cbiAgdGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRCeVNlbGVjdG9yOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuICBvcHRpb25zLnNldEF0dHJpYnV0ZXMoZWxlbWVudCwgb3B0aW9ucy5hdHRyaWJ1dGVzKTtcbiAgb3B0aW9ucy5pbnNlcnQoZWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbiAgcmV0dXJuIGVsZW1lbnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0U3R5bGVFbGVtZW50OyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcyhzdHlsZUVsZW1lbnQpIHtcbiAgdmFyIG5vbmNlID0gdHlwZW9mIF9fd2VicGFja19ub25jZV9fICE9PSBcInVuZGVmaW5lZFwiID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuXG4gIGlmIChub25jZSkge1xuICAgIHN0eWxlRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLCBub25jZSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXM7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopIHtcbiAgdmFyIGNzcyA9IFwiXCI7XG5cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KG9iai5zdXBwb3J0cywgXCIpIHtcIik7XG4gIH1cblxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwiQG1lZGlhIFwiLmNvbmNhdChvYmoubWVkaWEsIFwiIHtcIik7XG4gIH1cblxuICB2YXIgbmVlZExheWVyID0gdHlwZW9mIG9iai5sYXllciAhPT0gXCJ1bmRlZmluZWRcIjtcblxuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwiQGxheWVyXCIuY29uY2F0KG9iai5sYXllci5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KG9iai5sYXllcikgOiBcIlwiLCBcIiB7XCIpO1xuICB9XG5cbiAgY3NzICs9IG9iai5jc3M7XG5cbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuXG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cblxuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG5cbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG5cbiAgaWYgKHNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9IC8vIEZvciBvbGQgSUVcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG5cblxuICBvcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoc3R5bGVFbGVtZW50LnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBzdHlsZUVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQpO1xufVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cblxuZnVuY3Rpb24gZG9tQVBJKG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlRWxlbWVudCA9IG9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuICByZXR1cm4ge1xuICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKG9iaikge1xuICAgICAgYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopO1xuICAgIH0sXG4gICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KTtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZG9tQVBJOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50KSB7XG4gIGlmIChzdHlsZUVsZW1lbnQuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZUVsZW1lbnQucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpO1xuICAgIH1cblxuICAgIHN0eWxlRWxlbWVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0eWxlVGFnVHJhbnNmb3JtOyIsImZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7XG4gIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7XG4gICAgXCJkZWZhdWx0XCI6IG9ialxuICB9O1xufVxubW9kdWxlLmV4cG9ydHMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0LCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZSwgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHM7IiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIi8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uciA9IChleHBvcnRzKSA9PiB7XG5cdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXHR9XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubmMgPSB1bmRlZmluZWQ7IiwiLyoqXG4gKiBAcmVtaXgtcnVuL3JvdXRlciB2MS4wLjNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIFJlbWl4IFNvZnR3YXJlIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UubWQgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiA/IE9iamVjdC5hc3NpZ24uYmluZCgpIDogZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8jcmVnaW9uIFR5cGVzIGFuZCBDb25zdGFudHNcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbi8qKlxuICogQWN0aW9ucyByZXByZXNlbnQgdGhlIHR5cGUgb2YgY2hhbmdlIHRvIGEgbG9jYXRpb24gdmFsdWUuXG4gKi9cbnZhciBBY3Rpb247XG5cbihmdW5jdGlvbiAoQWN0aW9uKSB7XG4gIC8qKlxuICAgKiBBIFBPUCBpbmRpY2F0ZXMgYSBjaGFuZ2UgdG8gYW4gYXJiaXRyYXJ5IGluZGV4IGluIHRoZSBoaXN0b3J5IHN0YWNrLCBzdWNoXG4gICAqIGFzIGEgYmFjayBvciBmb3J3YXJkIG5hdmlnYXRpb24uIEl0IGRvZXMgbm90IGRlc2NyaWJlIHRoZSBkaXJlY3Rpb24gb2YgdGhlXG4gICAqIG5hdmlnYXRpb24sIG9ubHkgdGhhdCB0aGUgY3VycmVudCBpbmRleCBjaGFuZ2VkLlxuICAgKlxuICAgKiBOb3RlOiBUaGlzIGlzIHRoZSBkZWZhdWx0IGFjdGlvbiBmb3IgbmV3bHkgY3JlYXRlZCBoaXN0b3J5IG9iamVjdHMuXG4gICAqL1xuICBBY3Rpb25bXCJQb3BcIl0gPSBcIlBPUFwiO1xuICAvKipcbiAgICogQSBQVVNIIGluZGljYXRlcyBhIG5ldyBlbnRyeSBiZWluZyBhZGRlZCB0byB0aGUgaGlzdG9yeSBzdGFjaywgc3VjaCBhcyB3aGVuXG4gICAqIGEgbGluayBpcyBjbGlja2VkIGFuZCBhIG5ldyBwYWdlIGxvYWRzLiBXaGVuIHRoaXMgaGFwcGVucywgYWxsIHN1YnNlcXVlbnRcbiAgICogZW50cmllcyBpbiB0aGUgc3RhY2sgYXJlIGxvc3QuXG4gICAqL1xuXG4gIEFjdGlvbltcIlB1c2hcIl0gPSBcIlBVU0hcIjtcbiAgLyoqXG4gICAqIEEgUkVQTEFDRSBpbmRpY2F0ZXMgdGhlIGVudHJ5IGF0IHRoZSBjdXJyZW50IGluZGV4IGluIHRoZSBoaXN0b3J5IHN0YWNrXG4gICAqIGJlaW5nIHJlcGxhY2VkIGJ5IGEgbmV3IG9uZS5cbiAgICovXG5cbiAgQWN0aW9uW1wiUmVwbGFjZVwiXSA9IFwiUkVQTEFDRVwiO1xufSkoQWN0aW9uIHx8IChBY3Rpb24gPSB7fSkpO1xuXG5jb25zdCBQb3BTdGF0ZUV2ZW50VHlwZSA9IFwicG9wc3RhdGVcIjtcbi8qKlxuICogTWVtb3J5IGhpc3Rvcnkgc3RvcmVzIHRoZSBjdXJyZW50IGxvY2F0aW9uIGluIG1lbW9yeS4gSXQgaXMgZGVzaWduZWQgZm9yIHVzZVxuICogaW4gc3RhdGVmdWwgbm9uLWJyb3dzZXIgZW52aXJvbm1lbnRzIGxpa2UgdGVzdHMgYW5kIFJlYWN0IE5hdGl2ZS5cbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVNZW1vcnlIaXN0b3J5KG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIGxldCB7XG4gICAgaW5pdGlhbEVudHJpZXMgPSBbXCIvXCJdLFxuICAgIGluaXRpYWxJbmRleCxcbiAgICB2NUNvbXBhdCA9IGZhbHNlXG4gIH0gPSBvcHRpb25zO1xuICBsZXQgZW50cmllczsgLy8gRGVjbGFyZSBzbyB3ZSBjYW4gYWNjZXNzIGZyb20gY3JlYXRlTWVtb3J5TG9jYXRpb25cblxuICBlbnRyaWVzID0gaW5pdGlhbEVudHJpZXMubWFwKChlbnRyeSwgaW5kZXgpID0+IGNyZWF0ZU1lbW9yeUxvY2F0aW9uKGVudHJ5LCB0eXBlb2YgZW50cnkgPT09IFwic3RyaW5nXCIgPyBudWxsIDogZW50cnkuc3RhdGUsIGluZGV4ID09PSAwID8gXCJkZWZhdWx0XCIgOiB1bmRlZmluZWQpKTtcbiAgbGV0IGluZGV4ID0gY2xhbXBJbmRleChpbml0aWFsSW5kZXggPT0gbnVsbCA/IGVudHJpZXMubGVuZ3RoIC0gMSA6IGluaXRpYWxJbmRleCk7XG4gIGxldCBhY3Rpb24gPSBBY3Rpb24uUG9wO1xuICBsZXQgbGlzdGVuZXIgPSBudWxsO1xuXG4gIGZ1bmN0aW9uIGNsYW1wSW5kZXgobikge1xuICAgIHJldHVybiBNYXRoLm1pbihNYXRoLm1heChuLCAwKSwgZW50cmllcy5sZW5ndGggLSAxKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldEN1cnJlbnRMb2NhdGlvbigpIHtcbiAgICByZXR1cm4gZW50cmllc1tpbmRleF07XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVNZW1vcnlMb2NhdGlvbih0bywgc3RhdGUsIGtleSkge1xuICAgIGlmIChzdGF0ZSA9PT0gdm9pZCAwKSB7XG4gICAgICBzdGF0ZSA9IG51bGw7XG4gICAgfVxuXG4gICAgbGV0IGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24oZW50cmllcyA/IGdldEN1cnJlbnRMb2NhdGlvbigpLnBhdGhuYW1lIDogXCIvXCIsIHRvLCBzdGF0ZSwga2V5KTtcbiAgICB3YXJuaW5nJDEobG9jYXRpb24ucGF0aG5hbWUuY2hhckF0KDApID09PSBcIi9cIiwgXCJyZWxhdGl2ZSBwYXRobmFtZXMgYXJlIG5vdCBzdXBwb3J0ZWQgaW4gbWVtb3J5IGhpc3Rvcnk6IFwiICsgSlNPTi5zdHJpbmdpZnkodG8pKTtcbiAgICByZXR1cm4gbG9jYXRpb247XG4gIH1cblxuICBsZXQgaGlzdG9yeSA9IHtcbiAgICBnZXQgaW5kZXgoKSB7XG4gICAgICByZXR1cm4gaW5kZXg7XG4gICAgfSxcblxuICAgIGdldCBhY3Rpb24oKSB7XG4gICAgICByZXR1cm4gYWN0aW9uO1xuICAgIH0sXG5cbiAgICBnZXQgbG9jYXRpb24oKSB7XG4gICAgICByZXR1cm4gZ2V0Q3VycmVudExvY2F0aW9uKCk7XG4gICAgfSxcblxuICAgIGNyZWF0ZUhyZWYodG8pIHtcbiAgICAgIHJldHVybiB0eXBlb2YgdG8gPT09IFwic3RyaW5nXCIgPyB0byA6IGNyZWF0ZVBhdGgodG8pO1xuICAgIH0sXG5cbiAgICBlbmNvZGVMb2NhdGlvbihsb2NhdGlvbikge1xuICAgICAgcmV0dXJuIGxvY2F0aW9uO1xuICAgIH0sXG5cbiAgICBwdXNoKHRvLCBzdGF0ZSkge1xuICAgICAgYWN0aW9uID0gQWN0aW9uLlB1c2g7XG4gICAgICBsZXQgbmV4dExvY2F0aW9uID0gY3JlYXRlTWVtb3J5TG9jYXRpb24odG8sIHN0YXRlKTtcbiAgICAgIGluZGV4ICs9IDE7XG4gICAgICBlbnRyaWVzLnNwbGljZShpbmRleCwgZW50cmllcy5sZW5ndGgsIG5leHRMb2NhdGlvbik7XG5cbiAgICAgIGlmICh2NUNvbXBhdCAmJiBsaXN0ZW5lcikge1xuICAgICAgICBsaXN0ZW5lcih7XG4gICAgICAgICAgYWN0aW9uLFxuICAgICAgICAgIGxvY2F0aW9uOiBuZXh0TG9jYXRpb25cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIHJlcGxhY2UodG8sIHN0YXRlKSB7XG4gICAgICBhY3Rpb24gPSBBY3Rpb24uUmVwbGFjZTtcbiAgICAgIGxldCBuZXh0TG9jYXRpb24gPSBjcmVhdGVNZW1vcnlMb2NhdGlvbih0bywgc3RhdGUpO1xuICAgICAgZW50cmllc1tpbmRleF0gPSBuZXh0TG9jYXRpb247XG5cbiAgICAgIGlmICh2NUNvbXBhdCAmJiBsaXN0ZW5lcikge1xuICAgICAgICBsaXN0ZW5lcih7XG4gICAgICAgICAgYWN0aW9uLFxuICAgICAgICAgIGxvY2F0aW9uOiBuZXh0TG9jYXRpb25cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIGdvKGRlbHRhKSB7XG4gICAgICBhY3Rpb24gPSBBY3Rpb24uUG9wO1xuICAgICAgaW5kZXggPSBjbGFtcEluZGV4KGluZGV4ICsgZGVsdGEpO1xuXG4gICAgICBpZiAobGlzdGVuZXIpIHtcbiAgICAgICAgbGlzdGVuZXIoe1xuICAgICAgICAgIGFjdGlvbixcbiAgICAgICAgICBsb2NhdGlvbjogZ2V0Q3VycmVudExvY2F0aW9uKClcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIGxpc3Rlbihmbikge1xuICAgICAgbGlzdGVuZXIgPSBmbjtcbiAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIGxpc3RlbmVyID0gbnVsbDtcbiAgICAgIH07XG4gICAgfVxuXG4gIH07XG4gIHJldHVybiBoaXN0b3J5O1xufVxuLyoqXG4gKiBCcm93c2VyIGhpc3Rvcnkgc3RvcmVzIHRoZSBsb2NhdGlvbiBpbiByZWd1bGFyIFVSTHMuIFRoaXMgaXMgdGhlIHN0YW5kYXJkIGZvclxuICogbW9zdCB3ZWIgYXBwcywgYnV0IGl0IHJlcXVpcmVzIHNvbWUgY29uZmlndXJhdGlvbiBvbiB0aGUgc2VydmVyIHRvIGVuc3VyZSB5b3VcbiAqIHNlcnZlIHRoZSBzYW1lIGFwcCBhdCBtdWx0aXBsZSBVUkxzLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3JlbWl4LXJ1bi9oaXN0b3J5L3RyZWUvbWFpbi9kb2NzL2FwaS1yZWZlcmVuY2UubWQjY3JlYXRlYnJvd3Nlcmhpc3RvcnlcbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVCcm93c2VySGlzdG9yeShvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVCcm93c2VyTG9jYXRpb24od2luZG93LCBnbG9iYWxIaXN0b3J5KSB7XG4gICAgbGV0IHtcbiAgICAgIHBhdGhuYW1lLFxuICAgICAgc2VhcmNoLFxuICAgICAgaGFzaFxuICAgIH0gPSB3aW5kb3cubG9jYXRpb247XG4gICAgcmV0dXJuIGNyZWF0ZUxvY2F0aW9uKFwiXCIsIHtcbiAgICAgIHBhdGhuYW1lLFxuICAgICAgc2VhcmNoLFxuICAgICAgaGFzaFxuICAgIH0sIC8vIHN0YXRlIGRlZmF1bHRzIHRvIGBudWxsYCBiZWNhdXNlIGB3aW5kb3cuaGlzdG9yeS5zdGF0ZWAgZG9lc1xuICAgIGdsb2JhbEhpc3Rvcnkuc3RhdGUgJiYgZ2xvYmFsSGlzdG9yeS5zdGF0ZS51c3IgfHwgbnVsbCwgZ2xvYmFsSGlzdG9yeS5zdGF0ZSAmJiBnbG9iYWxIaXN0b3J5LnN0YXRlLmtleSB8fCBcImRlZmF1bHRcIik7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVCcm93c2VySHJlZih3aW5kb3csIHRvKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiA/IHRvIDogY3JlYXRlUGF0aCh0byk7XG4gIH1cblxuICByZXR1cm4gZ2V0VXJsQmFzZWRIaXN0b3J5KGNyZWF0ZUJyb3dzZXJMb2NhdGlvbiwgY3JlYXRlQnJvd3NlckhyZWYsIG51bGwsIG9wdGlvbnMpO1xufVxuLyoqXG4gKiBIYXNoIGhpc3Rvcnkgc3RvcmVzIHRoZSBsb2NhdGlvbiBpbiB3aW5kb3cubG9jYXRpb24uaGFzaC4gVGhpcyBtYWtlcyBpdCBpZGVhbFxuICogZm9yIHNpdHVhdGlvbnMgd2hlcmUgeW91IGRvbid0IHdhbnQgdG8gc2VuZCB0aGUgbG9jYXRpb24gdG8gdGhlIHNlcnZlciBmb3JcbiAqIHNvbWUgcmVhc29uLCBlaXRoZXIgYmVjYXVzZSB5b3UgZG8gY2Fubm90IGNvbmZpZ3VyZSBpdCBvciB0aGUgVVJMIHNwYWNlIGlzXG4gKiByZXNlcnZlZCBmb3Igc29tZXRoaW5nIGVsc2UuXG4gKlxuICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vcmVtaXgtcnVuL2hpc3RvcnkvdHJlZS9tYWluL2RvY3MvYXBpLXJlZmVyZW5jZS5tZCNjcmVhdGVoYXNoaGlzdG9yeVxuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZUhhc2hIaXN0b3J5KG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUhhc2hMb2NhdGlvbih3aW5kb3csIGdsb2JhbEhpc3RvcnkpIHtcbiAgICBsZXQge1xuICAgICAgcGF0aG5hbWUgPSBcIi9cIixcbiAgICAgIHNlYXJjaCA9IFwiXCIsXG4gICAgICBoYXNoID0gXCJcIlxuICAgIH0gPSBwYXJzZVBhdGgod2luZG93LmxvY2F0aW9uLmhhc2guc3Vic3RyKDEpKTtcbiAgICByZXR1cm4gY3JlYXRlTG9jYXRpb24oXCJcIiwge1xuICAgICAgcGF0aG5hbWUsXG4gICAgICBzZWFyY2gsXG4gICAgICBoYXNoXG4gICAgfSwgLy8gc3RhdGUgZGVmYXVsdHMgdG8gYG51bGxgIGJlY2F1c2UgYHdpbmRvdy5oaXN0b3J5LnN0YXRlYCBkb2VzXG4gICAgZ2xvYmFsSGlzdG9yeS5zdGF0ZSAmJiBnbG9iYWxIaXN0b3J5LnN0YXRlLnVzciB8fCBudWxsLCBnbG9iYWxIaXN0b3J5LnN0YXRlICYmIGdsb2JhbEhpc3Rvcnkuc3RhdGUua2V5IHx8IFwiZGVmYXVsdFwiKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUhhc2hIcmVmKHdpbmRvdywgdG8pIHtcbiAgICBsZXQgYmFzZSA9IHdpbmRvdy5kb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiYmFzZVwiKTtcbiAgICBsZXQgaHJlZiA9IFwiXCI7XG5cbiAgICBpZiAoYmFzZSAmJiBiYXNlLmdldEF0dHJpYnV0ZShcImhyZWZcIikpIHtcbiAgICAgIGxldCB1cmwgPSB3aW5kb3cubG9jYXRpb24uaHJlZjtcbiAgICAgIGxldCBoYXNoSW5kZXggPSB1cmwuaW5kZXhPZihcIiNcIik7XG4gICAgICBocmVmID0gaGFzaEluZGV4ID09PSAtMSA/IHVybCA6IHVybC5zbGljZSgwLCBoYXNoSW5kZXgpO1xuICAgIH1cblxuICAgIHJldHVybiBocmVmICsgXCIjXCIgKyAodHlwZW9mIHRvID09PSBcInN0cmluZ1wiID8gdG8gOiBjcmVhdGVQYXRoKHRvKSk7XG4gIH1cblxuICBmdW5jdGlvbiB2YWxpZGF0ZUhhc2hMb2NhdGlvbihsb2NhdGlvbiwgdG8pIHtcbiAgICB3YXJuaW5nJDEobG9jYXRpb24ucGF0aG5hbWUuY2hhckF0KDApID09PSBcIi9cIiwgXCJyZWxhdGl2ZSBwYXRobmFtZXMgYXJlIG5vdCBzdXBwb3J0ZWQgaW4gaGFzaCBoaXN0b3J5LnB1c2goXCIgKyBKU09OLnN0cmluZ2lmeSh0bykgKyBcIilcIik7XG4gIH1cblxuICByZXR1cm4gZ2V0VXJsQmFzZWRIaXN0b3J5KGNyZWF0ZUhhc2hMb2NhdGlvbiwgY3JlYXRlSGFzaEhyZWYsIHZhbGlkYXRlSGFzaExvY2F0aW9uLCBvcHRpb25zKTtcbn0gLy8jZW5kcmVnaW9uXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8jcmVnaW9uIFVUSUxTXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5mdW5jdGlvbiB3YXJuaW5nJDEoY29uZCwgbWVzc2FnZSkge1xuICBpZiAoIWNvbmQpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gXCJ1bmRlZmluZWRcIikgY29uc29sZS53YXJuKG1lc3NhZ2UpO1xuXG4gICAgdHJ5IHtcbiAgICAgIC8vIFdlbGNvbWUgdG8gZGVidWdnaW5nIGhpc3RvcnkhXG4gICAgICAvL1xuICAgICAgLy8gVGhpcyBlcnJvciBpcyB0aHJvd24gYXMgYSBjb252ZW5pZW5jZSBzbyB5b3UgY2FuIG1vcmUgZWFzaWx5XG4gICAgICAvLyBmaW5kIHRoZSBzb3VyY2UgZm9yIGEgd2FybmluZyB0aGF0IGFwcGVhcnMgaW4gdGhlIGNvbnNvbGUgYnlcbiAgICAgIC8vIGVuYWJsaW5nIFwicGF1c2Ugb24gZXhjZXB0aW9uc1wiIGluIHlvdXIgSmF2YVNjcmlwdCBkZWJ1Z2dlci5cbiAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWVtcHR5XG4gICAgfSBjYXRjaCAoZSkge31cbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVLZXkoKSB7XG4gIHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwgOCk7XG59XG4vKipcbiAqIEZvciBicm93c2VyLWJhc2VkIGhpc3Rvcmllcywgd2UgY29tYmluZSB0aGUgc3RhdGUgYW5kIGtleSBpbnRvIGFuIG9iamVjdFxuICovXG5cblxuZnVuY3Rpb24gZ2V0SGlzdG9yeVN0YXRlKGxvY2F0aW9uKSB7XG4gIHJldHVybiB7XG4gICAgdXNyOiBsb2NhdGlvbi5zdGF0ZSxcbiAgICBrZXk6IGxvY2F0aW9uLmtleVxuICB9O1xufVxuLyoqXG4gKiBDcmVhdGVzIGEgTG9jYXRpb24gb2JqZWN0IHdpdGggYSB1bmlxdWUga2V5IGZyb20gdGhlIGdpdmVuIFBhdGhcbiAqL1xuXG5cbmZ1bmN0aW9uIGNyZWF0ZUxvY2F0aW9uKGN1cnJlbnQsIHRvLCBzdGF0ZSwga2V5KSB7XG4gIGlmIChzdGF0ZSA9PT0gdm9pZCAwKSB7XG4gICAgc3RhdGUgPSBudWxsO1xuICB9XG5cbiAgbGV0IGxvY2F0aW9uID0gX2V4dGVuZHMoe1xuICAgIHBhdGhuYW1lOiB0eXBlb2YgY3VycmVudCA9PT0gXCJzdHJpbmdcIiA/IGN1cnJlbnQgOiBjdXJyZW50LnBhdGhuYW1lLFxuICAgIHNlYXJjaDogXCJcIixcbiAgICBoYXNoOiBcIlwiXG4gIH0sIHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiA/IHBhcnNlUGF0aCh0bykgOiB0bywge1xuICAgIHN0YXRlLFxuICAgIC8vIFRPRE86IFRoaXMgY291bGQgYmUgY2xlYW5lZCB1cC4gIHB1c2gvcmVwbGFjZSBzaG91bGQgcHJvYmFibHkganVzdCB0YWtlXG4gICAgLy8gZnVsbCBMb2NhdGlvbnMgbm93IGFuZCBhdm9pZCB0aGUgbmVlZCB0byBydW4gdGhyb3VnaCB0aGlzIGZsb3cgYXQgYWxsXG4gICAgLy8gQnV0IHRoYXQncyBhIHByZXR0eSBiaWcgcmVmYWN0b3IgdG8gdGhlIGN1cnJlbnQgdGVzdCBzdWl0ZSBzbyBnb2luZyB0b1xuICAgIC8vIGtlZXAgYXMgaXMgZm9yIHRoZSB0aW1lIGJlaW5nIGFuZCBqdXN0IGxldCBhbnkgaW5jb21pbmcga2V5cyB0YWtlIHByZWNlZGVuY2VcbiAgICBrZXk6IHRvICYmIHRvLmtleSB8fCBrZXkgfHwgY3JlYXRlS2V5KClcbiAgfSk7XG5cbiAgcmV0dXJuIGxvY2F0aW9uO1xufVxuLyoqXG4gKiBDcmVhdGVzIGEgc3RyaW5nIFVSTCBwYXRoIGZyb20gdGhlIGdpdmVuIHBhdGhuYW1lLCBzZWFyY2gsIGFuZCBoYXNoIGNvbXBvbmVudHMuXG4gKi9cblxuZnVuY3Rpb24gY3JlYXRlUGF0aChfcmVmKSB7XG4gIGxldCB7XG4gICAgcGF0aG5hbWUgPSBcIi9cIixcbiAgICBzZWFyY2ggPSBcIlwiLFxuICAgIGhhc2ggPSBcIlwiXG4gIH0gPSBfcmVmO1xuICBpZiAoc2VhcmNoICYmIHNlYXJjaCAhPT0gXCI/XCIpIHBhdGhuYW1lICs9IHNlYXJjaC5jaGFyQXQoMCkgPT09IFwiP1wiID8gc2VhcmNoIDogXCI/XCIgKyBzZWFyY2g7XG4gIGlmIChoYXNoICYmIGhhc2ggIT09IFwiI1wiKSBwYXRobmFtZSArPSBoYXNoLmNoYXJBdCgwKSA9PT0gXCIjXCIgPyBoYXNoIDogXCIjXCIgKyBoYXNoO1xuICByZXR1cm4gcGF0aG5hbWU7XG59XG4vKipcbiAqIFBhcnNlcyBhIHN0cmluZyBVUkwgcGF0aCBpbnRvIGl0cyBzZXBhcmF0ZSBwYXRobmFtZSwgc2VhcmNoLCBhbmQgaGFzaCBjb21wb25lbnRzLlxuICovXG5cbmZ1bmN0aW9uIHBhcnNlUGF0aChwYXRoKSB7XG4gIGxldCBwYXJzZWRQYXRoID0ge307XG5cbiAgaWYgKHBhdGgpIHtcbiAgICBsZXQgaGFzaEluZGV4ID0gcGF0aC5pbmRleE9mKFwiI1wiKTtcblxuICAgIGlmIChoYXNoSW5kZXggPj0gMCkge1xuICAgICAgcGFyc2VkUGF0aC5oYXNoID0gcGF0aC5zdWJzdHIoaGFzaEluZGV4KTtcbiAgICAgIHBhdGggPSBwYXRoLnN1YnN0cigwLCBoYXNoSW5kZXgpO1xuICAgIH1cblxuICAgIGxldCBzZWFyY2hJbmRleCA9IHBhdGguaW5kZXhPZihcIj9cIik7XG5cbiAgICBpZiAoc2VhcmNoSW5kZXggPj0gMCkge1xuICAgICAgcGFyc2VkUGF0aC5zZWFyY2ggPSBwYXRoLnN1YnN0cihzZWFyY2hJbmRleCk7XG4gICAgICBwYXRoID0gcGF0aC5zdWJzdHIoMCwgc2VhcmNoSW5kZXgpO1xuICAgIH1cblxuICAgIGlmIChwYXRoKSB7XG4gICAgICBwYXJzZWRQYXRoLnBhdGhuYW1lID0gcGF0aDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcGFyc2VkUGF0aDtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVVSTChsb2NhdGlvbikge1xuICAvLyB3aW5kb3cubG9jYXRpb24ub3JpZ2luIGlzIFwibnVsbFwiICh0aGUgbGl0ZXJhbCBzdHJpbmcgdmFsdWUpIGluIEZpcmVmb3hcbiAgLy8gdW5kZXIgY2VydGFpbiBjb25kaXRpb25zLCBub3RhYmx5IHdoZW4gc2VydmluZyBmcm9tIGEgbG9jYWwgSFRNTCBmaWxlXG4gIC8vIFNlZSBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD04NzgyOTdcbiAgbGV0IGJhc2UgPSB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHR5cGVvZiB3aW5kb3cubG9jYXRpb24gIT09IFwidW5kZWZpbmVkXCIgJiYgd2luZG93LmxvY2F0aW9uLm9yaWdpbiAhPT0gXCJudWxsXCIgPyB3aW5kb3cubG9jYXRpb24ub3JpZ2luIDogXCJ1bmtub3duOi8vdW5rbm93blwiO1xuICBsZXQgaHJlZiA9IHR5cGVvZiBsb2NhdGlvbiA9PT0gXCJzdHJpbmdcIiA/IGxvY2F0aW9uIDogY3JlYXRlUGF0aChsb2NhdGlvbik7XG4gIHJldHVybiBuZXcgVVJMKGhyZWYsIGJhc2UpO1xufVxuXG5mdW5jdGlvbiBnZXRVcmxCYXNlZEhpc3RvcnkoZ2V0TG9jYXRpb24sIGNyZWF0ZUhyZWYsIHZhbGlkYXRlTG9jYXRpb24sIG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIGxldCB7XG4gICAgd2luZG93ID0gZG9jdW1lbnQuZGVmYXVsdFZpZXcsXG4gICAgdjVDb21wYXQgPSBmYWxzZVxuICB9ID0gb3B0aW9ucztcbiAgbGV0IGdsb2JhbEhpc3RvcnkgPSB3aW5kb3cuaGlzdG9yeTtcbiAgbGV0IGFjdGlvbiA9IEFjdGlvbi5Qb3A7XG4gIGxldCBsaXN0ZW5lciA9IG51bGw7XG5cbiAgZnVuY3Rpb24gaGFuZGxlUG9wKCkge1xuICAgIGFjdGlvbiA9IEFjdGlvbi5Qb3A7XG5cbiAgICBpZiAobGlzdGVuZXIpIHtcbiAgICAgIGxpc3RlbmVyKHtcbiAgICAgICAgYWN0aW9uLFxuICAgICAgICBsb2NhdGlvbjogaGlzdG9yeS5sb2NhdGlvblxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcHVzaCh0bywgc3RhdGUpIHtcbiAgICBhY3Rpb24gPSBBY3Rpb24uUHVzaDtcbiAgICBsZXQgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihoaXN0b3J5LmxvY2F0aW9uLCB0bywgc3RhdGUpO1xuICAgIGlmICh2YWxpZGF0ZUxvY2F0aW9uKSB2YWxpZGF0ZUxvY2F0aW9uKGxvY2F0aW9uLCB0byk7XG4gICAgbGV0IGhpc3RvcnlTdGF0ZSA9IGdldEhpc3RvcnlTdGF0ZShsb2NhdGlvbik7XG4gICAgbGV0IHVybCA9IGhpc3RvcnkuY3JlYXRlSHJlZihsb2NhdGlvbik7IC8vIHRyeS4uLmNhdGNoIGJlY2F1c2UgaU9TIGxpbWl0cyB1cyB0byAxMDAgcHVzaFN0YXRlIGNhbGxzIDovXG5cbiAgICB0cnkge1xuICAgICAgZ2xvYmFsSGlzdG9yeS5wdXNoU3RhdGUoaGlzdG9yeVN0YXRlLCBcIlwiLCB1cmwpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAvLyBUaGV5IGFyZSBnb2luZyB0byBsb3NlIHN0YXRlIGhlcmUsIGJ1dCB0aGVyZSBpcyBubyByZWFsXG4gICAgICAvLyB3YXkgdG8gd2FybiB0aGVtIGFib3V0IGl0IHNpbmNlIHRoZSBwYWdlIHdpbGwgcmVmcmVzaC4uLlxuICAgICAgd2luZG93LmxvY2F0aW9uLmFzc2lnbih1cmwpO1xuICAgIH1cblxuICAgIGlmICh2NUNvbXBhdCAmJiBsaXN0ZW5lcikge1xuICAgICAgbGlzdGVuZXIoe1xuICAgICAgICBhY3Rpb24sXG4gICAgICAgIGxvY2F0aW9uOiBoaXN0b3J5LmxvY2F0aW9uXG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZXBsYWNlKHRvLCBzdGF0ZSkge1xuICAgIGFjdGlvbiA9IEFjdGlvbi5SZXBsYWNlO1xuICAgIGxldCBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKGhpc3RvcnkubG9jYXRpb24sIHRvLCBzdGF0ZSk7XG4gICAgaWYgKHZhbGlkYXRlTG9jYXRpb24pIHZhbGlkYXRlTG9jYXRpb24obG9jYXRpb24sIHRvKTtcbiAgICBsZXQgaGlzdG9yeVN0YXRlID0gZ2V0SGlzdG9yeVN0YXRlKGxvY2F0aW9uKTtcbiAgICBsZXQgdXJsID0gaGlzdG9yeS5jcmVhdGVIcmVmKGxvY2F0aW9uKTtcbiAgICBnbG9iYWxIaXN0b3J5LnJlcGxhY2VTdGF0ZShoaXN0b3J5U3RhdGUsIFwiXCIsIHVybCk7XG5cbiAgICBpZiAodjVDb21wYXQgJiYgbGlzdGVuZXIpIHtcbiAgICAgIGxpc3RlbmVyKHtcbiAgICAgICAgYWN0aW9uLFxuICAgICAgICBsb2NhdGlvbjogaGlzdG9yeS5sb2NhdGlvblxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgbGV0IGhpc3RvcnkgPSB7XG4gICAgZ2V0IGFjdGlvbigpIHtcbiAgICAgIHJldHVybiBhY3Rpb247XG4gICAgfSxcblxuICAgIGdldCBsb2NhdGlvbigpIHtcbiAgICAgIHJldHVybiBnZXRMb2NhdGlvbih3aW5kb3csIGdsb2JhbEhpc3RvcnkpO1xuICAgIH0sXG5cbiAgICBsaXN0ZW4oZm4pIHtcbiAgICAgIGlmIChsaXN0ZW5lcikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJBIGhpc3Rvcnkgb25seSBhY2NlcHRzIG9uZSBhY3RpdmUgbGlzdGVuZXJcIik7XG4gICAgICB9XG5cbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFBvcFN0YXRlRXZlbnRUeXBlLCBoYW5kbGVQb3ApO1xuICAgICAgbGlzdGVuZXIgPSBmbjtcbiAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFBvcFN0YXRlRXZlbnRUeXBlLCBoYW5kbGVQb3ApO1xuICAgICAgICBsaXN0ZW5lciA9IG51bGw7XG4gICAgICB9O1xuICAgIH0sXG5cbiAgICBjcmVhdGVIcmVmKHRvKSB7XG4gICAgICByZXR1cm4gY3JlYXRlSHJlZih3aW5kb3csIHRvKTtcbiAgICB9LFxuXG4gICAgZW5jb2RlTG9jYXRpb24obG9jYXRpb24pIHtcbiAgICAgIC8vIEVuY29kZSBhIExvY2F0aW9uIHRoZSBzYW1lIHdheSB3aW5kb3cubG9jYXRpb24gd291bGRcbiAgICAgIGxldCB1cmwgPSBjcmVhdGVVUkwoY3JlYXRlUGF0aChsb2NhdGlvbikpO1xuICAgICAgcmV0dXJuIF9leHRlbmRzKHt9LCBsb2NhdGlvbiwge1xuICAgICAgICBwYXRobmFtZTogdXJsLnBhdGhuYW1lLFxuICAgICAgICBzZWFyY2g6IHVybC5zZWFyY2gsXG4gICAgICAgIGhhc2g6IHVybC5oYXNoXG4gICAgICB9KTtcbiAgICB9LFxuXG4gICAgcHVzaCxcbiAgICByZXBsYWNlLFxuXG4gICAgZ28obikge1xuICAgICAgcmV0dXJuIGdsb2JhbEhpc3RvcnkuZ28obik7XG4gICAgfVxuXG4gIH07XG4gIHJldHVybiBoaXN0b3J5O1xufSAvLyNlbmRyZWdpb25cblxudmFyIFJlc3VsdFR5cGU7XG5cbihmdW5jdGlvbiAoUmVzdWx0VHlwZSkge1xuICBSZXN1bHRUeXBlW1wiZGF0YVwiXSA9IFwiZGF0YVwiO1xuICBSZXN1bHRUeXBlW1wiZGVmZXJyZWRcIl0gPSBcImRlZmVycmVkXCI7XG4gIFJlc3VsdFR5cGVbXCJyZWRpcmVjdFwiXSA9IFwicmVkaXJlY3RcIjtcbiAgUmVzdWx0VHlwZVtcImVycm9yXCJdID0gXCJlcnJvclwiO1xufSkoUmVzdWx0VHlwZSB8fCAoUmVzdWx0VHlwZSA9IHt9KSk7XG5cbmZ1bmN0aW9uIGlzSW5kZXhSb3V0ZShyb3V0ZSkge1xuICByZXR1cm4gcm91dGUuaW5kZXggPT09IHRydWU7XG59IC8vIFdhbGsgdGhlIHJvdXRlIHRyZWUgZ2VuZXJhdGluZyB1bmlxdWUgSURzIHdoZXJlIG5lY2Vzc2FyeSBzbyB3ZSBhcmUgd29ya2luZ1xuLy8gc29sZWx5IHdpdGggQWdub3N0aWNEYXRhUm91dGVPYmplY3QncyB3aXRoaW4gdGhlIFJvdXRlclxuXG5cbmZ1bmN0aW9uIGNvbnZlcnRSb3V0ZXNUb0RhdGFSb3V0ZXMocm91dGVzLCBwYXJlbnRQYXRoLCBhbGxJZHMpIHtcbiAgaWYgKHBhcmVudFBhdGggPT09IHZvaWQgMCkge1xuICAgIHBhcmVudFBhdGggPSBbXTtcbiAgfVxuXG4gIGlmIChhbGxJZHMgPT09IHZvaWQgMCkge1xuICAgIGFsbElkcyA9IG5ldyBTZXQoKTtcbiAgfVxuXG4gIHJldHVybiByb3V0ZXMubWFwKChyb3V0ZSwgaW5kZXgpID0+IHtcbiAgICBsZXQgdHJlZVBhdGggPSBbLi4ucGFyZW50UGF0aCwgaW5kZXhdO1xuICAgIGxldCBpZCA9IHR5cGVvZiByb3V0ZS5pZCA9PT0gXCJzdHJpbmdcIiA/IHJvdXRlLmlkIDogdHJlZVBhdGguam9pbihcIi1cIik7XG4gICAgaW52YXJpYW50KHJvdXRlLmluZGV4ICE9PSB0cnVlIHx8ICFyb3V0ZS5jaGlsZHJlbiwgXCJDYW5ub3Qgc3BlY2lmeSBjaGlsZHJlbiBvbiBhbiBpbmRleCByb3V0ZVwiKTtcbiAgICBpbnZhcmlhbnQoIWFsbElkcy5oYXMoaWQpLCBcIkZvdW5kIGEgcm91dGUgaWQgY29sbGlzaW9uIG9uIGlkIFxcXCJcIiArIGlkICsgXCJcXFwiLiAgUm91dGUgXCIgKyBcImlkJ3MgbXVzdCBiZSBnbG9iYWxseSB1bmlxdWUgd2l0aGluIERhdGEgUm91dGVyIHVzYWdlc1wiKTtcbiAgICBhbGxJZHMuYWRkKGlkKTtcblxuICAgIGlmIChpc0luZGV4Um91dGUocm91dGUpKSB7XG4gICAgICBsZXQgaW5kZXhSb3V0ZSA9IF9leHRlbmRzKHt9LCByb3V0ZSwge1xuICAgICAgICBpZFxuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBpbmRleFJvdXRlO1xuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgcGF0aE9yTGF5b3V0Um91dGUgPSBfZXh0ZW5kcyh7fSwgcm91dGUsIHtcbiAgICAgICAgaWQsXG4gICAgICAgIGNoaWxkcmVuOiByb3V0ZS5jaGlsZHJlbiA/IGNvbnZlcnRSb3V0ZXNUb0RhdGFSb3V0ZXMocm91dGUuY2hpbGRyZW4sIHRyZWVQYXRoLCBhbGxJZHMpIDogdW5kZWZpbmVkXG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIHBhdGhPckxheW91dFJvdXRlO1xuICAgIH1cbiAgfSk7XG59XG4vKipcbiAqIE1hdGNoZXMgdGhlIGdpdmVuIHJvdXRlcyB0byBhIGxvY2F0aW9uIGFuZCByZXR1cm5zIHRoZSBtYXRjaCBkYXRhLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vZG9jcy9lbi92Ni91dGlscy9tYXRjaC1yb3V0ZXNcbiAqL1xuXG5mdW5jdGlvbiBtYXRjaFJvdXRlcyhyb3V0ZXMsIGxvY2F0aW9uQXJnLCBiYXNlbmFtZSkge1xuICBpZiAoYmFzZW5hbWUgPT09IHZvaWQgMCkge1xuICAgIGJhc2VuYW1lID0gXCIvXCI7XG4gIH1cblxuICBsZXQgbG9jYXRpb24gPSB0eXBlb2YgbG9jYXRpb25BcmcgPT09IFwic3RyaW5nXCIgPyBwYXJzZVBhdGgobG9jYXRpb25BcmcpIDogbG9jYXRpb25Bcmc7XG4gIGxldCBwYXRobmFtZSA9IHN0cmlwQmFzZW5hbWUobG9jYXRpb24ucGF0aG5hbWUgfHwgXCIvXCIsIGJhc2VuYW1lKTtcblxuICBpZiAocGF0aG5hbWUgPT0gbnVsbCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgbGV0IGJyYW5jaGVzID0gZmxhdHRlblJvdXRlcyhyb3V0ZXMpO1xuICByYW5rUm91dGVCcmFuY2hlcyhicmFuY2hlcyk7XG4gIGxldCBtYXRjaGVzID0gbnVsbDtcblxuICBmb3IgKGxldCBpID0gMDsgbWF0Y2hlcyA9PSBudWxsICYmIGkgPCBicmFuY2hlcy5sZW5ndGg7ICsraSkge1xuICAgIG1hdGNoZXMgPSBtYXRjaFJvdXRlQnJhbmNoKGJyYW5jaGVzW2ldLCAvLyBJbmNvbWluZyBwYXRobmFtZXMgYXJlIGdlbmVyYWxseSBlbmNvZGVkIGZyb20gZWl0aGVyIHdpbmRvdy5sb2NhdGlvblxuICAgIC8vIG9yIGZyb20gcm91dGVyLm5hdmlnYXRlLCBidXQgd2Ugd2FudCB0byBtYXRjaCBhZ2FpbnN0IHRoZSB1bmVuY29kZWRcbiAgICAvLyBwYXRocyBpbiB0aGUgcm91dGUgZGVmaW5pdGlvbnMuICBNZW1vcnkgcm91dGVyIGxvY2F0aW9ucyB3b24ndCBiZVxuICAgIC8vIGVuY29kZWQgaGVyZSBidXQgdGhlcmUgYWxzbyBzaG91bGRuJ3QgYmUgYW55dGhpbmcgdG8gZGVjb2RlIHNvIHRoaXNcbiAgICAvLyBzaG91bGQgYmUgYSBzYWZlIG9wZXJhdGlvbi4gIFRoaXMgYXZvaWRzIG5lZWRpbmcgbWF0Y2hSb3V0ZXMgdG8gYmVcbiAgICAvLyBoaXN0b3J5LWF3YXJlLlxuICAgIHNhZmVseURlY29kZVVSSShwYXRobmFtZSkpO1xuICB9XG5cbiAgcmV0dXJuIG1hdGNoZXM7XG59XG5cbmZ1bmN0aW9uIGZsYXR0ZW5Sb3V0ZXMocm91dGVzLCBicmFuY2hlcywgcGFyZW50c01ldGEsIHBhcmVudFBhdGgpIHtcbiAgaWYgKGJyYW5jaGVzID09PSB2b2lkIDApIHtcbiAgICBicmFuY2hlcyA9IFtdO1xuICB9XG5cbiAgaWYgKHBhcmVudHNNZXRhID09PSB2b2lkIDApIHtcbiAgICBwYXJlbnRzTWV0YSA9IFtdO1xuICB9XG5cbiAgaWYgKHBhcmVudFBhdGggPT09IHZvaWQgMCkge1xuICAgIHBhcmVudFBhdGggPSBcIlwiO1xuICB9XG5cbiAgcm91dGVzLmZvckVhY2goKHJvdXRlLCBpbmRleCkgPT4ge1xuICAgIGxldCBtZXRhID0ge1xuICAgICAgcmVsYXRpdmVQYXRoOiByb3V0ZS5wYXRoIHx8IFwiXCIsXG4gICAgICBjYXNlU2Vuc2l0aXZlOiByb3V0ZS5jYXNlU2Vuc2l0aXZlID09PSB0cnVlLFxuICAgICAgY2hpbGRyZW5JbmRleDogaW5kZXgsXG4gICAgICByb3V0ZVxuICAgIH07XG5cbiAgICBpZiAobWV0YS5yZWxhdGl2ZVBhdGguc3RhcnRzV2l0aChcIi9cIikpIHtcbiAgICAgIGludmFyaWFudChtZXRhLnJlbGF0aXZlUGF0aC5zdGFydHNXaXRoKHBhcmVudFBhdGgpLCBcIkFic29sdXRlIHJvdXRlIHBhdGggXFxcIlwiICsgbWV0YS5yZWxhdGl2ZVBhdGggKyBcIlxcXCIgbmVzdGVkIHVuZGVyIHBhdGggXCIgKyAoXCJcXFwiXCIgKyBwYXJlbnRQYXRoICsgXCJcXFwiIGlzIG5vdCB2YWxpZC4gQW4gYWJzb2x1dGUgY2hpbGQgcm91dGUgcGF0aCBcIikgKyBcIm11c3Qgc3RhcnQgd2l0aCB0aGUgY29tYmluZWQgcGF0aCBvZiBhbGwgaXRzIHBhcmVudCByb3V0ZXMuXCIpO1xuICAgICAgbWV0YS5yZWxhdGl2ZVBhdGggPSBtZXRhLnJlbGF0aXZlUGF0aC5zbGljZShwYXJlbnRQYXRoLmxlbmd0aCk7XG4gICAgfVxuXG4gICAgbGV0IHBhdGggPSBqb2luUGF0aHMoW3BhcmVudFBhdGgsIG1ldGEucmVsYXRpdmVQYXRoXSk7XG4gICAgbGV0IHJvdXRlc01ldGEgPSBwYXJlbnRzTWV0YS5jb25jYXQobWV0YSk7IC8vIEFkZCB0aGUgY2hpbGRyZW4gYmVmb3JlIGFkZGluZyB0aGlzIHJvdXRlIHRvIHRoZSBhcnJheSBzbyB3ZSB0cmF2ZXJzZSB0aGVcbiAgICAvLyByb3V0ZSB0cmVlIGRlcHRoLWZpcnN0IGFuZCBjaGlsZCByb3V0ZXMgYXBwZWFyIGJlZm9yZSB0aGVpciBwYXJlbnRzIGluXG4gICAgLy8gdGhlIFwiZmxhdHRlbmVkXCIgdmVyc2lvbi5cblxuICAgIGlmIChyb3V0ZS5jaGlsZHJlbiAmJiByb3V0ZS5jaGlsZHJlbi5sZW5ndGggPiAwKSB7XG4gICAgICBpbnZhcmlhbnQoIC8vIE91ciB0eXBlcyBrbm93IGJldHRlciwgYnV0IHJ1bnRpbWUgSlMgbWF5IG5vdCFcbiAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3JcbiAgICAgIHJvdXRlLmluZGV4ICE9PSB0cnVlLCBcIkluZGV4IHJvdXRlcyBtdXN0IG5vdCBoYXZlIGNoaWxkIHJvdXRlcy4gUGxlYXNlIHJlbW92ZSBcIiArIChcImFsbCBjaGlsZCByb3V0ZXMgZnJvbSByb3V0ZSBwYXRoIFxcXCJcIiArIHBhdGggKyBcIlxcXCIuXCIpKTtcbiAgICAgIGZsYXR0ZW5Sb3V0ZXMocm91dGUuY2hpbGRyZW4sIGJyYW5jaGVzLCByb3V0ZXNNZXRhLCBwYXRoKTtcbiAgICB9IC8vIFJvdXRlcyB3aXRob3V0IGEgcGF0aCBzaG91bGRuJ3QgZXZlciBtYXRjaCBieSB0aGVtc2VsdmVzIHVubGVzcyB0aGV5IGFyZVxuICAgIC8vIGluZGV4IHJvdXRlcywgc28gZG9uJ3QgYWRkIHRoZW0gdG8gdGhlIGxpc3Qgb2YgcG9zc2libGUgYnJhbmNoZXMuXG5cblxuICAgIGlmIChyb3V0ZS5wYXRoID09IG51bGwgJiYgIXJvdXRlLmluZGV4KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgYnJhbmNoZXMucHVzaCh7XG4gICAgICBwYXRoLFxuICAgICAgc2NvcmU6IGNvbXB1dGVTY29yZShwYXRoLCByb3V0ZS5pbmRleCksXG4gICAgICByb3V0ZXNNZXRhXG4gICAgfSk7XG4gIH0pO1xuICByZXR1cm4gYnJhbmNoZXM7XG59XG5cbmZ1bmN0aW9uIHJhbmtSb3V0ZUJyYW5jaGVzKGJyYW5jaGVzKSB7XG4gIGJyYW5jaGVzLnNvcnQoKGEsIGIpID0+IGEuc2NvcmUgIT09IGIuc2NvcmUgPyBiLnNjb3JlIC0gYS5zY29yZSAvLyBIaWdoZXIgc2NvcmUgZmlyc3RcbiAgOiBjb21wYXJlSW5kZXhlcyhhLnJvdXRlc01ldGEubWFwKG1ldGEgPT4gbWV0YS5jaGlsZHJlbkluZGV4KSwgYi5yb3V0ZXNNZXRhLm1hcChtZXRhID0+IG1ldGEuY2hpbGRyZW5JbmRleCkpKTtcbn1cblxuY29uc3QgcGFyYW1SZSA9IC9eOlxcdyskLztcbmNvbnN0IGR5bmFtaWNTZWdtZW50VmFsdWUgPSAzO1xuY29uc3QgaW5kZXhSb3V0ZVZhbHVlID0gMjtcbmNvbnN0IGVtcHR5U2VnbWVudFZhbHVlID0gMTtcbmNvbnN0IHN0YXRpY1NlZ21lbnRWYWx1ZSA9IDEwO1xuY29uc3Qgc3BsYXRQZW5hbHR5ID0gLTI7XG5cbmNvbnN0IGlzU3BsYXQgPSBzID0+IHMgPT09IFwiKlwiO1xuXG5mdW5jdGlvbiBjb21wdXRlU2NvcmUocGF0aCwgaW5kZXgpIHtcbiAgbGV0IHNlZ21lbnRzID0gcGF0aC5zcGxpdChcIi9cIik7XG4gIGxldCBpbml0aWFsU2NvcmUgPSBzZWdtZW50cy5sZW5ndGg7XG5cbiAgaWYgKHNlZ21lbnRzLnNvbWUoaXNTcGxhdCkpIHtcbiAgICBpbml0aWFsU2NvcmUgKz0gc3BsYXRQZW5hbHR5O1xuICB9XG5cbiAgaWYgKGluZGV4KSB7XG4gICAgaW5pdGlhbFNjb3JlICs9IGluZGV4Um91dGVWYWx1ZTtcbiAgfVxuXG4gIHJldHVybiBzZWdtZW50cy5maWx0ZXIocyA9PiAhaXNTcGxhdChzKSkucmVkdWNlKChzY29yZSwgc2VnbWVudCkgPT4gc2NvcmUgKyAocGFyYW1SZS50ZXN0KHNlZ21lbnQpID8gZHluYW1pY1NlZ21lbnRWYWx1ZSA6IHNlZ21lbnQgPT09IFwiXCIgPyBlbXB0eVNlZ21lbnRWYWx1ZSA6IHN0YXRpY1NlZ21lbnRWYWx1ZSksIGluaXRpYWxTY29yZSk7XG59XG5cbmZ1bmN0aW9uIGNvbXBhcmVJbmRleGVzKGEsIGIpIHtcbiAgbGV0IHNpYmxpbmdzID0gYS5sZW5ndGggPT09IGIubGVuZ3RoICYmIGEuc2xpY2UoMCwgLTEpLmV2ZXJ5KChuLCBpKSA9PiBuID09PSBiW2ldKTtcbiAgcmV0dXJuIHNpYmxpbmdzID8gLy8gSWYgdHdvIHJvdXRlcyBhcmUgc2libGluZ3MsIHdlIHNob3VsZCB0cnkgdG8gbWF0Y2ggdGhlIGVhcmxpZXIgc2libGluZ1xuICAvLyBmaXJzdC4gVGhpcyBhbGxvd3MgcGVvcGxlIHRvIGhhdmUgZmluZS1ncmFpbmVkIGNvbnRyb2wgb3ZlciB0aGUgbWF0Y2hpbmdcbiAgLy8gYmVoYXZpb3IgYnkgc2ltcGx5IHB1dHRpbmcgcm91dGVzIHdpdGggaWRlbnRpY2FsIHBhdGhzIGluIHRoZSBvcmRlciB0aGV5XG4gIC8vIHdhbnQgdGhlbSB0cmllZC5cbiAgYVthLmxlbmd0aCAtIDFdIC0gYltiLmxlbmd0aCAtIDFdIDogLy8gT3RoZXJ3aXNlLCBpdCBkb2Vzbid0IHJlYWxseSBtYWtlIHNlbnNlIHRvIHJhbmsgbm9uLXNpYmxpbmdzIGJ5IGluZGV4LFxuICAvLyBzbyB0aGV5IHNvcnQgZXF1YWxseS5cbiAgMDtcbn1cblxuZnVuY3Rpb24gbWF0Y2hSb3V0ZUJyYW5jaChicmFuY2gsIHBhdGhuYW1lKSB7XG4gIGxldCB7XG4gICAgcm91dGVzTWV0YVxuICB9ID0gYnJhbmNoO1xuICBsZXQgbWF0Y2hlZFBhcmFtcyA9IHt9O1xuICBsZXQgbWF0Y2hlZFBhdGhuYW1lID0gXCIvXCI7XG4gIGxldCBtYXRjaGVzID0gW107XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCByb3V0ZXNNZXRhLmxlbmd0aDsgKytpKSB7XG4gICAgbGV0IG1ldGEgPSByb3V0ZXNNZXRhW2ldO1xuICAgIGxldCBlbmQgPSBpID09PSByb3V0ZXNNZXRhLmxlbmd0aCAtIDE7XG4gICAgbGV0IHJlbWFpbmluZ1BhdGhuYW1lID0gbWF0Y2hlZFBhdGhuYW1lID09PSBcIi9cIiA/IHBhdGhuYW1lIDogcGF0aG5hbWUuc2xpY2UobWF0Y2hlZFBhdGhuYW1lLmxlbmd0aCkgfHwgXCIvXCI7XG4gICAgbGV0IG1hdGNoID0gbWF0Y2hQYXRoKHtcbiAgICAgIHBhdGg6IG1ldGEucmVsYXRpdmVQYXRoLFxuICAgICAgY2FzZVNlbnNpdGl2ZTogbWV0YS5jYXNlU2Vuc2l0aXZlLFxuICAgICAgZW5kXG4gICAgfSwgcmVtYWluaW5nUGF0aG5hbWUpO1xuICAgIGlmICghbWF0Y2gpIHJldHVybiBudWxsO1xuICAgIE9iamVjdC5hc3NpZ24obWF0Y2hlZFBhcmFtcywgbWF0Y2gucGFyYW1zKTtcbiAgICBsZXQgcm91dGUgPSBtZXRhLnJvdXRlO1xuICAgIG1hdGNoZXMucHVzaCh7XG4gICAgICAvLyBUT0RPOiBDYW4gdGhpcyBhcyBiZSBhdm9pZGVkP1xuICAgICAgcGFyYW1zOiBtYXRjaGVkUGFyYW1zLFxuICAgICAgcGF0aG5hbWU6IGpvaW5QYXRocyhbbWF0Y2hlZFBhdGhuYW1lLCBtYXRjaC5wYXRobmFtZV0pLFxuICAgICAgcGF0aG5hbWVCYXNlOiBub3JtYWxpemVQYXRobmFtZShqb2luUGF0aHMoW21hdGNoZWRQYXRobmFtZSwgbWF0Y2gucGF0aG5hbWVCYXNlXSkpLFxuICAgICAgcm91dGVcbiAgICB9KTtcblxuICAgIGlmIChtYXRjaC5wYXRobmFtZUJhc2UgIT09IFwiL1wiKSB7XG4gICAgICBtYXRjaGVkUGF0aG5hbWUgPSBqb2luUGF0aHMoW21hdGNoZWRQYXRobmFtZSwgbWF0Y2gucGF0aG5hbWVCYXNlXSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG1hdGNoZXM7XG59XG4vKipcbiAqIFJldHVybnMgYSBwYXRoIHdpdGggcGFyYW1zIGludGVycG9sYXRlZC5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2RvY3MvZW4vdjYvdXRpbHMvZ2VuZXJhdGUtcGF0aFxuICovXG5cblxuZnVuY3Rpb24gZ2VuZXJhdGVQYXRoKHBhdGgsIHBhcmFtcykge1xuICBpZiAocGFyYW1zID09PSB2b2lkIDApIHtcbiAgICBwYXJhbXMgPSB7fTtcbiAgfVxuXG4gIHJldHVybiBwYXRoLnJlcGxhY2UoLzooXFx3KykvZywgKF8sIGtleSkgPT4ge1xuICAgIGludmFyaWFudChwYXJhbXNba2V5XSAhPSBudWxsLCBcIk1pc3NpbmcgXFxcIjpcIiArIGtleSArIFwiXFxcIiBwYXJhbVwiKTtcbiAgICByZXR1cm4gcGFyYW1zW2tleV07XG4gIH0pLnJlcGxhY2UoLyhcXC8/KVxcKi8sIChfLCBwcmVmaXgsIF9fLCBzdHIpID0+IHtcbiAgICBjb25zdCBzdGFyID0gXCIqXCI7XG5cbiAgICBpZiAocGFyYW1zW3N0YXJdID09IG51bGwpIHtcbiAgICAgIC8vIElmIG5vIHNwbGF0IHdhcyBwcm92aWRlZCwgdHJpbSB0aGUgdHJhaWxpbmcgc2xhc2ggX3VubGVzc18gaXQnc1xuICAgICAgLy8gdGhlIGVudGlyZSBwYXRoXG4gICAgICByZXR1cm4gc3RyID09PSBcIi8qXCIgPyBcIi9cIiA6IFwiXCI7XG4gICAgfSAvLyBBcHBseSB0aGUgc3BsYXRcblxuXG4gICAgcmV0dXJuIFwiXCIgKyBwcmVmaXggKyBwYXJhbXNbc3Rhcl07XG4gIH0pO1xufVxuLyoqXG4gKiBQZXJmb3JtcyBwYXR0ZXJuIG1hdGNoaW5nIG9uIGEgVVJMIHBhdGhuYW1lIGFuZCByZXR1cm5zIGluZm9ybWF0aW9uIGFib3V0XG4gKiB0aGUgbWF0Y2guXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9kb2NzL2VuL3Y2L3V0aWxzL21hdGNoLXBhdGhcbiAqL1xuXG5mdW5jdGlvbiBtYXRjaFBhdGgocGF0dGVybiwgcGF0aG5hbWUpIHtcbiAgaWYgKHR5cGVvZiBwYXR0ZXJuID09PSBcInN0cmluZ1wiKSB7XG4gICAgcGF0dGVybiA9IHtcbiAgICAgIHBhdGg6IHBhdHRlcm4sXG4gICAgICBjYXNlU2Vuc2l0aXZlOiBmYWxzZSxcbiAgICAgIGVuZDogdHJ1ZVxuICAgIH07XG4gIH1cblxuICBsZXQgW21hdGNoZXIsIHBhcmFtTmFtZXNdID0gY29tcGlsZVBhdGgocGF0dGVybi5wYXRoLCBwYXR0ZXJuLmNhc2VTZW5zaXRpdmUsIHBhdHRlcm4uZW5kKTtcbiAgbGV0IG1hdGNoID0gcGF0aG5hbWUubWF0Y2gobWF0Y2hlcik7XG4gIGlmICghbWF0Y2gpIHJldHVybiBudWxsO1xuICBsZXQgbWF0Y2hlZFBhdGhuYW1lID0gbWF0Y2hbMF07XG4gIGxldCBwYXRobmFtZUJhc2UgPSBtYXRjaGVkUGF0aG5hbWUucmVwbGFjZSgvKC4pXFwvKyQvLCBcIiQxXCIpO1xuICBsZXQgY2FwdHVyZUdyb3VwcyA9IG1hdGNoLnNsaWNlKDEpO1xuICBsZXQgcGFyYW1zID0gcGFyYW1OYW1lcy5yZWR1Y2UoKG1lbW8sIHBhcmFtTmFtZSwgaW5kZXgpID0+IHtcbiAgICAvLyBXZSBuZWVkIHRvIGNvbXB1dGUgdGhlIHBhdGhuYW1lQmFzZSBoZXJlIHVzaW5nIHRoZSByYXcgc3BsYXQgdmFsdWVcbiAgICAvLyBpbnN0ZWFkIG9mIHVzaW5nIHBhcmFtc1tcIipcIl0gbGF0ZXIgYmVjYXVzZSBpdCB3aWxsIGJlIGRlY29kZWQgdGhlblxuICAgIGlmIChwYXJhbU5hbWUgPT09IFwiKlwiKSB7XG4gICAgICBsZXQgc3BsYXRWYWx1ZSA9IGNhcHR1cmVHcm91cHNbaW5kZXhdIHx8IFwiXCI7XG4gICAgICBwYXRobmFtZUJhc2UgPSBtYXRjaGVkUGF0aG5hbWUuc2xpY2UoMCwgbWF0Y2hlZFBhdGhuYW1lLmxlbmd0aCAtIHNwbGF0VmFsdWUubGVuZ3RoKS5yZXBsYWNlKC8oLilcXC8rJC8sIFwiJDFcIik7XG4gICAgfVxuXG4gICAgbWVtb1twYXJhbU5hbWVdID0gc2FmZWx5RGVjb2RlVVJJQ29tcG9uZW50KGNhcHR1cmVHcm91cHNbaW5kZXhdIHx8IFwiXCIsIHBhcmFtTmFtZSk7XG4gICAgcmV0dXJuIG1lbW87XG4gIH0sIHt9KTtcbiAgcmV0dXJuIHtcbiAgICBwYXJhbXMsXG4gICAgcGF0aG5hbWU6IG1hdGNoZWRQYXRobmFtZSxcbiAgICBwYXRobmFtZUJhc2UsXG4gICAgcGF0dGVyblxuICB9O1xufVxuXG5mdW5jdGlvbiBjb21waWxlUGF0aChwYXRoLCBjYXNlU2Vuc2l0aXZlLCBlbmQpIHtcbiAgaWYgKGNhc2VTZW5zaXRpdmUgPT09IHZvaWQgMCkge1xuICAgIGNhc2VTZW5zaXRpdmUgPSBmYWxzZTtcbiAgfVxuXG4gIGlmIChlbmQgPT09IHZvaWQgMCkge1xuICAgIGVuZCA9IHRydWU7XG4gIH1cblxuICB3YXJuaW5nKHBhdGggPT09IFwiKlwiIHx8ICFwYXRoLmVuZHNXaXRoKFwiKlwiKSB8fCBwYXRoLmVuZHNXaXRoKFwiLypcIiksIFwiUm91dGUgcGF0aCBcXFwiXCIgKyBwYXRoICsgXCJcXFwiIHdpbGwgYmUgdHJlYXRlZCBhcyBpZiBpdCB3ZXJlIFwiICsgKFwiXFxcIlwiICsgcGF0aC5yZXBsYWNlKC9cXCokLywgXCIvKlwiKSArIFwiXFxcIiBiZWNhdXNlIHRoZSBgKmAgY2hhcmFjdGVyIG11c3QgXCIpICsgXCJhbHdheXMgZm9sbG93IGEgYC9gIGluIHRoZSBwYXR0ZXJuLiBUbyBnZXQgcmlkIG9mIHRoaXMgd2FybmluZywgXCIgKyAoXCJwbGVhc2UgY2hhbmdlIHRoZSByb3V0ZSBwYXRoIHRvIFxcXCJcIiArIHBhdGgucmVwbGFjZSgvXFwqJC8sIFwiLypcIikgKyBcIlxcXCIuXCIpKTtcbiAgbGV0IHBhcmFtTmFtZXMgPSBbXTtcbiAgbGV0IHJlZ2V4cFNvdXJjZSA9IFwiXlwiICsgcGF0aC5yZXBsYWNlKC9cXC8qXFwqPyQvLCBcIlwiKSAvLyBJZ25vcmUgdHJhaWxpbmcgLyBhbmQgLyosIHdlJ2xsIGhhbmRsZSBpdCBiZWxvd1xuICAucmVwbGFjZSgvXlxcLyovLCBcIi9cIikgLy8gTWFrZSBzdXJlIGl0IGhhcyBhIGxlYWRpbmcgL1xuICAucmVwbGFjZSgvW1xcXFwuKiteJD97fXwoKVtcXF1dL2csIFwiXFxcXCQmXCIpIC8vIEVzY2FwZSBzcGVjaWFsIHJlZ2V4IGNoYXJzXG4gIC5yZXBsYWNlKC86KFxcdyspL2csIChfLCBwYXJhbU5hbWUpID0+IHtcbiAgICBwYXJhbU5hbWVzLnB1c2gocGFyYW1OYW1lKTtcbiAgICByZXR1cm4gXCIoW15cXFxcL10rKVwiO1xuICB9KTtcblxuICBpZiAocGF0aC5lbmRzV2l0aChcIipcIikpIHtcbiAgICBwYXJhbU5hbWVzLnB1c2goXCIqXCIpO1xuICAgIHJlZ2V4cFNvdXJjZSArPSBwYXRoID09PSBcIipcIiB8fCBwYXRoID09PSBcIi8qXCIgPyBcIiguKikkXCIgLy8gQWxyZWFkeSBtYXRjaGVkIHRoZSBpbml0aWFsIC8sIGp1c3QgbWF0Y2ggdGhlIHJlc3RcbiAgICA6IFwiKD86XFxcXC8oLispfFxcXFwvKikkXCI7IC8vIERvbid0IGluY2x1ZGUgdGhlIC8gaW4gcGFyYW1zW1wiKlwiXVxuICB9IGVsc2UgaWYgKGVuZCkge1xuICAgIC8vIFdoZW4gbWF0Y2hpbmcgdG8gdGhlIGVuZCwgaWdub3JlIHRyYWlsaW5nIHNsYXNoZXNcbiAgICByZWdleHBTb3VyY2UgKz0gXCJcXFxcLyokXCI7XG4gIH0gZWxzZSBpZiAocGF0aCAhPT0gXCJcIiAmJiBwYXRoICE9PSBcIi9cIikge1xuICAgIC8vIElmIG91ciBwYXRoIGlzIG5vbi1lbXB0eSBhbmQgY29udGFpbnMgYW55dGhpbmcgYmV5b25kIGFuIGluaXRpYWwgc2xhc2gsXG4gICAgLy8gdGhlbiB3ZSBoYXZlIF9zb21lXyBmb3JtIG9mIHBhdGggaW4gb3VyIHJlZ2V4IHNvIHdlIHNob3VsZCBleHBlY3QgdG9cbiAgICAvLyBtYXRjaCBvbmx5IGlmIHdlIGZpbmQgdGhlIGVuZCBvZiB0aGlzIHBhdGggc2VnbWVudC4gIExvb2sgZm9yIGFuIG9wdGlvbmFsXG4gICAgLy8gbm9uLWNhcHR1cmVkIHRyYWlsaW5nIHNsYXNoICh0byBtYXRjaCBhIHBvcnRpb24gb2YgdGhlIFVSTCkgb3IgdGhlIGVuZFxuICAgIC8vIG9mIHRoZSBwYXRoIChpZiB3ZSd2ZSBtYXRjaGVkIHRvIHRoZSBlbmQpLiAgV2UgdXNlZCB0byBkbyB0aGlzIHdpdGggYVxuICAgIC8vIHdvcmQgYm91bmRhcnkgYnV0IHRoYXQgZ2l2ZXMgZmFsc2UgcG9zaXRpdmVzIG9uIHJvdXRlcyBsaWtlXG4gICAgLy8gL3VzZXItcHJlZmVyZW5jZXMgc2luY2UgYC1gIGNvdW50cyBhcyBhIHdvcmQgYm91bmRhcnkuXG4gICAgcmVnZXhwU291cmNlICs9IFwiKD86KD89XFxcXC98JCkpXCI7XG4gIH0gZWxzZSA7XG5cbiAgbGV0IG1hdGNoZXIgPSBuZXcgUmVnRXhwKHJlZ2V4cFNvdXJjZSwgY2FzZVNlbnNpdGl2ZSA/IHVuZGVmaW5lZCA6IFwiaVwiKTtcbiAgcmV0dXJuIFttYXRjaGVyLCBwYXJhbU5hbWVzXTtcbn1cblxuZnVuY3Rpb24gc2FmZWx5RGVjb2RlVVJJKHZhbHVlKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGRlY29kZVVSSSh2YWx1ZSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgd2FybmluZyhmYWxzZSwgXCJUaGUgVVJMIHBhdGggXFxcIlwiICsgdmFsdWUgKyBcIlxcXCIgY291bGQgbm90IGJlIGRlY29kZWQgYmVjYXVzZSBpdCBpcyBpcyBhIFwiICsgXCJtYWxmb3JtZWQgVVJMIHNlZ21lbnQuIFRoaXMgaXMgcHJvYmFibHkgZHVlIHRvIGEgYmFkIHBlcmNlbnQgXCIgKyAoXCJlbmNvZGluZyAoXCIgKyBlcnJvciArIFwiKS5cIikpO1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBzYWZlbHlEZWNvZGVVUklDb21wb25lbnQodmFsdWUsIHBhcmFtTmFtZSkge1xuICB0cnkge1xuICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQodmFsdWUpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHdhcm5pbmcoZmFsc2UsIFwiVGhlIHZhbHVlIGZvciB0aGUgVVJMIHBhcmFtIFxcXCJcIiArIHBhcmFtTmFtZSArIFwiXFxcIiB3aWxsIG5vdCBiZSBkZWNvZGVkIGJlY2F1c2VcIiArIChcIiB0aGUgc3RyaW5nIFxcXCJcIiArIHZhbHVlICsgXCJcXFwiIGlzIGEgbWFsZm9ybWVkIFVSTCBzZWdtZW50LiBUaGlzIGlzIHByb2JhYmx5XCIpICsgKFwiIGR1ZSB0byBhIGJhZCBwZXJjZW50IGVuY29kaW5nIChcIiArIGVycm9yICsgXCIpLlwiKSk7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG59XG4vKipcbiAqIEBwcml2YXRlXG4gKi9cblxuXG5mdW5jdGlvbiBzdHJpcEJhc2VuYW1lKHBhdGhuYW1lLCBiYXNlbmFtZSkge1xuICBpZiAoYmFzZW5hbWUgPT09IFwiL1wiKSByZXR1cm4gcGF0aG5hbWU7XG5cbiAgaWYgKCFwYXRobmFtZS50b0xvd2VyQ2FzZSgpLnN0YXJ0c1dpdGgoYmFzZW5hbWUudG9Mb3dlckNhc2UoKSkpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfSAvLyBXZSB3YW50IHRvIGxlYXZlIHRyYWlsaW5nIHNsYXNoIGJlaGF2aW9yIGluIHRoZSB1c2VyJ3MgY29udHJvbCwgc28gaWYgdGhleVxuICAvLyBzcGVjaWZ5IGEgYmFzZW5hbWUgd2l0aCBhIHRyYWlsaW5nIHNsYXNoLCB3ZSBzaG91bGQgc3VwcG9ydCBpdFxuXG5cbiAgbGV0IHN0YXJ0SW5kZXggPSBiYXNlbmFtZS5lbmRzV2l0aChcIi9cIikgPyBiYXNlbmFtZS5sZW5ndGggLSAxIDogYmFzZW5hbWUubGVuZ3RoO1xuICBsZXQgbmV4dENoYXIgPSBwYXRobmFtZS5jaGFyQXQoc3RhcnRJbmRleCk7XG5cbiAgaWYgKG5leHRDaGFyICYmIG5leHRDaGFyICE9PSBcIi9cIikge1xuICAgIC8vIHBhdGhuYW1lIGRvZXMgbm90IHN0YXJ0IHdpdGggYmFzZW5hbWUvXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4gcGF0aG5hbWUuc2xpY2Uoc3RhcnRJbmRleCkgfHwgXCIvXCI7XG59XG5mdW5jdGlvbiBpbnZhcmlhbnQodmFsdWUsIG1lc3NhZ2UpIHtcbiAgaWYgKHZhbHVlID09PSBmYWxzZSB8fCB2YWx1ZSA9PT0gbnVsbCB8fCB0eXBlb2YgdmFsdWUgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gIH1cbn1cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiB3YXJuaW5nKGNvbmQsIG1lc3NhZ2UpIHtcbiAgaWYgKCFjb25kKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT09IFwidW5kZWZpbmVkXCIpIGNvbnNvbGUud2FybihtZXNzYWdlKTtcblxuICAgIHRyeSB7XG4gICAgICAvLyBXZWxjb21lIHRvIGRlYnVnZ2luZyBSZWFjdCBSb3V0ZXIhXG4gICAgICAvL1xuICAgICAgLy8gVGhpcyBlcnJvciBpcyB0aHJvd24gYXMgYSBjb252ZW5pZW5jZSBzbyB5b3UgY2FuIG1vcmUgZWFzaWx5XG4gICAgICAvLyBmaW5kIHRoZSBzb3VyY2UgZm9yIGEgd2FybmluZyB0aGF0IGFwcGVhcnMgaW4gdGhlIGNvbnNvbGUgYnlcbiAgICAgIC8vIGVuYWJsaW5nIFwicGF1c2Ugb24gZXhjZXB0aW9uc1wiIGluIHlvdXIgSmF2YVNjcmlwdCBkZWJ1Z2dlci5cbiAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWVtcHR5XG4gICAgfSBjYXRjaCAoZSkge31cbiAgfVxufVxuLyoqXG4gKiBSZXR1cm5zIGEgcmVzb2x2ZWQgcGF0aCBvYmplY3QgcmVsYXRpdmUgdG8gdGhlIGdpdmVuIHBhdGhuYW1lLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vZG9jcy9lbi92Ni91dGlscy9yZXNvbHZlLXBhdGhcbiAqL1xuXG5mdW5jdGlvbiByZXNvbHZlUGF0aCh0bywgZnJvbVBhdGhuYW1lKSB7XG4gIGlmIChmcm9tUGF0aG5hbWUgPT09IHZvaWQgMCkge1xuICAgIGZyb21QYXRobmFtZSA9IFwiL1wiO1xuICB9XG5cbiAgbGV0IHtcbiAgICBwYXRobmFtZTogdG9QYXRobmFtZSxcbiAgICBzZWFyY2ggPSBcIlwiLFxuICAgIGhhc2ggPSBcIlwiXG4gIH0gPSB0eXBlb2YgdG8gPT09IFwic3RyaW5nXCIgPyBwYXJzZVBhdGgodG8pIDogdG87XG4gIGxldCBwYXRobmFtZSA9IHRvUGF0aG5hbWUgPyB0b1BhdGhuYW1lLnN0YXJ0c1dpdGgoXCIvXCIpID8gdG9QYXRobmFtZSA6IHJlc29sdmVQYXRobmFtZSh0b1BhdGhuYW1lLCBmcm9tUGF0aG5hbWUpIDogZnJvbVBhdGhuYW1lO1xuICByZXR1cm4ge1xuICAgIHBhdGhuYW1lLFxuICAgIHNlYXJjaDogbm9ybWFsaXplU2VhcmNoKHNlYXJjaCksXG4gICAgaGFzaDogbm9ybWFsaXplSGFzaChoYXNoKVxuICB9O1xufVxuXG5mdW5jdGlvbiByZXNvbHZlUGF0aG5hbWUocmVsYXRpdmVQYXRoLCBmcm9tUGF0aG5hbWUpIHtcbiAgbGV0IHNlZ21lbnRzID0gZnJvbVBhdGhuYW1lLnJlcGxhY2UoL1xcLyskLywgXCJcIikuc3BsaXQoXCIvXCIpO1xuICBsZXQgcmVsYXRpdmVTZWdtZW50cyA9IHJlbGF0aXZlUGF0aC5zcGxpdChcIi9cIik7XG4gIHJlbGF0aXZlU2VnbWVudHMuZm9yRWFjaChzZWdtZW50ID0+IHtcbiAgICBpZiAoc2VnbWVudCA9PT0gXCIuLlwiKSB7XG4gICAgICAvLyBLZWVwIHRoZSByb290IFwiXCIgc2VnbWVudCBzbyB0aGUgcGF0aG5hbWUgc3RhcnRzIGF0IC9cbiAgICAgIGlmIChzZWdtZW50cy5sZW5ndGggPiAxKSBzZWdtZW50cy5wb3AoKTtcbiAgICB9IGVsc2UgaWYgKHNlZ21lbnQgIT09IFwiLlwiKSB7XG4gICAgICBzZWdtZW50cy5wdXNoKHNlZ21lbnQpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBzZWdtZW50cy5sZW5ndGggPiAxID8gc2VnbWVudHMuam9pbihcIi9cIikgOiBcIi9cIjtcbn1cblxuZnVuY3Rpb24gZ2V0SW52YWxpZFBhdGhFcnJvcihjaGFyLCBmaWVsZCwgZGVzdCwgcGF0aCkge1xuICByZXR1cm4gXCJDYW5ub3QgaW5jbHVkZSBhICdcIiArIGNoYXIgKyBcIicgY2hhcmFjdGVyIGluIGEgbWFudWFsbHkgc3BlY2lmaWVkIFwiICsgKFwiYHRvLlwiICsgZmllbGQgKyBcImAgZmllbGQgW1wiICsgSlNPTi5zdHJpbmdpZnkocGF0aCkgKyBcIl0uICBQbGVhc2Ugc2VwYXJhdGUgaXQgb3V0IHRvIHRoZSBcIikgKyAoXCJgdG8uXCIgKyBkZXN0ICsgXCJgIGZpZWxkLiBBbHRlcm5hdGl2ZWx5IHlvdSBtYXkgcHJvdmlkZSB0aGUgZnVsbCBwYXRoIGFzIFwiKSArIFwiYSBzdHJpbmcgaW4gPExpbmsgdG89XFxcIi4uLlxcXCI+IGFuZCB0aGUgcm91dGVyIHdpbGwgcGFyc2UgaXQgZm9yIHlvdS5cIjtcbn1cbi8qKlxuICogQHByaXZhdGVcbiAqXG4gKiBXaGVuIHByb2Nlc3NpbmcgcmVsYXRpdmUgbmF2aWdhdGlvbiB3ZSB3YW50IHRvIGlnbm9yZSBhbmNlc3RvciByb3V0ZXMgdGhhdFxuICogZG8gbm90IGNvbnRyaWJ1dGUgdG8gdGhlIHBhdGgsIHN1Y2ggdGhhdCBpbmRleC9wYXRobGVzcyBsYXlvdXQgcm91dGVzIGRvbid0XG4gKiBpbnRlcmZlcmUuXG4gKlxuICogRm9yIGV4YW1wbGUsIHdoZW4gbW92aW5nIGEgcm91dGUgZWxlbWVudCBpbnRvIGFuIGluZGV4IHJvdXRlIGFuZC9vciBhXG4gKiBwYXRobGVzcyBsYXlvdXQgcm91dGUsIHJlbGF0aXZlIGxpbmsgYmVoYXZpb3IgY29udGFpbmVkIHdpdGhpbiBzaG91bGQgc3RheVxuICogdGhlIHNhbWUuICBCb3RoIG9mIHRoZSBmb2xsb3dpbmcgZXhhbXBsZXMgc2hvdWxkIGxpbmsgYmFjayB0byB0aGUgcm9vdDpcbiAqXG4gKiAgIDxSb3V0ZSBwYXRoPVwiL1wiPlxuICogICAgIDxSb3V0ZSBwYXRoPVwiYWNjb3VudHNcIiBlbGVtZW50PXs8TGluayB0bz1cIi4uXCJ9PlxuICogICA8L1JvdXRlPlxuICpcbiAqICAgPFJvdXRlIHBhdGg9XCIvXCI+XG4gKiAgICAgPFJvdXRlIHBhdGg9XCJhY2NvdW50c1wiPlxuICogICAgICAgPFJvdXRlIGVsZW1lbnQ9ezxBY2NvdW50c0xheW91dCAvPn0+ICAgICAgIC8vIDwtLSBEb2VzIG5vdCBjb250cmlidXRlXG4gKiAgICAgICAgIDxSb3V0ZSBpbmRleCBlbGVtZW50PXs8TGluayB0bz1cIi4uXCJ9IC8+ICAvLyA8LS0gRG9lcyBub3QgY29udHJpYnV0ZVxuICogICAgICAgPC9Sb3V0ZVxuICogICAgIDwvUm91dGU+XG4gKiAgIDwvUm91dGU+XG4gKi9cblxuXG5mdW5jdGlvbiBnZXRQYXRoQ29udHJpYnV0aW5nTWF0Y2hlcyhtYXRjaGVzKSB7XG4gIHJldHVybiBtYXRjaGVzLmZpbHRlcigobWF0Y2gsIGluZGV4KSA9PiBpbmRleCA9PT0gMCB8fCBtYXRjaC5yb3V0ZS5wYXRoICYmIG1hdGNoLnJvdXRlLnBhdGgubGVuZ3RoID4gMCk7XG59XG4vKipcbiAqIEBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gcmVzb2x2ZVRvKHRvQXJnLCByb3V0ZVBhdGhuYW1lcywgbG9jYXRpb25QYXRobmFtZSwgaXNQYXRoUmVsYXRpdmUpIHtcbiAgaWYgKGlzUGF0aFJlbGF0aXZlID09PSB2b2lkIDApIHtcbiAgICBpc1BhdGhSZWxhdGl2ZSA9IGZhbHNlO1xuICB9XG5cbiAgbGV0IHRvO1xuXG4gIGlmICh0eXBlb2YgdG9BcmcgPT09IFwic3RyaW5nXCIpIHtcbiAgICB0byA9IHBhcnNlUGF0aCh0b0FyZyk7XG4gIH0gZWxzZSB7XG4gICAgdG8gPSBfZXh0ZW5kcyh7fSwgdG9BcmcpO1xuICAgIGludmFyaWFudCghdG8ucGF0aG5hbWUgfHwgIXRvLnBhdGhuYW1lLmluY2x1ZGVzKFwiP1wiKSwgZ2V0SW52YWxpZFBhdGhFcnJvcihcIj9cIiwgXCJwYXRobmFtZVwiLCBcInNlYXJjaFwiLCB0bykpO1xuICAgIGludmFyaWFudCghdG8ucGF0aG5hbWUgfHwgIXRvLnBhdGhuYW1lLmluY2x1ZGVzKFwiI1wiKSwgZ2V0SW52YWxpZFBhdGhFcnJvcihcIiNcIiwgXCJwYXRobmFtZVwiLCBcImhhc2hcIiwgdG8pKTtcbiAgICBpbnZhcmlhbnQoIXRvLnNlYXJjaCB8fCAhdG8uc2VhcmNoLmluY2x1ZGVzKFwiI1wiKSwgZ2V0SW52YWxpZFBhdGhFcnJvcihcIiNcIiwgXCJzZWFyY2hcIiwgXCJoYXNoXCIsIHRvKSk7XG4gIH1cblxuICBsZXQgaXNFbXB0eVBhdGggPSB0b0FyZyA9PT0gXCJcIiB8fCB0by5wYXRobmFtZSA9PT0gXCJcIjtcbiAgbGV0IHRvUGF0aG5hbWUgPSBpc0VtcHR5UGF0aCA/IFwiL1wiIDogdG8ucGF0aG5hbWU7XG4gIGxldCBmcm9tOyAvLyBSb3V0aW5nIGlzIHJlbGF0aXZlIHRvIHRoZSBjdXJyZW50IHBhdGhuYW1lIGlmIGV4cGxpY2l0bHkgcmVxdWVzdGVkLlxuICAvL1xuICAvLyBJZiBhIHBhdGhuYW1lIGlzIGV4cGxpY2l0bHkgcHJvdmlkZWQgaW4gYHRvYCwgaXQgc2hvdWxkIGJlIHJlbGF0aXZlIHRvIHRoZVxuICAvLyByb3V0ZSBjb250ZXh0LiBUaGlzIGlzIGV4cGxhaW5lZCBpbiBgTm90ZSBvbiBgPExpbmsgdG8+YCB2YWx1ZXNgIGluIG91clxuICAvLyBtaWdyYXRpb24gZ3VpZGUgZnJvbSB2NSBhcyBhIG1lYW5zIG9mIGRpc2FtYmlndWF0aW9uIGJldHdlZW4gYHRvYCB2YWx1ZXNcbiAgLy8gdGhhdCBiZWdpbiB3aXRoIGAvYCBhbmQgdGhvc2UgdGhhdCBkbyBub3QuIEhvd2V2ZXIsIHRoaXMgaXMgcHJvYmxlbWF0aWMgZm9yXG4gIC8vIGB0b2AgdmFsdWVzIHRoYXQgZG8gbm90IHByb3ZpZGUgYSBwYXRobmFtZS4gYHRvYCBjYW4gc2ltcGx5IGJlIGEgc2VhcmNoIG9yXG4gIC8vIGhhc2ggc3RyaW5nLCBpbiB3aGljaCBjYXNlIHdlIHNob3VsZCBhc3N1bWUgdGhhdCB0aGUgbmF2aWdhdGlvbiBpcyByZWxhdGl2ZVxuICAvLyB0byB0aGUgY3VycmVudCBsb2NhdGlvbidzIHBhdGhuYW1lIGFuZCAqbm90KiB0aGUgcm91dGUgcGF0aG5hbWUuXG5cbiAgaWYgKGlzUGF0aFJlbGF0aXZlIHx8IHRvUGF0aG5hbWUgPT0gbnVsbCkge1xuICAgIGZyb20gPSBsb2NhdGlvblBhdGhuYW1lO1xuICB9IGVsc2Uge1xuICAgIGxldCByb3V0ZVBhdGhuYW1lSW5kZXggPSByb3V0ZVBhdGhuYW1lcy5sZW5ndGggLSAxO1xuXG4gICAgaWYgKHRvUGF0aG5hbWUuc3RhcnRzV2l0aChcIi4uXCIpKSB7XG4gICAgICBsZXQgdG9TZWdtZW50cyA9IHRvUGF0aG5hbWUuc3BsaXQoXCIvXCIpOyAvLyBFYWNoIGxlYWRpbmcgLi4gc2VnbWVudCBtZWFucyBcImdvIHVwIG9uZSByb3V0ZVwiIGluc3RlYWQgb2YgXCJnbyB1cCBvbmVcbiAgICAgIC8vIFVSTCBzZWdtZW50XCIuICBUaGlzIGlzIGEga2V5IGRpZmZlcmVuY2UgZnJvbSBob3cgPGEgaHJlZj4gd29ya3MgYW5kIGFcbiAgICAgIC8vIG1ham9yIHJlYXNvbiB3ZSBjYWxsIHRoaXMgYSBcInRvXCIgdmFsdWUgaW5zdGVhZCBvZiBhIFwiaHJlZlwiLlxuXG4gICAgICB3aGlsZSAodG9TZWdtZW50c1swXSA9PT0gXCIuLlwiKSB7XG4gICAgICAgIHRvU2VnbWVudHMuc2hpZnQoKTtcbiAgICAgICAgcm91dGVQYXRobmFtZUluZGV4IC09IDE7XG4gICAgICB9XG5cbiAgICAgIHRvLnBhdGhuYW1lID0gdG9TZWdtZW50cy5qb2luKFwiL1wiKTtcbiAgICB9IC8vIElmIHRoZXJlIGFyZSBtb3JlIFwiLi5cIiBzZWdtZW50cyB0aGFuIHBhcmVudCByb3V0ZXMsIHJlc29sdmUgcmVsYXRpdmUgdG9cbiAgICAvLyB0aGUgcm9vdCAvIFVSTC5cblxuXG4gICAgZnJvbSA9IHJvdXRlUGF0aG5hbWVJbmRleCA+PSAwID8gcm91dGVQYXRobmFtZXNbcm91dGVQYXRobmFtZUluZGV4XSA6IFwiL1wiO1xuICB9XG5cbiAgbGV0IHBhdGggPSByZXNvbHZlUGF0aCh0bywgZnJvbSk7IC8vIEVuc3VyZSB0aGUgcGF0aG5hbWUgaGFzIGEgdHJhaWxpbmcgc2xhc2ggaWYgdGhlIG9yaWdpbmFsIFwidG9cIiBoYWQgb25lXG5cbiAgbGV0IGhhc0V4cGxpY2l0VHJhaWxpbmdTbGFzaCA9IHRvUGF0aG5hbWUgJiYgdG9QYXRobmFtZSAhPT0gXCIvXCIgJiYgdG9QYXRobmFtZS5lbmRzV2l0aChcIi9cIik7IC8vIE9yIGlmIHRoaXMgd2FzIGEgbGluayB0byB0aGUgY3VycmVudCBwYXRoIHdoaWNoIGhhcyBhIHRyYWlsaW5nIHNsYXNoXG5cbiAgbGV0IGhhc0N1cnJlbnRUcmFpbGluZ1NsYXNoID0gKGlzRW1wdHlQYXRoIHx8IHRvUGF0aG5hbWUgPT09IFwiLlwiKSAmJiBsb2NhdGlvblBhdGhuYW1lLmVuZHNXaXRoKFwiL1wiKTtcblxuICBpZiAoIXBhdGgucGF0aG5hbWUuZW5kc1dpdGgoXCIvXCIpICYmIChoYXNFeHBsaWNpdFRyYWlsaW5nU2xhc2ggfHwgaGFzQ3VycmVudFRyYWlsaW5nU2xhc2gpKSB7XG4gICAgcGF0aC5wYXRobmFtZSArPSBcIi9cIjtcbiAgfVxuXG4gIHJldHVybiBwYXRoO1xufVxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGdldFRvUGF0aG5hbWUodG8pIHtcbiAgLy8gRW1wdHkgc3RyaW5ncyBzaG91bGQgYmUgdHJlYXRlZCB0aGUgc2FtZSBhcyAvIHBhdGhzXG4gIHJldHVybiB0byA9PT0gXCJcIiB8fCB0by5wYXRobmFtZSA9PT0gXCJcIiA/IFwiL1wiIDogdHlwZW9mIHRvID09PSBcInN0cmluZ1wiID8gcGFyc2VQYXRoKHRvKS5wYXRobmFtZSA6IHRvLnBhdGhuYW1lO1xufVxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5cbmNvbnN0IGpvaW5QYXRocyA9IHBhdGhzID0+IHBhdGhzLmpvaW4oXCIvXCIpLnJlcGxhY2UoL1xcL1xcLysvZywgXCIvXCIpO1xuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5cbmNvbnN0IG5vcm1hbGl6ZVBhdGhuYW1lID0gcGF0aG5hbWUgPT4gcGF0aG5hbWUucmVwbGFjZSgvXFwvKyQvLCBcIlwiKS5yZXBsYWNlKC9eXFwvKi8sIFwiL1wiKTtcbi8qKlxuICogQHByaXZhdGVcbiAqL1xuXG5jb25zdCBub3JtYWxpemVTZWFyY2ggPSBzZWFyY2ggPT4gIXNlYXJjaCB8fCBzZWFyY2ggPT09IFwiP1wiID8gXCJcIiA6IHNlYXJjaC5zdGFydHNXaXRoKFwiP1wiKSA/IHNlYXJjaCA6IFwiP1wiICsgc2VhcmNoO1xuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5cbmNvbnN0IG5vcm1hbGl6ZUhhc2ggPSBoYXNoID0+ICFoYXNoIHx8IGhhc2ggPT09IFwiI1wiID8gXCJcIiA6IGhhc2guc3RhcnRzV2l0aChcIiNcIikgPyBoYXNoIDogXCIjXCIgKyBoYXNoO1xuLyoqXG4gKiBUaGlzIGlzIGEgc2hvcnRjdXQgZm9yIGNyZWF0aW5nIGBhcHBsaWNhdGlvbi9qc29uYCByZXNwb25zZXMuIENvbnZlcnRzIGBkYXRhYFxuICogdG8gSlNPTiBhbmQgc2V0cyB0aGUgYENvbnRlbnQtVHlwZWAgaGVhZGVyLlxuICovXG5cbmNvbnN0IGpzb24gPSBmdW5jdGlvbiBqc29uKGRhdGEsIGluaXQpIHtcbiAgaWYgKGluaXQgPT09IHZvaWQgMCkge1xuICAgIGluaXQgPSB7fTtcbiAgfVxuXG4gIGxldCByZXNwb25zZUluaXQgPSB0eXBlb2YgaW5pdCA9PT0gXCJudW1iZXJcIiA/IHtcbiAgICBzdGF0dXM6IGluaXRcbiAgfSA6IGluaXQ7XG4gIGxldCBoZWFkZXJzID0gbmV3IEhlYWRlcnMocmVzcG9uc2VJbml0LmhlYWRlcnMpO1xuXG4gIGlmICghaGVhZGVycy5oYXMoXCJDb250ZW50LVR5cGVcIikpIHtcbiAgICBoZWFkZXJzLnNldChcIkNvbnRlbnQtVHlwZVwiLCBcImFwcGxpY2F0aW9uL2pzb247IGNoYXJzZXQ9dXRmLThcIik7XG4gIH1cblxuICByZXR1cm4gbmV3IFJlc3BvbnNlKEpTT04uc3RyaW5naWZ5KGRhdGEpLCBfZXh0ZW5kcyh7fSwgcmVzcG9uc2VJbml0LCB7XG4gICAgaGVhZGVyc1xuICB9KSk7XG59O1xuY2xhc3MgQWJvcnRlZERlZmVycmVkRXJyb3IgZXh0ZW5kcyBFcnJvciB7fVxuY2xhc3MgRGVmZXJyZWREYXRhIHtcbiAgY29uc3RydWN0b3IoZGF0YSkge1xuICAgIHRoaXMucGVuZGluZ0tleXMgPSBuZXcgU2V0KCk7XG4gICAgdGhpcy5zdWJzY3JpYmVyID0gdW5kZWZpbmVkO1xuICAgIGludmFyaWFudChkYXRhICYmIHR5cGVvZiBkYXRhID09PSBcIm9iamVjdFwiICYmICFBcnJheS5pc0FycmF5KGRhdGEpLCBcImRlZmVyKCkgb25seSBhY2NlcHRzIHBsYWluIG9iamVjdHNcIik7IC8vIFNldCB1cCBhbiBBYm9ydENvbnRyb2xsZXIgKyBQcm9taXNlIHdlIGNhbiByYWNlIGFnYWluc3QgdG8gZXhpdCBlYXJseVxuICAgIC8vIGNhbmNlbGxhdGlvblxuXG4gICAgbGV0IHJlamVjdDtcbiAgICB0aGlzLmFib3J0UHJvbWlzZSA9IG5ldyBQcm9taXNlKChfLCByKSA9PiByZWplY3QgPSByKTtcbiAgICB0aGlzLmNvbnRyb2xsZXIgPSBuZXcgQWJvcnRDb250cm9sbGVyKCk7XG5cbiAgICBsZXQgb25BYm9ydCA9ICgpID0+IHJlamVjdChuZXcgQWJvcnRlZERlZmVycmVkRXJyb3IoXCJEZWZlcnJlZCBkYXRhIGFib3J0ZWRcIikpO1xuXG4gICAgdGhpcy51bmxpc3RlbkFib3J0U2lnbmFsID0gKCkgPT4gdGhpcy5jb250cm9sbGVyLnNpZ25hbC5yZW1vdmVFdmVudExpc3RlbmVyKFwiYWJvcnRcIiwgb25BYm9ydCk7XG5cbiAgICB0aGlzLmNvbnRyb2xsZXIuc2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCBvbkFib3J0KTtcbiAgICB0aGlzLmRhdGEgPSBPYmplY3QuZW50cmllcyhkYXRhKS5yZWR1Y2UoKGFjYywgX3JlZikgPT4ge1xuICAgICAgbGV0IFtrZXksIHZhbHVlXSA9IF9yZWY7XG4gICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihhY2MsIHtcbiAgICAgICAgW2tleV06IHRoaXMudHJhY2tQcm9taXNlKGtleSwgdmFsdWUpXG4gICAgICB9KTtcbiAgICB9LCB7fSk7XG4gIH1cblxuICB0cmFja1Byb21pc2Uoa2V5LCB2YWx1ZSkge1xuICAgIGlmICghKHZhbHVlIGluc3RhbmNlb2YgUHJvbWlzZSkpIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG5cbiAgICB0aGlzLnBlbmRpbmdLZXlzLmFkZChrZXkpOyAvLyBXZSBzdG9yZSBhIGxpdHRsZSB3cmFwcGVyIHByb21pc2UgdGhhdCB3aWxsIGJlIGV4dGVuZGVkIHdpdGhcbiAgICAvLyBfZGF0YS9fZXJyb3IgcHJvcHMgdXBvbiByZXNvbHZlL3JlamVjdFxuXG4gICAgbGV0IHByb21pc2UgPSBQcm9taXNlLnJhY2UoW3ZhbHVlLCB0aGlzLmFib3J0UHJvbWlzZV0pLnRoZW4oZGF0YSA9PiB0aGlzLm9uU2V0dGxlKHByb21pc2UsIGtleSwgbnVsbCwgZGF0YSksIGVycm9yID0+IHRoaXMub25TZXR0bGUocHJvbWlzZSwga2V5LCBlcnJvcikpOyAvLyBSZWdpc3RlciByZWplY3Rpb24gbGlzdGVuZXJzIHRvIGF2b2lkIHVuY2F1Z2h0IHByb21pc2UgcmVqZWN0aW9ucyBvblxuICAgIC8vIGVycm9ycyBvciBhYm9ydGVkIGRlZmVycmVkIHZhbHVlc1xuXG4gICAgcHJvbWlzZS5jYXRjaCgoKSA9PiB7fSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb21pc2UsIFwiX3RyYWNrZWRcIiwge1xuICAgICAgZ2V0OiAoKSA9PiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIHByb21pc2U7XG4gIH1cblxuICBvblNldHRsZShwcm9taXNlLCBrZXksIGVycm9yLCBkYXRhKSB7XG4gICAgaWYgKHRoaXMuY29udHJvbGxlci5zaWduYWwuYWJvcnRlZCAmJiBlcnJvciBpbnN0YW5jZW9mIEFib3J0ZWREZWZlcnJlZEVycm9yKSB7XG4gICAgICB0aGlzLnVubGlzdGVuQWJvcnRTaWduYWwoKTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm9taXNlLCBcIl9lcnJvclwiLCB7XG4gICAgICAgIGdldDogKCkgPT4gZXJyb3JcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTtcbiAgICB9XG5cbiAgICB0aGlzLnBlbmRpbmdLZXlzLmRlbGV0ZShrZXkpO1xuXG4gICAgaWYgKHRoaXMuZG9uZSkge1xuICAgICAgLy8gTm90aGluZyBsZWZ0IHRvIGFib3J0IVxuICAgICAgdGhpcy51bmxpc3RlbkFib3J0U2lnbmFsKCk7XG4gICAgfVxuXG4gICAgY29uc3Qgc3Vic2NyaWJlciA9IHRoaXMuc3Vic2NyaWJlcjtcblxuICAgIGlmIChlcnJvcikge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb21pc2UsIFwiX2Vycm9yXCIsIHtcbiAgICAgICAgZ2V0OiAoKSA9PiBlcnJvclxuICAgICAgfSk7XG4gICAgICBzdWJzY3JpYmVyICYmIHN1YnNjcmliZXIoZmFsc2UpO1xuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTtcbiAgICB9XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocHJvbWlzZSwgXCJfZGF0YVwiLCB7XG4gICAgICBnZXQ6ICgpID0+IGRhdGFcbiAgICB9KTtcbiAgICBzdWJzY3JpYmVyICYmIHN1YnNjcmliZXIoZmFsc2UpO1xuICAgIHJldHVybiBkYXRhO1xuICB9XG5cbiAgc3Vic2NyaWJlKGZuKSB7XG4gICAgdGhpcy5zdWJzY3JpYmVyID0gZm47XG4gIH1cblxuICBjYW5jZWwoKSB7XG4gICAgdGhpcy5jb250cm9sbGVyLmFib3J0KCk7XG4gICAgdGhpcy5wZW5kaW5nS2V5cy5mb3JFYWNoKCh2LCBrKSA9PiB0aGlzLnBlbmRpbmdLZXlzLmRlbGV0ZShrKSk7XG4gICAgbGV0IHN1YnNjcmliZXIgPSB0aGlzLnN1YnNjcmliZXI7XG4gICAgc3Vic2NyaWJlciAmJiBzdWJzY3JpYmVyKHRydWUpO1xuICB9XG5cbiAgYXN5bmMgcmVzb2x2ZURhdGEoc2lnbmFsKSB7XG4gICAgbGV0IGFib3J0ZWQgPSBmYWxzZTtcblxuICAgIGlmICghdGhpcy5kb25lKSB7XG4gICAgICBsZXQgb25BYm9ydCA9ICgpID0+IHRoaXMuY2FuY2VsKCk7XG5cbiAgICAgIHNpZ25hbC5hZGRFdmVudExpc3RlbmVyKFwiYWJvcnRcIiwgb25BYm9ydCk7XG4gICAgICBhYm9ydGVkID0gYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICAgIHRoaXMuc3Vic2NyaWJlKGFib3J0ZWQgPT4ge1xuICAgICAgICAgIHNpZ25hbC5yZW1vdmVFdmVudExpc3RlbmVyKFwiYWJvcnRcIiwgb25BYm9ydCk7XG5cbiAgICAgICAgICBpZiAoYWJvcnRlZCB8fCB0aGlzLmRvbmUpIHtcbiAgICAgICAgICAgIHJlc29sdmUoYWJvcnRlZCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBhYm9ydGVkO1xuICB9XG5cbiAgZ2V0IGRvbmUoKSB7XG4gICAgcmV0dXJuIHRoaXMucGVuZGluZ0tleXMuc2l6ZSA9PT0gMDtcbiAgfVxuXG4gIGdldCB1bndyYXBwZWREYXRhKCkge1xuICAgIGludmFyaWFudCh0aGlzLmRhdGEgIT09IG51bGwgJiYgdGhpcy5kb25lLCBcIkNhbiBvbmx5IHVud3JhcCBkYXRhIG9uIGluaXRpYWxpemVkIGFuZCBzZXR0bGVkIGRlZmVycmVkc1wiKTtcbiAgICByZXR1cm4gT2JqZWN0LmVudHJpZXModGhpcy5kYXRhKS5yZWR1Y2UoKGFjYywgX3JlZjIpID0+IHtcbiAgICAgIGxldCBba2V5LCB2YWx1ZV0gPSBfcmVmMjtcbiAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKGFjYywge1xuICAgICAgICBba2V5XTogdW53cmFwVHJhY2tlZFByb21pc2UodmFsdWUpXG4gICAgICB9KTtcbiAgICB9LCB7fSk7XG4gIH1cblxufVxuXG5mdW5jdGlvbiBpc1RyYWNrZWRQcm9taXNlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFByb21pc2UgJiYgdmFsdWUuX3RyYWNrZWQgPT09IHRydWU7XG59XG5cbmZ1bmN0aW9uIHVud3JhcFRyYWNrZWRQcm9taXNlKHZhbHVlKSB7XG4gIGlmICghaXNUcmFja2VkUHJvbWlzZSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxuICBpZiAodmFsdWUuX2Vycm9yKSB7XG4gICAgdGhyb3cgdmFsdWUuX2Vycm9yO1xuICB9XG5cbiAgcmV0dXJuIHZhbHVlLl9kYXRhO1xufVxuXG5mdW5jdGlvbiBkZWZlcihkYXRhKSB7XG4gIHJldHVybiBuZXcgRGVmZXJyZWREYXRhKGRhdGEpO1xufVxuLyoqXG4gKiBBIHJlZGlyZWN0IHJlc3BvbnNlLiBTZXRzIHRoZSBzdGF0dXMgY29kZSBhbmQgdGhlIGBMb2NhdGlvbmAgaGVhZGVyLlxuICogRGVmYXVsdHMgdG8gXCIzMDIgRm91bmRcIi5cbiAqL1xuXG5jb25zdCByZWRpcmVjdCA9IGZ1bmN0aW9uIHJlZGlyZWN0KHVybCwgaW5pdCkge1xuICBpZiAoaW5pdCA9PT0gdm9pZCAwKSB7XG4gICAgaW5pdCA9IDMwMjtcbiAgfVxuXG4gIGxldCByZXNwb25zZUluaXQgPSBpbml0O1xuXG4gIGlmICh0eXBlb2YgcmVzcG9uc2VJbml0ID09PSBcIm51bWJlclwiKSB7XG4gICAgcmVzcG9uc2VJbml0ID0ge1xuICAgICAgc3RhdHVzOiByZXNwb25zZUluaXRcbiAgICB9O1xuICB9IGVsc2UgaWYgKHR5cGVvZiByZXNwb25zZUluaXQuc3RhdHVzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgcmVzcG9uc2VJbml0LnN0YXR1cyA9IDMwMjtcbiAgfVxuXG4gIGxldCBoZWFkZXJzID0gbmV3IEhlYWRlcnMocmVzcG9uc2VJbml0LmhlYWRlcnMpO1xuICBoZWFkZXJzLnNldChcIkxvY2F0aW9uXCIsIHVybCk7XG4gIHJldHVybiBuZXcgUmVzcG9uc2UobnVsbCwgX2V4dGVuZHMoe30sIHJlc3BvbnNlSW5pdCwge1xuICAgIGhlYWRlcnNcbiAgfSkpO1xufTtcbi8qKlxuICogQHByaXZhdGVcbiAqIFV0aWxpdHkgY2xhc3Mgd2UgdXNlIHRvIGhvbGQgYXV0by11bndyYXBwZWQgNHh4LzV4eCBSZXNwb25zZSBib2RpZXNcbiAqL1xuXG5jbGFzcyBFcnJvclJlc3BvbnNlIHtcbiAgY29uc3RydWN0b3Ioc3RhdHVzLCBzdGF0dXNUZXh0LCBkYXRhKSB7XG4gICAgdGhpcy5zdGF0dXMgPSBzdGF0dXM7XG4gICAgdGhpcy5zdGF0dXNUZXh0ID0gc3RhdHVzVGV4dCB8fCBcIlwiO1xuICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gIH1cblxufVxuLyoqXG4gKiBDaGVjayBpZiB0aGUgZ2l2ZW4gZXJyb3IgaXMgYW4gRXJyb3JSZXNwb25zZSBnZW5lcmF0ZWQgZnJvbSBhIDR4eC81eHhcbiAqIFJlc3BvbnNlIHRocm93IGZyb20gYW4gYWN0aW9uL2xvYWRlclxuICovXG5cbmZ1bmN0aW9uIGlzUm91dGVFcnJvclJlc3BvbnNlKGUpIHtcbiAgcmV0dXJuIGUgaW5zdGFuY2VvZiBFcnJvclJlc3BvbnNlO1xufVxuXG5jb25zdCBJRExFX05BVklHQVRJT04gPSB7XG4gIHN0YXRlOiBcImlkbGVcIixcbiAgbG9jYXRpb246IHVuZGVmaW5lZCxcbiAgZm9ybU1ldGhvZDogdW5kZWZpbmVkLFxuICBmb3JtQWN0aW9uOiB1bmRlZmluZWQsXG4gIGZvcm1FbmNUeXBlOiB1bmRlZmluZWQsXG4gIGZvcm1EYXRhOiB1bmRlZmluZWRcbn07XG5jb25zdCBJRExFX0ZFVENIRVIgPSB7XG4gIHN0YXRlOiBcImlkbGVcIixcbiAgZGF0YTogdW5kZWZpbmVkLFxuICBmb3JtTWV0aG9kOiB1bmRlZmluZWQsXG4gIGZvcm1BY3Rpb246IHVuZGVmaW5lZCxcbiAgZm9ybUVuY1R5cGU6IHVuZGVmaW5lZCxcbiAgZm9ybURhdGE6IHVuZGVmaW5lZFxufTtcbmNvbnN0IGlzQnJvd3NlciA9IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgdHlwZW9mIHdpbmRvdy5kb2N1bWVudCAhPT0gXCJ1bmRlZmluZWRcIiAmJiB0eXBlb2Ygd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgIT09IFwidW5kZWZpbmVkXCI7XG5jb25zdCBpc1NlcnZlciA9ICFpc0Jyb3dzZXI7IC8vI2VuZHJlZ2lvblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vI3JlZ2lvbiBjcmVhdGVSb3V0ZXJcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbi8qKlxuICogQ3JlYXRlIGEgcm91dGVyIGFuZCBsaXN0ZW4gdG8gaGlzdG9yeSBQT1AgbmF2aWdhdGlvbnNcbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVSb3V0ZXIoaW5pdCkge1xuICBpbnZhcmlhbnQoaW5pdC5yb3V0ZXMubGVuZ3RoID4gMCwgXCJZb3UgbXVzdCBwcm92aWRlIGEgbm9uLWVtcHR5IHJvdXRlcyBhcnJheSB0byBjcmVhdGVSb3V0ZXJcIik7XG4gIGxldCBkYXRhUm91dGVzID0gY29udmVydFJvdXRlc1RvRGF0YVJvdXRlcyhpbml0LnJvdXRlcyk7IC8vIENsZWFudXAgZnVuY3Rpb24gZm9yIGhpc3RvcnlcblxuICBsZXQgdW5saXN0ZW5IaXN0b3J5ID0gbnVsbDsgLy8gRXh0ZXJuYWxseS1wcm92aWRlZCBmdW5jdGlvbnMgdG8gY2FsbCBvbiBhbGwgc3RhdGUgY2hhbmdlc1xuXG4gIGxldCBzdWJzY3JpYmVycyA9IG5ldyBTZXQoKTsgLy8gRXh0ZXJuYWxseS1wcm92aWRlZCBvYmplY3QgdG8gaG9sZCBzY3JvbGwgcmVzdG9yYXRpb24gbG9jYXRpb25zIGR1cmluZyByb3V0aW5nXG5cbiAgbGV0IHNhdmVkU2Nyb2xsUG9zaXRpb25zID0gbnVsbDsgLy8gRXh0ZXJuYWxseS1wcm92aWRlZCBmdW5jdGlvbiB0byBnZXQgc2Nyb2xsIHJlc3RvcmF0aW9uIGtleXNcblxuICBsZXQgZ2V0U2Nyb2xsUmVzdG9yYXRpb25LZXkgPSBudWxsOyAvLyBFeHRlcm5hbGx5LXByb3ZpZGVkIGZ1bmN0aW9uIHRvIGdldCBjdXJyZW50IHNjcm9sbCBwb3NpdGlvblxuXG4gIGxldCBnZXRTY3JvbGxQb3NpdGlvbiA9IG51bGw7IC8vIE9uZS10aW1lIGZsYWcgdG8gY29udHJvbCB0aGUgaW5pdGlhbCBoeWRyYXRpb24gc2Nyb2xsIHJlc3RvcmF0aW9uLiAgQmVjYXVzZVxuICAvLyB3ZSBkb24ndCBnZXQgdGhlIHNhdmVkIHBvc2l0aW9ucyBmcm9tIDxTY3JvbGxSZXN0b3JhdGlvbiAvPiB1bnRpbCBfYWZ0ZXJfXG4gIC8vIHRoZSBpbml0aWFsIHJlbmRlciwgd2UgbmVlZCB0byBtYW51YWxseSB0cmlnZ2VyIGEgc2VwYXJhdGUgdXBkYXRlU3RhdGUgdG9cbiAgLy8gc2VuZCBhbG9uZyB0aGUgcmVzdG9yZVNjcm9sbFBvc2l0aW9uXG5cbiAgbGV0IGluaXRpYWxTY3JvbGxSZXN0b3JlZCA9IGZhbHNlO1xuICBsZXQgaW5pdGlhbE1hdGNoZXMgPSBtYXRjaFJvdXRlcyhkYXRhUm91dGVzLCBpbml0Lmhpc3RvcnkubG9jYXRpb24sIGluaXQuYmFzZW5hbWUpO1xuICBsZXQgaW5pdGlhbEVycm9ycyA9IG51bGw7XG5cbiAgaWYgKGluaXRpYWxNYXRjaGVzID09IG51bGwpIHtcbiAgICAvLyBJZiB3ZSBkbyBub3QgbWF0Y2ggYSB1c2VyLXByb3ZpZGVkLXJvdXRlLCBmYWxsIGJhY2sgdG8gdGhlIHJvb3RcbiAgICAvLyB0byBhbGxvdyB0aGUgZXJyb3IgYm91bmRhcnkgdG8gdGFrZSBvdmVyXG4gICAgbGV0IHtcbiAgICAgIG1hdGNoZXMsXG4gICAgICByb3V0ZSxcbiAgICAgIGVycm9yXG4gICAgfSA9IGdldE5vdEZvdW5kTWF0Y2hlcyhkYXRhUm91dGVzKTtcbiAgICBpbml0aWFsTWF0Y2hlcyA9IG1hdGNoZXM7XG4gICAgaW5pdGlhbEVycm9ycyA9IHtcbiAgICAgIFtyb3V0ZS5pZF06IGVycm9yXG4gICAgfTtcbiAgfVxuXG4gIGxldCBpbml0aWFsaXplZCA9ICFpbml0aWFsTWF0Y2hlcy5zb21lKG0gPT4gbS5yb3V0ZS5sb2FkZXIpIHx8IGluaXQuaHlkcmF0aW9uRGF0YSAhPSBudWxsO1xuICBsZXQgcm91dGVyO1xuICBsZXQgc3RhdGUgPSB7XG4gICAgaGlzdG9yeUFjdGlvbjogaW5pdC5oaXN0b3J5LmFjdGlvbixcbiAgICBsb2NhdGlvbjogaW5pdC5oaXN0b3J5LmxvY2F0aW9uLFxuICAgIG1hdGNoZXM6IGluaXRpYWxNYXRjaGVzLFxuICAgIGluaXRpYWxpemVkLFxuICAgIG5hdmlnYXRpb246IElETEVfTkFWSUdBVElPTixcbiAgICByZXN0b3JlU2Nyb2xsUG9zaXRpb246IG51bGwsXG4gICAgcHJldmVudFNjcm9sbFJlc2V0OiBmYWxzZSxcbiAgICByZXZhbGlkYXRpb246IFwiaWRsZVwiLFxuICAgIGxvYWRlckRhdGE6IGluaXQuaHlkcmF0aW9uRGF0YSAmJiBpbml0Lmh5ZHJhdGlvbkRhdGEubG9hZGVyRGF0YSB8fCB7fSxcbiAgICBhY3Rpb25EYXRhOiBpbml0Lmh5ZHJhdGlvbkRhdGEgJiYgaW5pdC5oeWRyYXRpb25EYXRhLmFjdGlvbkRhdGEgfHwgbnVsbCxcbiAgICBlcnJvcnM6IGluaXQuaHlkcmF0aW9uRGF0YSAmJiBpbml0Lmh5ZHJhdGlvbkRhdGEuZXJyb3JzIHx8IGluaXRpYWxFcnJvcnMsXG4gICAgZmV0Y2hlcnM6IG5ldyBNYXAoKVxuICB9OyAvLyAtLSBTdGF0ZWZ1bCBpbnRlcm5hbCB2YXJpYWJsZXMgdG8gbWFuYWdlIG5hdmlnYXRpb25zIC0tXG4gIC8vIEN1cnJlbnQgbmF2aWdhdGlvbiBpbiBwcm9ncmVzcyAodG8gYmUgY29tbWl0dGVkIGluIGNvbXBsZXRlTmF2aWdhdGlvbilcblxuICBsZXQgcGVuZGluZ0FjdGlvbiA9IEFjdGlvbi5Qb3A7IC8vIFNob3VsZCB0aGUgY3VycmVudCBuYXZpZ2F0aW9uIHByZXZlbnQgdGhlIHNjcm9sbCByZXNldCBpZiBzY3JvbGwgY2Fubm90XG4gIC8vIGJlIHJlc3RvcmVkP1xuXG4gIGxldCBwZW5kaW5nUHJldmVudFNjcm9sbFJlc2V0ID0gZmFsc2U7IC8vIEFib3J0Q29udHJvbGxlciBmb3IgdGhlIGFjdGl2ZSBuYXZpZ2F0aW9uXG5cbiAgbGV0IHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlcjsgLy8gV2UgdXNlIHRoaXMgdG8gYXZvaWQgdG91Y2hpbmcgaGlzdG9yeSBpbiBjb21wbGV0ZU5hdmlnYXRpb24gaWYgYVxuICAvLyByZXZhbGlkYXRpb24gaXMgZW50aXJlbHkgdW5pbnRlcnJ1cHRlZFxuXG4gIGxldCBpc1VuaW50ZXJydXB0ZWRSZXZhbGlkYXRpb24gPSBmYWxzZTsgLy8gVXNlIHRoaXMgaW50ZXJuYWwgZmxhZyB0byBmb3JjZSByZXZhbGlkYXRpb24gb2YgYWxsIGxvYWRlcnM6XG4gIC8vICAtIHN1Ym1pc3Npb25zIChjb21wbGV0ZWQgb3IgaW50ZXJydXB0ZWQpXG4gIC8vICAtIHVzZVJldmFsaWRhdGUoKVxuICAvLyAgLSBYLVJlbWl4LVJldmFsaWRhdGUgKGZyb20gcmVkaXJlY3QpXG5cbiAgbGV0IGlzUmV2YWxpZGF0aW9uUmVxdWlyZWQgPSBmYWxzZTsgLy8gVXNlIHRoaXMgaW50ZXJuYWwgYXJyYXkgdG8gY2FwdHVyZSByb3V0ZXMgdGhhdCByZXF1aXJlIHJldmFsaWRhdGlvbiBkdWVcbiAgLy8gdG8gYSBjYW5jZWxsZWQgZGVmZXJyZWQgb24gYWN0aW9uIHN1Ym1pc3Npb25cblxuICBsZXQgY2FuY2VsbGVkRGVmZXJyZWRSb3V0ZXMgPSBbXTsgLy8gVXNlIHRoaXMgaW50ZXJuYWwgYXJyYXkgdG8gY2FwdHVyZSBmZXRjaGVyIGxvYWRzIHRoYXQgd2VyZSBjYW5jZWxsZWQgYnkgYW5cbiAgLy8gYWN0aW9uIG5hdmlnYXRpb24gYW5kIHJlcXVpcmUgcmV2YWxpZGF0aW9uXG5cbiAgbGV0IGNhbmNlbGxlZEZldGNoZXJMb2FkcyA9IFtdOyAvLyBBYm9ydENvbnRyb2xsZXJzIGZvciBhbnkgaW4tZmxpZ2h0IGZldGNoZXJzXG5cbiAgbGV0IGZldGNoQ29udHJvbGxlcnMgPSBuZXcgTWFwKCk7IC8vIFRyYWNrIGxvYWRzIGJhc2VkIG9uIHRoZSBvcmRlciBpbiB3aGljaCB0aGV5IHN0YXJ0ZWRcblxuICBsZXQgaW5jcmVtZW50aW5nTG9hZElkID0gMDsgLy8gVHJhY2sgdGhlIG91dHN0YW5kaW5nIHBlbmRpbmcgbmF2aWdhdGlvbiBkYXRhIGxvYWQgdG8gYmUgY29tcGFyZWQgYWdhaW5zdFxuICAvLyB0aGUgZ2xvYmFsbHkgaW5jcmVtZW50aW5nIGxvYWQgd2hlbiBhIGZldGNoZXIgbG9hZCBsYW5kcyBhZnRlciBhIGNvbXBsZXRlZFxuICAvLyBuYXZpZ2F0aW9uXG5cbiAgbGV0IHBlbmRpbmdOYXZpZ2F0aW9uTG9hZElkID0gLTE7IC8vIEZldGNoZXJzIHRoYXQgdHJpZ2dlcmVkIGRhdGEgcmVsb2FkcyBhcyBhIHJlc3VsdCBvZiB0aGVpciBhY3Rpb25zXG5cbiAgbGV0IGZldGNoUmVsb2FkSWRzID0gbmV3IE1hcCgpOyAvLyBGZXRjaGVycyB0aGF0IHRyaWdnZXJlZCByZWRpcmVjdCBuYXZpZ2F0aW9ucyBmcm9tIHRoZWlyIGFjdGlvbnNcblxuICBsZXQgZmV0Y2hSZWRpcmVjdElkcyA9IG5ldyBTZXQoKTsgLy8gTW9zdCByZWNlbnQgaHJlZi9tYXRjaCBmb3IgZmV0Y2hlci5sb2FkIGNhbGxzIGZvciBmZXRjaGVyc1xuXG4gIGxldCBmZXRjaExvYWRNYXRjaGVzID0gbmV3IE1hcCgpOyAvLyBTdG9yZSBEZWZlcnJlZERhdGEgaW5zdGFuY2VzIGZvciBhY3RpdmUgcm91dGUgbWF0Y2hlcy4gIFdoZW4gYVxuICAvLyByb3V0ZSBsb2FkZXIgcmV0dXJucyBkZWZlcigpIHdlIHN0aWNrIG9uZSBpbiBoZXJlLiAgVGhlbiwgd2hlbiBhIG5lc3RlZFxuICAvLyBwcm9taXNlIHJlc29sdmVzIHdlIHVwZGF0ZSBsb2FkZXJEYXRhLiAgSWYgYSBuZXcgbmF2aWdhdGlvbiBzdGFydHMgd2VcbiAgLy8gY2FuY2VsIGFjdGl2ZSBkZWZlcnJlZHMgZm9yIGVsaW1pbmF0ZWQgcm91dGVzLlxuXG4gIGxldCBhY3RpdmVEZWZlcnJlZHMgPSBuZXcgTWFwKCk7IC8vIEluaXRpYWxpemUgdGhlIHJvdXRlciwgYWxsIHNpZGUgZWZmZWN0cyBzaG91bGQgYmUga2lja2VkIG9mZiBmcm9tIGhlcmUuXG4gIC8vIEltcGxlbWVudGVkIGFzIGEgRmx1ZW50IEFQSSBmb3IgZWFzZSBvZjpcbiAgLy8gICBsZXQgcm91dGVyID0gY3JlYXRlUm91dGVyKGluaXQpLmluaXRpYWxpemUoKTtcblxuICBmdW5jdGlvbiBpbml0aWFsaXplKCkge1xuICAgIC8vIElmIGhpc3RvcnkgaW5mb3JtcyB1cyBvZiBhIFBPUCBuYXZpZ2F0aW9uLCBzdGFydCB0aGUgbmF2aWdhdGlvbiBidXQgZG8gbm90IHVwZGF0ZVxuICAgIC8vIHN0YXRlLiAgV2UnbGwgdXBkYXRlIG91ciBvd24gc3RhdGUgb25jZSB0aGUgbmF2aWdhdGlvbiBjb21wbGV0ZXNcbiAgICB1bmxpc3Rlbkhpc3RvcnkgPSBpbml0Lmhpc3RvcnkubGlzdGVuKF9yZWYgPT4ge1xuICAgICAgbGV0IHtcbiAgICAgICAgYWN0aW9uOiBoaXN0b3J5QWN0aW9uLFxuICAgICAgICBsb2NhdGlvblxuICAgICAgfSA9IF9yZWY7XG4gICAgICByZXR1cm4gc3RhcnROYXZpZ2F0aW9uKGhpc3RvcnlBY3Rpb24sIGxvY2F0aW9uKTtcbiAgICB9KTsgLy8gS2ljayBvZmYgaW5pdGlhbCBkYXRhIGxvYWQgaWYgbmVlZGVkLiAgVXNlIFBvcCB0byBhdm9pZCBtb2RpZnlpbmcgaGlzdG9yeVxuXG4gICAgaWYgKCFzdGF0ZS5pbml0aWFsaXplZCkge1xuICAgICAgc3RhcnROYXZpZ2F0aW9uKEFjdGlvbi5Qb3AsIHN0YXRlLmxvY2F0aW9uKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcm91dGVyO1xuICB9IC8vIENsZWFuIHVwIGEgcm91dGVyIGFuZCBpdCdzIHNpZGUgZWZmZWN0c1xuXG5cbiAgZnVuY3Rpb24gZGlzcG9zZSgpIHtcbiAgICBpZiAodW5saXN0ZW5IaXN0b3J5KSB7XG4gICAgICB1bmxpc3Rlbkhpc3RvcnkoKTtcbiAgICB9XG5cbiAgICBzdWJzY3JpYmVycy5jbGVhcigpO1xuICAgIHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlciAmJiBwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIuYWJvcnQoKTtcbiAgICBzdGF0ZS5mZXRjaGVycy5mb3JFYWNoKChfLCBrZXkpID0+IGRlbGV0ZUZldGNoZXIoa2V5KSk7XG4gIH0gLy8gU3Vic2NyaWJlIHRvIHN0YXRlIHVwZGF0ZXMgZm9yIHRoZSByb3V0ZXJcblxuXG4gIGZ1bmN0aW9uIHN1YnNjcmliZShmbikge1xuICAgIHN1YnNjcmliZXJzLmFkZChmbik7XG4gICAgcmV0dXJuICgpID0+IHN1YnNjcmliZXJzLmRlbGV0ZShmbik7XG4gIH0gLy8gVXBkYXRlIG91ciBzdGF0ZSBhbmQgbm90aWZ5IHRoZSBjYWxsaW5nIGNvbnRleHQgb2YgdGhlIGNoYW5nZVxuXG5cbiAgZnVuY3Rpb24gdXBkYXRlU3RhdGUobmV3U3RhdGUpIHtcbiAgICBzdGF0ZSA9IF9leHRlbmRzKHt9LCBzdGF0ZSwgbmV3U3RhdGUpO1xuICAgIHN1YnNjcmliZXJzLmZvckVhY2goc3Vic2NyaWJlciA9PiBzdWJzY3JpYmVyKHN0YXRlKSk7XG4gIH0gLy8gQ29tcGxldGUgYSBuYXZpZ2F0aW9uIHJldHVybmluZyB0aGUgc3RhdGUubmF2aWdhdGlvbiBiYWNrIHRvIHRoZSBJRExFX05BVklHQVRJT05cbiAgLy8gYW5kIHNldHRpbmcgc3RhdGUuW2hpc3RvcnlBY3Rpb24vbG9jYXRpb24vbWF0Y2hlc10gdG8gdGhlIG5ldyByb3V0ZS5cbiAgLy8gLSBMb2NhdGlvbiBpcyBhIHJlcXVpcmVkIHBhcmFtXG4gIC8vIC0gTmF2aWdhdGlvbiB3aWxsIGFsd2F5cyBiZSBzZXQgdG8gSURMRV9OQVZJR0FUSU9OXG4gIC8vIC0gQ2FuIHBhc3MgYW55IG90aGVyIHN0YXRlIGluIG5ld1N0YXRlXG5cblxuICBmdW5jdGlvbiBjb21wbGV0ZU5hdmlnYXRpb24obG9jYXRpb24sIG5ld1N0YXRlKSB7XG4gICAgdmFyIF9zdGF0ZSRuYXZpZ2F0aW9uJGZvcjtcblxuICAgIC8vIERlZHVjZSBpZiB3ZSdyZSBpbiBhIGxvYWRpbmcvYWN0aW9uUmVsb2FkIHN0YXRlOlxuICAgIC8vIC0gV2UgaGF2ZSBjb21taXR0ZWQgYWN0aW9uRGF0YSBpbiB0aGUgc3RvcmVcbiAgICAvLyAtIFRoZSBjdXJyZW50IG5hdmlnYXRpb24gd2FzIGEgc3VibWlzc2lvblxuICAgIC8vIC0gV2UncmUgcGFzdCB0aGUgc3VibWl0dGluZyBzdGF0ZSBhbmQgaW50byB0aGUgbG9hZGluZyBzdGF0ZVxuICAgIC8vIC0gVGhlIGxvY2F0aW9uIHdlJ3ZlIGZpbmlzaGVkIGxvYWRpbmcgaXMgZGlmZmVyZW50IGZyb20gdGhlIHN1Ym1pc3Npb25cbiAgICAvLyAgIGxvY2F0aW9uLCBpbmRpY2F0aW5nIHdlIHJlZGlyZWN0ZWQgZnJvbSB0aGUgYWN0aW9uIChhdm9pZHMgZmFsc2VcbiAgICAvLyAgIHBvc2l0aXZlcyBmb3IgbG9hZGluZy9zdWJtaXNzaW9uUmVkaXJlY3Qgd2hlbiBhY3Rpb25EYXRhIHJldHVybmVkXG4gICAgLy8gICBvbiBhIHByaW9yIHN1Ym1pc3Npb24pXG4gICAgbGV0IGlzQWN0aW9uUmVsb2FkID0gc3RhdGUuYWN0aW9uRGF0YSAhPSBudWxsICYmIHN0YXRlLm5hdmlnYXRpb24uZm9ybU1ldGhvZCAhPSBudWxsICYmIHN0YXRlLm5hdmlnYXRpb24uc3RhdGUgPT09IFwibG9hZGluZ1wiICYmICgoX3N0YXRlJG5hdmlnYXRpb24kZm9yID0gc3RhdGUubmF2aWdhdGlvbi5mb3JtQWN0aW9uKSA9PSBudWxsID8gdm9pZCAwIDogX3N0YXRlJG5hdmlnYXRpb24kZm9yLnNwbGl0KFwiP1wiKVswXSkgPT09IGxvY2F0aW9uLnBhdGhuYW1lOyAvLyBBbHdheXMgcHJlc2VydmUgYW55IGV4aXN0aW5nIGxvYWRlckRhdGEgZnJvbSByZS11c2VkIHJvdXRlc1xuXG4gICAgbGV0IG5ld0xvYWRlckRhdGEgPSBuZXdTdGF0ZS5sb2FkZXJEYXRhID8ge1xuICAgICAgbG9hZGVyRGF0YTogbWVyZ2VMb2FkZXJEYXRhKHN0YXRlLmxvYWRlckRhdGEsIG5ld1N0YXRlLmxvYWRlckRhdGEsIG5ld1N0YXRlLm1hdGNoZXMgfHwgW10pXG4gICAgfSA6IHt9O1xuICAgIHVwZGF0ZVN0YXRlKF9leHRlbmRzKHt9LCBpc0FjdGlvblJlbG9hZCA/IHt9IDoge1xuICAgICAgYWN0aW9uRGF0YTogbnVsbFxuICAgIH0sIG5ld1N0YXRlLCBuZXdMb2FkZXJEYXRhLCB7XG4gICAgICBoaXN0b3J5QWN0aW9uOiBwZW5kaW5nQWN0aW9uLFxuICAgICAgbG9jYXRpb24sXG4gICAgICBpbml0aWFsaXplZDogdHJ1ZSxcbiAgICAgIG5hdmlnYXRpb246IElETEVfTkFWSUdBVElPTixcbiAgICAgIHJldmFsaWRhdGlvbjogXCJpZGxlXCIsXG4gICAgICAvLyBEb24ndCByZXN0b3JlIG9uIHN1Ym1pc3Npb24gbmF2aWdhdGlvbnNcbiAgICAgIHJlc3RvcmVTY3JvbGxQb3NpdGlvbjogc3RhdGUubmF2aWdhdGlvbi5mb3JtRGF0YSA/IGZhbHNlIDogZ2V0U2F2ZWRTY3JvbGxQb3NpdGlvbihsb2NhdGlvbiwgbmV3U3RhdGUubWF0Y2hlcyB8fCBzdGF0ZS5tYXRjaGVzKSxcbiAgICAgIHByZXZlbnRTY3JvbGxSZXNldDogcGVuZGluZ1ByZXZlbnRTY3JvbGxSZXNldFxuICAgIH0pKTtcblxuICAgIGlmIChpc1VuaW50ZXJydXB0ZWRSZXZhbGlkYXRpb24pIDsgZWxzZSBpZiAocGVuZGluZ0FjdGlvbiA9PT0gQWN0aW9uLlBvcCkgOyBlbHNlIGlmIChwZW5kaW5nQWN0aW9uID09PSBBY3Rpb24uUHVzaCkge1xuICAgICAgaW5pdC5oaXN0b3J5LnB1c2gobG9jYXRpb24sIGxvY2F0aW9uLnN0YXRlKTtcbiAgICB9IGVsc2UgaWYgKHBlbmRpbmdBY3Rpb24gPT09IEFjdGlvbi5SZXBsYWNlKSB7XG4gICAgICBpbml0Lmhpc3RvcnkucmVwbGFjZShsb2NhdGlvbiwgbG9jYXRpb24uc3RhdGUpO1xuICAgIH0gLy8gUmVzZXQgc3RhdGVmdWwgbmF2aWdhdGlvbiB2YXJzXG5cblxuICAgIHBlbmRpbmdBY3Rpb24gPSBBY3Rpb24uUG9wO1xuICAgIHBlbmRpbmdQcmV2ZW50U2Nyb2xsUmVzZXQgPSBmYWxzZTtcbiAgICBpc1VuaW50ZXJydXB0ZWRSZXZhbGlkYXRpb24gPSBmYWxzZTtcbiAgICBpc1JldmFsaWRhdGlvblJlcXVpcmVkID0gZmFsc2U7XG4gICAgY2FuY2VsbGVkRGVmZXJyZWRSb3V0ZXMgPSBbXTtcbiAgICBjYW5jZWxsZWRGZXRjaGVyTG9hZHMgPSBbXTtcbiAgfSAvLyBUcmlnZ2VyIGEgbmF2aWdhdGlvbiBldmVudCwgd2hpY2ggY2FuIGVpdGhlciBiZSBhIG51bWVyaWNhbCBQT1Agb3IgYSBQVVNIXG4gIC8vIHJlcGxhY2Ugd2l0aCBhbiBvcHRpb25hbCBzdWJtaXNzaW9uXG5cblxuICBhc3luYyBmdW5jdGlvbiBuYXZpZ2F0ZSh0bywgb3B0cykge1xuICAgIGlmICh0eXBlb2YgdG8gPT09IFwibnVtYmVyXCIpIHtcbiAgICAgIGluaXQuaGlzdG9yeS5nbyh0byk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbGV0IHtcbiAgICAgIHBhdGgsXG4gICAgICBzdWJtaXNzaW9uLFxuICAgICAgZXJyb3JcbiAgICB9ID0gbm9ybWFsaXplTmF2aWdhdGVPcHRpb25zKHRvLCBvcHRzKTtcbiAgICBsZXQgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihzdGF0ZS5sb2NhdGlvbiwgcGF0aCwgb3B0cyAmJiBvcHRzLnN0YXRlKTsgLy8gV2hlbiB1c2luZyBuYXZpZ2F0ZSBhcyBhIFBVU0gvUkVQTEFDRSB3ZSBhcmVuJ3QgcmVhZGluZyBhbiBhbHJlYWR5LWVuY29kZWRcbiAgICAvLyBVUkwgZnJvbSB3aW5kb3cubG9jYXRpb24sIHNvIHdlIG5lZWQgdG8gZW5jb2RlIGl0IGhlcmUgc28gdGhlIGJlaGF2aW9yXG4gICAgLy8gcmVtYWlucyB0aGUgc2FtZSBhcyBQT1AgYW5kIG5vbi1kYXRhLXJvdXRlciB1c2FnZXMuICBuZXcgVVJMKCkgZG9lcyBhbGxcbiAgICAvLyB0aGUgc2FtZSBlbmNvZGluZyB3ZSdkIGdldCBmcm9tIGEgaGlzdG9yeS5wdXNoU3RhdGUvd2luZG93LmxvY2F0aW9uIHJlYWRcbiAgICAvLyB3aXRob3V0IGhhdmluZyB0byB0b3VjaCBoaXN0b3J5XG5cbiAgICBsb2NhdGlvbiA9IGluaXQuaGlzdG9yeS5lbmNvZGVMb2NhdGlvbihsb2NhdGlvbik7XG4gICAgbGV0IGhpc3RvcnlBY3Rpb24gPSAob3B0cyAmJiBvcHRzLnJlcGxhY2UpID09PSB0cnVlIHx8IHN1Ym1pc3Npb24gIT0gbnVsbCA/IEFjdGlvbi5SZXBsYWNlIDogQWN0aW9uLlB1c2g7XG4gICAgbGV0IHByZXZlbnRTY3JvbGxSZXNldCA9IG9wdHMgJiYgXCJwcmV2ZW50U2Nyb2xsUmVzZXRcIiBpbiBvcHRzID8gb3B0cy5wcmV2ZW50U2Nyb2xsUmVzZXQgPT09IHRydWUgOiB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIGF3YWl0IHN0YXJ0TmF2aWdhdGlvbihoaXN0b3J5QWN0aW9uLCBsb2NhdGlvbiwge1xuICAgICAgc3VibWlzc2lvbixcbiAgICAgIC8vIFNlbmQgdGhyb3VnaCB0aGUgZm9ybURhdGEgc2VyaWFsaXphdGlvbiBlcnJvciBpZiB3ZSBoYXZlIG9uZSBzbyB3ZSBjYW5cbiAgICAgIC8vIHJlbmRlciBhdCB0aGUgcmlnaHQgZXJyb3IgYm91bmRhcnkgYWZ0ZXIgd2UgbWF0Y2ggcm91dGVzXG4gICAgICBwZW5kaW5nRXJyb3I6IGVycm9yLFxuICAgICAgcHJldmVudFNjcm9sbFJlc2V0LFxuICAgICAgcmVwbGFjZTogb3B0cyAmJiBvcHRzLnJlcGxhY2VcbiAgICB9KTtcbiAgfSAvLyBSZXZhbGlkYXRlIGFsbCBjdXJyZW50IGxvYWRlcnMuICBJZiBhIG5hdmlnYXRpb24gaXMgaW4gcHJvZ3Jlc3Mgb3IgaWYgdGhpc1xuICAvLyBpcyBpbnRlcnJ1cHRlZCBieSBhIG5hdmlnYXRpb24sIGFsbG93IHRoaXMgdG8gXCJzdWNjZWVkXCIgYnkgY2FsbGluZyBhbGxcbiAgLy8gbG9hZGVycyBkdXJpbmcgdGhlIG5leHQgbG9hZGVyIHJvdW5kXG5cblxuICBmdW5jdGlvbiByZXZhbGlkYXRlKCkge1xuICAgIGludGVycnVwdEFjdGl2ZUxvYWRzKCk7XG4gICAgdXBkYXRlU3RhdGUoe1xuICAgICAgcmV2YWxpZGF0aW9uOiBcImxvYWRpbmdcIlxuICAgIH0pOyAvLyBJZiB3ZSdyZSBjdXJyZW50bHkgc3VibWl0dGluZyBhbiBhY3Rpb24sIHdlIGRvbid0IG5lZWQgdG8gc3RhcnQgYSBuZXdcbiAgICAvLyBuYXZpZ2F0aW9uLCB3ZSdsbCBqdXN0IGxldCB0aGUgZm9sbG93IHVwIGxvYWRlciBleGVjdXRpb24gY2FsbCBhbGwgbG9hZGVyc1xuXG4gICAgaWYgKHN0YXRlLm5hdmlnYXRpb24uc3RhdGUgPT09IFwic3VibWl0dGluZ1wiKSB7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBJZiB3ZSdyZSBjdXJyZW50bHkgaW4gYW4gaWRsZSBzdGF0ZSwgc3RhcnQgYSBuZXcgbmF2aWdhdGlvbiBmb3IgdGhlIGN1cnJlbnRcbiAgICAvLyBhY3Rpb24vbG9jYXRpb24gYW5kIG1hcmsgaXQgYXMgdW5pbnRlcnJ1cHRlZCwgd2hpY2ggd2lsbCBza2lwIHRoZSBoaXN0b3J5XG4gICAgLy8gdXBkYXRlIGluIGNvbXBsZXRlTmF2aWdhdGlvblxuXG5cbiAgICBpZiAoc3RhdGUubmF2aWdhdGlvbi5zdGF0ZSA9PT0gXCJpZGxlXCIpIHtcbiAgICAgIHN0YXJ0TmF2aWdhdGlvbihzdGF0ZS5oaXN0b3J5QWN0aW9uLCBzdGF0ZS5sb2NhdGlvbiwge1xuICAgICAgICBzdGFydFVuaW50ZXJydXB0ZWRSZXZhbGlkYXRpb246IHRydWVcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gT3RoZXJ3aXNlLCBpZiB3ZSdyZSBjdXJyZW50bHkgaW4gYSBsb2FkaW5nIHN0YXRlLCBqdXN0IHN0YXJ0IGEgbmV3XG4gICAgLy8gbmF2aWdhdGlvbiB0byB0aGUgbmF2aWdhdGlvbi5sb2NhdGlvbiBidXQgZG8gbm90IHRyaWdnZXIgYW4gdW5pbnRlcnJ1cHRlZFxuICAgIC8vIHJldmFsaWRhdGlvbiBzbyB0aGF0IGhpc3RvcnkgY29ycmVjdGx5IHVwZGF0ZXMgb25jZSB0aGUgbmF2aWdhdGlvbiBjb21wbGV0ZXNcblxuXG4gICAgc3RhcnROYXZpZ2F0aW9uKHBlbmRpbmdBY3Rpb24gfHwgc3RhdGUuaGlzdG9yeUFjdGlvbiwgc3RhdGUubmF2aWdhdGlvbi5sb2NhdGlvbiwge1xuICAgICAgb3ZlcnJpZGVOYXZpZ2F0aW9uOiBzdGF0ZS5uYXZpZ2F0aW9uXG4gICAgfSk7XG4gIH0gLy8gU3RhcnQgYSBuYXZpZ2F0aW9uIHRvIHRoZSBnaXZlbiBhY3Rpb24vbG9jYXRpb24uICBDYW4gb3B0aW9uYWxseSBwcm92aWRlIGFcbiAgLy8gb3ZlcnJpZGVOYXZpZ2F0aW9uIHdoaWNoIHdpbGwgb3ZlcnJpZGUgdGhlIG5vcm1hbExvYWQgaW4gdGhlIGNhc2Ugb2YgYSByZWRpcmVjdFxuICAvLyBuYXZpZ2F0aW9uXG5cblxuICBhc3luYyBmdW5jdGlvbiBzdGFydE5hdmlnYXRpb24oaGlzdG9yeUFjdGlvbiwgbG9jYXRpb24sIG9wdHMpIHtcbiAgICAvLyBBYm9ydCBhbnkgaW4tcHJvZ3Jlc3MgbmF2aWdhdGlvbnMgYW5kIHN0YXJ0IGEgbmV3IG9uZS4gVW5zZXQgYW55IG9uZ29pbmdcbiAgICAvLyB1bmludGVycnVwdGVkIHJldmFsaWRhdGlvbnMgdW5sZXNzIHRvbGQgb3RoZXJ3aXNlLCBzaW5jZSB3ZSB3YW50IHRoaXNcbiAgICAvLyBuZXcgbmF2aWdhdGlvbiB0byB1cGRhdGUgaGlzdG9yeSBub3JtYWxseVxuICAgIHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlciAmJiBwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIuYWJvcnQoKTtcbiAgICBwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIgPSBudWxsO1xuICAgIHBlbmRpbmdBY3Rpb24gPSBoaXN0b3J5QWN0aW9uO1xuICAgIGlzVW5pbnRlcnJ1cHRlZFJldmFsaWRhdGlvbiA9IChvcHRzICYmIG9wdHMuc3RhcnRVbmludGVycnVwdGVkUmV2YWxpZGF0aW9uKSA9PT0gdHJ1ZTsgLy8gU2F2ZSB0aGUgY3VycmVudCBzY3JvbGwgcG9zaXRpb24gZXZlcnkgdGltZSB3ZSBzdGFydCBhIG5ldyBuYXZpZ2F0aW9uLFxuICAgIC8vIGFuZCB0cmFjayB3aGV0aGVyIHdlIHNob3VsZCByZXNldCBzY3JvbGwgb24gY29tcGxldGlvblxuXG4gICAgc2F2ZVNjcm9sbFBvc2l0aW9uKHN0YXRlLmxvY2F0aW9uLCBzdGF0ZS5tYXRjaGVzKTtcbiAgICBwZW5kaW5nUHJldmVudFNjcm9sbFJlc2V0ID0gKG9wdHMgJiYgb3B0cy5wcmV2ZW50U2Nyb2xsUmVzZXQpID09PSB0cnVlO1xuICAgIGxldCBsb2FkaW5nTmF2aWdhdGlvbiA9IG9wdHMgJiYgb3B0cy5vdmVycmlkZU5hdmlnYXRpb247XG4gICAgbGV0IG1hdGNoZXMgPSBtYXRjaFJvdXRlcyhkYXRhUm91dGVzLCBsb2NhdGlvbiwgaW5pdC5iYXNlbmFtZSk7IC8vIFNob3J0IGNpcmN1aXQgd2l0aCBhIDQwNCBvbiB0aGUgcm9vdCBlcnJvciBib3VuZGFyeSBpZiB3ZSBtYXRjaCBub3RoaW5nXG5cbiAgICBpZiAoIW1hdGNoZXMpIHtcbiAgICAgIGxldCB7XG4gICAgICAgIG1hdGNoZXM6IG5vdEZvdW5kTWF0Y2hlcyxcbiAgICAgICAgcm91dGUsXG4gICAgICAgIGVycm9yXG4gICAgICB9ID0gZ2V0Tm90Rm91bmRNYXRjaGVzKGRhdGFSb3V0ZXMpOyAvLyBDYW5jZWwgYWxsIHBlbmRpbmcgZGVmZXJyZWQgb24gNDA0cyBzaW5jZSB3ZSBkb24ndCBrZWVwIGFueSByb3V0ZXNcblxuICAgICAgY2FuY2VsQWN0aXZlRGVmZXJyZWRzKCk7XG4gICAgICBjb21wbGV0ZU5hdmlnYXRpb24obG9jYXRpb24sIHtcbiAgICAgICAgbWF0Y2hlczogbm90Rm91bmRNYXRjaGVzLFxuICAgICAgICBsb2FkZXJEYXRhOiB7fSxcbiAgICAgICAgZXJyb3JzOiB7XG4gICAgICAgICAgW3JvdXRlLmlkXTogZXJyb3JcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBTaG9ydCBjaXJjdWl0IGlmIGl0J3Mgb25seSBhIGhhc2ggY2hhbmdlXG5cblxuICAgIGlmIChpc0hhc2hDaGFuZ2VPbmx5KHN0YXRlLmxvY2F0aW9uLCBsb2NhdGlvbikpIHtcbiAgICAgIGNvbXBsZXRlTmF2aWdhdGlvbihsb2NhdGlvbiwge1xuICAgICAgICBtYXRjaGVzXG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIENyZWF0ZSBhIGNvbnRyb2xsZXIvUmVxdWVzdCBmb3IgdGhpcyBuYXZpZ2F0aW9uXG5cblxuICAgIHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlciA9IG5ldyBBYm9ydENvbnRyb2xsZXIoKTtcbiAgICBsZXQgcmVxdWVzdCA9IGNyZWF0ZVJlcXVlc3QobG9jYXRpb24sIHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlci5zaWduYWwsIG9wdHMgJiYgb3B0cy5zdWJtaXNzaW9uKTtcbiAgICBsZXQgcGVuZGluZ0FjdGlvbkRhdGE7XG4gICAgbGV0IHBlbmRpbmdFcnJvcjtcblxuICAgIGlmIChvcHRzICYmIG9wdHMucGVuZGluZ0Vycm9yKSB7XG4gICAgICAvLyBJZiB3ZSBoYXZlIGEgcGVuZGluZ0Vycm9yLCBpdCBtZWFucyB0aGUgdXNlciBhdHRlbXB0ZWQgYSBHRVQgc3VibWlzc2lvblxuICAgICAgLy8gd2l0aCBiaW5hcnkgRm9ybURhdGEgc28gYXNzaWduIGhlcmUgYW5kIHNraXAgdG8gaGFuZGxlTG9hZGVycy4gIFRoYXRcbiAgICAgIC8vIHdheSB3ZSBoYW5kbGUgY2FsbGluZyBsb2FkZXJzIGFib3ZlIHRoZSBib3VuZGFyeSBldGMuICBJdCdzIG5vdCByZWFsbHlcbiAgICAgIC8vIGRpZmZlcmVudCBmcm9tIGFuIGFjdGlvbkVycm9yIGluIHRoYXQgc2Vuc2UuXG4gICAgICBwZW5kaW5nRXJyb3IgPSB7XG4gICAgICAgIFtmaW5kTmVhcmVzdEJvdW5kYXJ5KG1hdGNoZXMpLnJvdXRlLmlkXTogb3B0cy5wZW5kaW5nRXJyb3JcbiAgICAgIH07XG4gICAgfSBlbHNlIGlmIChvcHRzICYmIG9wdHMuc3VibWlzc2lvbikge1xuICAgICAgLy8gQ2FsbCBhY3Rpb24gaWYgd2UgcmVjZWl2ZWQgYW4gYWN0aW9uIHN1Ym1pc3Npb25cbiAgICAgIGxldCBhY3Rpb25PdXRwdXQgPSBhd2FpdCBoYW5kbGVBY3Rpb24ocmVxdWVzdCwgbG9jYXRpb24sIG9wdHMuc3VibWlzc2lvbiwgbWF0Y2hlcywge1xuICAgICAgICByZXBsYWNlOiBvcHRzLnJlcGxhY2VcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoYWN0aW9uT3V0cHV0LnNob3J0Q2lyY3VpdGVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgcGVuZGluZ0FjdGlvbkRhdGEgPSBhY3Rpb25PdXRwdXQucGVuZGluZ0FjdGlvbkRhdGE7XG4gICAgICBwZW5kaW5nRXJyb3IgPSBhY3Rpb25PdXRwdXQucGVuZGluZ0FjdGlvbkVycm9yO1xuXG4gICAgICBsZXQgbmF2aWdhdGlvbiA9IF9leHRlbmRzKHtcbiAgICAgICAgc3RhdGU6IFwibG9hZGluZ1wiLFxuICAgICAgICBsb2NhdGlvblxuICAgICAgfSwgb3B0cy5zdWJtaXNzaW9uKTtcblxuICAgICAgbG9hZGluZ05hdmlnYXRpb24gPSBuYXZpZ2F0aW9uO1xuICAgIH0gLy8gQ2FsbCBsb2FkZXJzXG5cblxuICAgIGxldCB7XG4gICAgICBzaG9ydENpcmN1aXRlZCxcbiAgICAgIGxvYWRlckRhdGEsXG4gICAgICBlcnJvcnNcbiAgICB9ID0gYXdhaXQgaGFuZGxlTG9hZGVycyhyZXF1ZXN0LCBsb2NhdGlvbiwgbWF0Y2hlcywgbG9hZGluZ05hdmlnYXRpb24sIG9wdHMgJiYgb3B0cy5zdWJtaXNzaW9uLCBvcHRzICYmIG9wdHMucmVwbGFjZSwgcGVuZGluZ0FjdGlvbkRhdGEsIHBlbmRpbmdFcnJvcik7XG5cbiAgICBpZiAoc2hvcnRDaXJjdWl0ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIENsZWFuIHVwIG5vdyB0aGF0IHRoZSBhY3Rpb24vbG9hZGVycyBoYXZlIGNvbXBsZXRlZC4gIERvbid0IGNsZWFuIHVwIGlmXG4gICAgLy8gd2Ugc2hvcnQgY2lyY3VpdGVkIGJlY2F1c2UgcGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyIHdpbGwgaGF2ZSBhbHJlYWR5XG4gICAgLy8gYmVlbiBhc3NpZ25lZCB0byBhIG5ldyBjb250cm9sbGVyIGZvciB0aGUgbmV4dCBuYXZpZ2F0aW9uXG5cblxuICAgIHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlciA9IG51bGw7XG4gICAgY29tcGxldGVOYXZpZ2F0aW9uKGxvY2F0aW9uLCB7XG4gICAgICBtYXRjaGVzLFxuICAgICAgbG9hZGVyRGF0YSxcbiAgICAgIGVycm9yc1xuICAgIH0pO1xuICB9IC8vIENhbGwgdGhlIGFjdGlvbiBtYXRjaGVkIGJ5IHRoZSBsZWFmIHJvdXRlIGZvciB0aGlzIG5hdmlnYXRpb24gYW5kIGhhbmRsZVxuICAvLyByZWRpcmVjdHMvZXJyb3JzXG5cblxuICBhc3luYyBmdW5jdGlvbiBoYW5kbGVBY3Rpb24ocmVxdWVzdCwgbG9jYXRpb24sIHN1Ym1pc3Npb24sIG1hdGNoZXMsIG9wdHMpIHtcbiAgICBpbnRlcnJ1cHRBY3RpdmVMb2FkcygpOyAvLyBQdXQgdXMgaW4gYSBzdWJtaXR0aW5nIHN0YXRlXG5cbiAgICBsZXQgbmF2aWdhdGlvbiA9IF9leHRlbmRzKHtcbiAgICAgIHN0YXRlOiBcInN1Ym1pdHRpbmdcIixcbiAgICAgIGxvY2F0aW9uXG4gICAgfSwgc3VibWlzc2lvbik7XG5cbiAgICB1cGRhdGVTdGF0ZSh7XG4gICAgICBuYXZpZ2F0aW9uXG4gICAgfSk7IC8vIENhbGwgb3VyIGFjdGlvbiBhbmQgZ2V0IHRoZSByZXN1bHRcblxuICAgIGxldCByZXN1bHQ7XG4gICAgbGV0IGFjdGlvbk1hdGNoID0gZ2V0VGFyZ2V0TWF0Y2gobWF0Y2hlcywgbG9jYXRpb24pO1xuXG4gICAgaWYgKCFhY3Rpb25NYXRjaC5yb3V0ZS5hY3Rpb24pIHtcbiAgICAgIHJlc3VsdCA9IGdldE1ldGhvZE5vdEFsbG93ZWRSZXN1bHQobG9jYXRpb24pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHQgPSBhd2FpdCBjYWxsTG9hZGVyT3JBY3Rpb24oXCJhY3Rpb25cIiwgcmVxdWVzdCwgYWN0aW9uTWF0Y2gsIG1hdGNoZXMsIHJvdXRlci5iYXNlbmFtZSk7XG5cbiAgICAgIGlmIChyZXF1ZXN0LnNpZ25hbC5hYm9ydGVkKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgc2hvcnRDaXJjdWl0ZWQ6IHRydWVcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoaXNSZWRpcmVjdFJlc3VsdChyZXN1bHQpKSB7XG4gICAgICBsZXQgcmVkaXJlY3ROYXZpZ2F0aW9uID0gX2V4dGVuZHMoe1xuICAgICAgICBzdGF0ZTogXCJsb2FkaW5nXCIsXG4gICAgICAgIGxvY2F0aW9uOiBjcmVhdGVMb2NhdGlvbihzdGF0ZS5sb2NhdGlvbiwgcmVzdWx0LmxvY2F0aW9uKVxuICAgICAgfSwgc3VibWlzc2lvbik7XG5cbiAgICAgIGF3YWl0IHN0YXJ0UmVkaXJlY3ROYXZpZ2F0aW9uKHJlc3VsdCwgcmVkaXJlY3ROYXZpZ2F0aW9uLCBvcHRzICYmIG9wdHMucmVwbGFjZSk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzaG9ydENpcmN1aXRlZDogdHJ1ZVxuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAoaXNFcnJvclJlc3VsdChyZXN1bHQpKSB7XG4gICAgICAvLyBTdG9yZSBvZmYgdGhlIHBlbmRpbmcgZXJyb3IgLSB3ZSB1c2UgaXQgdG8gZGV0ZXJtaW5lIHdoaWNoIGxvYWRlcnNcbiAgICAgIC8vIHRvIGNhbGwgYW5kIHdpbGwgY29tbWl0IGl0IHdoZW4gd2UgY29tcGxldGUgdGhlIG5hdmlnYXRpb25cbiAgICAgIGxldCBib3VuZGFyeU1hdGNoID0gZmluZE5lYXJlc3RCb3VuZGFyeShtYXRjaGVzLCBhY3Rpb25NYXRjaC5yb3V0ZS5pZCk7IC8vIEJ5IGRlZmF1bHQsIGFsbCBzdWJtaXNzaW9ucyBhcmUgUkVQTEFDRSBuYXZpZ2F0aW9ucywgYnV0IGlmIHRoZVxuICAgICAgLy8gYWN0aW9uIHRocmV3IGFuIGVycm9yIHRoYXQnbGwgYmUgcmVuZGVyZWQgaW4gYW4gZXJyb3JFbGVtZW50LCB3ZSBmYWxsXG4gICAgICAvLyBiYWNrIHRvIFBVU0ggc28gdGhhdCB0aGUgdXNlciBjYW4gdXNlIHRoZSBiYWNrIGJ1dHRvbiB0byBnZXQgYmFjayB0b1xuICAgICAgLy8gdGhlIHByZS1zdWJtaXNzaW9uIGZvcm0gbG9jYXRpb24gdG8gdHJ5IGFnYWluXG5cbiAgICAgIGlmICgob3B0cyAmJiBvcHRzLnJlcGxhY2UpICE9PSB0cnVlKSB7XG4gICAgICAgIHBlbmRpbmdBY3Rpb24gPSBBY3Rpb24uUHVzaDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcGVuZGluZ0FjdGlvbkVycm9yOiB7XG4gICAgICAgICAgW2JvdW5kYXJ5TWF0Y2gucm91dGUuaWRdOiByZXN1bHQuZXJyb3JcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAoaXNEZWZlcnJlZFJlc3VsdChyZXN1bHQpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJkZWZlcigpIGlzIG5vdCBzdXBwb3J0ZWQgaW4gYWN0aW9uc1wiKTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgcGVuZGluZ0FjdGlvbkRhdGE6IHtcbiAgICAgICAgW2FjdGlvbk1hdGNoLnJvdXRlLmlkXTogcmVzdWx0LmRhdGFcbiAgICAgIH1cbiAgICB9O1xuICB9IC8vIENhbGwgYWxsIGFwcGxpY2FibGUgbG9hZGVycyBmb3IgdGhlIGdpdmVuIG1hdGNoZXMsIGhhbmRsaW5nIHJlZGlyZWN0cyxcbiAgLy8gZXJyb3JzLCBldGMuXG5cblxuICBhc3luYyBmdW5jdGlvbiBoYW5kbGVMb2FkZXJzKHJlcXVlc3QsIGxvY2F0aW9uLCBtYXRjaGVzLCBvdmVycmlkZU5hdmlnYXRpb24sIHN1Ym1pc3Npb24sIHJlcGxhY2UsIHBlbmRpbmdBY3Rpb25EYXRhLCBwZW5kaW5nRXJyb3IpIHtcbiAgICAvLyBGaWd1cmUgb3V0IHRoZSByaWdodCBuYXZpZ2F0aW9uIHdlIHdhbnQgdG8gdXNlIGZvciBkYXRhIGxvYWRpbmdcbiAgICBsZXQgbG9hZGluZ05hdmlnYXRpb24gPSBvdmVycmlkZU5hdmlnYXRpb247XG5cbiAgICBpZiAoIWxvYWRpbmdOYXZpZ2F0aW9uKSB7XG4gICAgICBsZXQgbmF2aWdhdGlvbiA9IHtcbiAgICAgICAgc3RhdGU6IFwibG9hZGluZ1wiLFxuICAgICAgICBsb2NhdGlvbixcbiAgICAgICAgZm9ybU1ldGhvZDogdW5kZWZpbmVkLFxuICAgICAgICBmb3JtQWN0aW9uOiB1bmRlZmluZWQsXG4gICAgICAgIGZvcm1FbmNUeXBlOiB1bmRlZmluZWQsXG4gICAgICAgIGZvcm1EYXRhOiB1bmRlZmluZWRcbiAgICAgIH07XG4gICAgICBsb2FkaW5nTmF2aWdhdGlvbiA9IG5hdmlnYXRpb247XG4gICAgfVxuXG4gICAgbGV0IFttYXRjaGVzVG9Mb2FkLCByZXZhbGlkYXRpbmdGZXRjaGVyc10gPSBnZXRNYXRjaGVzVG9Mb2FkKHN0YXRlLCBtYXRjaGVzLCBzdWJtaXNzaW9uLCBsb2NhdGlvbiwgaXNSZXZhbGlkYXRpb25SZXF1aXJlZCwgY2FuY2VsbGVkRGVmZXJyZWRSb3V0ZXMsIGNhbmNlbGxlZEZldGNoZXJMb2FkcywgcGVuZGluZ0FjdGlvbkRhdGEsIHBlbmRpbmdFcnJvciwgZmV0Y2hMb2FkTWF0Y2hlcyk7IC8vIENhbmNlbCBwZW5kaW5nIGRlZmVycmVkcyBmb3Igbm8tbG9uZ2VyLW1hdGNoZWQgcm91dGVzIG9yIHJvdXRlcyB3ZSdyZVxuICAgIC8vIGFib3V0IHRvIHJlbG9hZC4gIE5vdGUgdGhhdCBpZiB0aGlzIGlzIGFuIGFjdGlvbiByZWxvYWQgd2Ugd291bGQgaGF2ZVxuICAgIC8vIGFscmVhZHkgY2FuY2VsbGVkIGFsbCBwZW5kaW5nIGRlZmVycmVkcyBzbyB0aGlzIHdvdWxkIGJlIGEgbm8tb3BcblxuICAgIGNhbmNlbEFjdGl2ZURlZmVycmVkcyhyb3V0ZUlkID0+ICEobWF0Y2hlcyAmJiBtYXRjaGVzLnNvbWUobSA9PiBtLnJvdXRlLmlkID09PSByb3V0ZUlkKSkgfHwgbWF0Y2hlc1RvTG9hZCAmJiBtYXRjaGVzVG9Mb2FkLnNvbWUobSA9PiBtLnJvdXRlLmlkID09PSByb3V0ZUlkKSk7IC8vIFNob3J0IGNpcmN1aXQgaWYgd2UgaGF2ZSBubyBsb2FkZXJzIHRvIHJ1blxuXG4gICAgaWYgKG1hdGNoZXNUb0xvYWQubGVuZ3RoID09PSAwICYmIHJldmFsaWRhdGluZ0ZldGNoZXJzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgY29tcGxldGVOYXZpZ2F0aW9uKGxvY2F0aW9uLCB7XG4gICAgICAgIG1hdGNoZXMsXG4gICAgICAgIGxvYWRlckRhdGE6IG1lcmdlTG9hZGVyRGF0YShzdGF0ZS5sb2FkZXJEYXRhLCB7fSwgbWF0Y2hlcyksXG4gICAgICAgIC8vIENvbW1pdCBwZW5kaW5nIGVycm9yIGlmIHdlJ3JlIHNob3J0IGNpcmN1aXRpbmdcbiAgICAgICAgZXJyb3JzOiBwZW5kaW5nRXJyb3IgfHwgbnVsbCxcbiAgICAgICAgYWN0aW9uRGF0YTogcGVuZGluZ0FjdGlvbkRhdGEgfHwgbnVsbFxuICAgICAgfSk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzaG9ydENpcmN1aXRlZDogdHJ1ZVxuICAgICAgfTtcbiAgICB9IC8vIElmIHRoaXMgaXMgYW4gdW5pbnRlcnJ1cHRlZCByZXZhbGlkYXRpb24sIHdlIHJlbWFpbiBpbiBvdXIgY3VycmVudCBpZGxlXG4gICAgLy8gc3RhdGUuICBJZiBub3QsIHdlIG5lZWQgdG8gc3dpdGNoIHRvIG91ciBsb2FkaW5nIHN0YXRlIGFuZCBsb2FkIGRhdGEsXG4gICAgLy8gcHJlc2VydmluZyBhbnkgbmV3IGFjdGlvbiBkYXRhIG9yIGV4aXN0aW5nIGFjdGlvbiBkYXRhIChpbiB0aGUgY2FzZSBvZlxuICAgIC8vIGEgcmV2YWxpZGF0aW9uIGludGVycnVwdGluZyBhbiBhY3Rpb25SZWxvYWQpXG5cblxuICAgIGlmICghaXNVbmludGVycnVwdGVkUmV2YWxpZGF0aW9uKSB7XG4gICAgICByZXZhbGlkYXRpbmdGZXRjaGVycy5mb3JFYWNoKF9yZWYyID0+IHtcbiAgICAgICAgbGV0IFtrZXldID0gX3JlZjI7XG4gICAgICAgIGxldCBmZXRjaGVyID0gc3RhdGUuZmV0Y2hlcnMuZ2V0KGtleSk7XG4gICAgICAgIGxldCByZXZhbGlkYXRpbmdGZXRjaGVyID0ge1xuICAgICAgICAgIHN0YXRlOiBcImxvYWRpbmdcIixcbiAgICAgICAgICBkYXRhOiBmZXRjaGVyICYmIGZldGNoZXIuZGF0YSxcbiAgICAgICAgICBmb3JtTWV0aG9kOiB1bmRlZmluZWQsXG4gICAgICAgICAgZm9ybUFjdGlvbjogdW5kZWZpbmVkLFxuICAgICAgICAgIGZvcm1FbmNUeXBlOiB1bmRlZmluZWQsXG4gICAgICAgICAgZm9ybURhdGE6IHVuZGVmaW5lZFxuICAgICAgICB9O1xuICAgICAgICBzdGF0ZS5mZXRjaGVycy5zZXQoa2V5LCByZXZhbGlkYXRpbmdGZXRjaGVyKTtcbiAgICAgIH0pO1xuICAgICAgdXBkYXRlU3RhdGUoX2V4dGVuZHMoe1xuICAgICAgICBuYXZpZ2F0aW9uOiBsb2FkaW5nTmF2aWdhdGlvbixcbiAgICAgICAgYWN0aW9uRGF0YTogcGVuZGluZ0FjdGlvbkRhdGEgfHwgc3RhdGUuYWN0aW9uRGF0YSB8fCBudWxsXG4gICAgICB9LCByZXZhbGlkYXRpbmdGZXRjaGVycy5sZW5ndGggPiAwID8ge1xuICAgICAgICBmZXRjaGVyczogbmV3IE1hcChzdGF0ZS5mZXRjaGVycylcbiAgICAgIH0gOiB7fSkpO1xuICAgIH1cblxuICAgIHBlbmRpbmdOYXZpZ2F0aW9uTG9hZElkID0gKytpbmNyZW1lbnRpbmdMb2FkSWQ7XG4gICAgcmV2YWxpZGF0aW5nRmV0Y2hlcnMuZm9yRWFjaChfcmVmMyA9PiB7XG4gICAgICBsZXQgW2tleV0gPSBfcmVmMztcbiAgICAgIHJldHVybiBmZXRjaENvbnRyb2xsZXJzLnNldChrZXksIHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlcik7XG4gICAgfSk7XG4gICAgbGV0IHtcbiAgICAgIHJlc3VsdHMsXG4gICAgICBsb2FkZXJSZXN1bHRzLFxuICAgICAgZmV0Y2hlclJlc3VsdHNcbiAgICB9ID0gYXdhaXQgY2FsbExvYWRlcnNBbmRNYXliZVJlc29sdmVEYXRhKHN0YXRlLm1hdGNoZXMsIG1hdGNoZXMsIG1hdGNoZXNUb0xvYWQsIHJldmFsaWRhdGluZ0ZldGNoZXJzLCByZXF1ZXN0KTtcblxuICAgIGlmIChyZXF1ZXN0LnNpZ25hbC5hYm9ydGVkKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzaG9ydENpcmN1aXRlZDogdHJ1ZVxuICAgICAgfTtcbiAgICB9IC8vIENsZWFuIHVwIF9hZnRlcl8gbG9hZGVycyBoYXZlIGNvbXBsZXRlZC4gIERvbid0IGNsZWFuIHVwIGlmIHdlIHNob3J0XG4gICAgLy8gY2lyY3VpdGVkIGJlY2F1c2UgZmV0Y2hDb250cm9sbGVycyB3b3VsZCBoYXZlIGJlZW4gYWJvcnRlZCBhbmRcbiAgICAvLyByZWFzc2lnbmVkIHRvIG5ldyBjb250cm9sbGVycyBmb3IgdGhlIG5leHQgbmF2aWdhdGlvblxuXG5cbiAgICByZXZhbGlkYXRpbmdGZXRjaGVycy5mb3JFYWNoKF9yZWY0ID0+IHtcbiAgICAgIGxldCBba2V5XSA9IF9yZWY0O1xuICAgICAgcmV0dXJuIGZldGNoQ29udHJvbGxlcnMuZGVsZXRlKGtleSk7XG4gICAgfSk7IC8vIElmIGFueSBsb2FkZXJzIHJldHVybmVkIGEgcmVkaXJlY3QgUmVzcG9uc2UsIHN0YXJ0IGEgbmV3IFJFUExBQ0UgbmF2aWdhdGlvblxuXG4gICAgbGV0IHJlZGlyZWN0ID0gZmluZFJlZGlyZWN0KHJlc3VsdHMpO1xuXG4gICAgaWYgKHJlZGlyZWN0KSB7XG4gICAgICBsZXQgcmVkaXJlY3ROYXZpZ2F0aW9uID0gZ2V0TG9hZGVyUmVkaXJlY3Qoc3RhdGUsIHJlZGlyZWN0KTtcbiAgICAgIGF3YWl0IHN0YXJ0UmVkaXJlY3ROYXZpZ2F0aW9uKHJlZGlyZWN0LCByZWRpcmVjdE5hdmlnYXRpb24sIHJlcGxhY2UpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc2hvcnRDaXJjdWl0ZWQ6IHRydWVcbiAgICAgIH07XG4gICAgfSAvLyBQcm9jZXNzIGFuZCBjb21taXQgb3V0cHV0IGZyb20gbG9hZGVyc1xuXG5cbiAgICBsZXQge1xuICAgICAgbG9hZGVyRGF0YSxcbiAgICAgIGVycm9yc1xuICAgIH0gPSBwcm9jZXNzTG9hZGVyRGF0YShzdGF0ZSwgbWF0Y2hlcywgbWF0Y2hlc1RvTG9hZCwgbG9hZGVyUmVzdWx0cywgcGVuZGluZ0Vycm9yLCByZXZhbGlkYXRpbmdGZXRjaGVycywgZmV0Y2hlclJlc3VsdHMsIGFjdGl2ZURlZmVycmVkcyk7IC8vIFdpcmUgdXAgc3Vic2NyaWJlcnMgdG8gdXBkYXRlIGxvYWRlckRhdGEgYXMgcHJvbWlzZXMgc2V0dGxlXG5cbiAgICBhY3RpdmVEZWZlcnJlZHMuZm9yRWFjaCgoZGVmZXJyZWREYXRhLCByb3V0ZUlkKSA9PiB7XG4gICAgICBkZWZlcnJlZERhdGEuc3Vic2NyaWJlKGFib3J0ZWQgPT4ge1xuICAgICAgICAvLyBOb3RlOiBObyBuZWVkIHRvIHVwZGF0ZVN0YXRlIGhlcmUgc2luY2UgdGhlIFRyYWNrZWRQcm9taXNlIG9uXG4gICAgICAgIC8vIGxvYWRlckRhdGEgaXMgc3RhYmxlIGFjcm9zcyByZXNvbHZlL3JlamVjdFxuICAgICAgICAvLyBSZW1vdmUgdGhpcyBpbnN0YW5jZSBpZiB3ZSB3ZXJlIGFib3J0ZWQgb3IgaWYgcHJvbWlzZXMgaGF2ZSBzZXR0bGVkXG4gICAgICAgIGlmIChhYm9ydGVkIHx8IGRlZmVycmVkRGF0YS5kb25lKSB7XG4gICAgICAgICAgYWN0aXZlRGVmZXJyZWRzLmRlbGV0ZShyb3V0ZUlkKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gICAgbWFya0ZldGNoUmVkaXJlY3RzRG9uZSgpO1xuICAgIGxldCBkaWRBYm9ydEZldGNoTG9hZHMgPSBhYm9ydFN0YWxlRmV0Y2hMb2FkcyhwZW5kaW5nTmF2aWdhdGlvbkxvYWRJZCk7XG4gICAgcmV0dXJuIF9leHRlbmRzKHtcbiAgICAgIGxvYWRlckRhdGEsXG4gICAgICBlcnJvcnNcbiAgICB9LCBkaWRBYm9ydEZldGNoTG9hZHMgfHwgcmV2YWxpZGF0aW5nRmV0Y2hlcnMubGVuZ3RoID4gMCA/IHtcbiAgICAgIGZldGNoZXJzOiBuZXcgTWFwKHN0YXRlLmZldGNoZXJzKVxuICAgIH0gOiB7fSk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRGZXRjaGVyKGtleSkge1xuICAgIHJldHVybiBzdGF0ZS5mZXRjaGVycy5nZXQoa2V5KSB8fCBJRExFX0ZFVENIRVI7XG4gIH0gLy8gVHJpZ2dlciBhIGZldGNoZXIgbG9hZC9zdWJtaXQgZm9yIHRoZSBnaXZlbiBmZXRjaGVyIGtleVxuXG5cbiAgZnVuY3Rpb24gZmV0Y2goa2V5LCByb3V0ZUlkLCBocmVmLCBvcHRzKSB7XG4gICAgaWYgKGlzU2VydmVyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJyb3V0ZXIuZmV0Y2goKSB3YXMgY2FsbGVkIGR1cmluZyB0aGUgc2VydmVyIHJlbmRlciwgYnV0IGl0IHNob3VsZG4ndCBiZS4gXCIgKyBcIllvdSBhcmUgbGlrZWx5IGNhbGxpbmcgYSB1c2VGZXRjaGVyKCkgbWV0aG9kIGluIHRoZSBib2R5IG9mIHlvdXIgY29tcG9uZW50LiBcIiArIFwiVHJ5IG1vdmluZyBpdCB0byBhIHVzZUVmZmVjdCBvciBhIGNhbGxiYWNrLlwiKTtcbiAgICB9XG5cbiAgICBpZiAoZmV0Y2hDb250cm9sbGVycy5oYXMoa2V5KSkgYWJvcnRGZXRjaGVyKGtleSk7XG4gICAgbGV0IG1hdGNoZXMgPSBtYXRjaFJvdXRlcyhkYXRhUm91dGVzLCBocmVmLCBpbml0LmJhc2VuYW1lKTtcblxuICAgIGlmICghbWF0Y2hlcykge1xuICAgICAgc2V0RmV0Y2hlckVycm9yKGtleSwgcm91dGVJZCwgbmV3IEVycm9yUmVzcG9uc2UoNDA0LCBcIk5vdCBGb3VuZFwiLCBudWxsKSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbGV0IHtcbiAgICAgIHBhdGgsXG4gICAgICBzdWJtaXNzaW9uXG4gICAgfSA9IG5vcm1hbGl6ZU5hdmlnYXRlT3B0aW9ucyhocmVmLCBvcHRzLCB0cnVlKTtcbiAgICBsZXQgbWF0Y2ggPSBnZXRUYXJnZXRNYXRjaChtYXRjaGVzLCBwYXRoKTtcblxuICAgIGlmIChzdWJtaXNzaW9uKSB7XG4gICAgICBoYW5kbGVGZXRjaGVyQWN0aW9uKGtleSwgcm91dGVJZCwgcGF0aCwgbWF0Y2gsIG1hdGNoZXMsIHN1Ym1pc3Npb24pO1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gU3RvcmUgb2ZmIHRoZSBtYXRjaCBzbyB3ZSBjYW4gY2FsbCBpdCdzIHNob3VsZFJldmFsaWRhdGUgb24gc3Vic2VxdWVudFxuICAgIC8vIHJldmFsaWRhdGlvbnNcblxuXG4gICAgZmV0Y2hMb2FkTWF0Y2hlcy5zZXQoa2V5LCBbcGF0aCwgbWF0Y2gsIG1hdGNoZXNdKTtcbiAgICBoYW5kbGVGZXRjaGVyTG9hZGVyKGtleSwgcm91dGVJZCwgcGF0aCwgbWF0Y2gsIG1hdGNoZXMpO1xuICB9IC8vIENhbGwgdGhlIGFjdGlvbiBmb3IgdGhlIG1hdGNoZWQgZmV0Y2hlci5zdWJtaXQoKSwgYW5kIHRoZW4gaGFuZGxlIHJlZGlyZWN0cyxcbiAgLy8gZXJyb3JzLCBhbmQgcmV2YWxpZGF0aW9uXG5cblxuICBhc3luYyBmdW5jdGlvbiBoYW5kbGVGZXRjaGVyQWN0aW9uKGtleSwgcm91dGVJZCwgcGF0aCwgbWF0Y2gsIHJlcXVlc3RNYXRjaGVzLCBzdWJtaXNzaW9uKSB7XG4gICAgaW50ZXJydXB0QWN0aXZlTG9hZHMoKTtcbiAgICBmZXRjaExvYWRNYXRjaGVzLmRlbGV0ZShrZXkpO1xuXG4gICAgaWYgKCFtYXRjaC5yb3V0ZS5hY3Rpb24pIHtcbiAgICAgIGxldCB7XG4gICAgICAgIGVycm9yXG4gICAgICB9ID0gZ2V0TWV0aG9kTm90QWxsb3dlZFJlc3VsdChwYXRoKTtcbiAgICAgIHNldEZldGNoZXJFcnJvcihrZXksIHJvdXRlSWQsIGVycm9yKTtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIFB1dCB0aGlzIGZldGNoZXIgaW50byBpdCdzIHN1Ym1pdHRpbmcgc3RhdGVcblxuXG4gICAgbGV0IGV4aXN0aW5nRmV0Y2hlciA9IHN0YXRlLmZldGNoZXJzLmdldChrZXkpO1xuXG4gICAgbGV0IGZldGNoZXIgPSBfZXh0ZW5kcyh7XG4gICAgICBzdGF0ZTogXCJzdWJtaXR0aW5nXCJcbiAgICB9LCBzdWJtaXNzaW9uLCB7XG4gICAgICBkYXRhOiBleGlzdGluZ0ZldGNoZXIgJiYgZXhpc3RpbmdGZXRjaGVyLmRhdGFcbiAgICB9KTtcblxuICAgIHN0YXRlLmZldGNoZXJzLnNldChrZXksIGZldGNoZXIpO1xuICAgIHVwZGF0ZVN0YXRlKHtcbiAgICAgIGZldGNoZXJzOiBuZXcgTWFwKHN0YXRlLmZldGNoZXJzKVxuICAgIH0pOyAvLyBDYWxsIHRoZSBhY3Rpb24gZm9yIHRoZSBmZXRjaGVyXG5cbiAgICBsZXQgYWJvcnRDb250cm9sbGVyID0gbmV3IEFib3J0Q29udHJvbGxlcigpO1xuICAgIGxldCBmZXRjaFJlcXVlc3QgPSBjcmVhdGVSZXF1ZXN0KHBhdGgsIGFib3J0Q29udHJvbGxlci5zaWduYWwsIHN1Ym1pc3Npb24pO1xuICAgIGZldGNoQ29udHJvbGxlcnMuc2V0KGtleSwgYWJvcnRDb250cm9sbGVyKTtcbiAgICBsZXQgYWN0aW9uUmVzdWx0ID0gYXdhaXQgY2FsbExvYWRlck9yQWN0aW9uKFwiYWN0aW9uXCIsIGZldGNoUmVxdWVzdCwgbWF0Y2gsIHJlcXVlc3RNYXRjaGVzLCByb3V0ZXIuYmFzZW5hbWUpO1xuXG4gICAgaWYgKGZldGNoUmVxdWVzdC5zaWduYWwuYWJvcnRlZCkge1xuICAgICAgLy8gV2UgY2FuIGRlbGV0ZSB0aGlzIHNvIGxvbmcgYXMgd2Ugd2VyZW4ndCBhYm9ydGVkIGJ5IG91IG91ciBvd24gZmV0Y2hlclxuICAgICAgLy8gcmUtc3VibWl0IHdoaWNoIHdvdWxkIGhhdmUgcHV0IF9uZXdfIGNvbnRyb2xsZXIgaXMgaW4gZmV0Y2hDb250cm9sbGVyc1xuICAgICAgaWYgKGZldGNoQ29udHJvbGxlcnMuZ2V0KGtleSkgPT09IGFib3J0Q29udHJvbGxlcikge1xuICAgICAgICBmZXRjaENvbnRyb2xsZXJzLmRlbGV0ZShrZXkpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGlzUmVkaXJlY3RSZXN1bHQoYWN0aW9uUmVzdWx0KSkge1xuICAgICAgZmV0Y2hDb250cm9sbGVycy5kZWxldGUoa2V5KTtcbiAgICAgIGZldGNoUmVkaXJlY3RJZHMuYWRkKGtleSk7XG5cbiAgICAgIGxldCBsb2FkaW5nRmV0Y2hlciA9IF9leHRlbmRzKHtcbiAgICAgICAgc3RhdGU6IFwibG9hZGluZ1wiXG4gICAgICB9LCBzdWJtaXNzaW9uLCB7XG4gICAgICAgIGRhdGE6IHVuZGVmaW5lZFxuICAgICAgfSk7XG5cbiAgICAgIHN0YXRlLmZldGNoZXJzLnNldChrZXksIGxvYWRpbmdGZXRjaGVyKTtcbiAgICAgIHVwZGF0ZVN0YXRlKHtcbiAgICAgICAgZmV0Y2hlcnM6IG5ldyBNYXAoc3RhdGUuZmV0Y2hlcnMpXG4gICAgICB9KTtcblxuICAgICAgbGV0IHJlZGlyZWN0TmF2aWdhdGlvbiA9IF9leHRlbmRzKHtcbiAgICAgICAgc3RhdGU6IFwibG9hZGluZ1wiLFxuICAgICAgICBsb2NhdGlvbjogY3JlYXRlTG9jYXRpb24oc3RhdGUubG9jYXRpb24sIGFjdGlvblJlc3VsdC5sb2NhdGlvbilcbiAgICAgIH0sIHN1Ym1pc3Npb24pO1xuXG4gICAgICBhd2FpdCBzdGFydFJlZGlyZWN0TmF2aWdhdGlvbihhY3Rpb25SZXN1bHQsIHJlZGlyZWN0TmF2aWdhdGlvbik7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBQcm9jZXNzIGFueSBub24tcmVkaXJlY3QgZXJyb3JzIHRocm93blxuXG5cbiAgICBpZiAoaXNFcnJvclJlc3VsdChhY3Rpb25SZXN1bHQpKSB7XG4gICAgICBzZXRGZXRjaGVyRXJyb3Ioa2V5LCByb3V0ZUlkLCBhY3Rpb25SZXN1bHQuZXJyb3IpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChpc0RlZmVycmVkUmVzdWx0KGFjdGlvblJlc3VsdCkpIHtcbiAgICAgIGludmFyaWFudChmYWxzZSwgXCJkZWZlcigpIGlzIG5vdCBzdXBwb3J0ZWQgaW4gYWN0aW9uc1wiKTtcbiAgICB9IC8vIFN0YXJ0IHRoZSBkYXRhIGxvYWQgZm9yIGN1cnJlbnQgbWF0Y2hlcywgb3IgdGhlIG5leHQgbG9jYXRpb24gaWYgd2UncmVcbiAgICAvLyBpbiB0aGUgbWlkZGxlIG9mIGEgbmF2aWdhdGlvblxuXG5cbiAgICBsZXQgbmV4dExvY2F0aW9uID0gc3RhdGUubmF2aWdhdGlvbi5sb2NhdGlvbiB8fCBzdGF0ZS5sb2NhdGlvbjtcbiAgICBsZXQgcmV2YWxpZGF0aW9uUmVxdWVzdCA9IGNyZWF0ZVJlcXVlc3QobmV4dExvY2F0aW9uLCBhYm9ydENvbnRyb2xsZXIuc2lnbmFsKTtcbiAgICBsZXQgbWF0Y2hlcyA9IHN0YXRlLm5hdmlnYXRpb24uc3RhdGUgIT09IFwiaWRsZVwiID8gbWF0Y2hSb3V0ZXMoZGF0YVJvdXRlcywgc3RhdGUubmF2aWdhdGlvbi5sb2NhdGlvbiwgaW5pdC5iYXNlbmFtZSkgOiBzdGF0ZS5tYXRjaGVzO1xuICAgIGludmFyaWFudChtYXRjaGVzLCBcIkRpZG4ndCBmaW5kIGFueSBtYXRjaGVzIGFmdGVyIGZldGNoZXIgYWN0aW9uXCIpO1xuICAgIGxldCBsb2FkSWQgPSArK2luY3JlbWVudGluZ0xvYWRJZDtcbiAgICBmZXRjaFJlbG9hZElkcy5zZXQoa2V5LCBsb2FkSWQpO1xuXG4gICAgbGV0IGxvYWRGZXRjaGVyID0gX2V4dGVuZHMoe1xuICAgICAgc3RhdGU6IFwibG9hZGluZ1wiLFxuICAgICAgZGF0YTogYWN0aW9uUmVzdWx0LmRhdGFcbiAgICB9LCBzdWJtaXNzaW9uKTtcblxuICAgIHN0YXRlLmZldGNoZXJzLnNldChrZXksIGxvYWRGZXRjaGVyKTtcbiAgICBsZXQgW21hdGNoZXNUb0xvYWQsIHJldmFsaWRhdGluZ0ZldGNoZXJzXSA9IGdldE1hdGNoZXNUb0xvYWQoc3RhdGUsIG1hdGNoZXMsIHN1Ym1pc3Npb24sIG5leHRMb2NhdGlvbiwgaXNSZXZhbGlkYXRpb25SZXF1aXJlZCwgY2FuY2VsbGVkRGVmZXJyZWRSb3V0ZXMsIGNhbmNlbGxlZEZldGNoZXJMb2Fkcywge1xuICAgICAgW21hdGNoLnJvdXRlLmlkXTogYWN0aW9uUmVzdWx0LmRhdGFcbiAgICB9LCB1bmRlZmluZWQsIC8vIE5vIG5lZWQgdG8gc2VuZCB0aHJvdWdoIGVycm9ycyBzaW5jZSB3ZSBzaG9ydCBjaXJjdWl0IGFib3ZlXG4gICAgZmV0Y2hMb2FkTWF0Y2hlcyk7IC8vIFB1dCBhbGwgcmV2YWxpZGF0aW5nIGZldGNoZXJzIGludG8gdGhlIGxvYWRpbmcgc3RhdGUsIGV4Y2VwdCBmb3IgdGhlXG4gICAgLy8gY3VycmVudCBmZXRjaGVyIHdoaWNoIHdlIHdhbnQgdG8ga2VlcCBpbiBpdCdzIGN1cnJlbnQgbG9hZGluZyBzdGF0ZSB3aGljaFxuICAgIC8vIGNvbnRhaW5zIGl0J3MgYWN0aW9uIHN1Ym1pc3Npb24gaW5mbyArIGFjdGlvbiBkYXRhXG5cbiAgICByZXZhbGlkYXRpbmdGZXRjaGVycy5maWx0ZXIoX3JlZjUgPT4ge1xuICAgICAgbGV0IFtzdGFsZUtleV0gPSBfcmVmNTtcbiAgICAgIHJldHVybiBzdGFsZUtleSAhPT0ga2V5O1xuICAgIH0pLmZvckVhY2goX3JlZjYgPT4ge1xuICAgICAgbGV0IFtzdGFsZUtleV0gPSBfcmVmNjtcbiAgICAgIGxldCBleGlzdGluZ0ZldGNoZXIgPSBzdGF0ZS5mZXRjaGVycy5nZXQoc3RhbGVLZXkpO1xuICAgICAgbGV0IHJldmFsaWRhdGluZ0ZldGNoZXIgPSB7XG4gICAgICAgIHN0YXRlOiBcImxvYWRpbmdcIixcbiAgICAgICAgZGF0YTogZXhpc3RpbmdGZXRjaGVyICYmIGV4aXN0aW5nRmV0Y2hlci5kYXRhLFxuICAgICAgICBmb3JtTWV0aG9kOiB1bmRlZmluZWQsXG4gICAgICAgIGZvcm1BY3Rpb246IHVuZGVmaW5lZCxcbiAgICAgICAgZm9ybUVuY1R5cGU6IHVuZGVmaW5lZCxcbiAgICAgICAgZm9ybURhdGE6IHVuZGVmaW5lZFxuICAgICAgfTtcbiAgICAgIHN0YXRlLmZldGNoZXJzLnNldChzdGFsZUtleSwgcmV2YWxpZGF0aW5nRmV0Y2hlcik7XG4gICAgICBmZXRjaENvbnRyb2xsZXJzLnNldChzdGFsZUtleSwgYWJvcnRDb250cm9sbGVyKTtcbiAgICB9KTtcbiAgICB1cGRhdGVTdGF0ZSh7XG4gICAgICBmZXRjaGVyczogbmV3IE1hcChzdGF0ZS5mZXRjaGVycylcbiAgICB9KTtcbiAgICBsZXQge1xuICAgICAgcmVzdWx0cyxcbiAgICAgIGxvYWRlclJlc3VsdHMsXG4gICAgICBmZXRjaGVyUmVzdWx0c1xuICAgIH0gPSBhd2FpdCBjYWxsTG9hZGVyc0FuZE1heWJlUmVzb2x2ZURhdGEoc3RhdGUubWF0Y2hlcywgbWF0Y2hlcywgbWF0Y2hlc1RvTG9hZCwgcmV2YWxpZGF0aW5nRmV0Y2hlcnMsIHJldmFsaWRhdGlvblJlcXVlc3QpO1xuXG4gICAgaWYgKGFib3J0Q29udHJvbGxlci5zaWduYWwuYWJvcnRlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGZldGNoUmVsb2FkSWRzLmRlbGV0ZShrZXkpO1xuICAgIGZldGNoQ29udHJvbGxlcnMuZGVsZXRlKGtleSk7XG4gICAgcmV2YWxpZGF0aW5nRmV0Y2hlcnMuZm9yRWFjaChfcmVmNyA9PiB7XG4gICAgICBsZXQgW3N0YWxlS2V5XSA9IF9yZWY3O1xuICAgICAgcmV0dXJuIGZldGNoQ29udHJvbGxlcnMuZGVsZXRlKHN0YWxlS2V5KTtcbiAgICB9KTtcbiAgICBsZXQgcmVkaXJlY3QgPSBmaW5kUmVkaXJlY3QocmVzdWx0cyk7XG5cbiAgICBpZiAocmVkaXJlY3QpIHtcbiAgICAgIGxldCByZWRpcmVjdE5hdmlnYXRpb24gPSBnZXRMb2FkZXJSZWRpcmVjdChzdGF0ZSwgcmVkaXJlY3QpO1xuICAgICAgYXdhaXQgc3RhcnRSZWRpcmVjdE5hdmlnYXRpb24ocmVkaXJlY3QsIHJlZGlyZWN0TmF2aWdhdGlvbik7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBQcm9jZXNzIGFuZCBjb21taXQgb3V0cHV0IGZyb20gbG9hZGVyc1xuXG5cbiAgICBsZXQge1xuICAgICAgbG9hZGVyRGF0YSxcbiAgICAgIGVycm9yc1xuICAgIH0gPSBwcm9jZXNzTG9hZGVyRGF0YShzdGF0ZSwgc3RhdGUubWF0Y2hlcywgbWF0Y2hlc1RvTG9hZCwgbG9hZGVyUmVzdWx0cywgdW5kZWZpbmVkLCByZXZhbGlkYXRpbmdGZXRjaGVycywgZmV0Y2hlclJlc3VsdHMsIGFjdGl2ZURlZmVycmVkcyk7XG4gICAgbGV0IGRvbmVGZXRjaGVyID0ge1xuICAgICAgc3RhdGU6IFwiaWRsZVwiLFxuICAgICAgZGF0YTogYWN0aW9uUmVzdWx0LmRhdGEsXG4gICAgICBmb3JtTWV0aG9kOiB1bmRlZmluZWQsXG4gICAgICBmb3JtQWN0aW9uOiB1bmRlZmluZWQsXG4gICAgICBmb3JtRW5jVHlwZTogdW5kZWZpbmVkLFxuICAgICAgZm9ybURhdGE6IHVuZGVmaW5lZFxuICAgIH07XG4gICAgc3RhdGUuZmV0Y2hlcnMuc2V0KGtleSwgZG9uZUZldGNoZXIpO1xuICAgIGxldCBkaWRBYm9ydEZldGNoTG9hZHMgPSBhYm9ydFN0YWxlRmV0Y2hMb2Fkcyhsb2FkSWQpOyAvLyBJZiB3ZSBhcmUgY3VycmVudGx5IGluIGEgbmF2aWdhdGlvbiBsb2FkaW5nIHN0YXRlIGFuZCB0aGlzIGZldGNoZXIgaXNcbiAgICAvLyBtb3JlIHJlY2VudCB0aGFuIHRoZSBuYXZpZ2F0aW9uLCB3ZSB3YW50IHRoZSBuZXdlciBkYXRhIHNvIGFib3J0IHRoZVxuICAgIC8vIG5hdmlnYXRpb24gYW5kIGNvbXBsZXRlIGl0IHdpdGggdGhlIGZldGNoZXIgZGF0YVxuXG4gICAgaWYgKHN0YXRlLm5hdmlnYXRpb24uc3RhdGUgPT09IFwibG9hZGluZ1wiICYmIGxvYWRJZCA+IHBlbmRpbmdOYXZpZ2F0aW9uTG9hZElkKSB7XG4gICAgICBpbnZhcmlhbnQocGVuZGluZ0FjdGlvbiwgXCJFeHBlY3RlZCBwZW5kaW5nIGFjdGlvblwiKTtcbiAgICAgIHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlciAmJiBwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIuYWJvcnQoKTtcbiAgICAgIGNvbXBsZXRlTmF2aWdhdGlvbihzdGF0ZS5uYXZpZ2F0aW9uLmxvY2F0aW9uLCB7XG4gICAgICAgIG1hdGNoZXMsXG4gICAgICAgIGxvYWRlckRhdGEsXG4gICAgICAgIGVycm9ycyxcbiAgICAgICAgZmV0Y2hlcnM6IG5ldyBNYXAoc3RhdGUuZmV0Y2hlcnMpXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gb3RoZXJ3aXNlIGp1c3QgdXBkYXRlIHdpdGggdGhlIGZldGNoZXIgZGF0YSwgcHJlc2VydmluZyBhbnkgZXhpc3RpbmdcbiAgICAgIC8vIGxvYWRlckRhdGEgZm9yIGxvYWRlcnMgdGhhdCBkaWQgbm90IG5lZWQgdG8gcmVsb2FkLiAgV2UgaGF2ZSB0b1xuICAgICAgLy8gbWFudWFsbHkgbWVyZ2UgaGVyZSBzaW5jZSB3ZSBhcmVuJ3QgZ29pbmcgdGhyb3VnaCBjb21wbGV0ZU5hdmlnYXRpb25cbiAgICAgIHVwZGF0ZVN0YXRlKF9leHRlbmRzKHtcbiAgICAgICAgZXJyb3JzLFxuICAgICAgICBsb2FkZXJEYXRhOiBtZXJnZUxvYWRlckRhdGEoc3RhdGUubG9hZGVyRGF0YSwgbG9hZGVyRGF0YSwgbWF0Y2hlcylcbiAgICAgIH0sIGRpZEFib3J0RmV0Y2hMb2FkcyA/IHtcbiAgICAgICAgZmV0Y2hlcnM6IG5ldyBNYXAoc3RhdGUuZmV0Y2hlcnMpXG4gICAgICB9IDoge30pKTtcbiAgICAgIGlzUmV2YWxpZGF0aW9uUmVxdWlyZWQgPSBmYWxzZTtcbiAgICB9XG4gIH0gLy8gQ2FsbCB0aGUgbWF0Y2hlZCBsb2FkZXIgZm9yIGZldGNoZXIubG9hZCgpLCBoYW5kbGluZyByZWRpcmVjdHMsIGVycm9ycywgZXRjLlxuXG5cbiAgYXN5bmMgZnVuY3Rpb24gaGFuZGxlRmV0Y2hlckxvYWRlcihrZXksIHJvdXRlSWQsIHBhdGgsIG1hdGNoLCBtYXRjaGVzKSB7XG4gICAgbGV0IGV4aXN0aW5nRmV0Y2hlciA9IHN0YXRlLmZldGNoZXJzLmdldChrZXkpOyAvLyBQdXQgdGhpcyBmZXRjaGVyIGludG8gaXQncyBsb2FkaW5nIHN0YXRlXG5cbiAgICBsZXQgbG9hZGluZ0ZldGNoZXIgPSB7XG4gICAgICBzdGF0ZTogXCJsb2FkaW5nXCIsXG4gICAgICBmb3JtTWV0aG9kOiB1bmRlZmluZWQsXG4gICAgICBmb3JtQWN0aW9uOiB1bmRlZmluZWQsXG4gICAgICBmb3JtRW5jVHlwZTogdW5kZWZpbmVkLFxuICAgICAgZm9ybURhdGE6IHVuZGVmaW5lZCxcbiAgICAgIGRhdGE6IGV4aXN0aW5nRmV0Y2hlciAmJiBleGlzdGluZ0ZldGNoZXIuZGF0YVxuICAgIH07XG4gICAgc3RhdGUuZmV0Y2hlcnMuc2V0KGtleSwgbG9hZGluZ0ZldGNoZXIpO1xuICAgIHVwZGF0ZVN0YXRlKHtcbiAgICAgIGZldGNoZXJzOiBuZXcgTWFwKHN0YXRlLmZldGNoZXJzKVxuICAgIH0pOyAvLyBDYWxsIHRoZSBsb2FkZXIgZm9yIHRoaXMgZmV0Y2hlciByb3V0ZSBtYXRjaFxuXG4gICAgbGV0IGFib3J0Q29udHJvbGxlciA9IG5ldyBBYm9ydENvbnRyb2xsZXIoKTtcbiAgICBsZXQgZmV0Y2hSZXF1ZXN0ID0gY3JlYXRlUmVxdWVzdChwYXRoLCBhYm9ydENvbnRyb2xsZXIuc2lnbmFsKTtcbiAgICBmZXRjaENvbnRyb2xsZXJzLnNldChrZXksIGFib3J0Q29udHJvbGxlcik7XG4gICAgbGV0IHJlc3VsdCA9IGF3YWl0IGNhbGxMb2FkZXJPckFjdGlvbihcImxvYWRlclwiLCBmZXRjaFJlcXVlc3QsIG1hdGNoLCBtYXRjaGVzLCByb3V0ZXIuYmFzZW5hbWUpOyAvLyBEZWZlcnJlZCBpc24ndCBzdXBwb3J0ZWQgb3IgZmV0Y2hlciBsb2FkcywgYXdhaXQgZXZlcnl0aGluZyBhbmQgdHJlYXQgaXRcbiAgICAvLyBhcyBhIG5vcm1hbCBsb2FkLiAgcmVzb2x2ZURlZmVycmVkRGF0YSB3aWxsIHJldHVybiB1bmRlZmluZWQgaWYgdGhpc1xuICAgIC8vIGZldGNoZXIgZ2V0cyBhYm9ydGVkLCBzbyB3ZSBqdXN0IGxlYXZlIHJlc3VsdCB1bnRvdWNoZWQgYW5kIHNob3J0IGNpcmN1aXRcbiAgICAvLyBiZWxvdyBpZiB0aGF0IGhhcHBlbnNcblxuICAgIGlmIChpc0RlZmVycmVkUmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgIHJlc3VsdCA9IChhd2FpdCByZXNvbHZlRGVmZXJyZWREYXRhKHJlc3VsdCwgZmV0Y2hSZXF1ZXN0LnNpZ25hbCwgdHJ1ZSkpIHx8IHJlc3VsdDtcbiAgICB9IC8vIFdlIGNhbiBkZWxldGUgdGhpcyBzbyBsb25nIGFzIHdlIHdlcmVuJ3QgYWJvcnRlZCBieSBvdSBvdXIgb3duIGZldGNoZXJcbiAgICAvLyByZS1sb2FkIHdoaWNoIHdvdWxkIGhhdmUgcHV0IF9uZXdfIGNvbnRyb2xsZXIgaXMgaW4gZmV0Y2hDb250cm9sbGVyc1xuXG5cbiAgICBpZiAoZmV0Y2hDb250cm9sbGVycy5nZXQoa2V5KSA9PT0gYWJvcnRDb250cm9sbGVyKSB7XG4gICAgICBmZXRjaENvbnRyb2xsZXJzLmRlbGV0ZShrZXkpO1xuICAgIH1cblxuICAgIGlmIChmZXRjaFJlcXVlc3Quc2lnbmFsLmFib3J0ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIElmIHRoZSBsb2FkZXIgdGhyZXcgYSByZWRpcmVjdCBSZXNwb25zZSwgc3RhcnQgYSBuZXcgUkVQTEFDRSBuYXZpZ2F0aW9uXG5cblxuICAgIGlmIChpc1JlZGlyZWN0UmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgIGxldCByZWRpcmVjdE5hdmlnYXRpb24gPSBnZXRMb2FkZXJSZWRpcmVjdChzdGF0ZSwgcmVzdWx0KTtcbiAgICAgIGF3YWl0IHN0YXJ0UmVkaXJlY3ROYXZpZ2F0aW9uKHJlc3VsdCwgcmVkaXJlY3ROYXZpZ2F0aW9uKTtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIFByb2Nlc3MgYW55IG5vbi1yZWRpcmVjdCBlcnJvcnMgdGhyb3duXG5cblxuICAgIGlmIChpc0Vycm9yUmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgIGxldCBib3VuZGFyeU1hdGNoID0gZmluZE5lYXJlc3RCb3VuZGFyeShzdGF0ZS5tYXRjaGVzLCByb3V0ZUlkKTtcbiAgICAgIHN0YXRlLmZldGNoZXJzLmRlbGV0ZShrZXkpOyAvLyBUT0RPOiBJbiByZW1peCwgdGhpcyB3b3VsZCByZXNldCB0byBJRExFX05BVklHQVRJT04gaWYgaXQgd2FzIGEgY2F0Y2ggLVxuICAgICAgLy8gZG8gd2UgbmVlZCB0byBiZWhhdmUgYW55IGRpZmZlcmVudGx5IHdpdGggb3VyIG5vbi1yZWRpcmVjdCBlcnJvcnM/XG4gICAgICAvLyBXaGF0IGlmIGl0IHdhcyBhIG5vbi1yZWRpcmVjdCBSZXNwb25zZT9cblxuICAgICAgdXBkYXRlU3RhdGUoe1xuICAgICAgICBmZXRjaGVyczogbmV3IE1hcChzdGF0ZS5mZXRjaGVycyksXG4gICAgICAgIGVycm9yczoge1xuICAgICAgICAgIFtib3VuZGFyeU1hdGNoLnJvdXRlLmlkXTogcmVzdWx0LmVycm9yXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGludmFyaWFudCghaXNEZWZlcnJlZFJlc3VsdChyZXN1bHQpLCBcIlVuaGFuZGxlZCBmZXRjaGVyIGRlZmVycmVkIGRhdGFcIik7IC8vIFB1dCB0aGUgZmV0Y2hlciBiYWNrIGludG8gYW4gaWRsZSBzdGF0ZVxuXG4gICAgbGV0IGRvbmVGZXRjaGVyID0ge1xuICAgICAgc3RhdGU6IFwiaWRsZVwiLFxuICAgICAgZGF0YTogcmVzdWx0LmRhdGEsXG4gICAgICBmb3JtTWV0aG9kOiB1bmRlZmluZWQsXG4gICAgICBmb3JtQWN0aW9uOiB1bmRlZmluZWQsXG4gICAgICBmb3JtRW5jVHlwZTogdW5kZWZpbmVkLFxuICAgICAgZm9ybURhdGE6IHVuZGVmaW5lZFxuICAgIH07XG4gICAgc3RhdGUuZmV0Y2hlcnMuc2V0KGtleSwgZG9uZUZldGNoZXIpO1xuICAgIHVwZGF0ZVN0YXRlKHtcbiAgICAgIGZldGNoZXJzOiBuZXcgTWFwKHN0YXRlLmZldGNoZXJzKVxuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBVdGlsaXR5IGZ1bmN0aW9uIHRvIGhhbmRsZSByZWRpcmVjdHMgcmV0dXJuZWQgZnJvbSBhbiBhY3Rpb24gb3IgbG9hZGVyLlxuICAgKiBOb3JtYWxseSwgYSByZWRpcmVjdCBcInJlcGxhY2VzXCIgdGhlIG5hdmlnYXRpb24gdGhhdCB0cmlnZ2VyZWQgaXQuICBTbywgZm9yXG4gICAqIGV4YW1wbGU6XG4gICAqXG4gICAqICAtIHVzZXIgaXMgb24gL2FcbiAgICogIC0gdXNlciBjbGlja3MgYSBsaW5rIHRvIC9iXG4gICAqICAtIGxvYWRlciBmb3IgL2IgcmVkaXJlY3RzIHRvIC9jXG4gICAqXG4gICAqIEluIGEgbm9uLUpTIGFwcCB0aGUgYnJvd3NlciB3b3VsZCB0cmFjayB0aGUgaW4tZmxpZ2h0IG5hdmlnYXRpb24gdG8gL2IgYW5kXG4gICAqIHRoZW4gcmVwbGFjZSBpdCB3aXRoIC9jIHdoZW4gaXQgZW5jb3VudGVyZWQgdGhlIHJlZGlyZWN0IHJlc3BvbnNlLiAgSW5cbiAgICogdGhlIGVuZCBpdCB3b3VsZCBvbmx5IGV2ZXIgdXBkYXRlIHRoZSBVUkwgYmFyIHdpdGggL2MuXG4gICAqXG4gICAqIEluIGNsaWVudC1zaWRlIHJvdXRpbmcgdXNpbmcgcHVzaFN0YXRlL3JlcGxhY2VTdGF0ZSwgd2UgYWltIHRvIGVtdWxhdGVcbiAgICogdGhpcyBiZWhhdmlvciBhbmQgd2UgYWxzbyBkbyBub3QgdXBkYXRlIGhpc3RvcnkgdW50aWwgdGhlIGVuZCBvZiB0aGVcbiAgICogbmF2aWdhdGlvbiAoaW5jbHVkaW5nIHByb2Nlc3NlZCByZWRpcmVjdHMpLiAgVGhpcyBtZWFucyB0aGF0IHdlIG5ldmVyXG4gICAqIGFjdHVhbGx5IHRvdWNoIGhpc3RvcnkgdW50aWwgd2UndmUgcHJvY2Vzc2VkIHJlZGlyZWN0cywgc28gd2UganVzdCB1c2VcbiAgICogdGhlIGhpc3RvcnkgYWN0aW9uIGZyb20gdGhlIG9yaWdpbmFsIG5hdmlnYXRpb24gKFBVU0ggb3IgUkVQTEFDRSkuXG4gICAqL1xuXG5cbiAgYXN5bmMgZnVuY3Rpb24gc3RhcnRSZWRpcmVjdE5hdmlnYXRpb24ocmVkaXJlY3QsIG5hdmlnYXRpb24sIHJlcGxhY2UpIHtcbiAgICBpZiAocmVkaXJlY3QucmV2YWxpZGF0ZSkge1xuICAgICAgaXNSZXZhbGlkYXRpb25SZXF1aXJlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgaW52YXJpYW50KG5hdmlnYXRpb24ubG9jYXRpb24sIFwiRXhwZWN0ZWQgYSBsb2NhdGlvbiBvbiB0aGUgcmVkaXJlY3QgbmF2aWdhdGlvblwiKTsgLy8gVGhlcmUncyBubyBuZWVkIHRvIGFib3J0IG9uIHJlZGlyZWN0cywgc2luY2Ugd2UgZG9uJ3QgZGV0ZWN0IHRoZVxuICAgIC8vIHJlZGlyZWN0IHVudGlsIHRoZSBhY3Rpb24vbG9hZGVycyBoYXZlIHNldHRsZWRcblxuICAgIHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlciA9IG51bGw7XG4gICAgbGV0IHJlZGlyZWN0SGlzdG9yeUFjdGlvbiA9IHJlcGxhY2UgPT09IHRydWUgPyBBY3Rpb24uUmVwbGFjZSA6IEFjdGlvbi5QdXNoO1xuICAgIGF3YWl0IHN0YXJ0TmF2aWdhdGlvbihyZWRpcmVjdEhpc3RvcnlBY3Rpb24sIG5hdmlnYXRpb24ubG9jYXRpb24sIHtcbiAgICAgIG92ZXJyaWRlTmF2aWdhdGlvbjogbmF2aWdhdGlvblxuICAgIH0pO1xuICB9XG5cbiAgYXN5bmMgZnVuY3Rpb24gY2FsbExvYWRlcnNBbmRNYXliZVJlc29sdmVEYXRhKGN1cnJlbnRNYXRjaGVzLCBtYXRjaGVzLCBtYXRjaGVzVG9Mb2FkLCBmZXRjaGVyc1RvTG9hZCwgcmVxdWVzdCkge1xuICAgIC8vIENhbGwgYWxsIG5hdmlnYXRpb24gbG9hZGVycyBhbmQgcmV2YWxpZGF0aW5nIGZldGNoZXIgbG9hZGVycyBpbiBwYXJhbGxlbCxcbiAgICAvLyB0aGVuIHNsaWNlIG9mZiB0aGUgcmVzdWx0cyBpbnRvIHNlcGFyYXRlIGFycmF5cyBzbyB3ZSBjYW4gaGFuZGxlIHRoZW1cbiAgICAvLyBhY2NvcmRpbmdseVxuICAgIGxldCByZXN1bHRzID0gYXdhaXQgUHJvbWlzZS5hbGwoWy4uLm1hdGNoZXNUb0xvYWQubWFwKG1hdGNoID0+IGNhbGxMb2FkZXJPckFjdGlvbihcImxvYWRlclwiLCByZXF1ZXN0LCBtYXRjaCwgbWF0Y2hlcywgcm91dGVyLmJhc2VuYW1lKSksIC4uLmZldGNoZXJzVG9Mb2FkLm1hcChfcmVmOCA9PiB7XG4gICAgICBsZXQgWywgaHJlZiwgbWF0Y2gsIGZldGNoTWF0Y2hlc10gPSBfcmVmODtcbiAgICAgIHJldHVybiBjYWxsTG9hZGVyT3JBY3Rpb24oXCJsb2FkZXJcIiwgY3JlYXRlUmVxdWVzdChocmVmLCByZXF1ZXN0LnNpZ25hbCksIG1hdGNoLCBmZXRjaE1hdGNoZXMsIHJvdXRlci5iYXNlbmFtZSk7XG4gICAgfSldKTtcbiAgICBsZXQgbG9hZGVyUmVzdWx0cyA9IHJlc3VsdHMuc2xpY2UoMCwgbWF0Y2hlc1RvTG9hZC5sZW5ndGgpO1xuICAgIGxldCBmZXRjaGVyUmVzdWx0cyA9IHJlc3VsdHMuc2xpY2UobWF0Y2hlc1RvTG9hZC5sZW5ndGgpO1xuICAgIGF3YWl0IFByb21pc2UuYWxsKFtyZXNvbHZlRGVmZXJyZWRSZXN1bHRzKGN1cnJlbnRNYXRjaGVzLCBtYXRjaGVzVG9Mb2FkLCBsb2FkZXJSZXN1bHRzLCByZXF1ZXN0LnNpZ25hbCwgZmFsc2UsIHN0YXRlLmxvYWRlckRhdGEpLCByZXNvbHZlRGVmZXJyZWRSZXN1bHRzKGN1cnJlbnRNYXRjaGVzLCBmZXRjaGVyc1RvTG9hZC5tYXAoX3JlZjkgPT4ge1xuICAgICAgbGV0IFssLCBtYXRjaF0gPSBfcmVmOTtcbiAgICAgIHJldHVybiBtYXRjaDtcbiAgICB9KSwgZmV0Y2hlclJlc3VsdHMsIHJlcXVlc3Quc2lnbmFsLCB0cnVlKV0pO1xuICAgIHJldHVybiB7XG4gICAgICByZXN1bHRzLFxuICAgICAgbG9hZGVyUmVzdWx0cyxcbiAgICAgIGZldGNoZXJSZXN1bHRzXG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGludGVycnVwdEFjdGl2ZUxvYWRzKCkge1xuICAgIC8vIEV2ZXJ5IGludGVycnVwdGlvbiB0cmlnZ2VycyBhIHJldmFsaWRhdGlvblxuICAgIGlzUmV2YWxpZGF0aW9uUmVxdWlyZWQgPSB0cnVlOyAvLyBDYW5jZWwgcGVuZGluZyByb3V0ZS1sZXZlbCBkZWZlcnJlZHMgYW5kIG1hcmsgY2FuY2VsbGVkIHJvdXRlcyBmb3JcbiAgICAvLyByZXZhbGlkYXRpb25cblxuICAgIGNhbmNlbGxlZERlZmVycmVkUm91dGVzLnB1c2goLi4uY2FuY2VsQWN0aXZlRGVmZXJyZWRzKCkpOyAvLyBBYm9ydCBpbi1mbGlnaHQgZmV0Y2hlciBsb2Fkc1xuXG4gICAgZmV0Y2hMb2FkTWF0Y2hlcy5mb3JFYWNoKChfLCBrZXkpID0+IHtcbiAgICAgIGlmIChmZXRjaENvbnRyb2xsZXJzLmhhcyhrZXkpKSB7XG4gICAgICAgIGNhbmNlbGxlZEZldGNoZXJMb2Fkcy5wdXNoKGtleSk7XG4gICAgICAgIGFib3J0RmV0Y2hlcihrZXkpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gc2V0RmV0Y2hlckVycm9yKGtleSwgcm91dGVJZCwgZXJyb3IpIHtcbiAgICBsZXQgYm91bmRhcnlNYXRjaCA9IGZpbmROZWFyZXN0Qm91bmRhcnkoc3RhdGUubWF0Y2hlcywgcm91dGVJZCk7XG4gICAgZGVsZXRlRmV0Y2hlcihrZXkpO1xuICAgIHVwZGF0ZVN0YXRlKHtcbiAgICAgIGVycm9yczoge1xuICAgICAgICBbYm91bmRhcnlNYXRjaC5yb3V0ZS5pZF06IGVycm9yXG4gICAgICB9LFxuICAgICAgZmV0Y2hlcnM6IG5ldyBNYXAoc3RhdGUuZmV0Y2hlcnMpXG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBkZWxldGVGZXRjaGVyKGtleSkge1xuICAgIGlmIChmZXRjaENvbnRyb2xsZXJzLmhhcyhrZXkpKSBhYm9ydEZldGNoZXIoa2V5KTtcbiAgICBmZXRjaExvYWRNYXRjaGVzLmRlbGV0ZShrZXkpO1xuICAgIGZldGNoUmVsb2FkSWRzLmRlbGV0ZShrZXkpO1xuICAgIGZldGNoUmVkaXJlY3RJZHMuZGVsZXRlKGtleSk7XG4gICAgc3RhdGUuZmV0Y2hlcnMuZGVsZXRlKGtleSk7XG4gIH1cblxuICBmdW5jdGlvbiBhYm9ydEZldGNoZXIoa2V5KSB7XG4gICAgbGV0IGNvbnRyb2xsZXIgPSBmZXRjaENvbnRyb2xsZXJzLmdldChrZXkpO1xuICAgIGludmFyaWFudChjb250cm9sbGVyLCBcIkV4cGVjdGVkIGZldGNoIGNvbnRyb2xsZXI6IFwiICsga2V5KTtcbiAgICBjb250cm9sbGVyLmFib3J0KCk7XG4gICAgZmV0Y2hDb250cm9sbGVycy5kZWxldGUoa2V5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1hcmtGZXRjaGVyc0RvbmUoa2V5cykge1xuICAgIGZvciAobGV0IGtleSBvZiBrZXlzKSB7XG4gICAgICBsZXQgZmV0Y2hlciA9IGdldEZldGNoZXIoa2V5KTtcbiAgICAgIGxldCBkb25lRmV0Y2hlciA9IHtcbiAgICAgICAgc3RhdGU6IFwiaWRsZVwiLFxuICAgICAgICBkYXRhOiBmZXRjaGVyLmRhdGEsXG4gICAgICAgIGZvcm1NZXRob2Q6IHVuZGVmaW5lZCxcbiAgICAgICAgZm9ybUFjdGlvbjogdW5kZWZpbmVkLFxuICAgICAgICBmb3JtRW5jVHlwZTogdW5kZWZpbmVkLFxuICAgICAgICBmb3JtRGF0YTogdW5kZWZpbmVkXG4gICAgICB9O1xuICAgICAgc3RhdGUuZmV0Y2hlcnMuc2V0KGtleSwgZG9uZUZldGNoZXIpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG1hcmtGZXRjaFJlZGlyZWN0c0RvbmUoKSB7XG4gICAgbGV0IGRvbmVLZXlzID0gW107XG5cbiAgICBmb3IgKGxldCBrZXkgb2YgZmV0Y2hSZWRpcmVjdElkcykge1xuICAgICAgbGV0IGZldGNoZXIgPSBzdGF0ZS5mZXRjaGVycy5nZXQoa2V5KTtcbiAgICAgIGludmFyaWFudChmZXRjaGVyLCBcIkV4cGVjdGVkIGZldGNoZXI6IFwiICsga2V5KTtcblxuICAgICAgaWYgKGZldGNoZXIuc3RhdGUgPT09IFwibG9hZGluZ1wiKSB7XG4gICAgICAgIGZldGNoUmVkaXJlY3RJZHMuZGVsZXRlKGtleSk7XG4gICAgICAgIGRvbmVLZXlzLnB1c2goa2V5KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBtYXJrRmV0Y2hlcnNEb25lKGRvbmVLZXlzKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFib3J0U3RhbGVGZXRjaExvYWRzKGxhbmRlZElkKSB7XG4gICAgbGV0IHllZXRlZEtleXMgPSBbXTtcblxuICAgIGZvciAobGV0IFtrZXksIGlkXSBvZiBmZXRjaFJlbG9hZElkcykge1xuICAgICAgaWYgKGlkIDwgbGFuZGVkSWQpIHtcbiAgICAgICAgbGV0IGZldGNoZXIgPSBzdGF0ZS5mZXRjaGVycy5nZXQoa2V5KTtcbiAgICAgICAgaW52YXJpYW50KGZldGNoZXIsIFwiRXhwZWN0ZWQgZmV0Y2hlcjogXCIgKyBrZXkpO1xuXG4gICAgICAgIGlmIChmZXRjaGVyLnN0YXRlID09PSBcImxvYWRpbmdcIikge1xuICAgICAgICAgIGFib3J0RmV0Y2hlcihrZXkpO1xuICAgICAgICAgIGZldGNoUmVsb2FkSWRzLmRlbGV0ZShrZXkpO1xuICAgICAgICAgIHllZXRlZEtleXMucHVzaChrZXkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgbWFya0ZldGNoZXJzRG9uZSh5ZWV0ZWRLZXlzKTtcbiAgICByZXR1cm4geWVldGVkS2V5cy5sZW5ndGggPiAwO1xuICB9XG5cbiAgZnVuY3Rpb24gY2FuY2VsQWN0aXZlRGVmZXJyZWRzKHByZWRpY2F0ZSkge1xuICAgIGxldCBjYW5jZWxsZWRSb3V0ZUlkcyA9IFtdO1xuICAgIGFjdGl2ZURlZmVycmVkcy5mb3JFYWNoKChkZmQsIHJvdXRlSWQpID0+IHtcbiAgICAgIGlmICghcHJlZGljYXRlIHx8IHByZWRpY2F0ZShyb3V0ZUlkKSkge1xuICAgICAgICAvLyBDYW5jZWwgdGhlIGRlZmVycmVkIC0gYnV0IGRvIG5vdCByZW1vdmUgZnJvbSBhY3RpdmVEZWZlcnJlZHMgaGVyZSAtXG4gICAgICAgIC8vIHdlIHJlbHkgb24gdGhlIHN1YnNjcmliZXJzIHRvIGRvIHRoYXQgc28gb3VyIHRlc3RzIGNhbiBhc3NlcnQgcHJvcGVyXG4gICAgICAgIC8vIGNsZWFudXAgdmlhIF9pbnRlcm5hbEFjdGl2ZURlZmVycmVkc1xuICAgICAgICBkZmQuY2FuY2VsKCk7XG4gICAgICAgIGNhbmNlbGxlZFJvdXRlSWRzLnB1c2gocm91dGVJZCk7XG4gICAgICAgIGFjdGl2ZURlZmVycmVkcy5kZWxldGUocm91dGVJZCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGNhbmNlbGxlZFJvdXRlSWRzO1xuICB9IC8vIE9wdCBpbiB0byBjYXB0dXJpbmcgYW5kIHJlcG9ydGluZyBzY3JvbGwgcG9zaXRpb25zIGR1cmluZyBuYXZpZ2F0aW9ucyxcbiAgLy8gdXNlZCBieSB0aGUgPFNjcm9sbFJlc3RvcmF0aW9uPiBjb21wb25lbnRcblxuXG4gIGZ1bmN0aW9uIGVuYWJsZVNjcm9sbFJlc3RvcmF0aW9uKHBvc2l0aW9ucywgZ2V0UG9zaXRpb24sIGdldEtleSkge1xuICAgIHNhdmVkU2Nyb2xsUG9zaXRpb25zID0gcG9zaXRpb25zO1xuICAgIGdldFNjcm9sbFBvc2l0aW9uID0gZ2V0UG9zaXRpb247XG5cbiAgICBnZXRTY3JvbGxSZXN0b3JhdGlvbktleSA9IGdldEtleSB8fCAobG9jYXRpb24gPT4gbG9jYXRpb24ua2V5KTsgLy8gUGVyZm9ybSBpbml0aWFsIGh5ZHJhdGlvbiBzY3JvbGwgcmVzdG9yYXRpb24sIHNpbmNlIHdlIG1pc3MgdGhlIGJvYXQgb25cbiAgICAvLyB0aGUgaW5pdGlhbCB1cGRhdGVTdGF0ZSgpIGJlY2F1c2Ugd2UndmUgbm90IHlldCByZW5kZXJlZCA8U2Nyb2xsUmVzdG9yYXRpb24vPlxuICAgIC8vIGFuZCB0aGVyZWZvcmUgaGF2ZSBubyBzYXZlZFNjcm9sbFBvc2l0aW9ucyBhdmFpbGFibGVcblxuXG4gICAgaWYgKCFpbml0aWFsU2Nyb2xsUmVzdG9yZWQgJiYgc3RhdGUubmF2aWdhdGlvbiA9PT0gSURMRV9OQVZJR0FUSU9OKSB7XG4gICAgICBpbml0aWFsU2Nyb2xsUmVzdG9yZWQgPSB0cnVlO1xuICAgICAgbGV0IHkgPSBnZXRTYXZlZFNjcm9sbFBvc2l0aW9uKHN0YXRlLmxvY2F0aW9uLCBzdGF0ZS5tYXRjaGVzKTtcblxuICAgICAgaWYgKHkgIT0gbnVsbCkge1xuICAgICAgICB1cGRhdGVTdGF0ZSh7XG4gICAgICAgICAgcmVzdG9yZVNjcm9sbFBvc2l0aW9uOiB5XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBzYXZlZFNjcm9sbFBvc2l0aW9ucyA9IG51bGw7XG4gICAgICBnZXRTY3JvbGxQb3NpdGlvbiA9IG51bGw7XG4gICAgICBnZXRTY3JvbGxSZXN0b3JhdGlvbktleSA9IG51bGw7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNhdmVTY3JvbGxQb3NpdGlvbihsb2NhdGlvbiwgbWF0Y2hlcykge1xuICAgIGlmIChzYXZlZFNjcm9sbFBvc2l0aW9ucyAmJiBnZXRTY3JvbGxSZXN0b3JhdGlvbktleSAmJiBnZXRTY3JvbGxQb3NpdGlvbikge1xuICAgICAgbGV0IHVzZXJNYXRjaGVzID0gbWF0Y2hlcy5tYXAobSA9PiBjcmVhdGVVc2VNYXRjaGVzTWF0Y2gobSwgc3RhdGUubG9hZGVyRGF0YSkpO1xuICAgICAgbGV0IGtleSA9IGdldFNjcm9sbFJlc3RvcmF0aW9uS2V5KGxvY2F0aW9uLCB1c2VyTWF0Y2hlcykgfHwgbG9jYXRpb24ua2V5O1xuICAgICAgc2F2ZWRTY3JvbGxQb3NpdGlvbnNba2V5XSA9IGdldFNjcm9sbFBvc2l0aW9uKCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZ2V0U2F2ZWRTY3JvbGxQb3NpdGlvbihsb2NhdGlvbiwgbWF0Y2hlcykge1xuICAgIGlmIChzYXZlZFNjcm9sbFBvc2l0aW9ucyAmJiBnZXRTY3JvbGxSZXN0b3JhdGlvbktleSAmJiBnZXRTY3JvbGxQb3NpdGlvbikge1xuICAgICAgbGV0IHVzZXJNYXRjaGVzID0gbWF0Y2hlcy5tYXAobSA9PiBjcmVhdGVVc2VNYXRjaGVzTWF0Y2gobSwgc3RhdGUubG9hZGVyRGF0YSkpO1xuICAgICAgbGV0IGtleSA9IGdldFNjcm9sbFJlc3RvcmF0aW9uS2V5KGxvY2F0aW9uLCB1c2VyTWF0Y2hlcykgfHwgbG9jYXRpb24ua2V5O1xuICAgICAgbGV0IHkgPSBzYXZlZFNjcm9sbFBvc2l0aW9uc1trZXldO1xuXG4gICAgICBpZiAodHlwZW9mIHkgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgcmV0dXJuIHk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByb3V0ZXIgPSB7XG4gICAgZ2V0IGJhc2VuYW1lKCkge1xuICAgICAgcmV0dXJuIGluaXQuYmFzZW5hbWU7XG4gICAgfSxcblxuICAgIGdldCBzdGF0ZSgpIHtcbiAgICAgIHJldHVybiBzdGF0ZTtcbiAgICB9LFxuXG4gICAgZ2V0IHJvdXRlcygpIHtcbiAgICAgIHJldHVybiBkYXRhUm91dGVzO1xuICAgIH0sXG5cbiAgICBpbml0aWFsaXplLFxuICAgIHN1YnNjcmliZSxcbiAgICBlbmFibGVTY3JvbGxSZXN0b3JhdGlvbixcbiAgICBuYXZpZ2F0ZSxcbiAgICBmZXRjaCxcbiAgICByZXZhbGlkYXRlLFxuICAgIC8vIFBhc3N0aHJvdWdoIHRvIGhpc3RvcnktYXdhcmUgY3JlYXRlSHJlZiB1c2VkIGJ5IHVzZUhyZWYgc28gd2UgZ2V0IHByb3BlclxuICAgIC8vIGhhc2gtYXdhcmUgVVJMcyBpbiBET00gcGF0aHNcbiAgICBjcmVhdGVIcmVmOiB0byA9PiBpbml0Lmhpc3RvcnkuY3JlYXRlSHJlZih0byksXG4gICAgZ2V0RmV0Y2hlcixcbiAgICBkZWxldGVGZXRjaGVyLFxuICAgIGRpc3Bvc2UsXG4gICAgX2ludGVybmFsRmV0Y2hDb250cm9sbGVyczogZmV0Y2hDb250cm9sbGVycyxcbiAgICBfaW50ZXJuYWxBY3RpdmVEZWZlcnJlZHM6IGFjdGl2ZURlZmVycmVkc1xuICB9O1xuICByZXR1cm4gcm91dGVyO1xufSAvLyNlbmRyZWdpb25cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyNyZWdpb24gY3JlYXRlU3RhdGljSGFuZGxlclxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuY29uc3QgdmFsaWRBY3Rpb25NZXRob2RzID0gbmV3IFNldChbXCJQT1NUXCIsIFwiUFVUXCIsIFwiUEFUQ0hcIiwgXCJERUxFVEVcIl0pO1xuY29uc3QgdmFsaWRSZXF1ZXN0TWV0aG9kcyA9IG5ldyBTZXQoW1wiR0VUXCIsIFwiSEVBRFwiLCAuLi52YWxpZEFjdGlvbk1ldGhvZHNdKTtcbmZ1bmN0aW9uIHVuc3RhYmxlX2NyZWF0ZVN0YXRpY0hhbmRsZXIocm91dGVzKSB7XG4gIGludmFyaWFudChyb3V0ZXMubGVuZ3RoID4gMCwgXCJZb3UgbXVzdCBwcm92aWRlIGEgbm9uLWVtcHR5IHJvdXRlcyBhcnJheSB0byB1bnN0YWJsZV9jcmVhdGVTdGF0aWNIYW5kbGVyXCIpO1xuICBsZXQgZGF0YVJvdXRlcyA9IGNvbnZlcnRSb3V0ZXNUb0RhdGFSb3V0ZXMocm91dGVzKTtcbiAgLyoqXG4gICAqIFRoZSBxdWVyeSgpIG1ldGhvZCBpcyBpbnRlbmRlZCBmb3IgZG9jdW1lbnQgcmVxdWVzdHMsIGluIHdoaWNoIHdlIHdhbnQgdG9cbiAgICogY2FsbCBhbiBvcHRpb25hbCBhY3Rpb24gYW5kIHBvdGVudGlhbGx5IG11bHRpcGxlIGxvYWRlcnMgZm9yIGFsbCBuZXN0ZWRcbiAgICogcm91dGVzLiAgSXQgcmV0dXJucyBhIFN0YXRpY0hhbmRsZXJDb250ZXh0IG9iamVjdCwgd2hpY2ggaXMgdmVyeSBzaW1pbGFyXG4gICAqIHRvIHRoZSByb3V0ZXIgc3RhdGUgKGxvY2F0aW9uLCBsb2FkZXJEYXRhLCBhY3Rpb25EYXRhLCBlcnJvcnMsIGV0Yy4pIGFuZFxuICAgKiBhbHNvIGFkZHMgU1NSLXNwZWNpZmljIGluZm9ybWF0aW9uIHN1Y2ggYXMgdGhlIHN0YXR1c0NvZGUgYW5kIGhlYWRlcnNcbiAgICogZnJvbSBhY3Rpb24vbG9hZGVycyBSZXNwb25zZXMuXG4gICAqXG4gICAqIEl0IF9zaG91bGRfIG5ldmVyIHRocm93IGFuZCBzaG91bGQgcmVwb3J0IGFsbCBlcnJvcnMgdGhyb3VnaCB0aGVcbiAgICogcmV0dXJuZWQgY29udGV4dC5lcnJvcnMgb2JqZWN0LCBwcm9wZXJseSBhc3NvY2lhdGluZyBlcnJvcnMgdG8gdGhlaXIgZXJyb3JcbiAgICogYm91bmRhcnkuICBBZGRpdGlvbmFsbHksIGl0IHRyYWNrcyBfZGVlcGVzdFJlbmRlcmVkQm91bmRhcnlJZCB3aGljaCBjYW4gYmVcbiAgICogdXNlZCB0byBlbXVsYXRlIFJlYWN0IGVycm9yIGJvdW5kYXJpZXMgZHVyaW5nIFNTciBieSBwZXJmb3JtaW5nIGEgc2Vjb25kXG4gICAqIHBhc3Mgb25seSBkb3duIHRvIHRoZSBib3VuZGFyeUlkLlxuICAgKlxuICAgKiBUaGUgb25lIGV4Y2VwdGlvbiB3aGVyZSB3ZSBkbyBub3QgcmV0dXJuIGEgU3RhdGljSGFuZGxlckNvbnRleHQgaXMgd2hlbiBhXG4gICAqIHJlZGlyZWN0IHJlc3BvbnNlIGlzIHJldHVybmVkIG9yIHRocm93biBmcm9tIGFueSBhY3Rpb24vbG9hZGVyLiAgV2VcbiAgICogcHJvcGFnYXRlIHRoYXQgb3V0IGFuZCByZXR1cm4gdGhlIHJhdyBSZXNwb25zZSBzbyB0aGUgSFRUUCBzZXJ2ZXIgY2FuXG4gICAqIHJldHVybiBpdCBkaXJlY3RseS5cbiAgICovXG5cbiAgYXN5bmMgZnVuY3Rpb24gcXVlcnkocmVxdWVzdCkge1xuICAgIGxldCB1cmwgPSBuZXcgVVJMKHJlcXVlc3QudXJsKTtcbiAgICBsZXQgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihcIlwiLCBjcmVhdGVQYXRoKHVybCksIG51bGwsIFwiZGVmYXVsdFwiKTtcbiAgICBsZXQgbWF0Y2hlcyA9IG1hdGNoUm91dGVzKGRhdGFSb3V0ZXMsIGxvY2F0aW9uKTtcblxuICAgIGlmICghdmFsaWRSZXF1ZXN0TWV0aG9kcy5oYXMocmVxdWVzdC5tZXRob2QpKSB7XG4gICAgICBsZXQge1xuICAgICAgICBtYXRjaGVzOiBtZXRob2ROb3RBbGxvd2VkTWF0Y2hlcyxcbiAgICAgICAgcm91dGUsXG4gICAgICAgIGVycm9yXG4gICAgICB9ID0gZ2V0TWV0aG9kTm90QWxsb3dlZE1hdGNoZXMoZGF0YVJvdXRlcyk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBsb2NhdGlvbixcbiAgICAgICAgbWF0Y2hlczogbWV0aG9kTm90QWxsb3dlZE1hdGNoZXMsXG4gICAgICAgIGxvYWRlckRhdGE6IHt9LFxuICAgICAgICBhY3Rpb25EYXRhOiBudWxsLFxuICAgICAgICBlcnJvcnM6IHtcbiAgICAgICAgICBbcm91dGUuaWRdOiBlcnJvclxuICAgICAgICB9LFxuICAgICAgICBzdGF0dXNDb2RlOiBlcnJvci5zdGF0dXMsXG4gICAgICAgIGxvYWRlckhlYWRlcnM6IHt9LFxuICAgICAgICBhY3Rpb25IZWFkZXJzOiB7fVxuICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKCFtYXRjaGVzKSB7XG4gICAgICBsZXQge1xuICAgICAgICBtYXRjaGVzOiBub3RGb3VuZE1hdGNoZXMsXG4gICAgICAgIHJvdXRlLFxuICAgICAgICBlcnJvclxuICAgICAgfSA9IGdldE5vdEZvdW5kTWF0Y2hlcyhkYXRhUm91dGVzKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGxvY2F0aW9uLFxuICAgICAgICBtYXRjaGVzOiBub3RGb3VuZE1hdGNoZXMsXG4gICAgICAgIGxvYWRlckRhdGE6IHt9LFxuICAgICAgICBhY3Rpb25EYXRhOiBudWxsLFxuICAgICAgICBlcnJvcnM6IHtcbiAgICAgICAgICBbcm91dGUuaWRdOiBlcnJvclxuICAgICAgICB9LFxuICAgICAgICBzdGF0dXNDb2RlOiBlcnJvci5zdGF0dXMsXG4gICAgICAgIGxvYWRlckhlYWRlcnM6IHt9LFxuICAgICAgICBhY3Rpb25IZWFkZXJzOiB7fVxuICAgICAgfTtcbiAgICB9XG5cbiAgICBsZXQgcmVzdWx0ID0gYXdhaXQgcXVlcnlJbXBsKHJlcXVlc3QsIGxvY2F0aW9uLCBtYXRjaGVzKTtcblxuICAgIGlmIChyZXN1bHQgaW5zdGFuY2VvZiBSZXNwb25zZSkge1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9IC8vIFdoZW4gcmV0dXJuaW5nIFN0YXRpY0hhbmRsZXJDb250ZXh0LCB3ZSBwYXRjaCBiYWNrIGluIHRoZSBsb2NhdGlvbiBoZXJlXG4gICAgLy8gc2luY2Ugd2UgbmVlZCBpdCBmb3IgUmVhY3QgQ29udGV4dC4gIEJ1dCB0aGlzIGhlbHBzIGtlZXAgb3VyIHN1Ym1pdCBhbmRcbiAgICAvLyBsb2FkUm91dGVEYXRhIG9wZXJhdGluZyBvbiBhIFJlcXVlc3QgaW5zdGVhZCBvZiBhIExvY2F0aW9uXG5cblxuICAgIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgICBsb2NhdGlvblxuICAgIH0sIHJlc3VsdCk7XG4gIH1cbiAgLyoqXG4gICAqIFRoZSBxdWVyeVJvdXRlKCkgbWV0aG9kIGlzIGludGVuZGVkIGZvciB0YXJnZXRlZCByb3V0ZSByZXF1ZXN0cywgZWl0aGVyXG4gICAqIGZvciBmZXRjaCA/X2RhdGEgcmVxdWVzdHMgb3IgcmVzb3VyY2Ugcm91dGUgcmVxdWVzdHMuICBJbiB0aGlzIGNhc2UsIHdlXG4gICAqIGFyZSBvbmx5IGV2ZXIgY2FsbGluZyBhIHNpbmdsZSBhY3Rpb24gb3IgbG9hZGVyLCBhbmQgd2UgYXJlIHJldHVybmluZyB0aGVcbiAgICogcmV0dXJuZWQgdmFsdWUgZGlyZWN0bHkuICBJbiBtb3N0IGNhc2VzLCB0aGlzIHdpbGwgYmUgYSBSZXNwb25zZSByZXR1cm5lZFxuICAgKiBmcm9tIHRoZSBhY3Rpb24vbG9hZGVyLCBidXQgaXQgbWF5IGJlIGEgcHJpbWl0aXZlIG9yIG90aGVyIHZhbHVlIGFzIHdlbGwgLVxuICAgKiBhbmQgaW4gc3VjaCBjYXNlcyB0aGUgY2FsbGluZyBjb250ZXh0IHNob3VsZCBoYW5kbGUgdGhhdCBhY2NvcmRpbmdseS5cbiAgICpcbiAgICogV2UgZG8gcmVzcGVjdCB0aGUgdGhyb3cvcmV0dXJuIGRpZmZlcmVudGlhdGlvbiwgc28gaWYgYW4gYWN0aW9uL2xvYWRlclxuICAgKiB0aHJvd3MsIHRoZW4gdGhpcyBtZXRob2Qgd2lsbCB0aHJvdyB0aGUgdmFsdWUuICBUaGlzIGlzIGltcG9ydGFudCBzbyB3ZVxuICAgKiBjYW4gZG8gcHJvcGVyIGJvdW5kYXJ5IGlkZW50aWZpY2F0aW9uIGluIFJlbWl4IHdoZXJlIGEgdGhyb3duIFJlc3BvbnNlXG4gICAqIG11c3QgZ28gdG8gdGhlIENhdGNoIEJvdW5kYXJ5IGJ1dCBhIHJldHVybmVkIFJlc3BvbnNlIGlzIGhhcHB5LXBhdGguXG4gICAqXG4gICAqIE9uZSB0aGluZyB0byBub3RlIGlzIHRoYXQgYW55IFJvdXRlci1pbml0aWF0ZWQgdGhyb3duIFJlc3BvbnNlIChzdWNoIGFzIGFcbiAgICogNDA0IG9yIDQwNSkgd2lsbCBoYXZlIGEgY3VzdG9tIFgtUmVtaXgtUm91dGVyLUVycm9yOiBcInllc1wiIGhlYWRlciBvbiBpdFxuICAgKiBpbiBvcmRlciB0byBkaWZmZXJlbnRpYXRlIGZyb20gcmVzcG9uc2VzIHRocm93biBmcm9tIHVzZXIgYWN0aW9ucy9sb2FkZXJzLlxuICAgKi9cblxuXG4gIGFzeW5jIGZ1bmN0aW9uIHF1ZXJ5Um91dGUocmVxdWVzdCwgcm91dGVJZCkge1xuICAgIGxldCB1cmwgPSBuZXcgVVJMKHJlcXVlc3QudXJsKTtcbiAgICBsZXQgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihcIlwiLCBjcmVhdGVQYXRoKHVybCksIG51bGwsIFwiZGVmYXVsdFwiKTtcbiAgICBsZXQgbWF0Y2hlcyA9IG1hdGNoUm91dGVzKGRhdGFSb3V0ZXMsIGxvY2F0aW9uKTtcblxuICAgIGlmICghdmFsaWRSZXF1ZXN0TWV0aG9kcy5oYXMocmVxdWVzdC5tZXRob2QpKSB7XG4gICAgICB0aHJvdyBjcmVhdGVSb3V0ZXJFcnJvclJlc3BvbnNlKG51bGwsIHtcbiAgICAgICAgc3RhdHVzOiA0MDUsXG4gICAgICAgIHN0YXR1c1RleHQ6IFwiTWV0aG9kIE5vdCBBbGxvd2VkXCJcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoIW1hdGNoZXMpIHtcbiAgICAgIHRocm93IGNyZWF0ZVJvdXRlckVycm9yUmVzcG9uc2UobnVsbCwge1xuICAgICAgICBzdGF0dXM6IDQwNCxcbiAgICAgICAgc3RhdHVzVGV4dDogXCJOb3QgRm91bmRcIlxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgbGV0IG1hdGNoID0gcm91dGVJZCA/IG1hdGNoZXMuZmluZChtID0+IG0ucm91dGUuaWQgPT09IHJvdXRlSWQpIDogZ2V0VGFyZ2V0TWF0Y2gobWF0Y2hlcywgbG9jYXRpb24pO1xuXG4gICAgaWYgKCFtYXRjaCkge1xuICAgICAgdGhyb3cgY3JlYXRlUm91dGVyRXJyb3JSZXNwb25zZShudWxsLCB7XG4gICAgICAgIHN0YXR1czogNDA0LFxuICAgICAgICBzdGF0dXNUZXh0OiBcIk5vdCBGb3VuZFwiXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBsZXQgcmVzdWx0ID0gYXdhaXQgcXVlcnlJbXBsKHJlcXVlc3QsIGxvY2F0aW9uLCBtYXRjaGVzLCBtYXRjaCk7XG5cbiAgICBpZiAocmVzdWx0IGluc3RhbmNlb2YgUmVzcG9uc2UpIHtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgbGV0IGVycm9yID0gcmVzdWx0LmVycm9ycyA/IE9iamVjdC52YWx1ZXMocmVzdWx0LmVycm9ycylbMF0gOiB1bmRlZmluZWQ7XG5cbiAgICBpZiAoZXJyb3IgIT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gSWYgd2UgZ290IGJhY2sgcmVzdWx0LmVycm9ycywgdGhhdCBtZWFucyB0aGUgbG9hZGVyL2FjdGlvbiB0aHJld1xuICAgICAgLy8gX3NvbWV0aGluZ18gdGhhdCB3YXNuJ3QgYSBSZXNwb25zZSwgYnV0IGl0J3Mgbm90IGd1YXJhbnRlZWQvcmVxdWlyZWRcbiAgICAgIC8vIHRvIGJlIGFuIGBpbnN0YW5jZW9mIEVycm9yYCBlaXRoZXIsIHNvIHdlIGhhdmUgdG8gdXNlIHRocm93IGhlcmUgdG9cbiAgICAgIC8vIHByZXNlcnZlIHRoZSBcImVycm9yXCIgc3RhdGUgb3V0c2lkZSBvZiBxdWVyeUltcGwuXG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9IC8vIFBpY2sgb2ZmIHRoZSByaWdodCBzdGF0ZSB2YWx1ZSB0byByZXR1cm5cblxuXG4gICAgbGV0IHJvdXRlRGF0YSA9IFtyZXN1bHQuYWN0aW9uRGF0YSwgcmVzdWx0LmxvYWRlckRhdGFdLmZpbmQodiA9PiB2KTtcbiAgICByZXR1cm4gT2JqZWN0LnZhbHVlcyhyb3V0ZURhdGEgfHwge30pWzBdO1xuICB9XG5cbiAgYXN5bmMgZnVuY3Rpb24gcXVlcnlJbXBsKHJlcXVlc3QsIGxvY2F0aW9uLCBtYXRjaGVzLCByb3V0ZU1hdGNoKSB7XG4gICAgaW52YXJpYW50KHJlcXVlc3Quc2lnbmFsLCBcInF1ZXJ5KCkvcXVlcnlSb3V0ZSgpIHJlcXVlc3RzIG11c3QgY29udGFpbiBhbiBBYm9ydENvbnRyb2xsZXIgc2lnbmFsXCIpO1xuXG4gICAgdHJ5IHtcbiAgICAgIGlmICh2YWxpZEFjdGlvbk1ldGhvZHMuaGFzKHJlcXVlc3QubWV0aG9kKSkge1xuICAgICAgICBsZXQgcmVzdWx0ID0gYXdhaXQgc3VibWl0KHJlcXVlc3QsIG1hdGNoZXMsIHJvdXRlTWF0Y2ggfHwgZ2V0VGFyZ2V0TWF0Y2gobWF0Y2hlcywgbG9jYXRpb24pLCByb3V0ZU1hdGNoICE9IG51bGwpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuXG4gICAgICBsZXQgcmVzdWx0ID0gYXdhaXQgbG9hZFJvdXRlRGF0YShyZXF1ZXN0LCBtYXRjaGVzLCByb3V0ZU1hdGNoKTtcbiAgICAgIHJldHVybiByZXN1bHQgaW5zdGFuY2VvZiBSZXNwb25zZSA/IHJlc3VsdCA6IF9leHRlbmRzKHt9LCByZXN1bHQsIHtcbiAgICAgICAgYWN0aW9uRGF0YTogbnVsbCxcbiAgICAgICAgYWN0aW9uSGVhZGVyczoge31cbiAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIElmIHRoZSB1c2VyIHRocmV3L3JldHVybmVkIGEgUmVzcG9uc2UgaW4gY2FsbExvYWRlck9yQWN0aW9uLCB3ZSB0aHJvd1xuICAgICAgLy8gaXQgdG8gYmFpbCBvdXQgYW5kIHRoZW4gcmV0dXJuIG9yIHRocm93IGhlcmUgYmFzZWQgb24gd2hldGhlciB0aGUgdXNlclxuICAgICAgLy8gcmV0dXJuZWQgb3IgdGhyZXdcbiAgICAgIGlmIChpc1F1ZXJ5Um91dGVSZXNwb25zZShlKSkge1xuICAgICAgICBpZiAoZS50eXBlID09PSBSZXN1bHRUeXBlLmVycm9yICYmICFpc1JlZGlyZWN0UmVzcG9uc2UoZS5yZXNwb25zZSkpIHtcbiAgICAgICAgICB0aHJvdyBlLnJlc3BvbnNlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGUucmVzcG9uc2U7XG4gICAgICB9IC8vIFJlZGlyZWN0cyBhcmUgYWx3YXlzIHJldHVybmVkIHNpbmNlIHRoZXkgZG9uJ3QgcHJvcGFnYXRlIHRvIGNhdGNoXG4gICAgICAvLyBib3VuZGFyaWVzXG5cblxuICAgICAgaWYgKGlzUmVkaXJlY3RSZXNwb25zZShlKSkge1xuICAgICAgICByZXR1cm4gZTtcbiAgICAgIH1cblxuICAgICAgdGhyb3cgZTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBmdW5jdGlvbiBzdWJtaXQocmVxdWVzdCwgbWF0Y2hlcywgYWN0aW9uTWF0Y2gsIGlzUm91dGVSZXF1ZXN0KSB7XG4gICAgbGV0IHJlc3VsdDtcblxuICAgIGlmICghYWN0aW9uTWF0Y2gucm91dGUuYWN0aW9uKSB7XG4gICAgICBpZiAoaXNSb3V0ZVJlcXVlc3QpIHtcbiAgICAgICAgdGhyb3cgY3JlYXRlUm91dGVyRXJyb3JSZXNwb25zZShudWxsLCB7XG4gICAgICAgICAgc3RhdHVzOiA0MDUsXG4gICAgICAgICAgc3RhdHVzVGV4dDogXCJNZXRob2QgTm90IEFsbG93ZWRcIlxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmVzdWx0ID0gZ2V0TWV0aG9kTm90QWxsb3dlZFJlc3VsdChyZXF1ZXN0LnVybCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdCA9IGF3YWl0IGNhbGxMb2FkZXJPckFjdGlvbihcImFjdGlvblwiLCByZXF1ZXN0LCBhY3Rpb25NYXRjaCwgbWF0Y2hlcywgdW5kZWZpbmVkLCAvLyBCYXNlbmFtZSBub3QgY3VycmVudGx5IHN1cHBvcnRlZCBpbiBzdGF0aWMgaGFuZGxlcnNcbiAgICAgIHRydWUsIGlzUm91dGVSZXF1ZXN0KTtcblxuICAgICAgaWYgKHJlcXVlc3Quc2lnbmFsLmFib3J0ZWQpIHtcbiAgICAgICAgbGV0IG1ldGhvZCA9IGlzUm91dGVSZXF1ZXN0ID8gXCJxdWVyeVJvdXRlXCIgOiBcInF1ZXJ5XCI7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihtZXRob2QgKyBcIigpIGNhbGwgYWJvcnRlZFwiKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoaXNSZWRpcmVjdFJlc3VsdChyZXN1bHQpKSB7XG4gICAgICAvLyBVaGhoaCAtIHRoaXMgc2hvdWxkIG5ldmVyIGhhcHBlbiwgd2Ugc2hvdWxkIGFsd2F5cyB0aHJvdyB0aGVzZSBmcm9tXG4gICAgICAvLyBjYWxsTG9hZGVyT3JBY3Rpb24sIGJ1dCB0aGUgdHlwZSBuYXJyb3dpbmcgaGVyZSBrZWVwcyBUUyBoYXBweSBhbmQgd2VcbiAgICAgIC8vIGNhbiBnZXQgYmFjayBvbiB0aGUgXCJ0aHJvdyBhbGwgcmVkaXJlY3QgcmVzcG9uc2VzXCIgdHJhaW4gaGVyZSBzaG91bGRcbiAgICAgIC8vIHRoaXMgZXZlciBoYXBwZW4gOi9cbiAgICAgIHRocm93IG5ldyBSZXNwb25zZShudWxsLCB7XG4gICAgICAgIHN0YXR1czogcmVzdWx0LnN0YXR1cyxcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgIExvY2F0aW9uOiByZXN1bHQubG9jYXRpb25cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKGlzRGVmZXJyZWRSZXN1bHQocmVzdWx0KSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiZGVmZXIoKSBpcyBub3Qgc3VwcG9ydGVkIGluIGFjdGlvbnNcIik7XG4gICAgfVxuXG4gICAgaWYgKGlzUm91dGVSZXF1ZXN0KSB7XG4gICAgICAvLyBOb3RlOiBUaGlzIHNob3VsZCBvbmx5IGJlIG5vbi1SZXNwb25zZSB2YWx1ZXMgaWYgd2UgZ2V0IGhlcmUsIHNpbmNlXG4gICAgICAvLyBpc1JvdXRlUmVxdWVzdCBzaG91bGQgdGhyb3cgYW55IFJlc3BvbnNlIHJlY2VpdmVkIGluIGNhbGxMb2FkZXJPckFjdGlvblxuICAgICAgaWYgKGlzRXJyb3JSZXN1bHQocmVzdWx0KSkge1xuICAgICAgICBsZXQgYm91bmRhcnlNYXRjaCA9IGZpbmROZWFyZXN0Qm91bmRhcnkobWF0Y2hlcywgYWN0aW9uTWF0Y2gucm91dGUuaWQpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIG1hdGNoZXM6IFthY3Rpb25NYXRjaF0sXG4gICAgICAgICAgbG9hZGVyRGF0YToge30sXG4gICAgICAgICAgYWN0aW9uRGF0YTogbnVsbCxcbiAgICAgICAgICBlcnJvcnM6IHtcbiAgICAgICAgICAgIFtib3VuZGFyeU1hdGNoLnJvdXRlLmlkXTogcmVzdWx0LmVycm9yXG4gICAgICAgICAgfSxcbiAgICAgICAgICAvLyBOb3RlOiBzdGF0dXNDb2RlICsgaGVhZGVycyBhcmUgdW51c2VkIGhlcmUgc2luY2UgcXVlcnlSb3V0ZSB3aWxsXG4gICAgICAgICAgLy8gcmV0dXJuIHRoZSByYXcgUmVzcG9uc2Ugb3IgdmFsdWVcbiAgICAgICAgICBzdGF0dXNDb2RlOiA1MDAsXG4gICAgICAgICAgbG9hZGVySGVhZGVyczoge30sXG4gICAgICAgICAgYWN0aW9uSGVhZGVyczoge31cbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbWF0Y2hlczogW2FjdGlvbk1hdGNoXSxcbiAgICAgICAgbG9hZGVyRGF0YToge30sXG4gICAgICAgIGFjdGlvbkRhdGE6IHtcbiAgICAgICAgICBbYWN0aW9uTWF0Y2gucm91dGUuaWRdOiByZXN1bHQuZGF0YVxuICAgICAgICB9LFxuICAgICAgICBlcnJvcnM6IG51bGwsXG4gICAgICAgIC8vIE5vdGU6IHN0YXR1c0NvZGUgKyBoZWFkZXJzIGFyZSB1bnVzZWQgaGVyZSBzaW5jZSBxdWVyeVJvdXRlIHdpbGxcbiAgICAgICAgLy8gcmV0dXJuIHRoZSByYXcgUmVzcG9uc2Ugb3IgdmFsdWVcbiAgICAgICAgc3RhdHVzQ29kZTogMjAwLFxuICAgICAgICBsb2FkZXJIZWFkZXJzOiB7fSxcbiAgICAgICAgYWN0aW9uSGVhZGVyczoge31cbiAgICAgIH07XG4gICAgfVxuXG4gICAgaWYgKGlzRXJyb3JSZXN1bHQocmVzdWx0KSkge1xuICAgICAgLy8gU3RvcmUgb2ZmIHRoZSBwZW5kaW5nIGVycm9yIC0gd2UgdXNlIGl0IHRvIGRldGVybWluZSB3aGljaCBsb2FkZXJzXG4gICAgICAvLyB0byBjYWxsIGFuZCB3aWxsIGNvbW1pdCBpdCB3aGVuIHdlIGNvbXBsZXRlIHRoZSBuYXZpZ2F0aW9uXG4gICAgICBsZXQgYm91bmRhcnlNYXRjaCA9IGZpbmROZWFyZXN0Qm91bmRhcnkobWF0Y2hlcywgYWN0aW9uTWF0Y2gucm91dGUuaWQpO1xuICAgICAgbGV0IGNvbnRleHQgPSBhd2FpdCBsb2FkUm91dGVEYXRhKHJlcXVlc3QsIG1hdGNoZXMsIHVuZGVmaW5lZCwge1xuICAgICAgICBbYm91bmRhcnlNYXRjaC5yb3V0ZS5pZF06IHJlc3VsdC5lcnJvclxuICAgICAgfSk7IC8vIGFjdGlvbiBzdGF0dXMgY29kZXMgdGFrZSBwcmVjZWRlbmNlIG92ZXIgbG9hZGVyIHN0YXR1cyBjb2Rlc1xuXG4gICAgICByZXR1cm4gX2V4dGVuZHMoe30sIGNvbnRleHQsIHtcbiAgICAgICAgc3RhdHVzQ29kZTogaXNSb3V0ZUVycm9yUmVzcG9uc2UocmVzdWx0LmVycm9yKSA/IHJlc3VsdC5lcnJvci5zdGF0dXMgOiA1MDAsXG4gICAgICAgIGFjdGlvbkRhdGE6IG51bGwsXG4gICAgICAgIGFjdGlvbkhlYWRlcnM6IF9leHRlbmRzKHt9LCByZXN1bHQuaGVhZGVycyA/IHtcbiAgICAgICAgICBbYWN0aW9uTWF0Y2gucm91dGUuaWRdOiByZXN1bHQuaGVhZGVyc1xuICAgICAgICB9IDoge30pXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBsZXQgY29udGV4dCA9IGF3YWl0IGxvYWRSb3V0ZURhdGEocmVxdWVzdCwgbWF0Y2hlcyk7XG4gICAgcmV0dXJuIF9leHRlbmRzKHt9LCBjb250ZXh0LCByZXN1bHQuc3RhdHVzQ29kZSA/IHtcbiAgICAgIHN0YXR1c0NvZGU6IHJlc3VsdC5zdGF0dXNDb2RlXG4gICAgfSA6IHt9LCB7XG4gICAgICBhY3Rpb25EYXRhOiB7XG4gICAgICAgIFthY3Rpb25NYXRjaC5yb3V0ZS5pZF06IHJlc3VsdC5kYXRhXG4gICAgICB9LFxuICAgICAgYWN0aW9uSGVhZGVyczogX2V4dGVuZHMoe30sIHJlc3VsdC5oZWFkZXJzID8ge1xuICAgICAgICBbYWN0aW9uTWF0Y2gucm91dGUuaWRdOiByZXN1bHQuaGVhZGVyc1xuICAgICAgfSA6IHt9KVxuICAgIH0pO1xuICB9XG5cbiAgYXN5bmMgZnVuY3Rpb24gbG9hZFJvdXRlRGF0YShyZXF1ZXN0LCBtYXRjaGVzLCByb3V0ZU1hdGNoLCBwZW5kaW5nQWN0aW9uRXJyb3IpIHtcbiAgICBsZXQgaXNSb3V0ZVJlcXVlc3QgPSByb3V0ZU1hdGNoICE9IG51bGw7XG4gICAgbGV0IHJlcXVlc3RNYXRjaGVzID0gcm91dGVNYXRjaCA/IFtyb3V0ZU1hdGNoXSA6IGdldExvYWRlck1hdGNoZXNVbnRpbEJvdW5kYXJ5KG1hdGNoZXMsIE9iamVjdC5rZXlzKHBlbmRpbmdBY3Rpb25FcnJvciB8fCB7fSlbMF0pO1xuICAgIGxldCBtYXRjaGVzVG9Mb2FkID0gcmVxdWVzdE1hdGNoZXMuZmlsdGVyKG0gPT4gbS5yb3V0ZS5sb2FkZXIpOyAvLyBTaG9ydCBjaXJjdWl0IGlmIHdlIGhhdmUgbm8gbG9hZGVycyB0byBydW5cblxuICAgIGlmIChtYXRjaGVzVG9Mb2FkLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbWF0Y2hlcyxcbiAgICAgICAgbG9hZGVyRGF0YToge30sXG4gICAgICAgIGVycm9yczogcGVuZGluZ0FjdGlvbkVycm9yIHx8IG51bGwsXG4gICAgICAgIHN0YXR1c0NvZGU6IDIwMCxcbiAgICAgICAgbG9hZGVySGVhZGVyczoge31cbiAgICAgIH07XG4gICAgfVxuXG4gICAgbGV0IHJlc3VsdHMgPSBhd2FpdCBQcm9taXNlLmFsbChbLi4ubWF0Y2hlc1RvTG9hZC5tYXAobWF0Y2ggPT4gY2FsbExvYWRlck9yQWN0aW9uKFwibG9hZGVyXCIsIHJlcXVlc3QsIG1hdGNoLCBtYXRjaGVzLCB1bmRlZmluZWQsIC8vIEJhc2VuYW1lIG5vdCBjdXJyZW50bHkgc3VwcG9ydGVkIGluIHN0YXRpYyBoYW5kbGVyc1xuICAgIHRydWUsIGlzUm91dGVSZXF1ZXN0KSldKTtcblxuICAgIGlmIChyZXF1ZXN0LnNpZ25hbC5hYm9ydGVkKSB7XG4gICAgICBsZXQgbWV0aG9kID0gaXNSb3V0ZVJlcXVlc3QgPyBcInF1ZXJ5Um91dGVcIiA6IFwicXVlcnlcIjtcbiAgICAgIHRocm93IG5ldyBFcnJvcihtZXRob2QgKyBcIigpIGNhbGwgYWJvcnRlZFwiKTtcbiAgICB9IC8vIENhbid0IGRvIGFueXRoaW5nIHdpdGggdGhlc2Ugd2l0aG91dCB0aGUgUmVtaXggc2lkZSBvZiB0aGluZ3MsIHNvIGp1c3RcbiAgICAvLyBjYW5jZWwgdGhlbSBmb3Igbm93XG5cblxuICAgIHJlc3VsdHMuZm9yRWFjaChyZXN1bHQgPT4ge1xuICAgICAgaWYgKGlzRGVmZXJyZWRSZXN1bHQocmVzdWx0KSkge1xuICAgICAgICByZXN1bHQuZGVmZXJyZWREYXRhLmNhbmNlbCgpO1xuICAgICAgfVxuICAgIH0pOyAvLyBQcm9jZXNzIGFuZCBjb21taXQgb3V0cHV0IGZyb20gbG9hZGVyc1xuXG4gICAgbGV0IGNvbnRleHQgPSBwcm9jZXNzUm91dGVMb2FkZXJEYXRhKG1hdGNoZXMsIG1hdGNoZXNUb0xvYWQsIHJlc3VsdHMsIHBlbmRpbmdBY3Rpb25FcnJvcik7XG4gICAgcmV0dXJuIF9leHRlbmRzKHt9LCBjb250ZXh0LCB7XG4gICAgICBtYXRjaGVzXG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVSb3V0ZXJFcnJvclJlc3BvbnNlKGJvZHksIGluaXQpIHtcbiAgICByZXR1cm4gbmV3IFJlc3BvbnNlKGJvZHksIF9leHRlbmRzKHt9LCBpbml0LCB7XG4gICAgICBoZWFkZXJzOiBfZXh0ZW5kcyh7fSwgaW5pdC5oZWFkZXJzLCB7XG4gICAgICAgIFwiWC1SZW1peC1Sb3V0ZXItRXJyb3JcIjogXCJ5ZXNcIlxuICAgICAgfSlcbiAgICB9KSk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGRhdGFSb3V0ZXMsXG4gICAgcXVlcnksXG4gICAgcXVlcnlSb3V0ZVxuICB9O1xufSAvLyNlbmRyZWdpb25cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyNyZWdpb24gSGVscGVyc1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuLyoqXG4gKiBHaXZlbiBhbiBleGlzdGluZyBTdGF0aWNIYW5kbGVyQ29udGV4dCBhbmQgYW4gZXJyb3IgdGhyb3duIGF0IHJlbmRlciB0aW1lLFxuICogcHJvdmlkZSBhbiB1cGRhdGVkIFN0YXRpY0hhbmRsZXJDb250ZXh0IHN1aXRhYmxlIGZvciBhIHNlY29uZCBTU1IgcmVuZGVyXG4gKi9cblxuZnVuY3Rpb24gZ2V0U3RhdGljQ29udGV4dEZyb21FcnJvcihyb3V0ZXMsIGNvbnRleHQsIGVycm9yKSB7XG4gIGxldCBuZXdDb250ZXh0ID0gX2V4dGVuZHMoe30sIGNvbnRleHQsIHtcbiAgICBzdGF0dXNDb2RlOiA1MDAsXG4gICAgZXJyb3JzOiB7XG4gICAgICBbY29udGV4dC5fZGVlcGVzdFJlbmRlcmVkQm91bmRhcnlJZCB8fCByb3V0ZXNbMF0uaWRdOiBlcnJvclxuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIG5ld0NvbnRleHQ7XG59IC8vIE5vcm1hbGl6ZSBuYXZpZ2F0aW9uIG9wdGlvbnMgYnkgY29udmVydGluZyBmb3JtTWV0aG9kPUdFVCBmb3JtRGF0YSBvYmplY3RzIHRvXG4vLyBVUkxTZWFyY2hQYXJhbXMgc28gdGhleSBiZWhhdmUgaWRlbnRpY2FsbHkgdG8gbGlua3Mgd2l0aCBxdWVyeSBwYXJhbXNcblxuZnVuY3Rpb24gbm9ybWFsaXplTmF2aWdhdGVPcHRpb25zKHRvLCBvcHRzLCBpc0ZldGNoZXIpIHtcbiAgaWYgKGlzRmV0Y2hlciA9PT0gdm9pZCAwKSB7XG4gICAgaXNGZXRjaGVyID0gZmFsc2U7XG4gIH1cblxuICBsZXQgcGF0aCA9IHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiA/IHRvIDogY3JlYXRlUGF0aCh0byk7IC8vIFJldHVybiBsb2NhdGlvbiB2ZXJiYXRpbSBvbiBub24tc3VibWlzc2lvbiBuYXZpZ2F0aW9uc1xuXG4gIGlmICghb3B0cyB8fCAhKFwiZm9ybU1ldGhvZFwiIGluIG9wdHMpICYmICEoXCJmb3JtRGF0YVwiIGluIG9wdHMpKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhdGhcbiAgICB9O1xuICB9IC8vIENyZWF0ZSBhIFN1Ym1pc3Npb24gb24gbm9uLUdFVCBuYXZpZ2F0aW9uc1xuXG5cbiAgaWYgKG9wdHMuZm9ybU1ldGhvZCAhPSBudWxsICYmIG9wdHMuZm9ybU1ldGhvZCAhPT0gXCJnZXRcIikge1xuICAgIHJldHVybiB7XG4gICAgICBwYXRoLFxuICAgICAgc3VibWlzc2lvbjoge1xuICAgICAgICBmb3JtTWV0aG9kOiBvcHRzLmZvcm1NZXRob2QsXG4gICAgICAgIGZvcm1BY3Rpb246IHN0cmlwSGFzaEZyb21QYXRoKHBhdGgpLFxuICAgICAgICBmb3JtRW5jVHlwZTogb3B0cyAmJiBvcHRzLmZvcm1FbmNUeXBlIHx8IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIsXG4gICAgICAgIGZvcm1EYXRhOiBvcHRzLmZvcm1EYXRhXG4gICAgICB9XG4gICAgfTtcbiAgfSAvLyBObyBmb3JtRGF0YSB0byBmbGF0dGVuIGZvciBHRVQgc3VibWlzc2lvblxuXG5cbiAgaWYgKCFvcHRzLmZvcm1EYXRhKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhdGhcbiAgICB9O1xuICB9IC8vIEZsYXR0ZW4gc3VibWlzc2lvbiBvbnRvIFVSTFNlYXJjaFBhcmFtcyBmb3IgR0VUIHN1Ym1pc3Npb25zXG5cblxuICBsZXQgcGFyc2VkUGF0aCA9IHBhcnNlUGF0aChwYXRoKTtcblxuICB0cnkge1xuICAgIGxldCBzZWFyY2hQYXJhbXMgPSBjb252ZXJ0Rm9ybURhdGFUb1NlYXJjaFBhcmFtcyhvcHRzLmZvcm1EYXRhKTsgLy8gU2luY2UgZmV0Y2hlciBHRVQgc3VibWlzc2lvbnMgb25seSBydW4gYSBzaW5nbGUgbG9hZGVyIChhcyBvcHBvc2VkIHRvXG4gICAgLy8gbmF2aWdhdGlvbiBHRVQgc3VibWlzc2lvbnMgd2hpY2ggcnVuIGFsbCBsb2FkZXJzKSwgd2UgbmVlZCB0byBwcmVzZXJ2ZVxuICAgIC8vIGFueSBpbmNvbWluZyA/aW5kZXggcGFyYW1zXG5cbiAgICBpZiAoaXNGZXRjaGVyICYmIHBhcnNlZFBhdGguc2VhcmNoICYmIGhhc05ha2VkSW5kZXhRdWVyeShwYXJzZWRQYXRoLnNlYXJjaCkpIHtcbiAgICAgIHNlYXJjaFBhcmFtcy5hcHBlbmQoXCJpbmRleFwiLCBcIlwiKTtcbiAgICB9XG5cbiAgICBwYXJzZWRQYXRoLnNlYXJjaCA9IFwiP1wiICsgc2VhcmNoUGFyYW1zO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhdGgsXG4gICAgICBlcnJvcjogbmV3IEVycm9yUmVzcG9uc2UoNDAwLCBcIkJhZCBSZXF1ZXN0XCIsIFwiQ2Fubm90IHN1Ym1pdCBiaW5hcnkgZm9ybSBkYXRhIHVzaW5nIEdFVFwiKVxuICAgIH07XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHBhdGg6IGNyZWF0ZVBhdGgocGFyc2VkUGF0aClcbiAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0TG9hZGVyUmVkaXJlY3Qoc3RhdGUsIHJlZGlyZWN0KSB7XG4gIGxldCB7XG4gICAgZm9ybU1ldGhvZCxcbiAgICBmb3JtQWN0aW9uLFxuICAgIGZvcm1FbmNUeXBlLFxuICAgIGZvcm1EYXRhXG4gIH0gPSBzdGF0ZS5uYXZpZ2F0aW9uO1xuICBsZXQgbmF2aWdhdGlvbiA9IHtcbiAgICBzdGF0ZTogXCJsb2FkaW5nXCIsXG4gICAgbG9jYXRpb246IGNyZWF0ZUxvY2F0aW9uKHN0YXRlLmxvY2F0aW9uLCByZWRpcmVjdC5sb2NhdGlvbiksXG4gICAgZm9ybU1ldGhvZDogZm9ybU1ldGhvZCB8fCB1bmRlZmluZWQsXG4gICAgZm9ybUFjdGlvbjogZm9ybUFjdGlvbiB8fCB1bmRlZmluZWQsXG4gICAgZm9ybUVuY1R5cGU6IGZvcm1FbmNUeXBlIHx8IHVuZGVmaW5lZCxcbiAgICBmb3JtRGF0YTogZm9ybURhdGEgfHwgdW5kZWZpbmVkXG4gIH07XG4gIHJldHVybiBuYXZpZ2F0aW9uO1xufSAvLyBGaWx0ZXIgb3V0IGFsbCByb3V0ZXMgYmVsb3cgYW55IGNhdWdodCBlcnJvciBhcyB0aGV5IGFyZW4ndCBnb2luZyB0b1xuLy8gcmVuZGVyIHNvIHdlIGRvbid0IG5lZWQgdG8gbG9hZCB0aGVtXG5cblxuZnVuY3Rpb24gZ2V0TG9hZGVyTWF0Y2hlc1VudGlsQm91bmRhcnkobWF0Y2hlcywgYm91bmRhcnlJZCkge1xuICBsZXQgYm91bmRhcnlNYXRjaGVzID0gbWF0Y2hlcztcblxuICBpZiAoYm91bmRhcnlJZCkge1xuICAgIGxldCBpbmRleCA9IG1hdGNoZXMuZmluZEluZGV4KG0gPT4gbS5yb3V0ZS5pZCA9PT0gYm91bmRhcnlJZCk7XG5cbiAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgYm91bmRhcnlNYXRjaGVzID0gbWF0Y2hlcy5zbGljZSgwLCBpbmRleCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGJvdW5kYXJ5TWF0Y2hlcztcbn1cblxuZnVuY3Rpb24gZ2V0TWF0Y2hlc1RvTG9hZChzdGF0ZSwgbWF0Y2hlcywgc3VibWlzc2lvbiwgbG9jYXRpb24sIGlzUmV2YWxpZGF0aW9uUmVxdWlyZWQsIGNhbmNlbGxlZERlZmVycmVkUm91dGVzLCBjYW5jZWxsZWRGZXRjaGVyTG9hZHMsIHBlbmRpbmdBY3Rpb25EYXRhLCBwZW5kaW5nRXJyb3IsIGZldGNoTG9hZE1hdGNoZXMpIHtcbiAgbGV0IGFjdGlvblJlc3VsdCA9IHBlbmRpbmdFcnJvciA/IE9iamVjdC52YWx1ZXMocGVuZGluZ0Vycm9yKVswXSA6IHBlbmRpbmdBY3Rpb25EYXRhID8gT2JqZWN0LnZhbHVlcyhwZW5kaW5nQWN0aW9uRGF0YSlbMF0gOiBudWxsOyAvLyBQaWNrIG5hdmlnYXRpb24gbWF0Y2hlcyB0aGF0IGFyZSBuZXQtbmV3IG9yIHF1YWxpZnkgZm9yIHJldmFsaWRhdGlvblxuXG4gIGxldCBib3VuZGFyeUlkID0gcGVuZGluZ0Vycm9yID8gT2JqZWN0LmtleXMocGVuZGluZ0Vycm9yKVswXSA6IHVuZGVmaW5lZDtcbiAgbGV0IGJvdW5kYXJ5TWF0Y2hlcyA9IGdldExvYWRlck1hdGNoZXNVbnRpbEJvdW5kYXJ5KG1hdGNoZXMsIGJvdW5kYXJ5SWQpO1xuICBsZXQgbmF2aWdhdGlvbk1hdGNoZXMgPSBib3VuZGFyeU1hdGNoZXMuZmlsdGVyKChtYXRjaCwgaW5kZXgpID0+IG1hdGNoLnJvdXRlLmxvYWRlciAhPSBudWxsICYmIChpc05ld0xvYWRlcihzdGF0ZS5sb2FkZXJEYXRhLCBzdGF0ZS5tYXRjaGVzW2luZGV4XSwgbWF0Y2gpIHx8IC8vIElmIHRoaXMgcm91dGUgaGFkIGEgcGVuZGluZyBkZWZlcnJlZCBjYW5jZWxsZWQgaXQgbXVzdCBiZSByZXZhbGlkYXRlZFxuICBjYW5jZWxsZWREZWZlcnJlZFJvdXRlcy5zb21lKGlkID0+IGlkID09PSBtYXRjaC5yb3V0ZS5pZCkgfHwgc2hvdWxkUmV2YWxpZGF0ZUxvYWRlcihzdGF0ZS5sb2NhdGlvbiwgc3RhdGUubWF0Y2hlc1tpbmRleF0sIHN1Ym1pc3Npb24sIGxvY2F0aW9uLCBtYXRjaCwgaXNSZXZhbGlkYXRpb25SZXF1aXJlZCwgYWN0aW9uUmVzdWx0KSkpOyAvLyBQaWNrIGZldGNoZXIubG9hZHMgdGhhdCBuZWVkIHRvIGJlIHJldmFsaWRhdGVkXG5cbiAgbGV0IHJldmFsaWRhdGluZ0ZldGNoZXJzID0gW107XG4gIGZldGNoTG9hZE1hdGNoZXMgJiYgZmV0Y2hMb2FkTWF0Y2hlcy5mb3JFYWNoKChfcmVmMTAsIGtleSkgPT4ge1xuICAgIGxldCBbaHJlZiwgbWF0Y2gsIGZldGNoTWF0Y2hlc10gPSBfcmVmMTA7XG5cbiAgICAvLyBUaGlzIGZldGNoZXIgd2FzIGNhbmNlbGxlZCBmcm9tIGEgcHJpb3IgYWN0aW9uIHN1Ym1pc3Npb24gLSBmb3JjZSByZWxvYWRcbiAgICBpZiAoY2FuY2VsbGVkRmV0Y2hlckxvYWRzLmluY2x1ZGVzKGtleSkpIHtcbiAgICAgIHJldmFsaWRhdGluZ0ZldGNoZXJzLnB1c2goW2tleSwgaHJlZiwgbWF0Y2gsIGZldGNoTWF0Y2hlc10pO1xuICAgIH0gZWxzZSBpZiAoaXNSZXZhbGlkYXRpb25SZXF1aXJlZCkge1xuICAgICAgbGV0IHNob3VsZFJldmFsaWRhdGUgPSBzaG91bGRSZXZhbGlkYXRlTG9hZGVyKGhyZWYsIG1hdGNoLCBzdWJtaXNzaW9uLCBocmVmLCBtYXRjaCwgaXNSZXZhbGlkYXRpb25SZXF1aXJlZCwgYWN0aW9uUmVzdWx0KTtcblxuICAgICAgaWYgKHNob3VsZFJldmFsaWRhdGUpIHtcbiAgICAgICAgcmV2YWxpZGF0aW5nRmV0Y2hlcnMucHVzaChba2V5LCBocmVmLCBtYXRjaCwgZmV0Y2hNYXRjaGVzXSk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIFtuYXZpZ2F0aW9uTWF0Y2hlcywgcmV2YWxpZGF0aW5nRmV0Y2hlcnNdO1xufVxuXG5mdW5jdGlvbiBpc05ld0xvYWRlcihjdXJyZW50TG9hZGVyRGF0YSwgY3VycmVudE1hdGNoLCBtYXRjaCkge1xuICBsZXQgaXNOZXcgPSAvLyBbYV0gLT4gW2EsIGJdXG4gICFjdXJyZW50TWF0Y2ggfHwgLy8gW2EsIGJdIC0+IFthLCBjXVxuICBtYXRjaC5yb3V0ZS5pZCAhPT0gY3VycmVudE1hdGNoLnJvdXRlLmlkOyAvLyBIYW5kbGUgdGhlIGNhc2UgdGhhdCB3ZSBkb24ndCBoYXZlIGRhdGEgZm9yIGEgcmUtdXNlZCByb3V0ZSwgcG90ZW50aWFsbHlcbiAgLy8gZnJvbSBhIHByaW9yIGVycm9yIG9yIGZyb20gYSBjYW5jZWxsZWQgcGVuZGluZyBkZWZlcnJlZFxuXG4gIGxldCBpc01pc3NpbmdEYXRhID0gY3VycmVudExvYWRlckRhdGFbbWF0Y2gucm91dGUuaWRdID09PSB1bmRlZmluZWQ7IC8vIEFsd2F5cyBsb2FkIGlmIHRoaXMgaXMgYSBuZXQtbmV3IHJvdXRlIG9yIHdlIGRvbid0IHlldCBoYXZlIGRhdGFcblxuICByZXR1cm4gaXNOZXcgfHwgaXNNaXNzaW5nRGF0YTtcbn1cblxuZnVuY3Rpb24gaXNOZXdSb3V0ZUluc3RhbmNlKGN1cnJlbnRNYXRjaCwgbWF0Y2gpIHtcbiAgbGV0IGN1cnJlbnRQYXRoID0gY3VycmVudE1hdGNoLnJvdXRlLnBhdGg7XG4gIHJldHVybiAoLy8gcGFyYW0gY2hhbmdlIGZvciB0aGlzIG1hdGNoLCAvdXNlcnMvMTIzIC0+IC91c2Vycy80NTZcbiAgICBjdXJyZW50TWF0Y2gucGF0aG5hbWUgIT09IG1hdGNoLnBhdGhuYW1lIHx8IC8vIHNwbGF0IHBhcmFtIGNoYW5nZWQsIHdoaWNoIGlzIG5vdCBwcmVzZW50IGluIG1hdGNoLnBhdGhcbiAgICAvLyBlLmcuIC9maWxlcy9pbWFnZXMvYXZhdGFyLmpwZyAtPiBmaWxlcy9maW5hbmNlcy54bHNcbiAgICBjdXJyZW50UGF0aCAmJiBjdXJyZW50UGF0aC5lbmRzV2l0aChcIipcIikgJiYgY3VycmVudE1hdGNoLnBhcmFtc1tcIipcIl0gIT09IG1hdGNoLnBhcmFtc1tcIipcIl1cbiAgKTtcbn1cblxuZnVuY3Rpb24gc2hvdWxkUmV2YWxpZGF0ZUxvYWRlcihjdXJyZW50TG9jYXRpb24sIGN1cnJlbnRNYXRjaCwgc3VibWlzc2lvbiwgbG9jYXRpb24sIG1hdGNoLCBpc1JldmFsaWRhdGlvblJlcXVpcmVkLCBhY3Rpb25SZXN1bHQpIHtcbiAgbGV0IGN1cnJlbnRVcmwgPSBjcmVhdGVVUkwoY3VycmVudExvY2F0aW9uKTtcbiAgbGV0IGN1cnJlbnRQYXJhbXMgPSBjdXJyZW50TWF0Y2gucGFyYW1zO1xuICBsZXQgbmV4dFVybCA9IGNyZWF0ZVVSTChsb2NhdGlvbik7XG4gIGxldCBuZXh0UGFyYW1zID0gbWF0Y2gucGFyYW1zOyAvLyBUaGlzIGlzIHRoZSBkZWZhdWx0IGltcGxlbWVudGF0aW9uIGFzIHRvIHdoZW4gd2UgcmV2YWxpZGF0ZS4gIElmIHRoZSByb3V0ZVxuICAvLyBwcm92aWRlcyBpdCdzIG93biBpbXBsZW1lbnRhdGlvbiwgdGhlbiB3ZSBnaXZlIHRoZW0gZnVsbCBjb250cm9sIGJ1dFxuICAvLyBwcm92aWRlIHRoaXMgdmFsdWUgc28gdGhleSBjYW4gbGV2ZXJhZ2UgaXQgaWYgbmVlZGVkIGFmdGVyIHRoZXkgY2hlY2tcbiAgLy8gdGhlaXIgb3duIHNwZWNpZmljIHVzZSBjYXNlc1xuICAvLyBOb3RlIHRoYXQgZmV0Y2hlcnMgYWx3YXlzIHByb3ZpZGUgdGhlIHNhbWUgY3VycmVudC9uZXh0IGxvY2F0aW9ucyBzbyB0aGVcbiAgLy8gVVJMLWJhc2VkIGNoZWNrcyBoZXJlIGRvbid0IGFwcGx5IHRvIGZldGNoZXIgc2hvdWxkUmV2YWxpZGF0ZSBjYWxsc1xuXG4gIGxldCBkZWZhdWx0U2hvdWxkUmV2YWxpZGF0ZSA9IGlzTmV3Um91dGVJbnN0YW5jZShjdXJyZW50TWF0Y2gsIG1hdGNoKSB8fCAvLyBDbGlja2VkIHRoZSBzYW1lIGxpbmssIHJlc3VibWl0dGVkIGEgR0VUIGZvcm1cbiAgY3VycmVudFVybC50b1N0cmluZygpID09PSBuZXh0VXJsLnRvU3RyaW5nKCkgfHwgLy8gU2VhcmNoIHBhcmFtcyBhZmZlY3QgYWxsIGxvYWRlcnNcbiAgY3VycmVudFVybC5zZWFyY2ggIT09IG5leHRVcmwuc2VhcmNoIHx8IC8vIEZvcmNlZCByZXZhbGlkYXRpb24gZHVlIHRvIHN1Ym1pc3Npb24sIHVzZVJldmFsaWRhdGUsIG9yIFgtUmVtaXgtUmV2YWxpZGF0ZVxuICBpc1JldmFsaWRhdGlvblJlcXVpcmVkO1xuXG4gIGlmIChtYXRjaC5yb3V0ZS5zaG91bGRSZXZhbGlkYXRlKSB7XG4gICAgbGV0IHJvdXRlQ2hvaWNlID0gbWF0Y2gucm91dGUuc2hvdWxkUmV2YWxpZGF0ZShfZXh0ZW5kcyh7XG4gICAgICBjdXJyZW50VXJsLFxuICAgICAgY3VycmVudFBhcmFtcyxcbiAgICAgIG5leHRVcmwsXG4gICAgICBuZXh0UGFyYW1zXG4gICAgfSwgc3VibWlzc2lvbiwge1xuICAgICAgYWN0aW9uUmVzdWx0LFxuICAgICAgZGVmYXVsdFNob3VsZFJldmFsaWRhdGVcbiAgICB9KSk7XG5cbiAgICBpZiAodHlwZW9mIHJvdXRlQ2hvaWNlID09PSBcImJvb2xlYW5cIikge1xuICAgICAgcmV0dXJuIHJvdXRlQ2hvaWNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBkZWZhdWx0U2hvdWxkUmV2YWxpZGF0ZTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gY2FsbExvYWRlck9yQWN0aW9uKHR5cGUsIHJlcXVlc3QsIG1hdGNoLCBtYXRjaGVzLCBiYXNlbmFtZSwgaXNTdGF0aWNSZXF1ZXN0LCBpc1JvdXRlUmVxdWVzdCkge1xuICBpZiAoaXNTdGF0aWNSZXF1ZXN0ID09PSB2b2lkIDApIHtcbiAgICBpc1N0YXRpY1JlcXVlc3QgPSBmYWxzZTtcbiAgfVxuXG4gIGlmIChpc1JvdXRlUmVxdWVzdCA9PT0gdm9pZCAwKSB7XG4gICAgaXNSb3V0ZVJlcXVlc3QgPSBmYWxzZTtcbiAgfVxuXG4gIGxldCByZXN1bHRUeXBlO1xuICBsZXQgcmVzdWx0OyAvLyBTZXR1cCBhIHByb21pc2Ugd2UgY2FuIHJhY2UgYWdhaW5zdCBzbyB0aGF0IGFib3J0IHNpZ25hbHMgc2hvcnQgY2lyY3VpdFxuXG4gIGxldCByZWplY3Q7XG4gIGxldCBhYm9ydFByb21pc2UgPSBuZXcgUHJvbWlzZSgoXywgcikgPT4gcmVqZWN0ID0gcik7XG5cbiAgbGV0IG9uUmVqZWN0ID0gKCkgPT4gcmVqZWN0KCk7XG5cbiAgcmVxdWVzdC5zaWduYWwuYWRkRXZlbnRMaXN0ZW5lcihcImFib3J0XCIsIG9uUmVqZWN0KTtcblxuICB0cnkge1xuICAgIGxldCBoYW5kbGVyID0gbWF0Y2gucm91dGVbdHlwZV07XG4gICAgaW52YXJpYW50KGhhbmRsZXIsIFwiQ291bGQgbm90IGZpbmQgdGhlIFwiICsgdHlwZSArIFwiIHRvIHJ1biBvbiB0aGUgXFxcIlwiICsgbWF0Y2gucm91dGUuaWQgKyBcIlxcXCIgcm91dGVcIik7XG4gICAgcmVzdWx0ID0gYXdhaXQgUHJvbWlzZS5yYWNlKFtoYW5kbGVyKHtcbiAgICAgIHJlcXVlc3QsXG4gICAgICBwYXJhbXM6IG1hdGNoLnBhcmFtc1xuICAgIH0pLCBhYm9ydFByb21pc2VdKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJlc3VsdFR5cGUgPSBSZXN1bHRUeXBlLmVycm9yO1xuICAgIHJlc3VsdCA9IGU7XG4gIH0gZmluYWxseSB7XG4gICAgcmVxdWVzdC5zaWduYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImFib3J0XCIsIG9uUmVqZWN0KTtcbiAgfVxuXG4gIGlmIChyZXN1bHQgaW5zdGFuY2VvZiBSZXNwb25zZSkge1xuICAgIGxldCBzdGF0dXMgPSByZXN1bHQuc3RhdHVzOyAvLyBQcm9jZXNzIHJlZGlyZWN0c1xuXG4gICAgaWYgKHN0YXR1cyA+PSAzMDAgJiYgc3RhdHVzIDw9IDM5OSkge1xuICAgICAgbGV0IGxvY2F0aW9uID0gcmVzdWx0LmhlYWRlcnMuZ2V0KFwiTG9jYXRpb25cIik7XG4gICAgICBpbnZhcmlhbnQobG9jYXRpb24sIFwiUmVkaXJlY3RzIHJldHVybmVkL3Rocm93biBmcm9tIGxvYWRlcnMvYWN0aW9ucyBtdXN0IGhhdmUgYSBMb2NhdGlvbiBoZWFkZXJcIik7IC8vIFN1cHBvcnQgcmVsYXRpdmUgcm91dGluZyBpbiByZWRpcmVjdHNcblxuICAgICAgbGV0IGFjdGl2ZU1hdGNoZXMgPSBtYXRjaGVzLnNsaWNlKDAsIG1hdGNoZXMuaW5kZXhPZihtYXRjaCkgKyAxKTtcbiAgICAgIGxldCByb3V0ZVBhdGhuYW1lcyA9IGdldFBhdGhDb250cmlidXRpbmdNYXRjaGVzKGFjdGl2ZU1hdGNoZXMpLm1hcChtYXRjaCA9PiBtYXRjaC5wYXRobmFtZUJhc2UpO1xuICAgICAgbGV0IHJlcXVlc3RQYXRoID0gY3JlYXRlVVJMKHJlcXVlc3QudXJsKS5wYXRobmFtZTtcbiAgICAgIGxldCByZXNvbHZlZExvY2F0aW9uID0gcmVzb2x2ZVRvKGxvY2F0aW9uLCByb3V0ZVBhdGhuYW1lcywgcmVxdWVzdFBhdGgpO1xuICAgICAgaW52YXJpYW50KGNyZWF0ZVBhdGgocmVzb2x2ZWRMb2NhdGlvbiksIFwiVW5hYmxlIHRvIHJlc29sdmUgcmVkaXJlY3QgbG9jYXRpb246IFwiICsgcmVzdWx0LmhlYWRlcnMuZ2V0KFwiTG9jYXRpb25cIikpOyAvLyBQcmVwZW5kIHRoZSBiYXNlbmFtZSB0byB0aGUgcmVkaXJlY3QgbG9jYXRpb24gaWYgd2UgaGF2ZSBvbmVcblxuICAgICAgaWYgKGJhc2VuYW1lKSB7XG4gICAgICAgIGxldCBwYXRoID0gcmVzb2x2ZWRMb2NhdGlvbi5wYXRobmFtZTtcbiAgICAgICAgcmVzb2x2ZWRMb2NhdGlvbi5wYXRobmFtZSA9IHBhdGggPT09IFwiL1wiID8gYmFzZW5hbWUgOiBqb2luUGF0aHMoW2Jhc2VuYW1lLCBwYXRoXSk7XG4gICAgICB9XG5cbiAgICAgIGxvY2F0aW9uID0gY3JlYXRlUGF0aChyZXNvbHZlZExvY2F0aW9uKTsgLy8gRG9uJ3QgcHJvY2VzcyByZWRpcmVjdHMgaW4gdGhlIHJvdXRlciBkdXJpbmcgc3RhdGljIHJlcXVlc3RzIHJlcXVlc3RzLlxuICAgICAgLy8gSW5zdGVhZCwgdGhyb3cgdGhlIFJlc3BvbnNlIGFuZCBsZXQgdGhlIHNlcnZlciBoYW5kbGUgaXQgd2l0aCBhbiBIVFRQXG4gICAgICAvLyByZWRpcmVjdC4gIFdlIGFsc28gdXBkYXRlIHRoZSBMb2NhdGlvbiBoZWFkZXIgaW4gcGxhY2UgaW4gdGhpcyBmbG93IHNvXG4gICAgICAvLyBiYXNlbmFtZSBhbmQgcmVsYXRpdmUgcm91dGluZyBpcyB0YWtlbiBpbnRvIGFjY291bnRcblxuICAgICAgaWYgKGlzU3RhdGljUmVxdWVzdCkge1xuICAgICAgICByZXN1bHQuaGVhZGVycy5zZXQoXCJMb2NhdGlvblwiLCBsb2NhdGlvbik7XG4gICAgICAgIHRocm93IHJlc3VsdDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogUmVzdWx0VHlwZS5yZWRpcmVjdCxcbiAgICAgICAgc3RhdHVzLFxuICAgICAgICBsb2NhdGlvbixcbiAgICAgICAgcmV2YWxpZGF0ZTogcmVzdWx0LmhlYWRlcnMuZ2V0KFwiWC1SZW1peC1SZXZhbGlkYXRlXCIpICE9PSBudWxsXG4gICAgICB9O1xuICAgIH0gLy8gRm9yIFNTUiBzaW5nbGUtcm91dGUgcmVxdWVzdHMsIHdlIHdhbnQgdG8gaGFuZCBSZXNwb25zZXMgYmFjayBkaXJlY3RseVxuICAgIC8vIHdpdGhvdXQgdW53cmFwcGluZy4gIFdlIGRvIHRoaXMgd2l0aCB0aGUgUXVlcnlSb3V0ZVJlc3BvbnNlIHdyYXBwZXJcbiAgICAvLyBpbnRlcmZhY2Ugc28gd2UgY2FuIGtub3cgd2hldGhlciBpdCB3YXMgcmV0dXJuZWQgb3IgdGhyb3duXG5cblxuICAgIGlmIChpc1JvdXRlUmVxdWVzdCkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXRocm93LWxpdGVyYWxcbiAgICAgIHRocm93IHtcbiAgICAgICAgdHlwZTogcmVzdWx0VHlwZSB8fCBSZXN1bHRUeXBlLmRhdGEsXG4gICAgICAgIHJlc3BvbnNlOiByZXN1bHRcbiAgICAgIH07XG4gICAgfVxuXG4gICAgbGV0IGRhdGE7XG4gICAgbGV0IGNvbnRlbnRUeXBlID0gcmVzdWx0LmhlYWRlcnMuZ2V0KFwiQ29udGVudC1UeXBlXCIpO1xuXG4gICAgaWYgKGNvbnRlbnRUeXBlICYmIGNvbnRlbnRUeXBlLnN0YXJ0c1dpdGgoXCJhcHBsaWNhdGlvbi9qc29uXCIpKSB7XG4gICAgICBkYXRhID0gYXdhaXQgcmVzdWx0Lmpzb24oKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGF0YSA9IGF3YWl0IHJlc3VsdC50ZXh0KCk7XG4gICAgfVxuXG4gICAgaWYgKHJlc3VsdFR5cGUgPT09IFJlc3VsdFR5cGUuZXJyb3IpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IHJlc3VsdFR5cGUsXG4gICAgICAgIGVycm9yOiBuZXcgRXJyb3JSZXNwb25zZShzdGF0dXMsIHJlc3VsdC5zdGF0dXNUZXh0LCBkYXRhKSxcbiAgICAgICAgaGVhZGVyczogcmVzdWx0LmhlYWRlcnNcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFJlc3VsdFR5cGUuZGF0YSxcbiAgICAgIGRhdGEsXG4gICAgICBzdGF0dXNDb2RlOiByZXN1bHQuc3RhdHVzLFxuICAgICAgaGVhZGVyczogcmVzdWx0LmhlYWRlcnNcbiAgICB9O1xuICB9XG5cbiAgaWYgKHJlc3VsdFR5cGUgPT09IFJlc3VsdFR5cGUuZXJyb3IpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogcmVzdWx0VHlwZSxcbiAgICAgIGVycm9yOiByZXN1bHRcbiAgICB9O1xuICB9XG5cbiAgaWYgKHJlc3VsdCBpbnN0YW5jZW9mIERlZmVycmVkRGF0YSkge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBSZXN1bHRUeXBlLmRlZmVycmVkLFxuICAgICAgZGVmZXJyZWREYXRhOiByZXN1bHRcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBSZXN1bHRUeXBlLmRhdGEsXG4gICAgZGF0YTogcmVzdWx0XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVJlcXVlc3QobG9jYXRpb24sIHNpZ25hbCwgc3VibWlzc2lvbikge1xuICBsZXQgdXJsID0gY3JlYXRlVVJMKHN0cmlwSGFzaEZyb21QYXRoKGxvY2F0aW9uKSkudG9TdHJpbmcoKTtcbiAgbGV0IGluaXQgPSB7XG4gICAgc2lnbmFsXG4gIH07XG5cbiAgaWYgKHN1Ym1pc3Npb24pIHtcbiAgICBsZXQge1xuICAgICAgZm9ybU1ldGhvZCxcbiAgICAgIGZvcm1FbmNUeXBlLFxuICAgICAgZm9ybURhdGFcbiAgICB9ID0gc3VibWlzc2lvbjtcbiAgICBpbml0Lm1ldGhvZCA9IGZvcm1NZXRob2QudG9VcHBlckNhc2UoKTtcbiAgICBpbml0LmJvZHkgPSBmb3JtRW5jVHlwZSA9PT0gXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIiA/IGNvbnZlcnRGb3JtRGF0YVRvU2VhcmNoUGFyYW1zKGZvcm1EYXRhKSA6IGZvcm1EYXRhO1xuICB9IC8vIENvbnRlbnQtVHlwZSBpcyBpbmZlcnJlZCAoaHR0cHM6Ly9mZXRjaC5zcGVjLndoYXR3Zy5vcmcvI2RvbS1yZXF1ZXN0KVxuXG5cbiAgcmV0dXJuIG5ldyBSZXF1ZXN0KHVybCwgaW5pdCk7XG59XG5cbmZ1bmN0aW9uIGNvbnZlcnRGb3JtRGF0YVRvU2VhcmNoUGFyYW1zKGZvcm1EYXRhKSB7XG4gIGxldCBzZWFyY2hQYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKCk7XG5cbiAgZm9yIChsZXQgW2tleSwgdmFsdWVdIG9mIGZvcm1EYXRhLmVudHJpZXMoKSkge1xuICAgIGludmFyaWFudCh0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIsICdGaWxlIGlucHV0cyBhcmUgbm90IHN1cHBvcnRlZCB3aXRoIGVuY1R5cGUgXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIiwgJyArICdwbGVhc2UgdXNlIFwibXVsdGlwYXJ0L2Zvcm0tZGF0YVwiIGluc3RlYWQuJyk7XG4gICAgc2VhcmNoUGFyYW1zLmFwcGVuZChrZXksIHZhbHVlKTtcbiAgfVxuXG4gIHJldHVybiBzZWFyY2hQYXJhbXM7XG59XG5cbmZ1bmN0aW9uIHByb2Nlc3NSb3V0ZUxvYWRlckRhdGEobWF0Y2hlcywgbWF0Y2hlc1RvTG9hZCwgcmVzdWx0cywgcGVuZGluZ0Vycm9yLCBhY3RpdmVEZWZlcnJlZHMpIHtcbiAgLy8gRmlsbCBpbiBsb2FkZXJEYXRhL2Vycm9ycyBmcm9tIG91ciBsb2FkZXJzXG4gIGxldCBsb2FkZXJEYXRhID0ge307XG4gIGxldCBlcnJvcnMgPSBudWxsO1xuICBsZXQgc3RhdHVzQ29kZTtcbiAgbGV0IGZvdW5kRXJyb3IgPSBmYWxzZTtcbiAgbGV0IGxvYWRlckhlYWRlcnMgPSB7fTsgLy8gUHJvY2VzcyBsb2FkZXIgcmVzdWx0cyBpbnRvIHN0YXRlLmxvYWRlckRhdGEvc3RhdGUuZXJyb3JzXG5cbiAgcmVzdWx0cy5mb3JFYWNoKChyZXN1bHQsIGluZGV4KSA9PiB7XG4gICAgbGV0IGlkID0gbWF0Y2hlc1RvTG9hZFtpbmRleF0ucm91dGUuaWQ7XG4gICAgaW52YXJpYW50KCFpc1JlZGlyZWN0UmVzdWx0KHJlc3VsdCksIFwiQ2Fubm90IGhhbmRsZSByZWRpcmVjdCByZXN1bHRzIGluIHByb2Nlc3NMb2FkZXJEYXRhXCIpO1xuXG4gICAgaWYgKGlzRXJyb3JSZXN1bHQocmVzdWx0KSkge1xuICAgICAgLy8gTG9vayB1cHdhcmRzIGZyb20gdGhlIG1hdGNoZWQgcm91dGUgZm9yIHRoZSBjbG9zZXN0IGFuY2VzdG9yXG4gICAgICAvLyBlcnJvciBib3VuZGFyeSwgZGVmYXVsdGluZyB0byB0aGUgcm9vdCBtYXRjaFxuICAgICAgbGV0IGJvdW5kYXJ5TWF0Y2ggPSBmaW5kTmVhcmVzdEJvdW5kYXJ5KG1hdGNoZXMsIGlkKTtcbiAgICAgIGxldCBlcnJvciA9IHJlc3VsdC5lcnJvcjsgLy8gSWYgd2UgaGF2ZSBhIHBlbmRpbmcgYWN0aW9uIGVycm9yLCB3ZSByZXBvcnQgaXQgYXQgdGhlIGhpZ2hlc3Qtcm91dGVcbiAgICAgIC8vIHRoYXQgdGhyb3dzIGEgbG9hZGVyIGVycm9yLCBhbmQgdGhlbiBjbGVhciBpdCBvdXQgdG8gaW5kaWNhdGUgdGhhdFxuICAgICAgLy8gaXQgd2FzIGNvbnN1bWVkXG5cbiAgICAgIGlmIChwZW5kaW5nRXJyb3IpIHtcbiAgICAgICAgZXJyb3IgPSBPYmplY3QudmFsdWVzKHBlbmRpbmdFcnJvcilbMF07XG4gICAgICAgIHBlbmRpbmdFcnJvciA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgICAgZXJyb3JzID0gT2JqZWN0LmFzc2lnbihlcnJvcnMgfHwge30sIHtcbiAgICAgICAgW2JvdW5kYXJ5TWF0Y2gucm91dGUuaWRdOiBlcnJvclxuICAgICAgfSk7IC8vIE9uY2Ugd2UgZmluZCBvdXIgZmlyc3QgKGhpZ2hlc3QpIGVycm9yLCB3ZSBzZXQgdGhlIHN0YXR1cyBjb2RlIGFuZFxuICAgICAgLy8gcHJldmVudCBkZWVwZXIgc3RhdHVzIGNvZGVzIGZyb20gb3ZlcnJpZGluZ1xuXG4gICAgICBpZiAoIWZvdW5kRXJyb3IpIHtcbiAgICAgICAgZm91bmRFcnJvciA9IHRydWU7XG4gICAgICAgIHN0YXR1c0NvZGUgPSBpc1JvdXRlRXJyb3JSZXNwb25zZShyZXN1bHQuZXJyb3IpID8gcmVzdWx0LmVycm9yLnN0YXR1cyA6IDUwMDtcbiAgICAgIH1cblxuICAgICAgaWYgKHJlc3VsdC5oZWFkZXJzKSB7XG4gICAgICAgIGxvYWRlckhlYWRlcnNbaWRdID0gcmVzdWx0LmhlYWRlcnM7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpc0RlZmVycmVkUmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgIGFjdGl2ZURlZmVycmVkcyAmJiBhY3RpdmVEZWZlcnJlZHMuc2V0KGlkLCByZXN1bHQuZGVmZXJyZWREYXRhKTtcbiAgICAgIGxvYWRlckRhdGFbaWRdID0gcmVzdWx0LmRlZmVycmVkRGF0YS5kYXRhOyAvLyBUT0RPOiBBZGQgc3RhdHVzQ29kZS9oZWFkZXJzIG9uY2Ugd2Ugd2lyZSB1cCBzdHJlYW1pbmcgaW4gUmVtaXhcbiAgICB9IGVsc2Uge1xuICAgICAgbG9hZGVyRGF0YVtpZF0gPSByZXN1bHQuZGF0YTsgLy8gRXJyb3Igc3RhdHVzIGNvZGVzIGFsd2F5cyBvdmVycmlkZSBzdWNjZXNzIHN0YXR1cyBjb2RlcywgYnV0IGlmIGFsbFxuICAgICAgLy8gbG9hZGVycyBhcmUgc3VjY2Vzc2Z1bCB3ZSB0YWtlIHRoZSBkZWVwZXN0IHN0YXR1cyBjb2RlLlxuXG4gICAgICBpZiAocmVzdWx0LnN0YXR1c0NvZGUgIT0gbnVsbCAmJiByZXN1bHQuc3RhdHVzQ29kZSAhPT0gMjAwICYmICFmb3VuZEVycm9yKSB7XG4gICAgICAgIHN0YXR1c0NvZGUgPSByZXN1bHQuc3RhdHVzQ29kZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHJlc3VsdC5oZWFkZXJzKSB7XG4gICAgICAgIGxvYWRlckhlYWRlcnNbaWRdID0gcmVzdWx0LmhlYWRlcnM7XG4gICAgICB9XG4gICAgfVxuICB9KTsgLy8gSWYgd2UgZGlkbid0IGNvbnN1bWUgdGhlIHBlbmRpbmcgYWN0aW9uIGVycm9yIChpLmUuLCBhbGwgbG9hZGVyc1xuICAvLyByZXNvbHZlZCksIHRoZW4gY29uc3VtZSBpdCBoZXJlXG5cbiAgaWYgKHBlbmRpbmdFcnJvcikge1xuICAgIGVycm9ycyA9IHBlbmRpbmdFcnJvcjtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgbG9hZGVyRGF0YSxcbiAgICBlcnJvcnMsXG4gICAgc3RhdHVzQ29kZTogc3RhdHVzQ29kZSB8fCAyMDAsXG4gICAgbG9hZGVySGVhZGVyc1xuICB9O1xufVxuXG5mdW5jdGlvbiBwcm9jZXNzTG9hZGVyRGF0YShzdGF0ZSwgbWF0Y2hlcywgbWF0Y2hlc1RvTG9hZCwgcmVzdWx0cywgcGVuZGluZ0Vycm9yLCByZXZhbGlkYXRpbmdGZXRjaGVycywgZmV0Y2hlclJlc3VsdHMsIGFjdGl2ZURlZmVycmVkcykge1xuICBsZXQge1xuICAgIGxvYWRlckRhdGEsXG4gICAgZXJyb3JzXG4gIH0gPSBwcm9jZXNzUm91dGVMb2FkZXJEYXRhKG1hdGNoZXMsIG1hdGNoZXNUb0xvYWQsIHJlc3VsdHMsIHBlbmRpbmdFcnJvciwgYWN0aXZlRGVmZXJyZWRzKTsgLy8gUHJvY2VzcyByZXN1bHRzIGZyb20gb3VyIHJldmFsaWRhdGluZyBmZXRjaGVyc1xuXG4gIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCByZXZhbGlkYXRpbmdGZXRjaGVycy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICBsZXQgW2tleSwsIG1hdGNoXSA9IHJldmFsaWRhdGluZ0ZldGNoZXJzW2luZGV4XTtcbiAgICBpbnZhcmlhbnQoZmV0Y2hlclJlc3VsdHMgIT09IHVuZGVmaW5lZCAmJiBmZXRjaGVyUmVzdWx0c1tpbmRleF0gIT09IHVuZGVmaW5lZCwgXCJEaWQgbm90IGZpbmQgY29ycmVzcG9uZGluZyBmZXRjaGVyIHJlc3VsdFwiKTtcbiAgICBsZXQgcmVzdWx0ID0gZmV0Y2hlclJlc3VsdHNbaW5kZXhdOyAvLyBQcm9jZXNzIGZldGNoZXIgbm9uLXJlZGlyZWN0IGVycm9yc1xuXG4gICAgaWYgKGlzRXJyb3JSZXN1bHQocmVzdWx0KSkge1xuICAgICAgbGV0IGJvdW5kYXJ5TWF0Y2ggPSBmaW5kTmVhcmVzdEJvdW5kYXJ5KHN0YXRlLm1hdGNoZXMsIG1hdGNoLnJvdXRlLmlkKTtcblxuICAgICAgaWYgKCEoZXJyb3JzICYmIGVycm9yc1tib3VuZGFyeU1hdGNoLnJvdXRlLmlkXSkpIHtcbiAgICAgICAgZXJyb3JzID0gX2V4dGVuZHMoe30sIGVycm9ycywge1xuICAgICAgICAgIFtib3VuZGFyeU1hdGNoLnJvdXRlLmlkXTogcmVzdWx0LmVycm9yXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBzdGF0ZS5mZXRjaGVycy5kZWxldGUoa2V5KTtcbiAgICB9IGVsc2UgaWYgKGlzUmVkaXJlY3RSZXN1bHQocmVzdWx0KSkge1xuICAgICAgLy8gU2hvdWxkIG5ldmVyIGdldCBoZXJlLCByZWRpcmVjdHMgc2hvdWxkIGdldCBwcm9jZXNzZWQgYWJvdmUsIGJ1dCB3ZVxuICAgICAgLy8ga2VlcCB0aGlzIHRvIHR5cGUgbmFycm93IHRvIGEgc3VjY2VzcyByZXN1bHQgaW4gdGhlIGVsc2VcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlVuaGFuZGxlZCBmZXRjaGVyIHJldmFsaWRhdGlvbiByZWRpcmVjdFwiKTtcbiAgICB9IGVsc2UgaWYgKGlzRGVmZXJyZWRSZXN1bHQocmVzdWx0KSkge1xuICAgICAgLy8gU2hvdWxkIG5ldmVyIGdldCBoZXJlLCBkZWZlcnJlZCBkYXRhIHNob3VsZCBiZSBhd2FpdGVkIGZvciBmZXRjaGVyc1xuICAgICAgLy8gaW4gcmVzb2x2ZURlZmVycmVkUmVzdWx0c1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5oYW5kbGVkIGZldGNoZXIgZGVmZXJyZWQgZGF0YVwiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IGRvbmVGZXRjaGVyID0ge1xuICAgICAgICBzdGF0ZTogXCJpZGxlXCIsXG4gICAgICAgIGRhdGE6IHJlc3VsdC5kYXRhLFxuICAgICAgICBmb3JtTWV0aG9kOiB1bmRlZmluZWQsXG4gICAgICAgIGZvcm1BY3Rpb246IHVuZGVmaW5lZCxcbiAgICAgICAgZm9ybUVuY1R5cGU6IHVuZGVmaW5lZCxcbiAgICAgICAgZm9ybURhdGE6IHVuZGVmaW5lZFxuICAgICAgfTtcbiAgICAgIHN0YXRlLmZldGNoZXJzLnNldChrZXksIGRvbmVGZXRjaGVyKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGxvYWRlckRhdGEsXG4gICAgZXJyb3JzXG4gIH07XG59XG5cbmZ1bmN0aW9uIG1lcmdlTG9hZGVyRGF0YShsb2FkZXJEYXRhLCBuZXdMb2FkZXJEYXRhLCBtYXRjaGVzKSB7XG4gIGxldCBtZXJnZWRMb2FkZXJEYXRhID0gX2V4dGVuZHMoe30sIG5ld0xvYWRlckRhdGEpO1xuXG4gIG1hdGNoZXMuZm9yRWFjaChtYXRjaCA9PiB7XG4gICAgbGV0IGlkID0gbWF0Y2gucm91dGUuaWQ7XG5cbiAgICBpZiAobmV3TG9hZGVyRGF0YVtpZF0gPT09IHVuZGVmaW5lZCAmJiBsb2FkZXJEYXRhW2lkXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBtZXJnZWRMb2FkZXJEYXRhW2lkXSA9IGxvYWRlckRhdGFbaWRdO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBtZXJnZWRMb2FkZXJEYXRhO1xufSAvLyBGaW5kIHRoZSBuZWFyZXN0IGVycm9yIGJvdW5kYXJ5LCBsb29raW5nIHVwd2FyZHMgZnJvbSB0aGUgbGVhZiByb3V0ZSAob3IgdGhlXG4vLyByb3V0ZSBzcGVjaWZpZWQgYnkgcm91dGVJZCkgZm9yIHRoZSBjbG9zZXN0IGFuY2VzdG9yIGVycm9yIGJvdW5kYXJ5LFxuLy8gZGVmYXVsdGluZyB0byB0aGUgcm9vdCBtYXRjaFxuXG5cbmZ1bmN0aW9uIGZpbmROZWFyZXN0Qm91bmRhcnkobWF0Y2hlcywgcm91dGVJZCkge1xuICBsZXQgZWxpZ2libGVNYXRjaGVzID0gcm91dGVJZCA/IG1hdGNoZXMuc2xpY2UoMCwgbWF0Y2hlcy5maW5kSW5kZXgobSA9PiBtLnJvdXRlLmlkID09PSByb3V0ZUlkKSArIDEpIDogWy4uLm1hdGNoZXNdO1xuICByZXR1cm4gZWxpZ2libGVNYXRjaGVzLnJldmVyc2UoKS5maW5kKG0gPT4gbS5yb3V0ZS5oYXNFcnJvckJvdW5kYXJ5ID09PSB0cnVlKSB8fCBtYXRjaGVzWzBdO1xufVxuXG5mdW5jdGlvbiBnZXRTaG9ydENpcmN1aXRNYXRjaGVzKHJvdXRlcywgc3RhdHVzLCBzdGF0dXNUZXh0KSB7XG4gIC8vIFByZWZlciBhIHJvb3QgbGF5b3V0IHJvdXRlIGlmIHByZXNlbnQsIG90aGVyd2lzZSBzaGltIGluIGEgcm91dGUgb2JqZWN0XG4gIGxldCByb3V0ZSA9IHJvdXRlcy5maW5kKHIgPT4gci5pbmRleCB8fCAhci5wYXRoIHx8IHIucGF0aCA9PT0gXCIvXCIpIHx8IHtcbiAgICBpZDogXCJfX3NoaW0tXCIgKyBzdGF0dXMgKyBcIi1yb3V0ZV9fXCJcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICBtYXRjaGVzOiBbe1xuICAgICAgcGFyYW1zOiB7fSxcbiAgICAgIHBhdGhuYW1lOiBcIlwiLFxuICAgICAgcGF0aG5hbWVCYXNlOiBcIlwiLFxuICAgICAgcm91dGVcbiAgICB9XSxcbiAgICByb3V0ZSxcbiAgICBlcnJvcjogbmV3IEVycm9yUmVzcG9uc2Uoc3RhdHVzLCBzdGF0dXNUZXh0LCBudWxsKVxuICB9O1xufVxuXG5mdW5jdGlvbiBnZXROb3RGb3VuZE1hdGNoZXMocm91dGVzKSB7XG4gIHJldHVybiBnZXRTaG9ydENpcmN1aXRNYXRjaGVzKHJvdXRlcywgNDA0LCBcIk5vdCBGb3VuZFwiKTtcbn1cblxuZnVuY3Rpb24gZ2V0TWV0aG9kTm90QWxsb3dlZE1hdGNoZXMocm91dGVzKSB7XG4gIHJldHVybiBnZXRTaG9ydENpcmN1aXRNYXRjaGVzKHJvdXRlcywgNDA1LCBcIk1ldGhvZCBOb3QgQWxsb3dlZFwiKTtcbn1cblxuZnVuY3Rpb24gZ2V0TWV0aG9kTm90QWxsb3dlZFJlc3VsdChwYXRoKSB7XG4gIGxldCBocmVmID0gdHlwZW9mIHBhdGggPT09IFwic3RyaW5nXCIgPyBwYXRoIDogY3JlYXRlUGF0aChwYXRoKTtcbiAgY29uc29sZS53YXJuKFwiWW91J3JlIHRyeWluZyB0byBzdWJtaXQgdG8gYSByb3V0ZSB0aGF0IGRvZXMgbm90IGhhdmUgYW4gYWN0aW9uLiAgVG8gXCIgKyBcImZpeCB0aGlzLCBwbGVhc2UgYWRkIGFuIGBhY3Rpb25gIGZ1bmN0aW9uIHRvIHRoZSByb3V0ZSBmb3IgXCIgKyAoXCJbXCIgKyBocmVmICsgXCJdXCIpKTtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBSZXN1bHRUeXBlLmVycm9yLFxuICAgIGVycm9yOiBuZXcgRXJyb3JSZXNwb25zZSg0MDUsIFwiTWV0aG9kIE5vdCBBbGxvd2VkXCIsIFwiXCIpXG4gIH07XG59IC8vIEZpbmQgYW55IHJldHVybmVkIHJlZGlyZWN0IGVycm9ycywgc3RhcnRpbmcgZnJvbSB0aGUgbG93ZXN0IG1hdGNoXG5cblxuZnVuY3Rpb24gZmluZFJlZGlyZWN0KHJlc3VsdHMpIHtcbiAgZm9yIChsZXQgaSA9IHJlc3VsdHMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICBsZXQgcmVzdWx0ID0gcmVzdWx0c1tpXTtcblxuICAgIGlmIChpc1JlZGlyZWN0UmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHN0cmlwSGFzaEZyb21QYXRoKHBhdGgpIHtcbiAgbGV0IHBhcnNlZFBhdGggPSB0eXBlb2YgcGF0aCA9PT0gXCJzdHJpbmdcIiA/IHBhcnNlUGF0aChwYXRoKSA6IHBhdGg7XG4gIHJldHVybiBjcmVhdGVQYXRoKF9leHRlbmRzKHt9LCBwYXJzZWRQYXRoLCB7XG4gICAgaGFzaDogXCJcIlxuICB9KSk7XG59XG5cbmZ1bmN0aW9uIGlzSGFzaENoYW5nZU9ubHkoYSwgYikge1xuICByZXR1cm4gYS5wYXRobmFtZSA9PT0gYi5wYXRobmFtZSAmJiBhLnNlYXJjaCA9PT0gYi5zZWFyY2ggJiYgYS5oYXNoICE9PSBiLmhhc2g7XG59XG5cbmZ1bmN0aW9uIGlzRGVmZXJyZWRSZXN1bHQocmVzdWx0KSB7XG4gIHJldHVybiByZXN1bHQudHlwZSA9PT0gUmVzdWx0VHlwZS5kZWZlcnJlZDtcbn1cblxuZnVuY3Rpb24gaXNFcnJvclJlc3VsdChyZXN1bHQpIHtcbiAgcmV0dXJuIHJlc3VsdC50eXBlID09PSBSZXN1bHRUeXBlLmVycm9yO1xufVxuXG5mdW5jdGlvbiBpc1JlZGlyZWN0UmVzdWx0KHJlc3VsdCkge1xuICByZXR1cm4gKHJlc3VsdCAmJiByZXN1bHQudHlwZSkgPT09IFJlc3VsdFR5cGUucmVkaXJlY3Q7XG59XG5cbmZ1bmN0aW9uIGlzUmVkaXJlY3RSZXNwb25zZShyZXN1bHQpIHtcbiAgaWYgKCEocmVzdWx0IGluc3RhbmNlb2YgUmVzcG9uc2UpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgbGV0IHN0YXR1cyA9IHJlc3VsdC5zdGF0dXM7XG4gIGxldCBsb2NhdGlvbiA9IHJlc3VsdC5oZWFkZXJzLmdldChcIkxvY2F0aW9uXCIpO1xuICByZXR1cm4gc3RhdHVzID49IDMwMCAmJiBzdGF0dXMgPD0gMzk5ICYmIGxvY2F0aW9uICE9IG51bGw7XG59XG5cbmZ1bmN0aW9uIGlzUXVlcnlSb3V0ZVJlc3BvbnNlKG9iaikge1xuICByZXR1cm4gb2JqICYmIG9iai5yZXNwb25zZSBpbnN0YW5jZW9mIFJlc3BvbnNlICYmIChvYmoudHlwZSA9PT0gUmVzdWx0VHlwZS5kYXRhIHx8IFJlc3VsdFR5cGUuZXJyb3IpO1xufVxuXG5hc3luYyBmdW5jdGlvbiByZXNvbHZlRGVmZXJyZWRSZXN1bHRzKGN1cnJlbnRNYXRjaGVzLCBtYXRjaGVzVG9Mb2FkLCByZXN1bHRzLCBzaWduYWwsIGlzRmV0Y2hlciwgY3VycmVudExvYWRlckRhdGEpIHtcbiAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHJlc3VsdHMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgbGV0IHJlc3VsdCA9IHJlc3VsdHNbaW5kZXhdO1xuICAgIGxldCBtYXRjaCA9IG1hdGNoZXNUb0xvYWRbaW5kZXhdO1xuICAgIGxldCBjdXJyZW50TWF0Y2ggPSBjdXJyZW50TWF0Y2hlcy5maW5kKG0gPT4gbS5yb3V0ZS5pZCA9PT0gbWF0Y2gucm91dGUuaWQpO1xuICAgIGxldCBpc1JldmFsaWRhdGluZ0xvYWRlciA9IGN1cnJlbnRNYXRjaCAhPSBudWxsICYmICFpc05ld1JvdXRlSW5zdGFuY2UoY3VycmVudE1hdGNoLCBtYXRjaCkgJiYgKGN1cnJlbnRMb2FkZXJEYXRhICYmIGN1cnJlbnRMb2FkZXJEYXRhW21hdGNoLnJvdXRlLmlkXSkgIT09IHVuZGVmaW5lZDtcblxuICAgIGlmIChpc0RlZmVycmVkUmVzdWx0KHJlc3VsdCkgJiYgKGlzRmV0Y2hlciB8fCBpc1JldmFsaWRhdGluZ0xvYWRlcikpIHtcbiAgICAgIC8vIE5vdGU6IHdlIGRvIG5vdCBoYXZlIHRvIHRvdWNoIGFjdGl2ZURlZmVycmVkcyBoZXJlIHNpbmNlIHdlIHJhY2UgdGhlbVxuICAgICAgLy8gYWdhaW5zdCB0aGUgc2lnbmFsIGluIHJlc29sdmVEZWZlcnJlZERhdGEgYW5kIHRoZXknbGwgZ2V0IGFib3J0ZWRcbiAgICAgIC8vIHRoZXJlIGlmIG5lZWRlZFxuICAgICAgYXdhaXQgcmVzb2x2ZURlZmVycmVkRGF0YShyZXN1bHQsIHNpZ25hbCwgaXNGZXRjaGVyKS50aGVuKHJlc3VsdCA9PiB7XG4gICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICByZXN1bHRzW2luZGV4XSA9IHJlc3VsdCB8fCByZXN1bHRzW2luZGV4XTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHJlc29sdmVEZWZlcnJlZERhdGEocmVzdWx0LCBzaWduYWwsIHVud3JhcCkge1xuICBpZiAodW53cmFwID09PSB2b2lkIDApIHtcbiAgICB1bndyYXAgPSBmYWxzZTtcbiAgfVxuXG4gIGxldCBhYm9ydGVkID0gYXdhaXQgcmVzdWx0LmRlZmVycmVkRGF0YS5yZXNvbHZlRGF0YShzaWduYWwpO1xuXG4gIGlmIChhYm9ydGVkKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKHVud3JhcCkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBSZXN1bHRUeXBlLmRhdGEsXG4gICAgICAgIGRhdGE6IHJlc3VsdC5kZWZlcnJlZERhdGEudW53cmFwcGVkRGF0YVxuICAgICAgfTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyBIYW5kbGUgYW55IFRyYWNrZWRQcm9taXNlLl9lcnJvciB2YWx1ZXMgZW5jb3VudGVyZWQgd2hpbGUgdW53cmFwcGluZ1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogUmVzdWx0VHlwZS5lcnJvcixcbiAgICAgICAgZXJyb3I6IGVcbiAgICAgIH07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBSZXN1bHRUeXBlLmRhdGEsXG4gICAgZGF0YTogcmVzdWx0LmRlZmVycmVkRGF0YS5kYXRhXG4gIH07XG59XG5cbmZ1bmN0aW9uIGhhc05ha2VkSW5kZXhRdWVyeShzZWFyY2gpIHtcbiAgcmV0dXJuIG5ldyBVUkxTZWFyY2hQYXJhbXMoc2VhcmNoKS5nZXRBbGwoXCJpbmRleFwiKS5zb21lKHYgPT4gdiA9PT0gXCJcIik7XG59IC8vIE5vdGU6IFRoaXMgc2hvdWxkIG1hdGNoIHRoZSBmb3JtYXQgZXhwb3J0ZWQgYnkgdXNlTWF0Y2hlcywgc28gaWYgeW91IGNoYW5nZVxuLy8gdGhpcyBwbGVhc2UgYWxzbyBjaGFuZ2UgdGhhdCA6KSAgRXZlbnR1YWxseSB3ZSdsbCBEUlkgdGhpcyB1cFxuXG5cbmZ1bmN0aW9uIGNyZWF0ZVVzZU1hdGNoZXNNYXRjaChtYXRjaCwgbG9hZGVyRGF0YSkge1xuICBsZXQge1xuICAgIHJvdXRlLFxuICAgIHBhdGhuYW1lLFxuICAgIHBhcmFtc1xuICB9ID0gbWF0Y2g7XG4gIHJldHVybiB7XG4gICAgaWQ6IHJvdXRlLmlkLFxuICAgIHBhdGhuYW1lLFxuICAgIHBhcmFtcyxcbiAgICBkYXRhOiBsb2FkZXJEYXRhW3JvdXRlLmlkXSxcbiAgICBoYW5kbGU6IHJvdXRlLmhhbmRsZVxuICB9O1xufVxuXG5mdW5jdGlvbiBnZXRUYXJnZXRNYXRjaChtYXRjaGVzLCBsb2NhdGlvbikge1xuICBsZXQgc2VhcmNoID0gdHlwZW9mIGxvY2F0aW9uID09PSBcInN0cmluZ1wiID8gcGFyc2VQYXRoKGxvY2F0aW9uKS5zZWFyY2ggOiBsb2NhdGlvbi5zZWFyY2g7XG5cbiAgaWYgKG1hdGNoZXNbbWF0Y2hlcy5sZW5ndGggLSAxXS5yb3V0ZS5pbmRleCAmJiBoYXNOYWtlZEluZGV4UXVlcnkoc2VhcmNoIHx8IFwiXCIpKSB7XG4gICAgLy8gUmV0dXJuIHRoZSBsZWFmIGluZGV4IHJvdXRlIHdoZW4gaW5kZXggaXMgcHJlc2VudFxuICAgIHJldHVybiBtYXRjaGVzW21hdGNoZXMubGVuZ3RoIC0gMV07XG4gIH0gLy8gT3RoZXJ3aXNlIGdyYWIgdGhlIGRlZXBlc3QgXCJwYXRoIGNvbnRyaWJ1dGluZ1wiIG1hdGNoIChpZ25vcmluZyBpbmRleCBhbmRcbiAgLy8gcGF0aGxlc3MgbGF5b3V0IHJvdXRlcylcblxuXG4gIGxldCBwYXRoTWF0Y2hlcyA9IGdldFBhdGhDb250cmlidXRpbmdNYXRjaGVzKG1hdGNoZXMpO1xuICByZXR1cm4gcGF0aE1hdGNoZXNbcGF0aE1hdGNoZXMubGVuZ3RoIC0gMV07XG59IC8vI2VuZHJlZ2lvblxuXG5leHBvcnQgeyBBYm9ydGVkRGVmZXJyZWRFcnJvciwgQWN0aW9uLCBFcnJvclJlc3BvbnNlLCBJRExFX0ZFVENIRVIsIElETEVfTkFWSUdBVElPTiwgY29udmVydFJvdXRlc1RvRGF0YVJvdXRlcyBhcyBVTlNBRkVfY29udmVydFJvdXRlc1RvRGF0YVJvdXRlcywgZ2V0UGF0aENvbnRyaWJ1dGluZ01hdGNoZXMgYXMgVU5TQUZFX2dldFBhdGhDb250cmlidXRpbmdNYXRjaGVzLCBjcmVhdGVCcm93c2VySGlzdG9yeSwgY3JlYXRlSGFzaEhpc3RvcnksIGNyZWF0ZU1lbW9yeUhpc3RvcnksIGNyZWF0ZVBhdGgsIGNyZWF0ZVJvdXRlciwgZGVmZXIsIGdlbmVyYXRlUGF0aCwgZ2V0U3RhdGljQ29udGV4dEZyb21FcnJvciwgZ2V0VG9QYXRobmFtZSwgaW52YXJpYW50LCBpc1JvdXRlRXJyb3JSZXNwb25zZSwgam9pblBhdGhzLCBqc29uLCBtYXRjaFBhdGgsIG1hdGNoUm91dGVzLCBub3JtYWxpemVQYXRobmFtZSwgcGFyc2VQYXRoLCByZWRpcmVjdCwgcmVzb2x2ZVBhdGgsIHJlc29sdmVUbywgc3RyaXBCYXNlbmFtZSwgdW5zdGFibGVfY3JlYXRlU3RhdGljSGFuZGxlciwgd2FybmluZyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cm91dGVyLmpzLm1hcFxuIiwiLyoqXG4gKiBSZWFjdCBSb3V0ZXIgdjYuNC4zXG4gKlxuICogQ29weXJpZ2h0IChjKSBSZW1peCBTb2Z0d2FyZSBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFLm1kIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGxpY2Vuc2UgTUlUXG4gKi9cbmltcG9ydCB7IGludmFyaWFudCwgam9pblBhdGhzLCBtYXRjaFBhdGgsIFVOU0FGRV9nZXRQYXRoQ29udHJpYnV0aW5nTWF0Y2hlcywgd2FybmluZywgcmVzb2x2ZVRvLCBwYXJzZVBhdGgsIG1hdGNoUm91dGVzLCBBY3Rpb24sIGlzUm91dGVFcnJvclJlc3BvbnNlLCBjcmVhdGVNZW1vcnlIaXN0b3J5LCBzdHJpcEJhc2VuYW1lLCBBYm9ydGVkRGVmZXJyZWRFcnJvciwgY3JlYXRlUm91dGVyIH0gZnJvbSAnQHJlbWl4LXJ1bi9yb3V0ZXInO1xuZXhwb3J0IHsgQWJvcnRlZERlZmVycmVkRXJyb3IsIEFjdGlvbiBhcyBOYXZpZ2F0aW9uVHlwZSwgY3JlYXRlUGF0aCwgZGVmZXIsIGdlbmVyYXRlUGF0aCwgaXNSb3V0ZUVycm9yUmVzcG9uc2UsIGpzb24sIG1hdGNoUGF0aCwgbWF0Y2hSb3V0ZXMsIHBhcnNlUGF0aCwgcmVkaXJlY3QsIHJlc29sdmVQYXRoIH0gZnJvbSAnQHJlbWl4LXJ1bi9yb3V0ZXInO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduID8gT2JqZWN0LmFzc2lnbi5iaW5kKCkgOiBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcbiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbi8qKlxuICogaW5saW5lZCBPYmplY3QuaXMgcG9seWZpbGwgdG8gYXZvaWQgcmVxdWlyaW5nIGNvbnN1bWVycyBzaGlwIHRoZWlyIG93blxuICogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvT2JqZWN0L2lzXG4gKi9cblxuZnVuY3Rpb24gaXNQb2x5ZmlsbCh4LCB5KSB7XG4gIHJldHVybiB4ID09PSB5ICYmICh4ICE9PSAwIHx8IDEgLyB4ID09PSAxIC8geSkgfHwgeCAhPT0geCAmJiB5ICE9PSB5IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gIDtcbn1cblxuY29uc3QgaXMgPSB0eXBlb2YgT2JqZWN0LmlzID09PSBcImZ1bmN0aW9uXCIgPyBPYmplY3QuaXMgOiBpc1BvbHlmaWxsOyAvLyBJbnRlbnRpb25hbGx5IG5vdCB1c2luZyBuYW1lZCBpbXBvcnRzIGJlY2F1c2UgUm9sbHVwIHVzZXMgZHluYW1pY1xuLy8gZGlzcGF0Y2ggZm9yIENvbW1vbkpTIGludGVyb3AgbmFtZWQgaW1wb3J0cy5cblxuY29uc3Qge1xuICB1c2VTdGF0ZSxcbiAgdXNlRWZmZWN0LFxuICB1c2VMYXlvdXRFZmZlY3QsXG4gIHVzZURlYnVnVmFsdWVcbn0gPSBSZWFjdDtcbmxldCBkaWRXYXJuT2xkMThBbHBoYSA9IGZhbHNlO1xubGV0IGRpZFdhcm5VbmNhY2hlZEdldFNuYXBzaG90ID0gZmFsc2U7IC8vIERpc2NsYWltZXI6IFRoaXMgc2hpbSBicmVha3MgbWFueSBvZiB0aGUgcnVsZXMgb2YgUmVhY3QsIGFuZCBvbmx5IHdvcmtzXG4vLyBiZWNhdXNlIG9mIGEgdmVyeSBwYXJ0aWN1bGFyIHNldCBvZiBpbXBsZW1lbnRhdGlvbiBkZXRhaWxzIGFuZCBhc3N1bXB0aW9uc1xuLy8gLS0gY2hhbmdlIGFueSBvbmUgb2YgdGhlbSBhbmQgaXQgd2lsbCBicmVhay4gVGhlIG1vc3QgaW1wb3J0YW50IGFzc3VtcHRpb25cbi8vIGlzIHRoYXQgdXBkYXRlcyBhcmUgYWx3YXlzIHN5bmNocm9ub3VzLCBiZWNhdXNlIGNvbmN1cnJlbnQgcmVuZGVyaW5nIGlzXG4vLyBvbmx5IGF2YWlsYWJsZSBpbiB2ZXJzaW9ucyBvZiBSZWFjdCB0aGF0IGFsc28gaGF2ZSBhIGJ1aWx0LWluXG4vLyB1c2VTeW5jRXh0ZXJuYWxTdG9yZSBBUEkuIEFuZCB3ZSBvbmx5IHVzZSB0aGlzIHNoaW0gd2hlbiB0aGUgYnVpbHQtaW4gQVBJXG4vLyBkb2VzIG5vdCBleGlzdC5cbi8vXG4vLyBEbyBub3QgYXNzdW1lIHRoYXQgdGhlIGNsZXZlciBoYWNrcyB1c2VkIGJ5IHRoaXMgaG9vayBhbHNvIHdvcmsgaW4gZ2VuZXJhbC5cbi8vIFRoZSBwb2ludCBvZiB0aGlzIHNoaW0gaXMgdG8gcmVwbGFjZSB0aGUgbmVlZCBmb3IgaGFja3MgYnkgb3RoZXIgbGlicmFyaWVzLlxuXG5mdW5jdGlvbiB1c2VTeW5jRXh0ZXJuYWxTdG9yZSQyKHN1YnNjcmliZSwgZ2V0U25hcHNob3QsIC8vIE5vdGU6IFRoZSBzaGltIGRvZXMgbm90IHVzZSBnZXRTZXJ2ZXJTbmFwc2hvdCwgYmVjYXVzZSBwcmUtMTggdmVyc2lvbnMgb2Zcbi8vIFJlYWN0IGRvIG5vdCBleHBvc2UgYSB3YXkgdG8gY2hlY2sgaWYgd2UncmUgaHlkcmF0aW5nLiBTbyB1c2VycyBvZiB0aGUgc2hpbVxuLy8gd2lsbCBuZWVkIHRvIHRyYWNrIHRoYXQgdGhlbXNlbHZlcyBhbmQgcmV0dXJuIHRoZSBjb3JyZWN0IHZhbHVlXG4vLyBmcm9tIGBnZXRTbmFwc2hvdGAuXG5nZXRTZXJ2ZXJTbmFwc2hvdCkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgaWYgKCFkaWRXYXJuT2xkMThBbHBoYSkge1xuICAgICAgaWYgKFwic3RhcnRUcmFuc2l0aW9uXCIgaW4gUmVhY3QpIHtcbiAgICAgICAgZGlkV2Fybk9sZDE4QWxwaGEgPSB0cnVlO1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiWW91IGFyZSB1c2luZyBhbiBvdXRkYXRlZCwgcHJlLXJlbGVhc2UgYWxwaGEgb2YgUmVhY3QgMTggdGhhdCBcIiArIFwiZG9lcyBub3Qgc3VwcG9ydCB1c2VTeW5jRXh0ZXJuYWxTdG9yZS4gVGhlIFwiICsgXCJ1c2Utc3luYy1leHRlcm5hbC1zdG9yZSBzaGltIHdpbGwgbm90IHdvcmsgY29ycmVjdGx5LiBVcGdyYWRlIFwiICsgXCJ0byBhIG5ld2VyIHByZS1yZWxlYXNlLlwiKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gLy8gUmVhZCB0aGUgY3VycmVudCBzbmFwc2hvdCBmcm9tIHRoZSBzdG9yZSBvbiBldmVyeSByZW5kZXIuIEFnYWluLCB0aGlzXG4gIC8vIGJyZWFrcyB0aGUgcnVsZXMgb2YgUmVhY3QsIGFuZCBvbmx5IHdvcmtzIGhlcmUgYmVjYXVzZSBvZiBzcGVjaWZpY1xuICAvLyBpbXBsZW1lbnRhdGlvbiBkZXRhaWxzLCBtb3N0IGltcG9ydGFudGx5IHRoYXQgdXBkYXRlcyBhcmVcbiAgLy8gYWx3YXlzIHN5bmNocm9ub3VzLlxuXG5cbiAgY29uc3QgdmFsdWUgPSBnZXRTbmFwc2hvdCgpO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICBpZiAoIWRpZFdhcm5VbmNhY2hlZEdldFNuYXBzaG90KSB7XG4gICAgICBjb25zdCBjYWNoZWRWYWx1ZSA9IGdldFNuYXBzaG90KCk7XG5cbiAgICAgIGlmICghaXModmFsdWUsIGNhY2hlZFZhbHVlKSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiVGhlIHJlc3VsdCBvZiBnZXRTbmFwc2hvdCBzaG91bGQgYmUgY2FjaGVkIHRvIGF2b2lkIGFuIGluZmluaXRlIGxvb3BcIik7XG4gICAgICAgIGRpZFdhcm5VbmNhY2hlZEdldFNuYXBzaG90ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH0gLy8gQmVjYXVzZSB1cGRhdGVzIGFyZSBzeW5jaHJvbm91cywgd2UgZG9uJ3QgcXVldWUgdGhlbS4gSW5zdGVhZCB3ZSBmb3JjZSBhXG4gIC8vIHJlLXJlbmRlciB3aGVuZXZlciB0aGUgc3Vic2NyaWJlZCBzdGF0ZSBjaGFuZ2VzIGJ5IHVwZGF0aW5nIGFuIHNvbWVcbiAgLy8gYXJiaXRyYXJ5IHVzZVN0YXRlIGhvb2suIFRoZW4sIGR1cmluZyByZW5kZXIsIHdlIGNhbGwgZ2V0U25hcHNob3QgdG8gcmVhZFxuICAvLyB0aGUgY3VycmVudCB2YWx1ZS5cbiAgLy9cbiAgLy8gQmVjYXVzZSB3ZSBkb24ndCBhY3R1YWxseSB1c2UgdGhlIHN0YXRlIHJldHVybmVkIGJ5IHRoZSB1c2VTdGF0ZSBob29rLCB3ZVxuICAvLyBjYW4gc2F2ZSBhIGJpdCBvZiBtZW1vcnkgYnkgc3RvcmluZyBvdGhlciBzdHVmZiBpbiB0aGF0IHNsb3QuXG4gIC8vXG4gIC8vIFRvIGltcGxlbWVudCB0aGUgZWFybHkgYmFpbG91dCwgd2UgbmVlZCB0byB0cmFjayBzb21lIHRoaW5ncyBvbiBhIG11dGFibGVcbiAgLy8gb2JqZWN0LiBVc3VhbGx5LCB3ZSB3b3VsZCBwdXQgdGhhdCBpbiBhIHVzZVJlZiBob29rLCBidXQgd2UgY2FuIHN0YXNoIGl0IGluXG4gIC8vIG91ciB1c2VTdGF0ZSBob29rIGluc3RlYWQuXG4gIC8vXG4gIC8vIFRvIGZvcmNlIGEgcmUtcmVuZGVyLCB3ZSBjYWxsIGZvcmNlVXBkYXRlKHtpbnN0fSkuIFRoYXQgd29ya3MgYmVjYXVzZSB0aGVcbiAgLy8gbmV3IG9iamVjdCBhbHdheXMgZmFpbHMgYW4gZXF1YWxpdHkgY2hlY2suXG5cblxuICBjb25zdCBbe1xuICAgIGluc3RcbiAgfSwgZm9yY2VVcGRhdGVdID0gdXNlU3RhdGUoe1xuICAgIGluc3Q6IHtcbiAgICAgIHZhbHVlLFxuICAgICAgZ2V0U25hcHNob3RcbiAgICB9XG4gIH0pOyAvLyBUcmFjayB0aGUgbGF0ZXN0IGdldFNuYXBzaG90IGZ1bmN0aW9uIHdpdGggYSByZWYuIFRoaXMgbmVlZHMgdG8gYmUgdXBkYXRlZFxuICAvLyBpbiB0aGUgbGF5b3V0IHBoYXNlIHNvIHdlIGNhbiBhY2Nlc3MgaXQgZHVyaW5nIHRoZSB0ZWFyaW5nIGNoZWNrIHRoYXRcbiAgLy8gaGFwcGVucyBvbiBzdWJzY3JpYmUuXG5cbiAgdXNlTGF5b3V0RWZmZWN0KCgpID0+IHtcbiAgICBpbnN0LnZhbHVlID0gdmFsdWU7XG4gICAgaW5zdC5nZXRTbmFwc2hvdCA9IGdldFNuYXBzaG90OyAvLyBXaGVuZXZlciBnZXRTbmFwc2hvdCBvciBzdWJzY3JpYmUgY2hhbmdlcywgd2UgbmVlZCB0byBjaGVjayBpbiB0aGVcbiAgICAvLyBjb21taXQgcGhhc2UgaWYgdGhlcmUgd2FzIGFuIGludGVybGVhdmVkIG11dGF0aW9uLiBJbiBjb25jdXJyZW50IG1vZGVcbiAgICAvLyB0aGlzIGNhbiBoYXBwZW4gYWxsIHRoZSB0aW1lLCBidXQgZXZlbiBpbiBzeW5jaHJvbm91cyBtb2RlLCBhbiBlYXJsaWVyXG4gICAgLy8gZWZmZWN0IG1heSBoYXZlIG11dGF0ZWQgdGhlIHN0b3JlLlxuXG4gICAgaWYgKGNoZWNrSWZTbmFwc2hvdENoYW5nZWQoaW5zdCkpIHtcbiAgICAgIC8vIEZvcmNlIGEgcmUtcmVuZGVyLlxuICAgICAgZm9yY2VVcGRhdGUoe1xuICAgICAgICBpbnN0XG4gICAgICB9KTtcbiAgICB9IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9leGhhdXN0aXZlLWRlcHNcblxuICB9LCBbc3Vic2NyaWJlLCB2YWx1ZSwgZ2V0U25hcHNob3RdKTtcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAvLyBDaGVjayBmb3IgY2hhbmdlcyByaWdodCBiZWZvcmUgc3Vic2NyaWJpbmcuIFN1YnNlcXVlbnQgY2hhbmdlcyB3aWxsIGJlXG4gICAgLy8gZGV0ZWN0ZWQgaW4gdGhlIHN1YnNjcmlwdGlvbiBoYW5kbGVyLlxuICAgIGlmIChjaGVja0lmU25hcHNob3RDaGFuZ2VkKGluc3QpKSB7XG4gICAgICAvLyBGb3JjZSBhIHJlLXJlbmRlci5cbiAgICAgIGZvcmNlVXBkYXRlKHtcbiAgICAgICAgaW5zdFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgY29uc3QgaGFuZGxlU3RvcmVDaGFuZ2UgPSAoKSA9PiB7XG4gICAgICAvLyBUT0RPOiBCZWNhdXNlIHRoZXJlIGlzIG5vIGNyb3NzLXJlbmRlcmVyIEFQSSBmb3IgYmF0Y2hpbmcgdXBkYXRlcywgaXQnc1xuICAgICAgLy8gdXAgdG8gdGhlIGNvbnN1bWVyIG9mIHRoaXMgbGlicmFyeSB0byB3cmFwIHRoZWlyIHN1YnNjcmlwdGlvbiBldmVudFxuICAgICAgLy8gd2l0aCB1bnN0YWJsZV9iYXRjaGVkVXBkYXRlcy4gU2hvdWxkIHdlIHRyeSB0byBkZXRlY3Qgd2hlbiB0aGlzIGlzbid0XG4gICAgICAvLyB0aGUgY2FzZSBhbmQgcHJpbnQgYSB3YXJuaW5nIGluIGRldmVsb3BtZW50P1xuICAgICAgLy8gVGhlIHN0b3JlIGNoYW5nZWQuIENoZWNrIGlmIHRoZSBzbmFwc2hvdCBjaGFuZ2VkIHNpbmNlIHRoZSBsYXN0IHRpbWUgd2VcbiAgICAgIC8vIHJlYWQgZnJvbSB0aGUgc3RvcmUuXG4gICAgICBpZiAoY2hlY2tJZlNuYXBzaG90Q2hhbmdlZChpbnN0KSkge1xuICAgICAgICAvLyBGb3JjZSBhIHJlLXJlbmRlci5cbiAgICAgICAgZm9yY2VVcGRhdGUoe1xuICAgICAgICAgIGluc3RcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTsgLy8gU3Vic2NyaWJlIHRvIHRoZSBzdG9yZSBhbmQgcmV0dXJuIGEgY2xlYW4tdXAgZnVuY3Rpb24uXG5cblxuICAgIHJldHVybiBzdWJzY3JpYmUoaGFuZGxlU3RvcmVDaGFuZ2UpOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXG4gIH0sIFtzdWJzY3JpYmVdKTtcbiAgdXNlRGVidWdWYWx1ZSh2YWx1ZSk7XG4gIHJldHVybiB2YWx1ZTtcbn1cblxuZnVuY3Rpb24gY2hlY2tJZlNuYXBzaG90Q2hhbmdlZChpbnN0KSB7XG4gIGNvbnN0IGxhdGVzdEdldFNuYXBzaG90ID0gaW5zdC5nZXRTbmFwc2hvdDtcbiAgY29uc3QgcHJldlZhbHVlID0gaW5zdC52YWx1ZTtcblxuICB0cnkge1xuICAgIGNvbnN0IG5leHRWYWx1ZSA9IGxhdGVzdEdldFNuYXBzaG90KCk7XG4gICAgcmV0dXJuICFpcyhwcmV2VmFsdWUsIG5leHRWYWx1ZSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn1cblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvd1xuICovXG5mdW5jdGlvbiB1c2VTeW5jRXh0ZXJuYWxTdG9yZSQxKHN1YnNjcmliZSwgZ2V0U25hcHNob3QsIGdldFNlcnZlclNuYXBzaG90KSB7XG4gIC8vIE5vdGU6IFRoZSBzaGltIGRvZXMgbm90IHVzZSBnZXRTZXJ2ZXJTbmFwc2hvdCwgYmVjYXVzZSBwcmUtMTggdmVyc2lvbnMgb2ZcbiAgLy8gUmVhY3QgZG8gbm90IGV4cG9zZSBhIHdheSB0byBjaGVjayBpZiB3ZSdyZSBoeWRyYXRpbmcuIFNvIHVzZXJzIG9mIHRoZSBzaGltXG4gIC8vIHdpbGwgbmVlZCB0byB0cmFjayB0aGF0IHRoZW1zZWx2ZXMgYW5kIHJldHVybiB0aGUgY29ycmVjdCB2YWx1ZVxuICAvLyBmcm9tIGBnZXRTbmFwc2hvdGAuXG4gIHJldHVybiBnZXRTbmFwc2hvdCgpO1xufVxuXG4vKipcbiAqIElubGluZWQgaW50byB0aGUgcmVhY3Qtcm91dGVyIHJlcG8gc2luY2UgdXNlLXN5bmMtZXh0ZXJuYWwtc3RvcmUgZG9lcyBub3RcbiAqIHByb3ZpZGUgYSBVTUQtY29tcGF0aWJsZSBwYWNrYWdlLCBzbyB3ZSBuZWVkIHRoaXMgdG8gYmUgYWJsZSB0byBkaXN0cmlidXRlXG4gKiBVTUQgcmVhY3Qtcm91dGVyIGJ1bmRsZXNcbiAqL1xuY29uc3QgY2FuVXNlRE9NID0gISEodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJiB0eXBlb2Ygd2luZG93LmRvY3VtZW50ICE9PSBcInVuZGVmaW5lZFwiICYmIHR5cGVvZiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCAhPT0gXCJ1bmRlZmluZWRcIik7XG5jb25zdCBpc1NlcnZlckVudmlyb25tZW50ID0gIWNhblVzZURPTTtcbmNvbnN0IHNoaW0gPSBpc1NlcnZlckVudmlyb25tZW50ID8gdXNlU3luY0V4dGVybmFsU3RvcmUkMSA6IHVzZVN5bmNFeHRlcm5hbFN0b3JlJDI7XG5jb25zdCB1c2VTeW5jRXh0ZXJuYWxTdG9yZSA9IFwidXNlU3luY0V4dGVybmFsU3RvcmVcIiBpbiBSZWFjdCA/IChtb2R1bGUgPT4gbW9kdWxlLnVzZVN5bmNFeHRlcm5hbFN0b3JlKShSZWFjdCkgOiBzaGltO1xuXG4vLyBDb250ZXh0cyBmb3IgZGF0YSByb3V0ZXJzXG5jb25zdCBEYXRhU3RhdGljUm91dGVyQ29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KG51bGwpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIERhdGFTdGF0aWNSb3V0ZXJDb250ZXh0LmRpc3BsYXlOYW1lID0gXCJEYXRhU3RhdGljUm91dGVyQ29udGV4dFwiO1xufVxuXG5jb25zdCBEYXRhUm91dGVyQ29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KG51bGwpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIERhdGFSb3V0ZXJDb250ZXh0LmRpc3BsYXlOYW1lID0gXCJEYXRhUm91dGVyXCI7XG59XG5cbmNvbnN0IERhdGFSb3V0ZXJTdGF0ZUNvbnRleHQgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlQ29udGV4dChudWxsKTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBEYXRhUm91dGVyU3RhdGVDb250ZXh0LmRpc3BsYXlOYW1lID0gXCJEYXRhUm91dGVyU3RhdGVcIjtcbn1cblxuY29uc3QgQXdhaXRDb250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgQXdhaXRDb250ZXh0LmRpc3BsYXlOYW1lID0gXCJBd2FpdFwiO1xufVxuXG5jb25zdCBOYXZpZ2F0aW9uQ29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KG51bGwpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIE5hdmlnYXRpb25Db250ZXh0LmRpc3BsYXlOYW1lID0gXCJOYXZpZ2F0aW9uXCI7XG59XG5cbmNvbnN0IExvY2F0aW9uQ29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KG51bGwpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIExvY2F0aW9uQ29udGV4dC5kaXNwbGF5TmFtZSA9IFwiTG9jYXRpb25cIjtcbn1cblxuY29uc3QgUm91dGVDb250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQoe1xuICBvdXRsZXQ6IG51bGwsXG4gIG1hdGNoZXM6IFtdXG59KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBSb3V0ZUNvbnRleHQuZGlzcGxheU5hbWUgPSBcIlJvdXRlXCI7XG59XG5cbmNvbnN0IFJvdXRlRXJyb3JDb250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgUm91dGVFcnJvckNvbnRleHQuZGlzcGxheU5hbWUgPSBcIlJvdXRlRXJyb3JcIjtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBmdWxsIGhyZWYgZm9yIHRoZSBnaXZlbiBcInRvXCIgdmFsdWUuIFRoaXMgaXMgdXNlZnVsIGZvciBidWlsZGluZ1xuICogY3VzdG9tIGxpbmtzIHRoYXQgYXJlIGFsc28gYWNjZXNzaWJsZSBhbmQgcHJlc2VydmUgcmlnaHQtY2xpY2sgYmVoYXZpb3IuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9kb2NzL2VuL3Y2L2hvb2tzL3VzZS1ocmVmXG4gKi9cblxuZnVuY3Rpb24gdXNlSHJlZih0bywgX3RlbXApIHtcbiAgbGV0IHtcbiAgICByZWxhdGl2ZVxuICB9ID0gX3RlbXAgPT09IHZvaWQgMCA/IHt9IDogX3RlbXA7XG4gICF1c2VJblJvdXRlckNvbnRleHQoKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgLy8gVE9ETzogVGhpcyBlcnJvciBpcyBwcm9iYWJseSBiZWNhdXNlIHRoZXkgc29tZWhvdyBoYXZlIDIgdmVyc2lvbnMgb2YgdGhlXG4gIC8vIHJvdXRlciBsb2FkZWQuIFdlIGNhbiBoZWxwIHRoZW0gdW5kZXJzdGFuZCBob3cgdG8gYXZvaWQgdGhhdC5cbiAgXCJ1c2VIcmVmKCkgbWF5IGJlIHVzZWQgb25seSBpbiB0aGUgY29udGV4dCBvZiBhIDxSb3V0ZXI+IGNvbXBvbmVudC5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICBsZXQge1xuICAgIGJhc2VuYW1lLFxuICAgIG5hdmlnYXRvclxuICB9ID0gUmVhY3QudXNlQ29udGV4dChOYXZpZ2F0aW9uQ29udGV4dCk7XG4gIGxldCB7XG4gICAgaGFzaCxcbiAgICBwYXRobmFtZSxcbiAgICBzZWFyY2hcbiAgfSA9IHVzZVJlc29sdmVkUGF0aCh0bywge1xuICAgIHJlbGF0aXZlXG4gIH0pO1xuICBsZXQgam9pbmVkUGF0aG5hbWUgPSBwYXRobmFtZTsgLy8gSWYgd2UncmUgb3BlcmF0aW5nIHdpdGhpbiBhIGJhc2VuYW1lLCBwcmVwZW5kIGl0IHRvIHRoZSBwYXRobmFtZSBwcmlvclxuICAvLyB0byBjcmVhdGluZyB0aGUgaHJlZi4gIElmIHRoaXMgaXMgYSByb290IG5hdmlnYXRpb24sIHRoZW4ganVzdCB1c2UgdGhlIHJhd1xuICAvLyBiYXNlbmFtZSB3aGljaCBhbGxvd3MgdGhlIGJhc2VuYW1lIHRvIGhhdmUgZnVsbCBjb250cm9sIG92ZXIgdGhlIHByZXNlbmNlXG4gIC8vIG9mIGEgdHJhaWxpbmcgc2xhc2ggb24gcm9vdCBsaW5rc1xuXG4gIGlmIChiYXNlbmFtZSAhPT0gXCIvXCIpIHtcbiAgICBqb2luZWRQYXRobmFtZSA9IHBhdGhuYW1lID09PSBcIi9cIiA/IGJhc2VuYW1lIDogam9pblBhdGhzKFtiYXNlbmFtZSwgcGF0aG5hbWVdKTtcbiAgfVxuXG4gIHJldHVybiBuYXZpZ2F0b3IuY3JlYXRlSHJlZih7XG4gICAgcGF0aG5hbWU6IGpvaW5lZFBhdGhuYW1lLFxuICAgIHNlYXJjaCxcbiAgICBoYXNoXG4gIH0pO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhpcyBjb21wb25lbnQgaXMgYSBkZXNjZW5kYW50IG9mIGEgPFJvdXRlcj4uXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9kb2NzL2VuL3Y2L2hvb2tzL3VzZS1pbi1yb3V0ZXItY29udGV4dFxuICovXG5cbmZ1bmN0aW9uIHVzZUluUm91dGVyQ29udGV4dCgpIHtcbiAgcmV0dXJuIFJlYWN0LnVzZUNvbnRleHQoTG9jYXRpb25Db250ZXh0KSAhPSBudWxsO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSBjdXJyZW50IGxvY2F0aW9uIG9iamVjdCwgd2hpY2ggcmVwcmVzZW50cyB0aGUgY3VycmVudCBVUkwgaW4gd2ViXG4gKiBicm93c2Vycy5cbiAqXG4gKiBOb3RlOiBJZiB5b3UncmUgdXNpbmcgdGhpcyBpdCBtYXkgbWVhbiB5b3UncmUgZG9pbmcgc29tZSBvZiB5b3VyIG93blxuICogXCJyb3V0aW5nXCIgaW4geW91ciBhcHAsIGFuZCB3ZSdkIGxpa2UgdG8ga25vdyB3aGF0IHlvdXIgdXNlIGNhc2UgaXMuIFdlIG1heVxuICogYmUgYWJsZSB0byBwcm92aWRlIHNvbWV0aGluZyBoaWdoZXItbGV2ZWwgdG8gYmV0dGVyIHN1aXQgeW91ciBuZWVkcy5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2RvY3MvZW4vdjYvaG9va3MvdXNlLWxvY2F0aW9uXG4gKi9cblxuZnVuY3Rpb24gdXNlTG9jYXRpb24oKSB7XG4gICF1c2VJblJvdXRlckNvbnRleHQoKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgLy8gVE9ETzogVGhpcyBlcnJvciBpcyBwcm9iYWJseSBiZWNhdXNlIHRoZXkgc29tZWhvdyBoYXZlIDIgdmVyc2lvbnMgb2YgdGhlXG4gIC8vIHJvdXRlciBsb2FkZWQuIFdlIGNhbiBoZWxwIHRoZW0gdW5kZXJzdGFuZCBob3cgdG8gYXZvaWQgdGhhdC5cbiAgXCJ1c2VMb2NhdGlvbigpIG1heSBiZSB1c2VkIG9ubHkgaW4gdGhlIGNvbnRleHQgb2YgYSA8Um91dGVyPiBjb21wb25lbnQuXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgcmV0dXJuIFJlYWN0LnVzZUNvbnRleHQoTG9jYXRpb25Db250ZXh0KS5sb2NhdGlvbjtcbn1cbi8qKlxuICogUmV0dXJucyB0aGUgY3VycmVudCBuYXZpZ2F0aW9uIGFjdGlvbiB3aGljaCBkZXNjcmliZXMgaG93IHRoZSByb3V0ZXIgY2FtZSB0b1xuICogdGhlIGN1cnJlbnQgbG9jYXRpb24sIGVpdGhlciBieSBhIHBvcCwgcHVzaCwgb3IgcmVwbGFjZSBvbiB0aGUgaGlzdG9yeSBzdGFjay5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2RvY3MvZW4vdjYvaG9va3MvdXNlLW5hdmlnYXRpb24tdHlwZVxuICovXG5cbmZ1bmN0aW9uIHVzZU5hdmlnYXRpb25UeXBlKCkge1xuICByZXR1cm4gUmVhY3QudXNlQ29udGV4dChMb2NhdGlvbkNvbnRleHQpLm5hdmlnYXRpb25UeXBlO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIFVSTCBmb3IgdGhlIGdpdmVuIFwidG9cIiB2YWx1ZSBtYXRjaGVzIHRoZSBjdXJyZW50IFVSTC5cbiAqIFRoaXMgaXMgdXNlZnVsIGZvciBjb21wb25lbnRzIHRoYXQgbmVlZCB0byBrbm93IFwiYWN0aXZlXCIgc3RhdGUsIGUuZy5cbiAqIDxOYXZMaW5rPi5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2RvY3MvZW4vdjYvaG9va3MvdXNlLW1hdGNoXG4gKi9cblxuZnVuY3Rpb24gdXNlTWF0Y2gocGF0dGVybikge1xuICAhdXNlSW5Sb3V0ZXJDb250ZXh0KCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIC8vIFRPRE86IFRoaXMgZXJyb3IgaXMgcHJvYmFibHkgYmVjYXVzZSB0aGV5IHNvbWVob3cgaGF2ZSAyIHZlcnNpb25zIG9mIHRoZVxuICAvLyByb3V0ZXIgbG9hZGVkLiBXZSBjYW4gaGVscCB0aGVtIHVuZGVyc3RhbmQgaG93IHRvIGF2b2lkIHRoYXQuXG4gIFwidXNlTWF0Y2goKSBtYXkgYmUgdXNlZCBvbmx5IGluIHRoZSBjb250ZXh0IG9mIGEgPFJvdXRlcj4gY29tcG9uZW50LlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIGxldCB7XG4gICAgcGF0aG5hbWVcbiAgfSA9IHVzZUxvY2F0aW9uKCk7XG4gIHJldHVybiBSZWFjdC51c2VNZW1vKCgpID0+IG1hdGNoUGF0aChwYXR0ZXJuLCBwYXRobmFtZSksIFtwYXRobmFtZSwgcGF0dGVybl0pO1xufVxuLyoqXG4gKiBUaGUgaW50ZXJmYWNlIGZvciB0aGUgbmF2aWdhdGUoKSBmdW5jdGlvbiByZXR1cm5lZCBmcm9tIHVzZU5hdmlnYXRlKCkuXG4gKi9cblxuLyoqXG4gKiBSZXR1cm5zIGFuIGltcGVyYXRpdmUgbWV0aG9kIGZvciBjaGFuZ2luZyB0aGUgbG9jYXRpb24uIFVzZWQgYnkgPExpbms+cywgYnV0XG4gKiBtYXkgYWxzbyBiZSB1c2VkIGJ5IG90aGVyIGVsZW1lbnRzIHRvIGNoYW5nZSB0aGUgbG9jYXRpb24uXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9kb2NzL2VuL3Y2L2hvb2tzL3VzZS1uYXZpZ2F0ZVxuICovXG5mdW5jdGlvbiB1c2VOYXZpZ2F0ZSgpIHtcbiAgIXVzZUluUm91dGVyQ29udGV4dCgpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAvLyBUT0RPOiBUaGlzIGVycm9yIGlzIHByb2JhYmx5IGJlY2F1c2UgdGhleSBzb21laG93IGhhdmUgMiB2ZXJzaW9ucyBvZiB0aGVcbiAgLy8gcm91dGVyIGxvYWRlZC4gV2UgY2FuIGhlbHAgdGhlbSB1bmRlcnN0YW5kIGhvdyB0byBhdm9pZCB0aGF0LlxuICBcInVzZU5hdmlnYXRlKCkgbWF5IGJlIHVzZWQgb25seSBpbiB0aGUgY29udGV4dCBvZiBhIDxSb3V0ZXI+IGNvbXBvbmVudC5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICBsZXQge1xuICAgIGJhc2VuYW1lLFxuICAgIG5hdmlnYXRvclxuICB9ID0gUmVhY3QudXNlQ29udGV4dChOYXZpZ2F0aW9uQ29udGV4dCk7XG4gIGxldCB7XG4gICAgbWF0Y2hlc1xuICB9ID0gUmVhY3QudXNlQ29udGV4dChSb3V0ZUNvbnRleHQpO1xuICBsZXQge1xuICAgIHBhdGhuYW1lOiBsb2NhdGlvblBhdGhuYW1lXG4gIH0gPSB1c2VMb2NhdGlvbigpO1xuICBsZXQgcm91dGVQYXRobmFtZXNKc29uID0gSlNPTi5zdHJpbmdpZnkoVU5TQUZFX2dldFBhdGhDb250cmlidXRpbmdNYXRjaGVzKG1hdGNoZXMpLm1hcChtYXRjaCA9PiBtYXRjaC5wYXRobmFtZUJhc2UpKTtcbiAgbGV0IGFjdGl2ZVJlZiA9IFJlYWN0LnVzZVJlZihmYWxzZSk7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgYWN0aXZlUmVmLmN1cnJlbnQgPSB0cnVlO1xuICB9KTtcbiAgbGV0IG5hdmlnYXRlID0gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKHRvLCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cblxuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoYWN0aXZlUmVmLmN1cnJlbnQsIFwiWW91IHNob3VsZCBjYWxsIG5hdmlnYXRlKCkgaW4gYSBSZWFjdC51c2VFZmZlY3QoKSwgbm90IHdoZW4gXCIgKyBcInlvdXIgY29tcG9uZW50IGlzIGZpcnN0IHJlbmRlcmVkLlwiKSA6IHZvaWQgMDtcbiAgICBpZiAoIWFjdGl2ZVJlZi5jdXJyZW50KSByZXR1cm47XG5cbiAgICBpZiAodHlwZW9mIHRvID09PSBcIm51bWJlclwiKSB7XG4gICAgICBuYXZpZ2F0b3IuZ28odG8pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGxldCBwYXRoID0gcmVzb2x2ZVRvKHRvLCBKU09OLnBhcnNlKHJvdXRlUGF0aG5hbWVzSnNvbiksIGxvY2F0aW9uUGF0aG5hbWUsIG9wdGlvbnMucmVsYXRpdmUgPT09IFwicGF0aFwiKTsgLy8gSWYgd2UncmUgb3BlcmF0aW5nIHdpdGhpbiBhIGJhc2VuYW1lLCBwcmVwZW5kIGl0IHRvIHRoZSBwYXRobmFtZSBwcmlvclxuICAgIC8vIHRvIGhhbmRpbmcgb2ZmIHRvIGhpc3RvcnkuICBJZiB0aGlzIGlzIGEgcm9vdCBuYXZpZ2F0aW9uLCB0aGVuIHdlXG4gICAgLy8gbmF2aWdhdGUgdG8gdGhlIHJhdyBiYXNlbmFtZSB3aGljaCBhbGxvd3MgdGhlIGJhc2VuYW1lIHRvIGhhdmUgZnVsbFxuICAgIC8vIGNvbnRyb2wgb3ZlciB0aGUgcHJlc2VuY2Ugb2YgYSB0cmFpbGluZyBzbGFzaCBvbiByb290IGxpbmtzXG5cbiAgICBpZiAoYmFzZW5hbWUgIT09IFwiL1wiKSB7XG4gICAgICBwYXRoLnBhdGhuYW1lID0gcGF0aC5wYXRobmFtZSA9PT0gXCIvXCIgPyBiYXNlbmFtZSA6IGpvaW5QYXRocyhbYmFzZW5hbWUsIHBhdGgucGF0aG5hbWVdKTtcbiAgICB9XG5cbiAgICAoISFvcHRpb25zLnJlcGxhY2UgPyBuYXZpZ2F0b3IucmVwbGFjZSA6IG5hdmlnYXRvci5wdXNoKShwYXRoLCBvcHRpb25zLnN0YXRlLCBvcHRpb25zKTtcbiAgfSwgW2Jhc2VuYW1lLCBuYXZpZ2F0b3IsIHJvdXRlUGF0aG5hbWVzSnNvbiwgbG9jYXRpb25QYXRobmFtZV0pO1xuICByZXR1cm4gbmF2aWdhdGU7XG59XG5jb25zdCBPdXRsZXRDb250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7XG4vKipcbiAqIFJldHVybnMgdGhlIGNvbnRleHQgKGlmIHByb3ZpZGVkKSBmb3IgdGhlIGNoaWxkIHJvdXRlIGF0IHRoaXMgbGV2ZWwgb2YgdGhlIHJvdXRlXG4gKiBoaWVyYXJjaHkuXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2RvY3MvZW4vdjYvaG9va3MvdXNlLW91dGxldC1jb250ZXh0XG4gKi9cblxuZnVuY3Rpb24gdXNlT3V0bGV0Q29udGV4dCgpIHtcbiAgcmV0dXJuIFJlYWN0LnVzZUNvbnRleHQoT3V0bGV0Q29udGV4dCk7XG59XG4vKipcbiAqIFJldHVybnMgdGhlIGVsZW1lbnQgZm9yIHRoZSBjaGlsZCByb3V0ZSBhdCB0aGlzIGxldmVsIG9mIHRoZSByb3V0ZVxuICogaGllcmFyY2h5LiBVc2VkIGludGVybmFsbHkgYnkgPE91dGxldD4gdG8gcmVuZGVyIGNoaWxkIHJvdXRlcy5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2RvY3MvZW4vdjYvaG9va3MvdXNlLW91dGxldFxuICovXG5cbmZ1bmN0aW9uIHVzZU91dGxldChjb250ZXh0KSB7XG4gIGxldCBvdXRsZXQgPSBSZWFjdC51c2VDb250ZXh0KFJvdXRlQ29udGV4dCkub3V0bGV0O1xuXG4gIGlmIChvdXRsZXQpIHtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoT3V0bGV0Q29udGV4dC5Qcm92aWRlciwge1xuICAgICAgdmFsdWU6IGNvbnRleHRcbiAgICB9LCBvdXRsZXQpO1xuICB9XG5cbiAgcmV0dXJuIG91dGxldDtcbn1cbi8qKlxuICogUmV0dXJucyBhbiBvYmplY3Qgb2Yga2V5L3ZhbHVlIHBhaXJzIG9mIHRoZSBkeW5hbWljIHBhcmFtcyBmcm9tIHRoZSBjdXJyZW50XG4gKiBVUkwgdGhhdCB3ZXJlIG1hdGNoZWQgYnkgdGhlIHJvdXRlIHBhdGguXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9kb2NzL2VuL3Y2L2hvb2tzL3VzZS1wYXJhbXNcbiAqL1xuXG5mdW5jdGlvbiB1c2VQYXJhbXMoKSB7XG4gIGxldCB7XG4gICAgbWF0Y2hlc1xuICB9ID0gUmVhY3QudXNlQ29udGV4dChSb3V0ZUNvbnRleHQpO1xuICBsZXQgcm91dGVNYXRjaCA9IG1hdGNoZXNbbWF0Y2hlcy5sZW5ndGggLSAxXTtcbiAgcmV0dXJuIHJvdXRlTWF0Y2ggPyByb3V0ZU1hdGNoLnBhcmFtcyA6IHt9O1xufVxuLyoqXG4gKiBSZXNvbHZlcyB0aGUgcGF0aG5hbWUgb2YgdGhlIGdpdmVuIGB0b2AgdmFsdWUgYWdhaW5zdCB0aGUgY3VycmVudCBsb2NhdGlvbi5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2RvY3MvZW4vdjYvaG9va3MvdXNlLXJlc29sdmVkLXBhdGhcbiAqL1xuXG5mdW5jdGlvbiB1c2VSZXNvbHZlZFBhdGgodG8sIF90ZW1wMikge1xuICBsZXQge1xuICAgIHJlbGF0aXZlXG4gIH0gPSBfdGVtcDIgPT09IHZvaWQgMCA/IHt9IDogX3RlbXAyO1xuICBsZXQge1xuICAgIG1hdGNoZXNcbiAgfSA9IFJlYWN0LnVzZUNvbnRleHQoUm91dGVDb250ZXh0KTtcbiAgbGV0IHtcbiAgICBwYXRobmFtZTogbG9jYXRpb25QYXRobmFtZVxuICB9ID0gdXNlTG9jYXRpb24oKTtcbiAgbGV0IHJvdXRlUGF0aG5hbWVzSnNvbiA9IEpTT04uc3RyaW5naWZ5KFVOU0FGRV9nZXRQYXRoQ29udHJpYnV0aW5nTWF0Y2hlcyhtYXRjaGVzKS5tYXAobWF0Y2ggPT4gbWF0Y2gucGF0aG5hbWVCYXNlKSk7XG4gIHJldHVybiBSZWFjdC51c2VNZW1vKCgpID0+IHJlc29sdmVUbyh0bywgSlNPTi5wYXJzZShyb3V0ZVBhdGhuYW1lc0pzb24pLCBsb2NhdGlvblBhdGhuYW1lLCByZWxhdGl2ZSA9PT0gXCJwYXRoXCIpLCBbdG8sIHJvdXRlUGF0aG5hbWVzSnNvbiwgbG9jYXRpb25QYXRobmFtZSwgcmVsYXRpdmVdKTtcbn1cbi8qKlxuICogUmV0dXJucyB0aGUgZWxlbWVudCBvZiB0aGUgcm91dGUgdGhhdCBtYXRjaGVkIHRoZSBjdXJyZW50IGxvY2F0aW9uLCBwcmVwYXJlZFxuICogd2l0aCB0aGUgY29ycmVjdCBjb250ZXh0IHRvIHJlbmRlciB0aGUgcmVtYWluZGVyIG9mIHRoZSByb3V0ZSB0cmVlLiBSb3V0ZVxuICogZWxlbWVudHMgaW4gdGhlIHRyZWUgbXVzdCByZW5kZXIgYW4gPE91dGxldD4gdG8gcmVuZGVyIHRoZWlyIGNoaWxkIHJvdXRlJ3NcbiAqIGVsZW1lbnQuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9kb2NzL2VuL3Y2L2hvb2tzL3VzZS1yb3V0ZXNcbiAqL1xuXG5mdW5jdGlvbiB1c2VSb3V0ZXMocm91dGVzLCBsb2NhdGlvbkFyZykge1xuICAhdXNlSW5Sb3V0ZXJDb250ZXh0KCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIC8vIFRPRE86IFRoaXMgZXJyb3IgaXMgcHJvYmFibHkgYmVjYXVzZSB0aGV5IHNvbWVob3cgaGF2ZSAyIHZlcnNpb25zIG9mIHRoZVxuICAvLyByb3V0ZXIgbG9hZGVkLiBXZSBjYW4gaGVscCB0aGVtIHVuZGVyc3RhbmQgaG93IHRvIGF2b2lkIHRoYXQuXG4gIFwidXNlUm91dGVzKCkgbWF5IGJlIHVzZWQgb25seSBpbiB0aGUgY29udGV4dCBvZiBhIDxSb3V0ZXI+IGNvbXBvbmVudC5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICBsZXQgZGF0YVJvdXRlclN0YXRlQ29udGV4dCA9IFJlYWN0LnVzZUNvbnRleHQoRGF0YVJvdXRlclN0YXRlQ29udGV4dCk7XG4gIGxldCB7XG4gICAgbWF0Y2hlczogcGFyZW50TWF0Y2hlc1xuICB9ID0gUmVhY3QudXNlQ29udGV4dChSb3V0ZUNvbnRleHQpO1xuICBsZXQgcm91dGVNYXRjaCA9IHBhcmVudE1hdGNoZXNbcGFyZW50TWF0Y2hlcy5sZW5ndGggLSAxXTtcbiAgbGV0IHBhcmVudFBhcmFtcyA9IHJvdXRlTWF0Y2ggPyByb3V0ZU1hdGNoLnBhcmFtcyA6IHt9O1xuICBsZXQgcGFyZW50UGF0aG5hbWUgPSByb3V0ZU1hdGNoID8gcm91dGVNYXRjaC5wYXRobmFtZSA6IFwiL1wiO1xuICBsZXQgcGFyZW50UGF0aG5hbWVCYXNlID0gcm91dGVNYXRjaCA/IHJvdXRlTWF0Y2gucGF0aG5hbWVCYXNlIDogXCIvXCI7XG4gIGxldCBwYXJlbnRSb3V0ZSA9IHJvdXRlTWF0Y2ggJiYgcm91dGVNYXRjaC5yb3V0ZTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgLy8gWW91IHdvbid0IGdldCBhIHdhcm5pbmcgYWJvdXQgMiBkaWZmZXJlbnQgPFJvdXRlcz4gdW5kZXIgYSA8Um91dGU+XG4gICAgLy8gd2l0aG91dCBhIHRyYWlsaW5nICosIGJ1dCB0aGlzIGlzIGEgYmVzdC1lZmZvcnQgd2FybmluZyBhbnl3YXkgc2luY2Ugd2VcbiAgICAvLyBjYW5ub3QgZXZlbiBnaXZlIHRoZSB3YXJuaW5nIHVubGVzcyB0aGV5IGxhbmQgYXQgdGhlIHBhcmVudCByb3V0ZS5cbiAgICAvL1xuICAgIC8vIEV4YW1wbGU6XG4gICAgLy9cbiAgICAvLyA8Um91dGVzPlxuICAgIC8vICAgey8qIFRoaXMgcm91dGUgcGF0aCBNVVNUIGVuZCB3aXRoIC8qIGJlY2F1c2Ugb3RoZXJ3aXNlXG4gICAgLy8gICAgICAgaXQgd2lsbCBuZXZlciBtYXRjaCAvYmxvZy9wb3N0LzEyMyAqL31cbiAgICAvLyAgIDxSb3V0ZSBwYXRoPVwiYmxvZ1wiIGVsZW1lbnQ9ezxCbG9nIC8+fSAvPlxuICAgIC8vICAgPFJvdXRlIHBhdGg9XCJibG9nL2ZlZWRcIiBlbGVtZW50PXs8QmxvZ0ZlZWQgLz59IC8+XG4gICAgLy8gPC9Sb3V0ZXM+XG4gICAgLy9cbiAgICAvLyBmdW5jdGlvbiBCbG9nKCkge1xuICAgIC8vICAgcmV0dXJuIChcbiAgICAvLyAgICAgPFJvdXRlcz5cbiAgICAvLyAgICAgICA8Um91dGUgcGF0aD1cInBvc3QvOmlkXCIgZWxlbWVudD17PFBvc3QgLz59IC8+XG4gICAgLy8gICAgIDwvUm91dGVzPlxuICAgIC8vICAgKTtcbiAgICAvLyB9XG4gICAgbGV0IHBhcmVudFBhdGggPSBwYXJlbnRSb3V0ZSAmJiBwYXJlbnRSb3V0ZS5wYXRoIHx8IFwiXCI7XG4gICAgd2FybmluZ09uY2UocGFyZW50UGF0aG5hbWUsICFwYXJlbnRSb3V0ZSB8fCBwYXJlbnRQYXRoLmVuZHNXaXRoKFwiKlwiKSwgXCJZb3UgcmVuZGVyZWQgZGVzY2VuZGFudCA8Um91dGVzPiAob3IgY2FsbGVkIGB1c2VSb3V0ZXMoKWApIGF0IFwiICsgKFwiXFxcIlwiICsgcGFyZW50UGF0aG5hbWUgKyBcIlxcXCIgKHVuZGVyIDxSb3V0ZSBwYXRoPVxcXCJcIiArIHBhcmVudFBhdGggKyBcIlxcXCI+KSBidXQgdGhlIFwiKSArIFwicGFyZW50IHJvdXRlIHBhdGggaGFzIG5vIHRyYWlsaW5nIFxcXCIqXFxcIi4gVGhpcyBtZWFucyBpZiB5b3UgbmF2aWdhdGUgXCIgKyBcImRlZXBlciwgdGhlIHBhcmVudCB3b24ndCBtYXRjaCBhbnltb3JlIGFuZCB0aGVyZWZvcmUgdGhlIGNoaWxkIFwiICsgXCJyb3V0ZXMgd2lsbCBuZXZlciByZW5kZXIuXFxuXFxuXCIgKyAoXCJQbGVhc2UgY2hhbmdlIHRoZSBwYXJlbnQgPFJvdXRlIHBhdGg9XFxcIlwiICsgcGFyZW50UGF0aCArIFwiXFxcIj4gdG8gPFJvdXRlIFwiKSArIChcInBhdGg9XFxcIlwiICsgKHBhcmVudFBhdGggPT09IFwiL1wiID8gXCIqXCIgOiBwYXJlbnRQYXRoICsgXCIvKlwiKSArIFwiXFxcIj4uXCIpKTtcbiAgfVxuXG4gIGxldCBsb2NhdGlvbkZyb21Db250ZXh0ID0gdXNlTG9jYXRpb24oKTtcbiAgbGV0IGxvY2F0aW9uO1xuXG4gIGlmIChsb2NhdGlvbkFyZykge1xuICAgIHZhciBfcGFyc2VkTG9jYXRpb25BcmckcGE7XG5cbiAgICBsZXQgcGFyc2VkTG9jYXRpb25BcmcgPSB0eXBlb2YgbG9jYXRpb25BcmcgPT09IFwic3RyaW5nXCIgPyBwYXJzZVBhdGgobG9jYXRpb25BcmcpIDogbG9jYXRpb25Bcmc7XG4gICAgIShwYXJlbnRQYXRobmFtZUJhc2UgPT09IFwiL1wiIHx8ICgoX3BhcnNlZExvY2F0aW9uQXJnJHBhID0gcGFyc2VkTG9jYXRpb25BcmcucGF0aG5hbWUpID09IG51bGwgPyB2b2lkIDAgOiBfcGFyc2VkTG9jYXRpb25BcmckcGEuc3RhcnRzV2l0aChwYXJlbnRQYXRobmFtZUJhc2UpKSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiV2hlbiBvdmVycmlkaW5nIHRoZSBsb2NhdGlvbiB1c2luZyBgPFJvdXRlcyBsb2NhdGlvbj5gIG9yIGB1c2VSb3V0ZXMocm91dGVzLCBsb2NhdGlvbilgLCBcIiArIFwidGhlIGxvY2F0aW9uIHBhdGhuYW1lIG11c3QgYmVnaW4gd2l0aCB0aGUgcG9ydGlvbiBvZiB0aGUgVVJMIHBhdGhuYW1lIHRoYXQgd2FzIFwiICsgKFwibWF0Y2hlZCBieSBhbGwgcGFyZW50IHJvdXRlcy4gVGhlIGN1cnJlbnQgcGF0aG5hbWUgYmFzZSBpcyBcXFwiXCIgKyBwYXJlbnRQYXRobmFtZUJhc2UgKyBcIlxcXCIgXCIpICsgKFwiYnV0IHBhdGhuYW1lIFxcXCJcIiArIHBhcnNlZExvY2F0aW9uQXJnLnBhdGhuYW1lICsgXCJcXFwiIHdhcyBnaXZlbiBpbiB0aGUgYGxvY2F0aW9uYCBwcm9wLlwiKSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIGxvY2F0aW9uID0gcGFyc2VkTG9jYXRpb25Bcmc7XG4gIH0gZWxzZSB7XG4gICAgbG9jYXRpb24gPSBsb2NhdGlvbkZyb21Db250ZXh0O1xuICB9XG5cbiAgbGV0IHBhdGhuYW1lID0gbG9jYXRpb24ucGF0aG5hbWUgfHwgXCIvXCI7XG4gIGxldCByZW1haW5pbmdQYXRobmFtZSA9IHBhcmVudFBhdGhuYW1lQmFzZSA9PT0gXCIvXCIgPyBwYXRobmFtZSA6IHBhdGhuYW1lLnNsaWNlKHBhcmVudFBhdGhuYW1lQmFzZS5sZW5ndGgpIHx8IFwiL1wiO1xuICBsZXQgbWF0Y2hlcyA9IG1hdGNoUm91dGVzKHJvdXRlcywge1xuICAgIHBhdGhuYW1lOiByZW1haW5pbmdQYXRobmFtZVxuICB9KTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhwYXJlbnRSb3V0ZSB8fCBtYXRjaGVzICE9IG51bGwsIFwiTm8gcm91dGVzIG1hdGNoZWQgbG9jYXRpb24gXFxcIlwiICsgbG9jYXRpb24ucGF0aG5hbWUgKyBsb2NhdGlvbi5zZWFyY2ggKyBsb2NhdGlvbi5oYXNoICsgXCJcXFwiIFwiKSA6IHZvaWQgMDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKG1hdGNoZXMgPT0gbnVsbCB8fCBtYXRjaGVzW21hdGNoZXMubGVuZ3RoIC0gMV0ucm91dGUuZWxlbWVudCAhPT0gdW5kZWZpbmVkLCBcIk1hdGNoZWQgbGVhZiByb3V0ZSBhdCBsb2NhdGlvbiBcXFwiXCIgKyBsb2NhdGlvbi5wYXRobmFtZSArIGxvY2F0aW9uLnNlYXJjaCArIGxvY2F0aW9uLmhhc2ggKyBcIlxcXCIgZG9lcyBub3QgaGF2ZSBhbiBlbGVtZW50LiBcIiArIFwiVGhpcyBtZWFucyBpdCB3aWxsIHJlbmRlciBhbiA8T3V0bGV0IC8+IHdpdGggYSBudWxsIHZhbHVlIGJ5IGRlZmF1bHQgcmVzdWx0aW5nIGluIGFuIFxcXCJlbXB0eVxcXCIgcGFnZS5cIikgOiB2b2lkIDA7XG4gIH1cblxuICBsZXQgcmVuZGVyZWRNYXRjaGVzID0gX3JlbmRlck1hdGNoZXMobWF0Y2hlcyAmJiBtYXRjaGVzLm1hcChtYXRjaCA9PiBPYmplY3QuYXNzaWduKHt9LCBtYXRjaCwge1xuICAgIHBhcmFtczogT2JqZWN0LmFzc2lnbih7fSwgcGFyZW50UGFyYW1zLCBtYXRjaC5wYXJhbXMpLFxuICAgIHBhdGhuYW1lOiBqb2luUGF0aHMoW3BhcmVudFBhdGhuYW1lQmFzZSwgbWF0Y2gucGF0aG5hbWVdKSxcbiAgICBwYXRobmFtZUJhc2U6IG1hdGNoLnBhdGhuYW1lQmFzZSA9PT0gXCIvXCIgPyBwYXJlbnRQYXRobmFtZUJhc2UgOiBqb2luUGF0aHMoW3BhcmVudFBhdGhuYW1lQmFzZSwgbWF0Y2gucGF0aG5hbWVCYXNlXSlcbiAgfSkpLCBwYXJlbnRNYXRjaGVzLCBkYXRhUm91dGVyU3RhdGVDb250ZXh0IHx8IHVuZGVmaW5lZCk7IC8vIFdoZW4gYSB1c2VyIHBhc3NlcyBpbiBhIGBsb2NhdGlvbkFyZ2AsIHRoZSBhc3NvY2lhdGVkIHJvdXRlcyBuZWVkIHRvXG4gIC8vIGJlIHdyYXBwZWQgaW4gYSBuZXcgYExvY2F0aW9uQ29udGV4dC5Qcm92aWRlcmAgaW4gb3JkZXIgZm9yIGB1c2VMb2NhdGlvbmBcbiAgLy8gdG8gdXNlIHRoZSBzY29wZWQgbG9jYXRpb24gaW5zdGVhZCBvZiB0aGUgZ2xvYmFsIGxvY2F0aW9uLlxuXG5cbiAgaWYgKGxvY2F0aW9uQXJnICYmIHJlbmRlcmVkTWF0Y2hlcykge1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChMb2NhdGlvbkNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgIHZhbHVlOiB7XG4gICAgICAgIGxvY2F0aW9uOiBfZXh0ZW5kcyh7XG4gICAgICAgICAgcGF0aG5hbWU6IFwiL1wiLFxuICAgICAgICAgIHNlYXJjaDogXCJcIixcbiAgICAgICAgICBoYXNoOiBcIlwiLFxuICAgICAgICAgIHN0YXRlOiBudWxsLFxuICAgICAgICAgIGtleTogXCJkZWZhdWx0XCJcbiAgICAgICAgfSwgbG9jYXRpb24pLFxuICAgICAgICBuYXZpZ2F0aW9uVHlwZTogQWN0aW9uLlBvcFxuICAgICAgfVxuICAgIH0sIHJlbmRlcmVkTWF0Y2hlcyk7XG4gIH1cblxuICByZXR1cm4gcmVuZGVyZWRNYXRjaGVzO1xufVxuXG5mdW5jdGlvbiBEZWZhdWx0RXJyb3JFbGVtZW50KCkge1xuICBsZXQgZXJyb3IgPSB1c2VSb3V0ZUVycm9yKCk7XG4gIGxldCBtZXNzYWdlID0gaXNSb3V0ZUVycm9yUmVzcG9uc2UoZXJyb3IpID8gZXJyb3Iuc3RhdHVzICsgXCIgXCIgKyBlcnJvci5zdGF0dXNUZXh0IDogZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiBKU09OLnN0cmluZ2lmeShlcnJvcik7XG4gIGxldCBzdGFjayA9IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5zdGFjayA6IG51bGw7XG4gIGxldCBsaWdodGdyZXkgPSBcInJnYmEoMjAwLDIwMCwyMDAsIDAuNSlcIjtcbiAgbGV0IHByZVN0eWxlcyA9IHtcbiAgICBwYWRkaW5nOiBcIjAuNXJlbVwiLFxuICAgIGJhY2tncm91bmRDb2xvcjogbGlnaHRncmV5XG4gIH07XG4gIGxldCBjb2RlU3R5bGVzID0ge1xuICAgIHBhZGRpbmc6IFwiMnB4IDRweFwiLFxuICAgIGJhY2tncm91bmRDb2xvcjogbGlnaHRncmV5XG4gIH07XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgbnVsbCwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJoMlwiLCBudWxsLCBcIlVuaGFuZGxlZCBUaHJvd24gRXJyb3IhXCIpLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImgzXCIsIHtcbiAgICBzdHlsZToge1xuICAgICAgZm9udFN0eWxlOiBcIml0YWxpY1wiXG4gICAgfVxuICB9LCBtZXNzYWdlKSwgc3RhY2sgPyAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInByZVwiLCB7XG4gICAgc3R5bGU6IHByZVN0eWxlc1xuICB9LCBzdGFjaykgOiBudWxsLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInBcIiwgbnVsbCwgXCJcXHVEODNEXFx1RENCRiBIZXkgZGV2ZWxvcGVyIFxcdUQ4M0RcXHVEQzRCXCIpLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInBcIiwgbnVsbCwgXCJZb3UgY2FuIHByb3ZpZGUgYSB3YXkgYmV0dGVyIFVYIHRoYW4gdGhpcyB3aGVuIHlvdXIgYXBwIHRocm93cyBlcnJvcnMgYnkgcHJvdmlkaW5nIHlvdXIgb3duXFx4QTBcIiwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJjb2RlXCIsIHtcbiAgICBzdHlsZTogY29kZVN0eWxlc1xuICB9LCBcImVycm9yRWxlbWVudFwiKSwgXCIgcHJvcHMgb25cXHhBMFwiLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImNvZGVcIiwge1xuICAgIHN0eWxlOiBjb2RlU3R5bGVzXG4gIH0sIFwiPFJvdXRlPlwiKSkpO1xufVxuXG5jbGFzcyBSZW5kZXJFcnJvckJvdW5kYXJ5IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGxvY2F0aW9uOiBwcm9wcy5sb2NhdGlvbixcbiAgICAgIGVycm9yOiBwcm9wcy5lcnJvclxuICAgIH07XG4gIH1cblxuICBzdGF0aWMgZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yKGVycm9yKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGVycm9yOiBlcnJvclxuICAgIH07XG4gIH1cblxuICBzdGF0aWMgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKHByb3BzLCBzdGF0ZSkge1xuICAgIC8vIFdoZW4gd2UgZ2V0IGludG8gYW4gZXJyb3Igc3RhdGUsIHRoZSB1c2VyIHdpbGwgbGlrZWx5IGNsaWNrIFwiYmFja1wiIHRvIHRoZVxuICAgIC8vIHByZXZpb3VzIHBhZ2UgdGhhdCBkaWRuJ3QgaGF2ZSBhbiBlcnJvci4gQmVjYXVzZSB0aGlzIHdyYXBzIHRoZSBlbnRpcmVcbiAgICAvLyBhcHBsaWNhdGlvbiwgdGhhdCB3aWxsIGhhdmUgbm8gZWZmZWN0LS10aGUgZXJyb3IgcGFnZSBjb250aW51ZXMgdG8gZGlzcGxheS5cbiAgICAvLyBUaGlzIGdpdmVzIHVzIGEgbWVjaGFuaXNtIHRvIHJlY292ZXIgZnJvbSB0aGUgZXJyb3Igd2hlbiB0aGUgbG9jYXRpb24gY2hhbmdlcy5cbiAgICAvL1xuICAgIC8vIFdoZXRoZXIgd2UncmUgaW4gYW4gZXJyb3Igc3RhdGUgb3Igbm90LCB3ZSB1cGRhdGUgdGhlIGxvY2F0aW9uIGluIHN0YXRlXG4gICAgLy8gc28gdGhhdCB3aGVuIHdlIGFyZSBpbiBhbiBlcnJvciBzdGF0ZSwgaXQgZ2V0cyByZXNldCB3aGVuIGEgbmV3IGxvY2F0aW9uXG4gICAgLy8gY29tZXMgaW4gYW5kIHRoZSB1c2VyIHJlY292ZXJzIGZyb20gdGhlIGVycm9yLlxuICAgIGlmIChzdGF0ZS5sb2NhdGlvbiAhPT0gcHJvcHMubG9jYXRpb24pIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGVycm9yOiBwcm9wcy5lcnJvcixcbiAgICAgICAgbG9jYXRpb246IHByb3BzLmxvY2F0aW9uXG4gICAgICB9O1xuICAgIH0gLy8gSWYgd2UncmUgbm90IGNoYW5naW5nIGxvY2F0aW9ucywgcHJlc2VydmUgdGhlIGxvY2F0aW9uIGJ1dCBzdGlsbCBzdXJmYWNlXG4gICAgLy8gYW55IG5ldyBlcnJvcnMgdGhhdCBtYXkgY29tZSB0aHJvdWdoLiBXZSByZXRhaW4gdGhlIGV4aXN0aW5nIGVycm9yLCB3ZSBkb1xuICAgIC8vIHRoaXMgYmVjYXVzZSB0aGUgZXJyb3IgcHJvdmlkZWQgZnJvbSB0aGUgYXBwIHN0YXRlIG1heSBiZSBjbGVhcmVkIHdpdGhvdXRcbiAgICAvLyB0aGUgbG9jYXRpb24gY2hhbmdpbmcuXG5cblxuICAgIHJldHVybiB7XG4gICAgICBlcnJvcjogcHJvcHMuZXJyb3IgfHwgc3RhdGUuZXJyb3IsXG4gICAgICBsb2NhdGlvbjogc3RhdGUubG9jYXRpb25cbiAgICB9O1xuICB9XG5cbiAgY29tcG9uZW50RGlkQ2F0Y2goZXJyb3IsIGVycm9ySW5mbykge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJSZWFjdCBSb3V0ZXIgY2F1Z2h0IHRoZSBmb2xsb3dpbmcgZXJyb3IgZHVyaW5nIHJlbmRlclwiLCBlcnJvciwgZXJyb3JJbmZvKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gdGhpcy5zdGF0ZS5lcnJvciA/IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlRXJyb3JDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICB2YWx1ZTogdGhpcy5zdGF0ZS5lcnJvcixcbiAgICAgIGNoaWxkcmVuOiB0aGlzLnByb3BzLmNvbXBvbmVudFxuICAgIH0pIDogdGhpcy5wcm9wcy5jaGlsZHJlbjtcbiAgfVxuXG59XG5cbmZ1bmN0aW9uIFJlbmRlcmVkUm91dGUoX3JlZikge1xuICBsZXQge1xuICAgIHJvdXRlQ29udGV4dCxcbiAgICBtYXRjaCxcbiAgICBjaGlsZHJlblxuICB9ID0gX3JlZjtcbiAgbGV0IGRhdGFTdGF0aWNSb3V0ZXJDb250ZXh0ID0gUmVhY3QudXNlQ29udGV4dChEYXRhU3RhdGljUm91dGVyQ29udGV4dCk7IC8vIFRyYWNrIGhvdyBkZWVwIHdlIGdvdCBpbiBvdXIgcmVuZGVyIHBhc3MgdG8gZW11bGF0ZSBTU1IgY29tcG9uZW50RGlkQ2F0Y2hcbiAgLy8gaW4gYSBEYXRhU3RhdGljUm91dGVyXG5cbiAgaWYgKGRhdGFTdGF0aWNSb3V0ZXJDb250ZXh0ICYmIG1hdGNoLnJvdXRlLmVycm9yRWxlbWVudCkge1xuICAgIGRhdGFTdGF0aWNSb3V0ZXJDb250ZXh0Ll9kZWVwZXN0UmVuZGVyZWRCb3VuZGFyeUlkID0gbWF0Y2gucm91dGUuaWQ7XG4gIH1cblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IHJvdXRlQ29udGV4dFxuICB9LCBjaGlsZHJlbik7XG59XG5cbmZ1bmN0aW9uIF9yZW5kZXJNYXRjaGVzKG1hdGNoZXMsIHBhcmVudE1hdGNoZXMsIGRhdGFSb3V0ZXJTdGF0ZSkge1xuICBpZiAocGFyZW50TWF0Y2hlcyA9PT0gdm9pZCAwKSB7XG4gICAgcGFyZW50TWF0Y2hlcyA9IFtdO1xuICB9XG5cbiAgaWYgKG1hdGNoZXMgPT0gbnVsbCkge1xuICAgIGlmIChkYXRhUm91dGVyU3RhdGUgIT0gbnVsbCAmJiBkYXRhUm91dGVyU3RhdGUuZXJyb3JzKSB7XG4gICAgICAvLyBEb24ndCBiYWlsIGlmIHdlIGhhdmUgZGF0YSByb3V0ZXIgZXJyb3JzIHNvIHdlIGNhbiByZW5kZXIgdGhlbSBpbiB0aGVcbiAgICAgIC8vIGJvdW5kYXJ5LiAgVXNlIHRoZSBwcmUtbWF0Y2hlZCAob3Igc2hpbW1lZCkgbWF0Y2hlc1xuICAgICAgbWF0Y2hlcyA9IGRhdGFSb3V0ZXJTdGF0ZS5tYXRjaGVzO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cblxuICBsZXQgcmVuZGVyZWRNYXRjaGVzID0gbWF0Y2hlczsgLy8gSWYgd2UgaGF2ZSBkYXRhIGVycm9ycywgdHJpbSBtYXRjaGVzIHRvIHRoZSBoaWdoZXN0IGVycm9yIGJvdW5kYXJ5XG5cbiAgbGV0IGVycm9ycyA9IGRhdGFSb3V0ZXJTdGF0ZSA9PSBudWxsID8gdm9pZCAwIDogZGF0YVJvdXRlclN0YXRlLmVycm9ycztcblxuICBpZiAoZXJyb3JzICE9IG51bGwpIHtcbiAgICBsZXQgZXJyb3JJbmRleCA9IHJlbmRlcmVkTWF0Y2hlcy5maW5kSW5kZXgobSA9PiBtLnJvdXRlLmlkICYmIChlcnJvcnMgPT0gbnVsbCA/IHZvaWQgMCA6IGVycm9yc1ttLnJvdXRlLmlkXSkpO1xuICAgICEoZXJyb3JJbmRleCA+PSAwKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJDb3VsZCBub3QgZmluZCBhIG1hdGNoaW5nIHJvdXRlIGZvciB0aGUgY3VycmVudCBlcnJvcnM6IFwiICsgZXJyb3JzKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgcmVuZGVyZWRNYXRjaGVzID0gcmVuZGVyZWRNYXRjaGVzLnNsaWNlKDAsIE1hdGgubWluKHJlbmRlcmVkTWF0Y2hlcy5sZW5ndGgsIGVycm9ySW5kZXggKyAxKSk7XG4gIH1cblxuICByZXR1cm4gcmVuZGVyZWRNYXRjaGVzLnJlZHVjZVJpZ2h0KChvdXRsZXQsIG1hdGNoLCBpbmRleCkgPT4ge1xuICAgIGxldCBlcnJvciA9IG1hdGNoLnJvdXRlLmlkID8gZXJyb3JzID09IG51bGwgPyB2b2lkIDAgOiBlcnJvcnNbbWF0Y2gucm91dGUuaWRdIDogbnVsbDsgLy8gT25seSBkYXRhIHJvdXRlcnMgaGFuZGxlIGVycm9yc1xuXG4gICAgbGV0IGVycm9yRWxlbWVudCA9IGRhdGFSb3V0ZXJTdGF0ZSA/IG1hdGNoLnJvdXRlLmVycm9yRWxlbWVudCB8fCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChEZWZhdWx0RXJyb3JFbGVtZW50LCBudWxsKSA6IG51bGw7XG5cbiAgICBsZXQgZ2V0Q2hpbGRyZW4gPSAoKSA9PiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSZW5kZXJlZFJvdXRlLCB7XG4gICAgICBtYXRjaDogbWF0Y2gsXG4gICAgICByb3V0ZUNvbnRleHQ6IHtcbiAgICAgICAgb3V0bGV0LFxuICAgICAgICBtYXRjaGVzOiBwYXJlbnRNYXRjaGVzLmNvbmNhdChyZW5kZXJlZE1hdGNoZXMuc2xpY2UoMCwgaW5kZXggKyAxKSlcbiAgICAgIH1cbiAgICB9LCBlcnJvciA/IGVycm9yRWxlbWVudCA6IG1hdGNoLnJvdXRlLmVsZW1lbnQgIT09IHVuZGVmaW5lZCA/IG1hdGNoLnJvdXRlLmVsZW1lbnQgOiBvdXRsZXQpOyAvLyBPbmx5IHdyYXAgaW4gYW4gZXJyb3IgYm91bmRhcnkgd2l0aGluIGRhdGEgcm91dGVyIHVzYWdlcyB3aGVuIHdlIGhhdmUgYW5cbiAgICAvLyBlcnJvckVsZW1lbnQgb24gdGhpcyByb3V0ZS4gIE90aGVyd2lzZSBsZXQgaXQgYnViYmxlIHVwIHRvIGFuIGFuY2VzdG9yXG4gICAgLy8gZXJyb3JFbGVtZW50XG5cblxuICAgIHJldHVybiBkYXRhUm91dGVyU3RhdGUgJiYgKG1hdGNoLnJvdXRlLmVycm9yRWxlbWVudCB8fCBpbmRleCA9PT0gMCkgPyAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSZW5kZXJFcnJvckJvdW5kYXJ5LCB7XG4gICAgICBsb2NhdGlvbjogZGF0YVJvdXRlclN0YXRlLmxvY2F0aW9uLFxuICAgICAgY29tcG9uZW50OiBlcnJvckVsZW1lbnQsXG4gICAgICBlcnJvcjogZXJyb3IsXG4gICAgICBjaGlsZHJlbjogZ2V0Q2hpbGRyZW4oKVxuICAgIH0pIDogZ2V0Q2hpbGRyZW4oKTtcbiAgfSwgbnVsbCk7XG59XG52YXIgRGF0YVJvdXRlckhvb2s7XG5cbihmdW5jdGlvbiAoRGF0YVJvdXRlckhvb2spIHtcbiAgRGF0YVJvdXRlckhvb2tbXCJVc2VSZXZhbGlkYXRvclwiXSA9IFwidXNlUmV2YWxpZGF0b3JcIjtcbn0pKERhdGFSb3V0ZXJIb29rIHx8IChEYXRhUm91dGVySG9vayA9IHt9KSk7XG5cbnZhciBEYXRhUm91dGVyU3RhdGVIb29rO1xuXG4oZnVuY3Rpb24gKERhdGFSb3V0ZXJTdGF0ZUhvb2spIHtcbiAgRGF0YVJvdXRlclN0YXRlSG9va1tcIlVzZUxvYWRlckRhdGFcIl0gPSBcInVzZUxvYWRlckRhdGFcIjtcbiAgRGF0YVJvdXRlclN0YXRlSG9va1tcIlVzZUFjdGlvbkRhdGFcIl0gPSBcInVzZUFjdGlvbkRhdGFcIjtcbiAgRGF0YVJvdXRlclN0YXRlSG9va1tcIlVzZVJvdXRlRXJyb3JcIl0gPSBcInVzZVJvdXRlRXJyb3JcIjtcbiAgRGF0YVJvdXRlclN0YXRlSG9va1tcIlVzZU5hdmlnYXRpb25cIl0gPSBcInVzZU5hdmlnYXRpb25cIjtcbiAgRGF0YVJvdXRlclN0YXRlSG9va1tcIlVzZVJvdXRlTG9hZGVyRGF0YVwiXSA9IFwidXNlUm91dGVMb2FkZXJEYXRhXCI7XG4gIERhdGFSb3V0ZXJTdGF0ZUhvb2tbXCJVc2VNYXRjaGVzXCJdID0gXCJ1c2VNYXRjaGVzXCI7XG4gIERhdGFSb3V0ZXJTdGF0ZUhvb2tbXCJVc2VSZXZhbGlkYXRvclwiXSA9IFwidXNlUmV2YWxpZGF0b3JcIjtcbn0pKERhdGFSb3V0ZXJTdGF0ZUhvb2sgfHwgKERhdGFSb3V0ZXJTdGF0ZUhvb2sgPSB7fSkpO1xuXG5mdW5jdGlvbiBnZXREYXRhUm91dGVyQ29uc29sZUVycm9yKGhvb2tOYW1lKSB7XG4gIHJldHVybiBob29rTmFtZSArIFwiIG11c3QgYmUgdXNlZCB3aXRoaW4gYSBkYXRhIHJvdXRlci4gIFNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9lbi9tYWluL3JvdXRlcnMvcGlja2luZy1hLXJvdXRlci5cIjtcbn1cblxuZnVuY3Rpb24gdXNlRGF0YVJvdXRlckNvbnRleHQoaG9va05hbWUpIHtcbiAgbGV0IGN0eCA9IFJlYWN0LnVzZUNvbnRleHQoRGF0YVJvdXRlckNvbnRleHQpO1xuICAhY3R4ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBnZXREYXRhUm91dGVyQ29uc29sZUVycm9yKGhvb2tOYW1lKSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICByZXR1cm4gY3R4O1xufVxuXG5mdW5jdGlvbiB1c2VEYXRhUm91dGVyU3RhdGUoaG9va05hbWUpIHtcbiAgbGV0IHN0YXRlID0gUmVhY3QudXNlQ29udGV4dChEYXRhUm91dGVyU3RhdGVDb250ZXh0KTtcbiAgIXN0YXRlID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBnZXREYXRhUm91dGVyQ29uc29sZUVycm9yKGhvb2tOYW1lKSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICByZXR1cm4gc3RhdGU7XG59XG4vKipcbiAqIFJldHVybnMgdGhlIGN1cnJlbnQgbmF2aWdhdGlvbiwgZGVmYXVsdGluZyB0byBhbiBcImlkbGVcIiBuYXZpZ2F0aW9uIHdoZW5cbiAqIG5vIG5hdmlnYXRpb24gaXMgaW4gcHJvZ3Jlc3NcbiAqL1xuXG5cbmZ1bmN0aW9uIHVzZU5hdmlnYXRpb24oKSB7XG4gIGxldCBzdGF0ZSA9IHVzZURhdGFSb3V0ZXJTdGF0ZShEYXRhUm91dGVyU3RhdGVIb29rLlVzZU5hdmlnYXRpb24pO1xuICByZXR1cm4gc3RhdGUubmF2aWdhdGlvbjtcbn1cbi8qKlxuICogUmV0dXJucyBhIHJldmFsaWRhdGUgZnVuY3Rpb24gZm9yIG1hbnVhbGx5IHRyaWdnZXJpbmcgcmV2YWxpZGF0aW9uLCBhcyB3ZWxsXG4gKiBhcyB0aGUgY3VycmVudCBzdGF0ZSBvZiBhbnkgbWFudWFsIHJldmFsaWRhdGlvbnNcbiAqL1xuXG5mdW5jdGlvbiB1c2VSZXZhbGlkYXRvcigpIHtcbiAgbGV0IGRhdGFSb3V0ZXJDb250ZXh0ID0gdXNlRGF0YVJvdXRlckNvbnRleHQoRGF0YVJvdXRlckhvb2suVXNlUmV2YWxpZGF0b3IpO1xuICBsZXQgc3RhdGUgPSB1c2VEYXRhUm91dGVyU3RhdGUoRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VSZXZhbGlkYXRvcik7XG4gIHJldHVybiB7XG4gICAgcmV2YWxpZGF0ZTogZGF0YVJvdXRlckNvbnRleHQucm91dGVyLnJldmFsaWRhdGUsXG4gICAgc3RhdGU6IHN0YXRlLnJldmFsaWRhdGlvblxuICB9O1xufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSBhY3RpdmUgcm91dGUgbWF0Y2hlcywgdXNlZnVsIGZvciBhY2Nlc3NpbmcgbG9hZGVyRGF0YSBmb3JcbiAqIHBhcmVudC9jaGlsZCByb3V0ZXMgb3IgdGhlIHJvdXRlIFwiaGFuZGxlXCIgcHJvcGVydHlcbiAqL1xuXG5mdW5jdGlvbiB1c2VNYXRjaGVzKCkge1xuICBsZXQge1xuICAgIG1hdGNoZXMsXG4gICAgbG9hZGVyRGF0YVxuICB9ID0gdXNlRGF0YVJvdXRlclN0YXRlKERhdGFSb3V0ZXJTdGF0ZUhvb2suVXNlTWF0Y2hlcyk7XG4gIHJldHVybiBSZWFjdC51c2VNZW1vKCgpID0+IG1hdGNoZXMubWFwKG1hdGNoID0+IHtcbiAgICBsZXQge1xuICAgICAgcGF0aG5hbWUsXG4gICAgICBwYXJhbXNcbiAgICB9ID0gbWF0Y2g7IC8vIE5vdGU6IFRoaXMgc3RydWN0dXJlIG1hdGNoZXMgdGhhdCBjcmVhdGVkIGJ5IGNyZWF0ZVVzZU1hdGNoZXNNYXRjaFxuICAgIC8vIGluIHRoZSBAcmVtaXgtcnVuL3JvdXRlciAsIHNvIGlmIHlvdSBjaGFuZ2UgdGhpcyBwbGVhc2UgYWxzbyBjaGFuZ2VcbiAgICAvLyB0aGF0IDopICBFdmVudHVhbGx5IHdlJ2xsIERSWSB0aGlzIHVwXG5cbiAgICByZXR1cm4ge1xuICAgICAgaWQ6IG1hdGNoLnJvdXRlLmlkLFxuICAgICAgcGF0aG5hbWUsXG4gICAgICBwYXJhbXMsXG4gICAgICBkYXRhOiBsb2FkZXJEYXRhW21hdGNoLnJvdXRlLmlkXSxcbiAgICAgIGhhbmRsZTogbWF0Y2gucm91dGUuaGFuZGxlXG4gICAgfTtcbiAgfSksIFttYXRjaGVzLCBsb2FkZXJEYXRhXSk7XG59XG4vKipcbiAqIFJldHVybnMgdGhlIGxvYWRlciBkYXRhIGZvciB0aGUgbmVhcmVzdCBhbmNlc3RvciBSb3V0ZSBsb2FkZXJcbiAqL1xuXG5mdW5jdGlvbiB1c2VMb2FkZXJEYXRhKCkge1xuICBsZXQgc3RhdGUgPSB1c2VEYXRhUm91dGVyU3RhdGUoRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VMb2FkZXJEYXRhKTtcbiAgbGV0IHJvdXRlID0gUmVhY3QudXNlQ29udGV4dChSb3V0ZUNvbnRleHQpO1xuICAhcm91dGUgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwidXNlTG9hZGVyRGF0YSBtdXN0IGJlIHVzZWQgaW5zaWRlIGEgUm91dGVDb250ZXh0XCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgbGV0IHRoaXNSb3V0ZSA9IHJvdXRlLm1hdGNoZXNbcm91dGUubWF0Y2hlcy5sZW5ndGggLSAxXTtcbiAgIXRoaXNSb3V0ZS5yb3V0ZS5pZCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJ1c2VMb2FkZXJEYXRhIGNhbiBvbmx5IGJlIHVzZWQgb24gcm91dGVzIHRoYXQgY29udGFpbiBhIHVuaXF1ZSBcXFwiaWRcXFwiXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgcmV0dXJuIHN0YXRlLmxvYWRlckRhdGFbdGhpc1JvdXRlLnJvdXRlLmlkXTtcbn1cbi8qKlxuICogUmV0dXJucyB0aGUgbG9hZGVyRGF0YSBmb3IgdGhlIGdpdmVuIHJvdXRlSWRcbiAqL1xuXG5mdW5jdGlvbiB1c2VSb3V0ZUxvYWRlckRhdGEocm91dGVJZCkge1xuICBsZXQgc3RhdGUgPSB1c2VEYXRhUm91dGVyU3RhdGUoRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VSb3V0ZUxvYWRlckRhdGEpO1xuICByZXR1cm4gc3RhdGUubG9hZGVyRGF0YVtyb3V0ZUlkXTtcbn1cbi8qKlxuICogUmV0dXJucyB0aGUgYWN0aW9uIGRhdGEgZm9yIHRoZSBuZWFyZXN0IGFuY2VzdG9yIFJvdXRlIGFjdGlvblxuICovXG5cbmZ1bmN0aW9uIHVzZUFjdGlvbkRhdGEoKSB7XG4gIGxldCBzdGF0ZSA9IHVzZURhdGFSb3V0ZXJTdGF0ZShEYXRhUm91dGVyU3RhdGVIb29rLlVzZUFjdGlvbkRhdGEpO1xuICBsZXQgcm91dGUgPSBSZWFjdC51c2VDb250ZXh0KFJvdXRlQ29udGV4dCk7XG4gICFyb3V0ZSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJ1c2VBY3Rpb25EYXRhIG11c3QgYmUgdXNlZCBpbnNpZGUgYSBSb3V0ZUNvbnRleHRcIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICByZXR1cm4gT2JqZWN0LnZhbHVlcygoc3RhdGUgPT0gbnVsbCA/IHZvaWQgMCA6IHN0YXRlLmFjdGlvbkRhdGEpIHx8IHt9KVswXTtcbn1cbi8qKlxuICogUmV0dXJucyB0aGUgbmVhcmVzdCBhbmNlc3RvciBSb3V0ZSBlcnJvciwgd2hpY2ggY291bGQgYmUgYSBsb2FkZXIvYWN0aW9uXG4gKiBlcnJvciBvciBhIHJlbmRlciBlcnJvci4gIFRoaXMgaXMgaW50ZW5kZWQgdG8gYmUgY2FsbGVkIGZyb20geW91clxuICogZXJyb3JFbGVtZW50IHRvIGRpc3BsYXkgYSBwcm9wZXIgZXJyb3IgbWVzc2FnZS5cbiAqL1xuXG5mdW5jdGlvbiB1c2VSb3V0ZUVycm9yKCkge1xuICB2YXIgX3N0YXRlJGVycm9ycztcblxuICBsZXQgZXJyb3IgPSBSZWFjdC51c2VDb250ZXh0KFJvdXRlRXJyb3JDb250ZXh0KTtcbiAgbGV0IHN0YXRlID0gdXNlRGF0YVJvdXRlclN0YXRlKERhdGFSb3V0ZXJTdGF0ZUhvb2suVXNlUm91dGVFcnJvcik7XG4gIGxldCByb3V0ZSA9IFJlYWN0LnVzZUNvbnRleHQoUm91dGVDb250ZXh0KTtcbiAgbGV0IHRoaXNSb3V0ZSA9IHJvdXRlLm1hdGNoZXNbcm91dGUubWF0Y2hlcy5sZW5ndGggLSAxXTsgLy8gSWYgdGhpcyB3YXMgYSByZW5kZXIgZXJyb3IsIHdlIHB1dCBpdCBpbiBhIFJvdXRlRXJyb3IgY29udGV4dCBpbnNpZGVcbiAgLy8gb2YgUmVuZGVyRXJyb3JCb3VuZGFyeVxuXG4gIGlmIChlcnJvcikge1xuICAgIHJldHVybiBlcnJvcjtcbiAgfVxuXG4gICFyb3V0ZSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJ1c2VSb3V0ZUVycm9yIG11c3QgYmUgdXNlZCBpbnNpZGUgYSBSb3V0ZUNvbnRleHRcIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAhdGhpc1JvdXRlLnJvdXRlLmlkID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcInVzZVJvdXRlRXJyb3IgY2FuIG9ubHkgYmUgdXNlZCBvbiByb3V0ZXMgdGhhdCBjb250YWluIGEgdW5pcXVlIFxcXCJpZFxcXCJcIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwOyAvLyBPdGhlcndpc2UgbG9vayBmb3IgZXJyb3JzIGZyb20gb3VyIGRhdGEgcm91dGVyIHN0YXRlXG5cbiAgcmV0dXJuIChfc3RhdGUkZXJyb3JzID0gc3RhdGUuZXJyb3JzKSA9PSBudWxsID8gdm9pZCAwIDogX3N0YXRlJGVycm9yc1t0aGlzUm91dGUucm91dGUuaWRdO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSBoYXBweS1wYXRoIGRhdGEgZnJvbSB0aGUgbmVhcmVzdCBhbmNlc3RvciA8QXdhaXQgLz4gdmFsdWVcbiAqL1xuXG5mdW5jdGlvbiB1c2VBc3luY1ZhbHVlKCkge1xuICBsZXQgdmFsdWUgPSBSZWFjdC51c2VDb250ZXh0KEF3YWl0Q29udGV4dCk7XG4gIHJldHVybiB2YWx1ZSA9PSBudWxsID8gdm9pZCAwIDogdmFsdWUuX2RhdGE7XG59XG4vKipcbiAqIFJldHVybnMgdGhlIGVycm9yIGZyb20gdGhlIG5lYXJlc3QgYW5jZXN0b3IgPEF3YWl0IC8+IHZhbHVlXG4gKi9cblxuZnVuY3Rpb24gdXNlQXN5bmNFcnJvcigpIHtcbiAgbGV0IHZhbHVlID0gUmVhY3QudXNlQ29udGV4dChBd2FpdENvbnRleHQpO1xuICByZXR1cm4gdmFsdWUgPT0gbnVsbCA/IHZvaWQgMCA6IHZhbHVlLl9lcnJvcjtcbn1cbmNvbnN0IGFscmVhZHlXYXJuZWQgPSB7fTtcblxuZnVuY3Rpb24gd2FybmluZ09uY2Uoa2V5LCBjb25kLCBtZXNzYWdlKSB7XG4gIGlmICghY29uZCAmJiAhYWxyZWFkeVdhcm5lZFtrZXldKSB7XG4gICAgYWxyZWFkeVdhcm5lZFtrZXldID0gdHJ1ZTtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCBtZXNzYWdlKSA6IHZvaWQgMDtcbiAgfVxufVxuXG4vKipcbiAqIEdpdmVuIGEgUmVtaXggUm91dGVyIGluc3RhbmNlLCByZW5kZXIgdGhlIGFwcHJvcHJpYXRlIFVJXG4gKi9cbmZ1bmN0aW9uIFJvdXRlclByb3ZpZGVyKF9yZWYpIHtcbiAgbGV0IHtcbiAgICBmYWxsYmFja0VsZW1lbnQsXG4gICAgcm91dGVyXG4gIH0gPSBfcmVmO1xuICAvLyBTeW5jIHJvdXRlciBzdGF0ZSB0byBvdXIgY29tcG9uZW50IHN0YXRlIHRvIGZvcmNlIHJlLXJlbmRlcnNcbiAgbGV0IHN0YXRlID0gdXNlU3luY0V4dGVybmFsU3RvcmUocm91dGVyLnN1YnNjcmliZSwgKCkgPT4gcm91dGVyLnN0YXRlLCAvLyBXZSBoYXZlIHRvIHByb3ZpZGUgdGhpcyBzbyBSZWFjdEAxOCBkb2Vzbid0IGNvbXBsYWluIGR1cmluZyBoeWRyYXRpb24sXG4gIC8vIGJ1dCB3ZSBwYXNzIG91ciBzZXJpYWxpemVkIGh5ZHJhdGlvbiBkYXRhIGludG8gdGhlIHJvdXRlciBzbyBzdGF0ZSBoZXJlXG4gIC8vIGlzIGFscmVhZHkgc3luY2VkIHdpdGggd2hhdCB0aGUgc2VydmVyIHNhd1xuICAoKSA9PiByb3V0ZXIuc3RhdGUpO1xuICBsZXQgbmF2aWdhdG9yID0gUmVhY3QudXNlTWVtbygoKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNyZWF0ZUhyZWY6IHJvdXRlci5jcmVhdGVIcmVmLFxuICAgICAgZ286IG4gPT4gcm91dGVyLm5hdmlnYXRlKG4pLFxuICAgICAgcHVzaDogKHRvLCBzdGF0ZSwgb3B0cykgPT4gcm91dGVyLm5hdmlnYXRlKHRvLCB7XG4gICAgICAgIHN0YXRlLFxuICAgICAgICBwcmV2ZW50U2Nyb2xsUmVzZXQ6IG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMucHJldmVudFNjcm9sbFJlc2V0XG4gICAgICB9KSxcbiAgICAgIHJlcGxhY2U6ICh0bywgc3RhdGUsIG9wdHMpID0+IHJvdXRlci5uYXZpZ2F0ZSh0bywge1xuICAgICAgICByZXBsYWNlOiB0cnVlLFxuICAgICAgICBzdGF0ZSxcbiAgICAgICAgcHJldmVudFNjcm9sbFJlc2V0OiBvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLnByZXZlbnRTY3JvbGxSZXNldFxuICAgICAgfSlcbiAgICB9O1xuICB9LCBbcm91dGVyXSk7XG4gIGxldCBiYXNlbmFtZSA9IHJvdXRlci5iYXNlbmFtZSB8fCBcIi9cIjtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KERhdGFSb3V0ZXJDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IHtcbiAgICAgIHJvdXRlcixcbiAgICAgIG5hdmlnYXRvcixcbiAgICAgIHN0YXRpYzogZmFsc2UsXG4gICAgICAvLyBEbyB3ZSBuZWVkIHRoaXM/XG4gICAgICBiYXNlbmFtZVxuICAgIH1cbiAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoRGF0YVJvdXRlclN0YXRlQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBzdGF0ZVxuICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHtcbiAgICBiYXNlbmFtZTogcm91dGVyLmJhc2VuYW1lLFxuICAgIGxvY2F0aW9uOiByb3V0ZXIuc3RhdGUubG9jYXRpb24sXG4gICAgbmF2aWdhdGlvblR5cGU6IHJvdXRlci5zdGF0ZS5oaXN0b3J5QWN0aW9uLFxuICAgIG5hdmlnYXRvcjogbmF2aWdhdG9yXG4gIH0sIHJvdXRlci5zdGF0ZS5pbml0aWFsaXplZCA/IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlcywgbnVsbCkgOiBmYWxsYmFja0VsZW1lbnQpKSk7XG59XG5cbi8qKlxuICogQSA8Um91dGVyPiB0aGF0IHN0b3JlcyBhbGwgZW50cmllcyBpbiBtZW1vcnkuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9kb2NzL2VuL3Y2L3JvdXRlcnMvbWVtb3J5LXJvdXRlclxuICovXG5mdW5jdGlvbiBNZW1vcnlSb3V0ZXIoX3JlZjIpIHtcbiAgbGV0IHtcbiAgICBiYXNlbmFtZSxcbiAgICBjaGlsZHJlbixcbiAgICBpbml0aWFsRW50cmllcyxcbiAgICBpbml0aWFsSW5kZXhcbiAgfSA9IF9yZWYyO1xuICBsZXQgaGlzdG9yeVJlZiA9IFJlYWN0LnVzZVJlZigpO1xuXG4gIGlmIChoaXN0b3J5UmVmLmN1cnJlbnQgPT0gbnVsbCkge1xuICAgIGhpc3RvcnlSZWYuY3VycmVudCA9IGNyZWF0ZU1lbW9yeUhpc3Rvcnkoe1xuICAgICAgaW5pdGlhbEVudHJpZXMsXG4gICAgICBpbml0aWFsSW5kZXgsXG4gICAgICB2NUNvbXBhdDogdHJ1ZVxuICAgIH0pO1xuICB9XG5cbiAgbGV0IGhpc3RvcnkgPSBoaXN0b3J5UmVmLmN1cnJlbnQ7XG4gIGxldCBbc3RhdGUsIHNldFN0YXRlXSA9IFJlYWN0LnVzZVN0YXRlKHtcbiAgICBhY3Rpb246IGhpc3RvcnkuYWN0aW9uLFxuICAgIGxvY2F0aW9uOiBoaXN0b3J5LmxvY2F0aW9uXG4gIH0pO1xuICBSZWFjdC51c2VMYXlvdXRFZmZlY3QoKCkgPT4gaGlzdG9yeS5saXN0ZW4oc2V0U3RhdGUpLCBbaGlzdG9yeV0pO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCB7XG4gICAgYmFzZW5hbWU6IGJhc2VuYW1lLFxuICAgIGNoaWxkcmVuOiBjaGlsZHJlbixcbiAgICBsb2NhdGlvbjogc3RhdGUubG9jYXRpb24sXG4gICAgbmF2aWdhdGlvblR5cGU6IHN0YXRlLmFjdGlvbixcbiAgICBuYXZpZ2F0b3I6IGhpc3RvcnlcbiAgfSk7XG59XG5cbi8qKlxuICogQ2hhbmdlcyB0aGUgY3VycmVudCBsb2NhdGlvbi5cbiAqXG4gKiBOb3RlOiBUaGlzIEFQSSBpcyBtb3N0bHkgdXNlZnVsIGluIFJlYWN0LkNvbXBvbmVudCBzdWJjbGFzc2VzIHRoYXQgYXJlIG5vdFxuICogYWJsZSB0byB1c2UgaG9va3MuIEluIGZ1bmN0aW9uYWwgY29tcG9uZW50cywgd2UgcmVjb21tZW5kIHlvdSB1c2UgdGhlXG4gKiBgdXNlTmF2aWdhdGVgIGhvb2sgaW5zdGVhZC5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2RvY3MvZW4vdjYvY29tcG9uZW50cy9uYXZpZ2F0ZVxuICovXG5mdW5jdGlvbiBOYXZpZ2F0ZShfcmVmMykge1xuICBsZXQge1xuICAgIHRvLFxuICAgIHJlcGxhY2UsXG4gICAgc3RhdGUsXG4gICAgcmVsYXRpdmVcbiAgfSA9IF9yZWYzO1xuICAhdXNlSW5Sb3V0ZXJDb250ZXh0KCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIC8vIFRPRE86IFRoaXMgZXJyb3IgaXMgcHJvYmFibHkgYmVjYXVzZSB0aGV5IHNvbWVob3cgaGF2ZSAyIHZlcnNpb25zIG9mXG4gIC8vIHRoZSByb3V0ZXIgbG9hZGVkLiBXZSBjYW4gaGVscCB0aGVtIHVuZGVyc3RhbmQgaG93IHRvIGF2b2lkIHRoYXQuXG4gIFwiPE5hdmlnYXRlPiBtYXkgYmUgdXNlZCBvbmx5IGluIHRoZSBjb250ZXh0IG9mIGEgPFJvdXRlcj4gY29tcG9uZW50LlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIVJlYWN0LnVzZUNvbnRleHQoTmF2aWdhdGlvbkNvbnRleHQpLnN0YXRpYywgXCI8TmF2aWdhdGU+IG11c3Qgbm90IGJlIHVzZWQgb24gdGhlIGluaXRpYWwgcmVuZGVyIGluIGEgPFN0YXRpY1JvdXRlcj4uIFwiICsgXCJUaGlzIGlzIGEgbm8tb3AsIGJ1dCB5b3Ugc2hvdWxkIG1vZGlmeSB5b3VyIGNvZGUgc28gdGhlIDxOYXZpZ2F0ZT4gaXMgXCIgKyBcIm9ubHkgZXZlciByZW5kZXJlZCBpbiByZXNwb25zZSB0byBzb21lIHVzZXIgaW50ZXJhY3Rpb24gb3Igc3RhdGUgY2hhbmdlLlwiKSA6IHZvaWQgMDtcbiAgbGV0IGRhdGFSb3V0ZXJTdGF0ZSA9IFJlYWN0LnVzZUNvbnRleHQoRGF0YVJvdXRlclN0YXRlQ29udGV4dCk7XG4gIGxldCBuYXZpZ2F0ZSA9IHVzZU5hdmlnYXRlKCk7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgLy8gQXZvaWQga2lja2luZyBvZmYgbXVsdGlwbGUgbmF2aWdhdGlvbnMgaWYgd2UncmUgaW4gdGhlIG1pZGRsZSBvZiBhXG4gICAgLy8gZGF0YS1yb3V0ZXIgbmF2aWdhdGlvbiwgc2luY2UgY29tcG9uZW50cyBnZXQgcmUtcmVuZGVyZWQgd2hlbiB3ZSBlbnRlclxuICAgIC8vIGEgc3VibWl0dGluZy9sb2FkaW5nIHN0YXRlXG4gICAgaWYgKGRhdGFSb3V0ZXJTdGF0ZSAmJiBkYXRhUm91dGVyU3RhdGUubmF2aWdhdGlvbi5zdGF0ZSAhPT0gXCJpZGxlXCIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBuYXZpZ2F0ZSh0bywge1xuICAgICAgcmVwbGFjZSxcbiAgICAgIHN0YXRlLFxuICAgICAgcmVsYXRpdmVcbiAgICB9KTtcbiAgfSk7XG4gIHJldHVybiBudWxsO1xufVxuXG4vKipcbiAqIFJlbmRlcnMgdGhlIGNoaWxkIHJvdXRlJ3MgZWxlbWVudCwgaWYgdGhlcmUgaXMgb25lLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vZG9jcy9lbi92Ni9jb21wb25lbnRzL291dGxldFxuICovXG5mdW5jdGlvbiBPdXRsZXQocHJvcHMpIHtcbiAgcmV0dXJuIHVzZU91dGxldChwcm9wcy5jb250ZXh0KTtcbn1cblxuLyoqXG4gKiBEZWNsYXJlcyBhbiBlbGVtZW50IHRoYXQgc2hvdWxkIGJlIHJlbmRlcmVkIGF0IGEgY2VydGFpbiBVUkwgcGF0aC5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2RvY3MvZW4vdjYvY29tcG9uZW50cy9yb3V0ZVxuICovXG5mdW5jdGlvbiBSb3V0ZShfcHJvcHMpIHtcbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIkEgPFJvdXRlPiBpcyBvbmx5IGV2ZXIgdG8gYmUgdXNlZCBhcyB0aGUgY2hpbGQgb2YgPFJvdXRlcz4gZWxlbWVudCwgXCIgKyBcIm5ldmVyIHJlbmRlcmVkIGRpcmVjdGx5LiBQbGVhc2Ugd3JhcCB5b3VyIDxSb3V0ZT4gaW4gYSA8Um91dGVzPi5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDtcbn1cblxuLyoqXG4gKiBQcm92aWRlcyBsb2NhdGlvbiBjb250ZXh0IGZvciB0aGUgcmVzdCBvZiB0aGUgYXBwLlxuICpcbiAqIE5vdGU6IFlvdSB1c3VhbGx5IHdvbid0IHJlbmRlciBhIDxSb3V0ZXI+IGRpcmVjdGx5LiBJbnN0ZWFkLCB5b3UnbGwgcmVuZGVyIGFcbiAqIHJvdXRlciB0aGF0IGlzIG1vcmUgc3BlY2lmaWMgdG8geW91ciBlbnZpcm9ubWVudCBzdWNoIGFzIGEgPEJyb3dzZXJSb3V0ZXI+XG4gKiBpbiB3ZWIgYnJvd3NlcnMgb3IgYSA8U3RhdGljUm91dGVyPiBmb3Igc2VydmVyIHJlbmRlcmluZy5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2RvY3MvZW4vdjYvcm91dGVycy9yb3V0ZXJcbiAqL1xuZnVuY3Rpb24gUm91dGVyKF9yZWY0KSB7XG4gIGxldCB7XG4gICAgYmFzZW5hbWU6IGJhc2VuYW1lUHJvcCA9IFwiL1wiLFxuICAgIGNoaWxkcmVuID0gbnVsbCxcbiAgICBsb2NhdGlvbjogbG9jYXRpb25Qcm9wLFxuICAgIG5hdmlnYXRpb25UeXBlID0gQWN0aW9uLlBvcCxcbiAgICBuYXZpZ2F0b3IsXG4gICAgc3RhdGljOiBzdGF0aWNQcm9wID0gZmFsc2VcbiAgfSA9IF9yZWY0O1xuICAhIXVzZUluUm91dGVyQ29udGV4dCgpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBjYW5ub3QgcmVuZGVyIGEgPFJvdXRlcj4gaW5zaWRlIGFub3RoZXIgPFJvdXRlcj4uXCIgKyBcIiBZb3Ugc2hvdWxkIG5ldmVyIGhhdmUgbW9yZSB0aGFuIG9uZSBpbiB5b3VyIGFwcC5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwOyAvLyBQcmVzZXJ2ZSB0cmFpbGluZyBzbGFzaGVzIG9uIGJhc2VuYW1lLCBzbyB3ZSBjYW4gbGV0IHRoZSB1c2VyIGNvbnRyb2xcbiAgLy8gdGhlIGVuZm9yY2VtZW50IG9mIHRyYWlsaW5nIHNsYXNoZXMgdGhyb3VnaG91dCB0aGUgYXBwXG5cbiAgbGV0IGJhc2VuYW1lID0gYmFzZW5hbWVQcm9wLnJlcGxhY2UoL15cXC8qLywgXCIvXCIpO1xuICBsZXQgbmF2aWdhdGlvbkNvbnRleHQgPSBSZWFjdC51c2VNZW1vKCgpID0+ICh7XG4gICAgYmFzZW5hbWUsXG4gICAgbmF2aWdhdG9yLFxuICAgIHN0YXRpYzogc3RhdGljUHJvcFxuICB9KSwgW2Jhc2VuYW1lLCBuYXZpZ2F0b3IsIHN0YXRpY1Byb3BdKTtcblxuICBpZiAodHlwZW9mIGxvY2F0aW9uUHJvcCA9PT0gXCJzdHJpbmdcIikge1xuICAgIGxvY2F0aW9uUHJvcCA9IHBhcnNlUGF0aChsb2NhdGlvblByb3ApO1xuICB9XG5cbiAgbGV0IHtcbiAgICBwYXRobmFtZSA9IFwiL1wiLFxuICAgIHNlYXJjaCA9IFwiXCIsXG4gICAgaGFzaCA9IFwiXCIsXG4gICAgc3RhdGUgPSBudWxsLFxuICAgIGtleSA9IFwiZGVmYXVsdFwiXG4gIH0gPSBsb2NhdGlvblByb3A7XG4gIGxldCBsb2NhdGlvbiA9IFJlYWN0LnVzZU1lbW8oKCkgPT4ge1xuICAgIGxldCB0cmFpbGluZ1BhdGhuYW1lID0gc3RyaXBCYXNlbmFtZShwYXRobmFtZSwgYmFzZW5hbWUpO1xuXG4gICAgaWYgKHRyYWlsaW5nUGF0aG5hbWUgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHBhdGhuYW1lOiB0cmFpbGluZ1BhdGhuYW1lLFxuICAgICAgc2VhcmNoLFxuICAgICAgaGFzaCxcbiAgICAgIHN0YXRlLFxuICAgICAga2V5XG4gICAgfTtcbiAgfSwgW2Jhc2VuYW1lLCBwYXRobmFtZSwgc2VhcmNoLCBoYXNoLCBzdGF0ZSwga2V5XSk7XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcobG9jYXRpb24gIT0gbnVsbCwgXCI8Um91dGVyIGJhc2VuYW1lPVxcXCJcIiArIGJhc2VuYW1lICsgXCJcXFwiPiBpcyBub3QgYWJsZSB0byBtYXRjaCB0aGUgVVJMIFwiICsgKFwiXFxcIlwiICsgcGF0aG5hbWUgKyBzZWFyY2ggKyBoYXNoICsgXCJcXFwiIGJlY2F1c2UgaXQgZG9lcyBub3Qgc3RhcnQgd2l0aCB0aGUgXCIpICsgXCJiYXNlbmFtZSwgc28gdGhlIDxSb3V0ZXI+IHdvbid0IHJlbmRlciBhbnl0aGluZy5cIikgOiB2b2lkIDA7XG5cbiAgaWYgKGxvY2F0aW9uID09IG51bGwpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChOYXZpZ2F0aW9uQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBuYXZpZ2F0aW9uQ29udGV4dFxuICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChMb2NhdGlvbkNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICBjaGlsZHJlbjogY2hpbGRyZW4sXG4gICAgdmFsdWU6IHtcbiAgICAgIGxvY2F0aW9uLFxuICAgICAgbmF2aWdhdGlvblR5cGVcbiAgICB9XG4gIH0pKTtcbn1cblxuLyoqXG4gKiBBIGNvbnRhaW5lciBmb3IgYSBuZXN0ZWQgdHJlZSBvZiA8Um91dGU+IGVsZW1lbnRzIHRoYXQgcmVuZGVycyB0aGUgYnJhbmNoXG4gKiB0aGF0IGJlc3QgbWF0Y2hlcyB0aGUgY3VycmVudCBsb2NhdGlvbi5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2RvY3MvZW4vdjYvY29tcG9uZW50cy9yb3V0ZXNcbiAqL1xuZnVuY3Rpb24gUm91dGVzKF9yZWY1KSB7XG4gIGxldCB7XG4gICAgY2hpbGRyZW4sXG4gICAgbG9jYXRpb25cbiAgfSA9IF9yZWY1O1xuICBsZXQgZGF0YVJvdXRlckNvbnRleHQgPSBSZWFjdC51c2VDb250ZXh0KERhdGFSb3V0ZXJDb250ZXh0KTsgLy8gV2hlbiBpbiBhIERhdGFSb3V0ZXJDb250ZXh0IF93aXRob3V0XyBjaGlsZHJlbiwgd2UgdXNlIHRoZSByb3V0ZXIgcm91dGVzXG4gIC8vIGRpcmVjdGx5LiAgSWYgd2UgaGF2ZSBjaGlsZHJlbiwgdGhlbiB3ZSdyZSBpbiBhIGRlc2NlbmRhbnQgdHJlZSBhbmQgd2VcbiAgLy8gbmVlZCB0byB1c2UgY2hpbGQgcm91dGVzLlxuXG4gIGxldCByb3V0ZXMgPSBkYXRhUm91dGVyQ29udGV4dCAmJiAhY2hpbGRyZW4gPyBkYXRhUm91dGVyQ29udGV4dC5yb3V0ZXIucm91dGVzIDogY3JlYXRlUm91dGVzRnJvbUNoaWxkcmVuKGNoaWxkcmVuKTtcbiAgcmV0dXJuIHVzZVJvdXRlcyhyb3V0ZXMsIGxvY2F0aW9uKTtcbn1cblxuLyoqXG4gKiBDb21wb25lbnQgdG8gdXNlIGZvciByZW5kZXJpbmcgbGF6aWx5IGxvYWRlZCBkYXRhIGZyb20gcmV0dXJuaW5nIGRlZmVyKClcbiAqIGluIGEgbG9hZGVyIGZ1bmN0aW9uXG4gKi9cbmZ1bmN0aW9uIEF3YWl0KF9yZWY2KSB7XG4gIGxldCB7XG4gICAgY2hpbGRyZW4sXG4gICAgZXJyb3JFbGVtZW50LFxuICAgIHJlc29sdmVcbiAgfSA9IF9yZWY2O1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQXdhaXRFcnJvckJvdW5kYXJ5LCB7XG4gICAgcmVzb2x2ZTogcmVzb2x2ZSxcbiAgICBlcnJvckVsZW1lbnQ6IGVycm9yRWxlbWVudFxuICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSZXNvbHZlQXdhaXQsIG51bGwsIGNoaWxkcmVuKSk7XG59XG52YXIgQXdhaXRSZW5kZXJTdGF0dXM7XG5cbihmdW5jdGlvbiAoQXdhaXRSZW5kZXJTdGF0dXMpIHtcbiAgQXdhaXRSZW5kZXJTdGF0dXNbQXdhaXRSZW5kZXJTdGF0dXNbXCJwZW5kaW5nXCJdID0gMF0gPSBcInBlbmRpbmdcIjtcbiAgQXdhaXRSZW5kZXJTdGF0dXNbQXdhaXRSZW5kZXJTdGF0dXNbXCJzdWNjZXNzXCJdID0gMV0gPSBcInN1Y2Nlc3NcIjtcbiAgQXdhaXRSZW5kZXJTdGF0dXNbQXdhaXRSZW5kZXJTdGF0dXNbXCJlcnJvclwiXSA9IDJdID0gXCJlcnJvclwiO1xufSkoQXdhaXRSZW5kZXJTdGF0dXMgfHwgKEF3YWl0UmVuZGVyU3RhdHVzID0ge30pKTtcblxuY29uc3QgbmV2ZXJTZXR0bGVkUHJvbWlzZSA9IG5ldyBQcm9taXNlKCgpID0+IHt9KTtcblxuY2xhc3MgQXdhaXRFcnJvckJvdW5kYXJ5IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGVycm9yOiBudWxsXG4gICAgfTtcbiAgfVxuXG4gIHN0YXRpYyBnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IoZXJyb3IpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZXJyb3JcbiAgICB9O1xuICB9XG5cbiAgY29tcG9uZW50RGlkQ2F0Y2goZXJyb3IsIGVycm9ySW5mbykge1xuICAgIGNvbnNvbGUuZXJyb3IoXCI8QXdhaXQ+IGNhdWdodCB0aGUgZm9sbG93aW5nIGVycm9yIGR1cmluZyByZW5kZXJcIiwgZXJyb3IsIGVycm9ySW5mbyk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgbGV0IHtcbiAgICAgIGNoaWxkcmVuLFxuICAgICAgZXJyb3JFbGVtZW50LFxuICAgICAgcmVzb2x2ZVxuICAgIH0gPSB0aGlzLnByb3BzO1xuICAgIGxldCBwcm9taXNlID0gbnVsbDtcbiAgICBsZXQgc3RhdHVzID0gQXdhaXRSZW5kZXJTdGF0dXMucGVuZGluZztcblxuICAgIGlmICghKHJlc29sdmUgaW5zdGFuY2VvZiBQcm9taXNlKSkge1xuICAgICAgLy8gRGlkbid0IGdldCBhIHByb21pc2UgLSBwcm92aWRlIGFzIGEgcmVzb2x2ZWQgcHJvbWlzZVxuICAgICAgc3RhdHVzID0gQXdhaXRSZW5kZXJTdGF0dXMuc3VjY2VzcztcbiAgICAgIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoKTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm9taXNlLCBcIl90cmFja2VkXCIsIHtcbiAgICAgICAgZ2V0OiAoKSA9PiB0cnVlXG4gICAgICB9KTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm9taXNlLCBcIl9kYXRhXCIsIHtcbiAgICAgICAgZ2V0OiAoKSA9PiByZXNvbHZlXG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuc3RhdGUuZXJyb3IpIHtcbiAgICAgIC8vIENhdWdodCBhIHJlbmRlciBlcnJvciwgcHJvdmlkZSBpdCBhcyBhIHJlamVjdGVkIHByb21pc2VcbiAgICAgIHN0YXR1cyA9IEF3YWl0UmVuZGVyU3RhdHVzLmVycm9yO1xuICAgICAgbGV0IHJlbmRlckVycm9yID0gdGhpcy5zdGF0ZS5lcnJvcjtcbiAgICAgIHByb21pc2UgPSBQcm9taXNlLnJlamVjdCgpLmNhdGNoKCgpID0+IHt9KTsgLy8gQXZvaWQgdW5oYW5kbGVkIHJlamVjdGlvbiB3YXJuaW5nc1xuXG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocHJvbWlzZSwgXCJfdHJhY2tlZFwiLCB7XG4gICAgICAgIGdldDogKCkgPT4gdHJ1ZVxuICAgICAgfSk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocHJvbWlzZSwgXCJfZXJyb3JcIiwge1xuICAgICAgICBnZXQ6ICgpID0+IHJlbmRlckVycm9yXG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKHJlc29sdmUuX3RyYWNrZWQpIHtcbiAgICAgIC8vIEFscmVhZHkgdHJhY2tlZCBwcm9taXNlIC0gY2hlY2sgY29udGVudHNcbiAgICAgIHByb21pc2UgPSByZXNvbHZlO1xuICAgICAgc3RhdHVzID0gcHJvbWlzZS5fZXJyb3IgIT09IHVuZGVmaW5lZCA/IEF3YWl0UmVuZGVyU3RhdHVzLmVycm9yIDogcHJvbWlzZS5fZGF0YSAhPT0gdW5kZWZpbmVkID8gQXdhaXRSZW5kZXJTdGF0dXMuc3VjY2VzcyA6IEF3YWl0UmVuZGVyU3RhdHVzLnBlbmRpbmc7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFJhdyAodW50cmFja2VkKSBwcm9taXNlIC0gdHJhY2sgaXRcbiAgICAgIHN0YXR1cyA9IEF3YWl0UmVuZGVyU3RhdHVzLnBlbmRpbmc7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocmVzb2x2ZSwgXCJfdHJhY2tlZFwiLCB7XG4gICAgICAgIGdldDogKCkgPT4gdHJ1ZVxuICAgICAgfSk7XG4gICAgICBwcm9taXNlID0gcmVzb2x2ZS50aGVuKGRhdGEgPT4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHJlc29sdmUsIFwiX2RhdGFcIiwge1xuICAgICAgICBnZXQ6ICgpID0+IGRhdGFcbiAgICAgIH0pLCBlcnJvciA9PiBPYmplY3QuZGVmaW5lUHJvcGVydHkocmVzb2x2ZSwgXCJfZXJyb3JcIiwge1xuICAgICAgICBnZXQ6ICgpID0+IGVycm9yXG4gICAgICB9KSk7XG4gICAgfVxuXG4gICAgaWYgKHN0YXR1cyA9PT0gQXdhaXRSZW5kZXJTdGF0dXMuZXJyb3IgJiYgcHJvbWlzZS5fZXJyb3IgaW5zdGFuY2VvZiBBYm9ydGVkRGVmZXJyZWRFcnJvcikge1xuICAgICAgLy8gRnJlZXplIHRoZSBVSSBieSB0aHJvd2luZyBhIG5ldmVyIHJlc29sdmVkIHByb21pc2VcbiAgICAgIHRocm93IG5ldmVyU2V0dGxlZFByb21pc2U7XG4gICAgfVxuXG4gICAgaWYgKHN0YXR1cyA9PT0gQXdhaXRSZW5kZXJTdGF0dXMuZXJyb3IgJiYgIWVycm9yRWxlbWVudCkge1xuICAgICAgLy8gTm8gZXJyb3JFbGVtZW50LCB0aHJvdyB0byB0aGUgbmVhcmVzdCByb3V0ZS1sZXZlbCBlcnJvciBib3VuZGFyeVxuICAgICAgdGhyb3cgcHJvbWlzZS5fZXJyb3I7XG4gICAgfVxuXG4gICAgaWYgKHN0YXR1cyA9PT0gQXdhaXRSZW5kZXJTdGF0dXMuZXJyb3IpIHtcbiAgICAgIC8vIFJlbmRlciB2aWEgb3VyIGVycm9yRWxlbWVudFxuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEF3YWl0Q29udGV4dC5Qcm92aWRlciwge1xuICAgICAgICB2YWx1ZTogcHJvbWlzZSxcbiAgICAgICAgY2hpbGRyZW46IGVycm9yRWxlbWVudFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKHN0YXR1cyA9PT0gQXdhaXRSZW5kZXJTdGF0dXMuc3VjY2Vzcykge1xuICAgICAgLy8gUmVuZGVyIGNoaWxkcmVuIHdpdGggcmVzb2x2ZWQgdmFsdWVcbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChBd2FpdENvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgICAgdmFsdWU6IHByb21pc2UsXG4gICAgICAgIGNoaWxkcmVuOiBjaGlsZHJlblxuICAgICAgfSk7XG4gICAgfSAvLyBUaHJvdyB0byB0aGUgc3VzcGVuc2UgYm91bmRhcnlcblxuXG4gICAgdGhyb3cgcHJvbWlzZTtcbiAgfVxuXG59XG4vKipcbiAqIEBwcml2YXRlXG4gKiBJbmRpcmVjdGlvbiB0byBsZXZlcmFnZSB1c2VBc3luY1ZhbHVlIGZvciBhIHJlbmRlci1wcm9wIEFQSSBvbiA8QXdhaXQ+XG4gKi9cblxuXG5mdW5jdGlvbiBSZXNvbHZlQXdhaXQoX3JlZjcpIHtcbiAgbGV0IHtcbiAgICBjaGlsZHJlblxuICB9ID0gX3JlZjc7XG4gIGxldCBkYXRhID0gdXNlQXN5bmNWYWx1ZSgpO1xuXG4gIGlmICh0eXBlb2YgY2hpbGRyZW4gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHJldHVybiBjaGlsZHJlbihkYXRhKTtcbiAgfVxuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgbnVsbCwgY2hpbGRyZW4pO1xufSAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBVVElMU1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4vKipcbiAqIENyZWF0ZXMgYSByb3V0ZSBjb25maWcgZnJvbSBhIFJlYWN0IFwiY2hpbGRyZW5cIiBvYmplY3QsIHdoaWNoIGlzIHVzdWFsbHlcbiAqIGVpdGhlciBhIGA8Um91dGU+YCBlbGVtZW50IG9yIGFuIGFycmF5IG9mIHRoZW0uIFVzZWQgaW50ZXJuYWxseSBieVxuICogYDxSb3V0ZXM+YCB0byBjcmVhdGUgYSByb3V0ZSBjb25maWcgZnJvbSBpdHMgY2hpbGRyZW4uXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9kb2NzL2VuL3Y2L3V0aWxzL2NyZWF0ZS1yb3V0ZXMtZnJvbS1jaGlsZHJlblxuICovXG5cblxuZnVuY3Rpb24gY3JlYXRlUm91dGVzRnJvbUNoaWxkcmVuKGNoaWxkcmVuLCBwYXJlbnRQYXRoKSB7XG4gIGlmIChwYXJlbnRQYXRoID09PSB2b2lkIDApIHtcbiAgICBwYXJlbnRQYXRoID0gW107XG4gIH1cblxuICBsZXQgcm91dGVzID0gW107XG4gIFJlYWN0LkNoaWxkcmVuLmZvckVhY2goY2hpbGRyZW4sIChlbGVtZW50LCBpbmRleCkgPT4ge1xuICAgIGlmICghIC8qI19fUFVSRV9fKi9SZWFjdC5pc1ZhbGlkRWxlbWVudChlbGVtZW50KSkge1xuICAgICAgLy8gSWdub3JlIG5vbi1lbGVtZW50cy4gVGhpcyBhbGxvd3MgcGVvcGxlIHRvIG1vcmUgZWFzaWx5IGlubGluZVxuICAgICAgLy8gY29uZGl0aW9uYWxzIGluIHRoZWlyIHJvdXRlIGNvbmZpZy5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoZWxlbWVudC50eXBlID09PSBSZWFjdC5GcmFnbWVudCkge1xuICAgICAgLy8gVHJhbnNwYXJlbnRseSBzdXBwb3J0IFJlYWN0LkZyYWdtZW50IGFuZCBpdHMgY2hpbGRyZW4uXG4gICAgICByb3V0ZXMucHVzaC5hcHBseShyb3V0ZXMsIGNyZWF0ZVJvdXRlc0Zyb21DaGlsZHJlbihlbGVtZW50LnByb3BzLmNoaWxkcmVuLCBwYXJlbnRQYXRoKSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgIShlbGVtZW50LnR5cGUgPT09IFJvdXRlKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJbXCIgKyAodHlwZW9mIGVsZW1lbnQudHlwZSA9PT0gXCJzdHJpbmdcIiA/IGVsZW1lbnQudHlwZSA6IGVsZW1lbnQudHlwZS5uYW1lKSArIFwiXSBpcyBub3QgYSA8Um91dGU+IGNvbXBvbmVudC4gQWxsIGNvbXBvbmVudCBjaGlsZHJlbiBvZiA8Um91dGVzPiBtdXN0IGJlIGEgPFJvdXRlPiBvciA8UmVhY3QuRnJhZ21lbnQ+XCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAhKCFlbGVtZW50LnByb3BzLmluZGV4IHx8ICFlbGVtZW50LnByb3BzLmNoaWxkcmVuKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJBbiBpbmRleCByb3V0ZSBjYW5ub3QgaGF2ZSBjaGlsZCByb3V0ZXMuXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICBsZXQgdHJlZVBhdGggPSBbLi4ucGFyZW50UGF0aCwgaW5kZXhdO1xuICAgIGxldCByb3V0ZSA9IHtcbiAgICAgIGlkOiBlbGVtZW50LnByb3BzLmlkIHx8IHRyZWVQYXRoLmpvaW4oXCItXCIpLFxuICAgICAgY2FzZVNlbnNpdGl2ZTogZWxlbWVudC5wcm9wcy5jYXNlU2Vuc2l0aXZlLFxuICAgICAgZWxlbWVudDogZWxlbWVudC5wcm9wcy5lbGVtZW50LFxuICAgICAgaW5kZXg6IGVsZW1lbnQucHJvcHMuaW5kZXgsXG4gICAgICBwYXRoOiBlbGVtZW50LnByb3BzLnBhdGgsXG4gICAgICBsb2FkZXI6IGVsZW1lbnQucHJvcHMubG9hZGVyLFxuICAgICAgYWN0aW9uOiBlbGVtZW50LnByb3BzLmFjdGlvbixcbiAgICAgIGVycm9yRWxlbWVudDogZWxlbWVudC5wcm9wcy5lcnJvckVsZW1lbnQsXG4gICAgICBoYXNFcnJvckJvdW5kYXJ5OiBlbGVtZW50LnByb3BzLmVycm9yRWxlbWVudCAhPSBudWxsLFxuICAgICAgc2hvdWxkUmV2YWxpZGF0ZTogZWxlbWVudC5wcm9wcy5zaG91bGRSZXZhbGlkYXRlLFxuICAgICAgaGFuZGxlOiBlbGVtZW50LnByb3BzLmhhbmRsZVxuICAgIH07XG5cbiAgICBpZiAoZWxlbWVudC5wcm9wcy5jaGlsZHJlbikge1xuICAgICAgcm91dGUuY2hpbGRyZW4gPSBjcmVhdGVSb3V0ZXNGcm9tQ2hpbGRyZW4oZWxlbWVudC5wcm9wcy5jaGlsZHJlbiwgdHJlZVBhdGgpO1xuICAgIH1cblxuICAgIHJvdXRlcy5wdXNoKHJvdXRlKTtcbiAgfSk7XG4gIHJldHVybiByb3V0ZXM7XG59XG4vKipcbiAqIFJlbmRlcnMgdGhlIHJlc3VsdCBvZiBgbWF0Y2hSb3V0ZXMoKWAgaW50byBhIFJlYWN0IGVsZW1lbnQuXG4gKi9cblxuZnVuY3Rpb24gcmVuZGVyTWF0Y2hlcyhtYXRjaGVzKSB7XG4gIHJldHVybiBfcmVuZGVyTWF0Y2hlcyhtYXRjaGVzKTtcbn1cbi8qKlxuICogQHByaXZhdGVcbiAqIFdhbGsgdGhlIHJvdXRlIHRyZWUgYW5kIGFkZCBoYXNFcnJvckJvdW5kYXJ5IGlmIGl0J3Mgbm90IHByb3ZpZGVkLCBzbyB0aGF0XG4gKiB1c2VycyBwcm92aWRpbmcgbWFudWFsIHJvdXRlIGFycmF5cyBjYW4ganVzdCBzcGVjaWZ5IGVycm9yRWxlbWVudFxuICovXG5cbmZ1bmN0aW9uIGVuaGFuY2VNYW51YWxSb3V0ZU9iamVjdHMocm91dGVzKSB7XG4gIHJldHVybiByb3V0ZXMubWFwKHJvdXRlID0+IHtcbiAgICBsZXQgcm91dGVDbG9uZSA9IF9leHRlbmRzKHt9LCByb3V0ZSk7XG5cbiAgICBpZiAocm91dGVDbG9uZS5oYXNFcnJvckJvdW5kYXJ5ID09IG51bGwpIHtcbiAgICAgIHJvdXRlQ2xvbmUuaGFzRXJyb3JCb3VuZGFyeSA9IHJvdXRlQ2xvbmUuZXJyb3JFbGVtZW50ICE9IG51bGw7XG4gICAgfVxuXG4gICAgaWYgKHJvdXRlQ2xvbmUuY2hpbGRyZW4pIHtcbiAgICAgIHJvdXRlQ2xvbmUuY2hpbGRyZW4gPSBlbmhhbmNlTWFudWFsUm91dGVPYmplY3RzKHJvdXRlQ2xvbmUuY2hpbGRyZW4pO1xuICAgIH1cblxuICAgIHJldHVybiByb3V0ZUNsb25lO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlTWVtb3J5Um91dGVyKHJvdXRlcywgb3B0cykge1xuICByZXR1cm4gY3JlYXRlUm91dGVyKHtcbiAgICBiYXNlbmFtZTogb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5iYXNlbmFtZSxcbiAgICBoaXN0b3J5OiBjcmVhdGVNZW1vcnlIaXN0b3J5KHtcbiAgICAgIGluaXRpYWxFbnRyaWVzOiBvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLmluaXRpYWxFbnRyaWVzLFxuICAgICAgaW5pdGlhbEluZGV4OiBvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLmluaXRpYWxJbmRleFxuICAgIH0pLFxuICAgIGh5ZHJhdGlvbkRhdGE6IG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMuaHlkcmF0aW9uRGF0YSxcbiAgICByb3V0ZXM6IGVuaGFuY2VNYW51YWxSb3V0ZU9iamVjdHMocm91dGVzKVxuICB9KS5pbml0aWFsaXplKCk7XG59IC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuZXhwb3J0IHsgQXdhaXQsIE1lbW9yeVJvdXRlciwgTmF2aWdhdGUsIE91dGxldCwgUm91dGUsIFJvdXRlciwgUm91dGVyUHJvdmlkZXIsIFJvdXRlcywgRGF0YVJvdXRlckNvbnRleHQgYXMgVU5TQUZFX0RhdGFSb3V0ZXJDb250ZXh0LCBEYXRhUm91dGVyU3RhdGVDb250ZXh0IGFzIFVOU0FGRV9EYXRhUm91dGVyU3RhdGVDb250ZXh0LCBEYXRhU3RhdGljUm91dGVyQ29udGV4dCBhcyBVTlNBRkVfRGF0YVN0YXRpY1JvdXRlckNvbnRleHQsIExvY2F0aW9uQ29udGV4dCBhcyBVTlNBRkVfTG9jYXRpb25Db250ZXh0LCBOYXZpZ2F0aW9uQ29udGV4dCBhcyBVTlNBRkVfTmF2aWdhdGlvbkNvbnRleHQsIFJvdXRlQ29udGV4dCBhcyBVTlNBRkVfUm91dGVDb250ZXh0LCBlbmhhbmNlTWFudWFsUm91dGVPYmplY3RzIGFzIFVOU0FGRV9lbmhhbmNlTWFudWFsUm91dGVPYmplY3RzLCBjcmVhdGVNZW1vcnlSb3V0ZXIsIGNyZWF0ZVJvdXRlc0Zyb21DaGlsZHJlbiwgY3JlYXRlUm91dGVzRnJvbUNoaWxkcmVuIGFzIGNyZWF0ZVJvdXRlc0Zyb21FbGVtZW50cywgcmVuZGVyTWF0Y2hlcywgdXNlQWN0aW9uRGF0YSwgdXNlQXN5bmNFcnJvciwgdXNlQXN5bmNWYWx1ZSwgdXNlSHJlZiwgdXNlSW5Sb3V0ZXJDb250ZXh0LCB1c2VMb2FkZXJEYXRhLCB1c2VMb2NhdGlvbiwgdXNlTWF0Y2gsIHVzZU1hdGNoZXMsIHVzZU5hdmlnYXRlLCB1c2VOYXZpZ2F0aW9uLCB1c2VOYXZpZ2F0aW9uVHlwZSwgdXNlT3V0bGV0LCB1c2VPdXRsZXRDb250ZXh0LCB1c2VQYXJhbXMsIHVzZVJlc29sdmVkUGF0aCwgdXNlUmV2YWxpZGF0b3IsIHVzZVJvdXRlRXJyb3IsIHVzZVJvdXRlTG9hZGVyRGF0YSwgdXNlUm91dGVzIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiIsIi8qKlxuICogUmVhY3QgUm91dGVyIERPTSB2Ni40LjNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIFJlbWl4IFNvZnR3YXJlIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UubWQgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgVU5TQUZFX2VuaGFuY2VNYW51YWxSb3V0ZU9iamVjdHMsIFJvdXRlciwgdXNlSHJlZiwgdXNlUmVzb2x2ZWRQYXRoLCB1c2VMb2NhdGlvbiwgVU5TQUZFX0RhdGFSb3V0ZXJTdGF0ZUNvbnRleHQsIHVzZU5hdmlnYXRlLCBjcmVhdGVQYXRoLCBVTlNBRkVfTmF2aWdhdGlvbkNvbnRleHQsIFVOU0FGRV9Sb3V0ZUNvbnRleHQsIHVzZU1hdGNoZXMsIHVzZU5hdmlnYXRpb24sIFVOU0FGRV9EYXRhUm91dGVyQ29udGV4dCB9IGZyb20gJ3JlYWN0LXJvdXRlcic7XG5leHBvcnQgeyBBYm9ydGVkRGVmZXJyZWRFcnJvciwgQXdhaXQsIE1lbW9yeVJvdXRlciwgTmF2aWdhdGUsIE5hdmlnYXRpb25UeXBlLCBPdXRsZXQsIFJvdXRlLCBSb3V0ZXIsIFJvdXRlclByb3ZpZGVyLCBSb3V0ZXMsIFVOU0FGRV9EYXRhUm91dGVyQ29udGV4dCwgVU5TQUZFX0RhdGFSb3V0ZXJTdGF0ZUNvbnRleHQsIFVOU0FGRV9EYXRhU3RhdGljUm91dGVyQ29udGV4dCwgVU5TQUZFX0xvY2F0aW9uQ29udGV4dCwgVU5TQUZFX05hdmlnYXRpb25Db250ZXh0LCBVTlNBRkVfUm91dGVDb250ZXh0LCBVTlNBRkVfZW5oYW5jZU1hbnVhbFJvdXRlT2JqZWN0cywgY3JlYXRlTWVtb3J5Um91dGVyLCBjcmVhdGVQYXRoLCBjcmVhdGVSb3V0ZXNGcm9tQ2hpbGRyZW4sIGNyZWF0ZVJvdXRlc0Zyb21FbGVtZW50cywgZGVmZXIsIGdlbmVyYXRlUGF0aCwgaXNSb3V0ZUVycm9yUmVzcG9uc2UsIGpzb24sIG1hdGNoUGF0aCwgbWF0Y2hSb3V0ZXMsIHBhcnNlUGF0aCwgcmVkaXJlY3QsIHJlbmRlck1hdGNoZXMsIHJlc29sdmVQYXRoLCB1c2VBY3Rpb25EYXRhLCB1c2VBc3luY0Vycm9yLCB1c2VBc3luY1ZhbHVlLCB1c2VIcmVmLCB1c2VJblJvdXRlckNvbnRleHQsIHVzZUxvYWRlckRhdGEsIHVzZUxvY2F0aW9uLCB1c2VNYXRjaCwgdXNlTWF0Y2hlcywgdXNlTmF2aWdhdGUsIHVzZU5hdmlnYXRpb24sIHVzZU5hdmlnYXRpb25UeXBlLCB1c2VPdXRsZXQsIHVzZU91dGxldENvbnRleHQsIHVzZVBhcmFtcywgdXNlUmVzb2x2ZWRQYXRoLCB1c2VSZXZhbGlkYXRvciwgdXNlUm91dGVFcnJvciwgdXNlUm91dGVMb2FkZXJEYXRhLCB1c2VSb3V0ZXMgfSBmcm9tICdyZWFjdC1yb3V0ZXInO1xuaW1wb3J0IHsgY3JlYXRlUm91dGVyLCBjcmVhdGVCcm93c2VySGlzdG9yeSwgY3JlYXRlSGFzaEhpc3RvcnksIGludmFyaWFudCwgam9pblBhdGhzIH0gZnJvbSAnQHJlbWl4LXJ1bi9yb3V0ZXInO1xuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduID8gT2JqZWN0LmFzc2lnbi5iaW5kKCkgOiBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcbiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHtcbiAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307XG4gIHZhciB0YXJnZXQgPSB7fTtcbiAgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuICB2YXIga2V5LCBpO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAga2V5ID0gc291cmNlS2V5c1tpXTtcbiAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5jb25zdCBkZWZhdWx0TWV0aG9kID0gXCJnZXRcIjtcbmNvbnN0IGRlZmF1bHRFbmNUeXBlID0gXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIjtcbmZ1bmN0aW9uIGlzSHRtbEVsZW1lbnQob2JqZWN0KSB7XG4gIHJldHVybiBvYmplY3QgIT0gbnVsbCAmJiB0eXBlb2Ygb2JqZWN0LnRhZ05hbWUgPT09IFwic3RyaW5nXCI7XG59XG5mdW5jdGlvbiBpc0J1dHRvbkVsZW1lbnQob2JqZWN0KSB7XG4gIHJldHVybiBpc0h0bWxFbGVtZW50KG9iamVjdCkgJiYgb2JqZWN0LnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJidXR0b25cIjtcbn1cbmZ1bmN0aW9uIGlzRm9ybUVsZW1lbnQob2JqZWN0KSB7XG4gIHJldHVybiBpc0h0bWxFbGVtZW50KG9iamVjdCkgJiYgb2JqZWN0LnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJmb3JtXCI7XG59XG5mdW5jdGlvbiBpc0lucHV0RWxlbWVudChvYmplY3QpIHtcbiAgcmV0dXJuIGlzSHRtbEVsZW1lbnQob2JqZWN0KSAmJiBvYmplY3QudGFnTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImlucHV0XCI7XG59XG5cbmZ1bmN0aW9uIGlzTW9kaWZpZWRFdmVudChldmVudCkge1xuICByZXR1cm4gISEoZXZlbnQubWV0YUtleSB8fCBldmVudC5hbHRLZXkgfHwgZXZlbnQuY3RybEtleSB8fCBldmVudC5zaGlmdEtleSk7XG59XG5cbmZ1bmN0aW9uIHNob3VsZFByb2Nlc3NMaW5rQ2xpY2soZXZlbnQsIHRhcmdldCkge1xuICByZXR1cm4gZXZlbnQuYnV0dG9uID09PSAwICYmICggLy8gSWdub3JlIGV2ZXJ5dGhpbmcgYnV0IGxlZnQgY2xpY2tzXG4gICF0YXJnZXQgfHwgdGFyZ2V0ID09PSBcIl9zZWxmXCIpICYmIC8vIExldCBicm93c2VyIGhhbmRsZSBcInRhcmdldD1fYmxhbmtcIiBldGMuXG4gICFpc01vZGlmaWVkRXZlbnQoZXZlbnQpIC8vIElnbm9yZSBjbGlja3Mgd2l0aCBtb2RpZmllciBrZXlzXG4gIDtcbn1cbi8qKlxuICogQ3JlYXRlcyBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3QgdXNpbmcgdGhlIGdpdmVuIGluaXRpYWxpemVyLlxuICpcbiAqIFRoaXMgaXMgaWRlbnRpY2FsIHRvIGBuZXcgVVJMU2VhcmNoUGFyYW1zKGluaXQpYCBleGNlcHQgaXQgYWxzb1xuICogc3VwcG9ydHMgYXJyYXlzIGFzIHZhbHVlcyBpbiB0aGUgb2JqZWN0IGZvcm0gb2YgdGhlIGluaXRpYWxpemVyXG4gKiBpbnN0ZWFkIG9mIGp1c3Qgc3RyaW5ncy4gVGhpcyBpcyBjb252ZW5pZW50IHdoZW4geW91IG5lZWQgbXVsdGlwbGVcbiAqIHZhbHVlcyBmb3IgYSBnaXZlbiBrZXksIGJ1dCBkb24ndCB3YW50IHRvIHVzZSBhbiBhcnJheSBpbml0aWFsaXplci5cbiAqXG4gKiBGb3IgZXhhbXBsZSwgaW5zdGVhZCBvZjpcbiAqXG4gKiAgIGxldCBzZWFyY2hQYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKFtcbiAqICAgICBbJ3NvcnQnLCAnbmFtZSddLFxuICogICAgIFsnc29ydCcsICdwcmljZSddXG4gKiAgIF0pO1xuICpcbiAqIHlvdSBjYW4gZG86XG4gKlxuICogICBsZXQgc2VhcmNoUGFyYW1zID0gY3JlYXRlU2VhcmNoUGFyYW1zKHtcbiAqICAgICBzb3J0OiBbJ25hbWUnLCAncHJpY2UnXVxuICogICB9KTtcbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVTZWFyY2hQYXJhbXMoaW5pdCkge1xuICBpZiAoaW5pdCA9PT0gdm9pZCAwKSB7XG4gICAgaW5pdCA9IFwiXCI7XG4gIH1cblxuICByZXR1cm4gbmV3IFVSTFNlYXJjaFBhcmFtcyh0eXBlb2YgaW5pdCA9PT0gXCJzdHJpbmdcIiB8fCBBcnJheS5pc0FycmF5KGluaXQpIHx8IGluaXQgaW5zdGFuY2VvZiBVUkxTZWFyY2hQYXJhbXMgPyBpbml0IDogT2JqZWN0LmtleXMoaW5pdCkucmVkdWNlKChtZW1vLCBrZXkpID0+IHtcbiAgICBsZXQgdmFsdWUgPSBpbml0W2tleV07XG4gICAgcmV0dXJuIG1lbW8uY29uY2F0KEFycmF5LmlzQXJyYXkodmFsdWUpID8gdmFsdWUubWFwKHYgPT4gW2tleSwgdl0pIDogW1trZXksIHZhbHVlXV0pO1xuICB9LCBbXSkpO1xufVxuZnVuY3Rpb24gZ2V0U2VhcmNoUGFyYW1zRm9yTG9jYXRpb24obG9jYXRpb25TZWFyY2gsIGRlZmF1bHRTZWFyY2hQYXJhbXMpIHtcbiAgbGV0IHNlYXJjaFBhcmFtcyA9IGNyZWF0ZVNlYXJjaFBhcmFtcyhsb2NhdGlvblNlYXJjaCk7XG5cbiAgZm9yIChsZXQga2V5IG9mIGRlZmF1bHRTZWFyY2hQYXJhbXMua2V5cygpKSB7XG4gICAgaWYgKCFzZWFyY2hQYXJhbXMuaGFzKGtleSkpIHtcbiAgICAgIGRlZmF1bHRTZWFyY2hQYXJhbXMuZ2V0QWxsKGtleSkuZm9yRWFjaCh2YWx1ZSA9PiB7XG4gICAgICAgIHNlYXJjaFBhcmFtcy5hcHBlbmQoa2V5LCB2YWx1ZSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gc2VhcmNoUGFyYW1zO1xufVxuZnVuY3Rpb24gZ2V0Rm9ybVN1Ym1pc3Npb25JbmZvKHRhcmdldCwgZGVmYXVsdEFjdGlvbiwgb3B0aW9ucykge1xuICBsZXQgbWV0aG9kO1xuICBsZXQgYWN0aW9uO1xuICBsZXQgZW5jVHlwZTtcbiAgbGV0IGZvcm1EYXRhO1xuXG4gIGlmIChpc0Zvcm1FbGVtZW50KHRhcmdldCkpIHtcbiAgICBsZXQgc3VibWlzc2lvblRyaWdnZXIgPSBvcHRpb25zLnN1Ym1pc3Npb25UcmlnZ2VyO1xuICAgIG1ldGhvZCA9IG9wdGlvbnMubWV0aG9kIHx8IHRhcmdldC5nZXRBdHRyaWJ1dGUoXCJtZXRob2RcIikgfHwgZGVmYXVsdE1ldGhvZDtcbiAgICBhY3Rpb24gPSBvcHRpb25zLmFjdGlvbiB8fCB0YXJnZXQuZ2V0QXR0cmlidXRlKFwiYWN0aW9uXCIpIHx8IGRlZmF1bHRBY3Rpb247XG4gICAgZW5jVHlwZSA9IG9wdGlvbnMuZW5jVHlwZSB8fCB0YXJnZXQuZ2V0QXR0cmlidXRlKFwiZW5jdHlwZVwiKSB8fCBkZWZhdWx0RW5jVHlwZTtcbiAgICBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSh0YXJnZXQpO1xuXG4gICAgaWYgKHN1Ym1pc3Npb25UcmlnZ2VyICYmIHN1Ym1pc3Npb25UcmlnZ2VyLm5hbWUpIHtcbiAgICAgIGZvcm1EYXRhLmFwcGVuZChzdWJtaXNzaW9uVHJpZ2dlci5uYW1lLCBzdWJtaXNzaW9uVHJpZ2dlci52YWx1ZSk7XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzQnV0dG9uRWxlbWVudCh0YXJnZXQpIHx8IGlzSW5wdXRFbGVtZW50KHRhcmdldCkgJiYgKHRhcmdldC50eXBlID09PSBcInN1Ym1pdFwiIHx8IHRhcmdldC50eXBlID09PSBcImltYWdlXCIpKSB7XG4gICAgbGV0IGZvcm0gPSB0YXJnZXQuZm9ybTtcblxuICAgIGlmIChmb3JtID09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBzdWJtaXQgYSA8YnV0dG9uPiBvciA8aW5wdXQgdHlwZT1cXFwic3VibWl0XFxcIj4gd2l0aG91dCBhIDxmb3JtPlwiKTtcbiAgICB9IC8vIDxidXR0b24+LzxpbnB1dCB0eXBlPVwic3VibWl0XCI+IG1heSBvdmVycmlkZSBhdHRyaWJ1dGVzIG9mIDxmb3JtPlxuXG5cbiAgICBtZXRob2QgPSBvcHRpb25zLm1ldGhvZCB8fCB0YXJnZXQuZ2V0QXR0cmlidXRlKFwiZm9ybW1ldGhvZFwiKSB8fCBmb3JtLmdldEF0dHJpYnV0ZShcIm1ldGhvZFwiKSB8fCBkZWZhdWx0TWV0aG9kO1xuICAgIGFjdGlvbiA9IG9wdGlvbnMuYWN0aW9uIHx8IHRhcmdldC5nZXRBdHRyaWJ1dGUoXCJmb3JtYWN0aW9uXCIpIHx8IGZvcm0uZ2V0QXR0cmlidXRlKFwiYWN0aW9uXCIpIHx8IGRlZmF1bHRBY3Rpb247XG4gICAgZW5jVHlwZSA9IG9wdGlvbnMuZW5jVHlwZSB8fCB0YXJnZXQuZ2V0QXR0cmlidXRlKFwiZm9ybWVuY3R5cGVcIikgfHwgZm9ybS5nZXRBdHRyaWJ1dGUoXCJlbmN0eXBlXCIpIHx8IGRlZmF1bHRFbmNUeXBlO1xuICAgIGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKGZvcm0pOyAvLyBJbmNsdWRlIG5hbWUgKyB2YWx1ZSBmcm9tIGEgPGJ1dHRvbj4sIGFwcGVuZGluZyBpbiBjYXNlIHRoZSBidXR0b24gbmFtZVxuICAgIC8vIG1hdGNoZXMgYW4gZXhpc3RpbmcgaW5wdXQgbmFtZVxuXG4gICAgaWYgKHRhcmdldC5uYW1lKSB7XG4gICAgICBmb3JtRGF0YS5hcHBlbmQodGFyZ2V0Lm5hbWUsIHRhcmdldC52YWx1ZSk7XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzSHRtbEVsZW1lbnQodGFyZ2V0KSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBzdWJtaXQgZWxlbWVudCB0aGF0IGlzIG5vdCA8Zm9ybT4sIDxidXR0b24+LCBvciBcIiArIFwiPGlucHV0IHR5cGU9XFxcInN1Ym1pdHxpbWFnZVxcXCI+XCIpO1xuICB9IGVsc2Uge1xuICAgIG1ldGhvZCA9IG9wdGlvbnMubWV0aG9kIHx8IGRlZmF1bHRNZXRob2Q7XG4gICAgYWN0aW9uID0gb3B0aW9ucy5hY3Rpb24gfHwgZGVmYXVsdEFjdGlvbjtcbiAgICBlbmNUeXBlID0gb3B0aW9ucy5lbmNUeXBlIHx8IGRlZmF1bHRFbmNUeXBlO1xuXG4gICAgaWYgKHRhcmdldCBpbnN0YW5jZW9mIEZvcm1EYXRhKSB7XG4gICAgICBmb3JtRGF0YSA9IHRhcmdldDtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoKTtcblxuICAgICAgaWYgKHRhcmdldCBpbnN0YW5jZW9mIFVSTFNlYXJjaFBhcmFtcykge1xuICAgICAgICBmb3IgKGxldCBbbmFtZSwgdmFsdWVdIG9mIHRhcmdldCkge1xuICAgICAgICAgIGZvcm1EYXRhLmFwcGVuZChuYW1lLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodGFyZ2V0ICE9IG51bGwpIHtcbiAgICAgICAgZm9yIChsZXQgbmFtZSBvZiBPYmplY3Qua2V5cyh0YXJnZXQpKSB7XG4gICAgICAgICAgZm9ybURhdGEuYXBwZW5kKG5hbWUsIHRhcmdldFtuYW1lXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBsZXQge1xuICAgIHByb3RvY29sLFxuICAgIGhvc3RcbiAgfSA9IHdpbmRvdy5sb2NhdGlvbjtcbiAgbGV0IHVybCA9IG5ldyBVUkwoYWN0aW9uLCBwcm90b2NvbCArIFwiLy9cIiArIGhvc3QpO1xuICByZXR1cm4ge1xuICAgIHVybCxcbiAgICBtZXRob2QsXG4gICAgZW5jVHlwZSxcbiAgICBmb3JtRGF0YVxuICB9O1xufVxuXG5jb25zdCBfZXhjbHVkZWQgPSBbXCJvbkNsaWNrXCIsIFwicmVsYXRpdmVcIiwgXCJyZWxvYWREb2N1bWVudFwiLCBcInJlcGxhY2VcIiwgXCJzdGF0ZVwiLCBcInRhcmdldFwiLCBcInRvXCIsIFwicHJldmVudFNjcm9sbFJlc2V0XCJdLFxuICAgICAgX2V4Y2x1ZGVkMiA9IFtcImFyaWEtY3VycmVudFwiLCBcImNhc2VTZW5zaXRpdmVcIiwgXCJjbGFzc05hbWVcIiwgXCJlbmRcIiwgXCJzdHlsZVwiLCBcInRvXCIsIFwiY2hpbGRyZW5cIl0sXG4gICAgICBfZXhjbHVkZWQzID0gW1wicmVsb2FkRG9jdW1lbnRcIiwgXCJyZXBsYWNlXCIsIFwibWV0aG9kXCIsIFwiYWN0aW9uXCIsIFwib25TdWJtaXRcIiwgXCJmZXRjaGVyS2V5XCIsIFwicm91dGVJZFwiLCBcInJlbGF0aXZlXCJdO1xuLy8jcmVnaW9uIFJvdXRlcnNcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbmZ1bmN0aW9uIGNyZWF0ZUJyb3dzZXJSb3V0ZXIocm91dGVzLCBvcHRzKSB7XG4gIHZhciBfd2luZG93O1xuXG4gIHJldHVybiBjcmVhdGVSb3V0ZXIoe1xuICAgIGJhc2VuYW1lOiBvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLmJhc2VuYW1lLFxuICAgIGhpc3Rvcnk6IGNyZWF0ZUJyb3dzZXJIaXN0b3J5KHtcbiAgICAgIHdpbmRvdzogb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy53aW5kb3dcbiAgICB9KSxcbiAgICBoeWRyYXRpb25EYXRhOiAob3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5oeWRyYXRpb25EYXRhKSB8fCAoKF93aW5kb3cgPSB3aW5kb3cpID09IG51bGwgPyB2b2lkIDAgOiBfd2luZG93Ll9fc3RhdGljUm91dGVySHlkcmF0aW9uRGF0YSksXG4gICAgcm91dGVzOiBVTlNBRkVfZW5oYW5jZU1hbnVhbFJvdXRlT2JqZWN0cyhyb3V0ZXMpXG4gIH0pLmluaXRpYWxpemUoKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUhhc2hSb3V0ZXIocm91dGVzLCBvcHRzKSB7XG4gIHZhciBfd2luZG93MjtcblxuICByZXR1cm4gY3JlYXRlUm91dGVyKHtcbiAgICBiYXNlbmFtZTogb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5iYXNlbmFtZSxcbiAgICBoaXN0b3J5OiBjcmVhdGVIYXNoSGlzdG9yeSh7XG4gICAgICB3aW5kb3c6IG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMud2luZG93XG4gICAgfSksXG4gICAgaHlkcmF0aW9uRGF0YTogKG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMuaHlkcmF0aW9uRGF0YSkgfHwgKChfd2luZG93MiA9IHdpbmRvdykgPT0gbnVsbCA/IHZvaWQgMCA6IF93aW5kb3cyLl9fc3RhdGljUm91dGVySHlkcmF0aW9uRGF0YSksXG4gICAgcm91dGVzOiBVTlNBRkVfZW5oYW5jZU1hbnVhbFJvdXRlT2JqZWN0cyhyb3V0ZXMpXG4gIH0pLmluaXRpYWxpemUoKTtcbn1cbi8qKlxuICogQSBgPFJvdXRlcj5gIGZvciB1c2UgaW4gd2ViIGJyb3dzZXJzLiBQcm92aWRlcyB0aGUgY2xlYW5lc3QgVVJMcy5cbiAqL1xuXG5mdW5jdGlvbiBCcm93c2VyUm91dGVyKF9yZWYpIHtcbiAgbGV0IHtcbiAgICBiYXNlbmFtZSxcbiAgICBjaGlsZHJlbixcbiAgICB3aW5kb3dcbiAgfSA9IF9yZWY7XG4gIGxldCBoaXN0b3J5UmVmID0gUmVhY3QudXNlUmVmKCk7XG5cbiAgaWYgKGhpc3RvcnlSZWYuY3VycmVudCA9PSBudWxsKSB7XG4gICAgaGlzdG9yeVJlZi5jdXJyZW50ID0gY3JlYXRlQnJvd3Nlckhpc3Rvcnkoe1xuICAgICAgd2luZG93LFxuICAgICAgdjVDb21wYXQ6IHRydWVcbiAgICB9KTtcbiAgfVxuXG4gIGxldCBoaXN0b3J5ID0gaGlzdG9yeVJlZi5jdXJyZW50O1xuICBsZXQgW3N0YXRlLCBzZXRTdGF0ZV0gPSBSZWFjdC51c2VTdGF0ZSh7XG4gICAgYWN0aW9uOiBoaXN0b3J5LmFjdGlvbixcbiAgICBsb2NhdGlvbjogaGlzdG9yeS5sb2NhdGlvblxuICB9KTtcbiAgUmVhY3QudXNlTGF5b3V0RWZmZWN0KCgpID0+IGhpc3RvcnkubGlzdGVuKHNldFN0YXRlKSwgW2hpc3RvcnldKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwge1xuICAgIGJhc2VuYW1lOiBiYXNlbmFtZSxcbiAgICBjaGlsZHJlbjogY2hpbGRyZW4sXG4gICAgbG9jYXRpb246IHN0YXRlLmxvY2F0aW9uLFxuICAgIG5hdmlnYXRpb25UeXBlOiBzdGF0ZS5hY3Rpb24sXG4gICAgbmF2aWdhdG9yOiBoaXN0b3J5XG4gIH0pO1xufVxuLyoqXG4gKiBBIGA8Um91dGVyPmAgZm9yIHVzZSBpbiB3ZWIgYnJvd3NlcnMuIFN0b3JlcyB0aGUgbG9jYXRpb24gaW4gdGhlIGhhc2hcbiAqIHBvcnRpb24gb2YgdGhlIFVSTCBzbyBpdCBpcyBub3Qgc2VudCB0byB0aGUgc2VydmVyLlxuICovXG5cbmZ1bmN0aW9uIEhhc2hSb3V0ZXIoX3JlZjIpIHtcbiAgbGV0IHtcbiAgICBiYXNlbmFtZSxcbiAgICBjaGlsZHJlbixcbiAgICB3aW5kb3dcbiAgfSA9IF9yZWYyO1xuICBsZXQgaGlzdG9yeVJlZiA9IFJlYWN0LnVzZVJlZigpO1xuXG4gIGlmIChoaXN0b3J5UmVmLmN1cnJlbnQgPT0gbnVsbCkge1xuICAgIGhpc3RvcnlSZWYuY3VycmVudCA9IGNyZWF0ZUhhc2hIaXN0b3J5KHtcbiAgICAgIHdpbmRvdyxcbiAgICAgIHY1Q29tcGF0OiB0cnVlXG4gICAgfSk7XG4gIH1cblxuICBsZXQgaGlzdG9yeSA9IGhpc3RvcnlSZWYuY3VycmVudDtcbiAgbGV0IFtzdGF0ZSwgc2V0U3RhdGVdID0gUmVhY3QudXNlU3RhdGUoe1xuICAgIGFjdGlvbjogaGlzdG9yeS5hY3Rpb24sXG4gICAgbG9jYXRpb246IGhpc3RvcnkubG9jYXRpb25cbiAgfSk7XG4gIFJlYWN0LnVzZUxheW91dEVmZmVjdCgoKSA9PiBoaXN0b3J5Lmxpc3RlbihzZXRTdGF0ZSksIFtoaXN0b3J5XSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHtcbiAgICBiYXNlbmFtZTogYmFzZW5hbWUsXG4gICAgY2hpbGRyZW46IGNoaWxkcmVuLFxuICAgIGxvY2F0aW9uOiBzdGF0ZS5sb2NhdGlvbixcbiAgICBuYXZpZ2F0aW9uVHlwZTogc3RhdGUuYWN0aW9uLFxuICAgIG5hdmlnYXRvcjogaGlzdG9yeVxuICB9KTtcbn1cbi8qKlxuICogQSBgPFJvdXRlcj5gIHRoYXQgYWNjZXB0cyBhIHByZS1pbnN0YW50aWF0ZWQgaGlzdG9yeSBvYmplY3QuIEl0J3MgaW1wb3J0YW50XG4gKiB0byBub3RlIHRoYXQgdXNpbmcgeW91ciBvd24gaGlzdG9yeSBvYmplY3QgaXMgaGlnaGx5IGRpc2NvdXJhZ2VkIGFuZCBtYXkgYWRkXG4gKiB0d28gdmVyc2lvbnMgb2YgdGhlIGhpc3RvcnkgbGlicmFyeSB0byB5b3VyIGJ1bmRsZXMgdW5sZXNzIHlvdSB1c2UgdGhlIHNhbWVcbiAqIHZlcnNpb24gb2YgdGhlIGhpc3RvcnkgbGlicmFyeSB0aGF0IFJlYWN0IFJvdXRlciB1c2VzIGludGVybmFsbHkuXG4gKi9cblxuZnVuY3Rpb24gSGlzdG9yeVJvdXRlcihfcmVmMykge1xuICBsZXQge1xuICAgIGJhc2VuYW1lLFxuICAgIGNoaWxkcmVuLFxuICAgIGhpc3RvcnlcbiAgfSA9IF9yZWYzO1xuICBjb25zdCBbc3RhdGUsIHNldFN0YXRlXSA9IFJlYWN0LnVzZVN0YXRlKHtcbiAgICBhY3Rpb246IGhpc3RvcnkuYWN0aW9uLFxuICAgIGxvY2F0aW9uOiBoaXN0b3J5LmxvY2F0aW9uXG4gIH0pO1xuICBSZWFjdC51c2VMYXlvdXRFZmZlY3QoKCkgPT4gaGlzdG9yeS5saXN0ZW4oc2V0U3RhdGUpLCBbaGlzdG9yeV0pO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCB7XG4gICAgYmFzZW5hbWU6IGJhc2VuYW1lLFxuICAgIGNoaWxkcmVuOiBjaGlsZHJlbixcbiAgICBsb2NhdGlvbjogc3RhdGUubG9jYXRpb24sXG4gICAgbmF2aWdhdGlvblR5cGU6IHN0YXRlLmFjdGlvbixcbiAgICBuYXZpZ2F0b3I6IGhpc3RvcnlcbiAgfSk7XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgSGlzdG9yeVJvdXRlci5kaXNwbGF5TmFtZSA9IFwidW5zdGFibGVfSGlzdG9yeVJvdXRlclwiO1xufVxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgcmVuZGVyaW5nIGEgaGlzdG9yeS1hd2FyZSA8YT4uXG4gKi9cblxuY29uc3QgTGluayA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIExpbmtXaXRoUmVmKF9yZWY0LCByZWYpIHtcbiAgbGV0IHtcbiAgICBvbkNsaWNrLFxuICAgIHJlbGF0aXZlLFxuICAgIHJlbG9hZERvY3VtZW50LFxuICAgIHJlcGxhY2UsXG4gICAgc3RhdGUsXG4gICAgdGFyZ2V0LFxuICAgIHRvLFxuICAgIHByZXZlbnRTY3JvbGxSZXNldFxuICB9ID0gX3JlZjQsXG4gICAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZjQsIF9leGNsdWRlZCk7XG5cbiAgbGV0IGhyZWYgPSB1c2VIcmVmKHRvLCB7XG4gICAgcmVsYXRpdmVcbiAgfSk7XG4gIGxldCBpbnRlcm5hbE9uQ2xpY2sgPSB1c2VMaW5rQ2xpY2tIYW5kbGVyKHRvLCB7XG4gICAgcmVwbGFjZSxcbiAgICBzdGF0ZSxcbiAgICB0YXJnZXQsXG4gICAgcHJldmVudFNjcm9sbFJlc2V0LFxuICAgIHJlbGF0aXZlXG4gIH0pO1xuXG4gIGZ1bmN0aW9uIGhhbmRsZUNsaWNrKGV2ZW50KSB7XG4gICAgaWYgKG9uQ2xpY2spIG9uQ2xpY2soZXZlbnQpO1xuXG4gICAgaWYgKCFldmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICBpbnRlcm5hbE9uQ2xpY2soZXZlbnQpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiAoXG4gICAgLyojX19QVVJFX18qL1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBqc3gtYTExeS9hbmNob3ItaGFzLWNvbnRlbnRcbiAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwiYVwiLCBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgICAgaHJlZjogaHJlZixcbiAgICAgIG9uQ2xpY2s6IHJlbG9hZERvY3VtZW50ID8gb25DbGljayA6IGhhbmRsZUNsaWNrLFxuICAgICAgcmVmOiByZWYsXG4gICAgICB0YXJnZXQ6IHRhcmdldFxuICAgIH0pKVxuICApO1xufSk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgTGluay5kaXNwbGF5TmFtZSA9IFwiTGlua1wiO1xufVxuLyoqXG4gKiBBIDxMaW5rPiB3cmFwcGVyIHRoYXQga25vd3MgaWYgaXQncyBcImFjdGl2ZVwiIG9yIG5vdC5cbiAqL1xuXG5cbmNvbnN0IE5hdkxpbmsgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBOYXZMaW5rV2l0aFJlZihfcmVmNSwgcmVmKSB7XG4gIGxldCB7XG4gICAgXCJhcmlhLWN1cnJlbnRcIjogYXJpYUN1cnJlbnRQcm9wID0gXCJwYWdlXCIsXG4gICAgY2FzZVNlbnNpdGl2ZSA9IGZhbHNlLFxuICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lUHJvcCA9IFwiXCIsXG4gICAgZW5kID0gZmFsc2UsXG4gICAgc3R5bGU6IHN0eWxlUHJvcCxcbiAgICB0byxcbiAgICBjaGlsZHJlblxuICB9ID0gX3JlZjUsXG4gICAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZjUsIF9leGNsdWRlZDIpO1xuXG4gIGxldCBwYXRoID0gdXNlUmVzb2x2ZWRQYXRoKHRvLCB7XG4gICAgcmVsYXRpdmU6IHJlc3QucmVsYXRpdmVcbiAgfSk7XG4gIGxldCBsb2NhdGlvbiA9IHVzZUxvY2F0aW9uKCk7XG4gIGxldCByb3V0ZXJTdGF0ZSA9IFJlYWN0LnVzZUNvbnRleHQoVU5TQUZFX0RhdGFSb3V0ZXJTdGF0ZUNvbnRleHQpO1xuICBsZXQgdG9QYXRobmFtZSA9IHBhdGgucGF0aG5hbWU7XG4gIGxldCBsb2NhdGlvblBhdGhuYW1lID0gbG9jYXRpb24ucGF0aG5hbWU7XG4gIGxldCBuZXh0TG9jYXRpb25QYXRobmFtZSA9IHJvdXRlclN0YXRlICYmIHJvdXRlclN0YXRlLm5hdmlnYXRpb24gJiYgcm91dGVyU3RhdGUubmF2aWdhdGlvbi5sb2NhdGlvbiA/IHJvdXRlclN0YXRlLm5hdmlnYXRpb24ubG9jYXRpb24ucGF0aG5hbWUgOiBudWxsO1xuXG4gIGlmICghY2FzZVNlbnNpdGl2ZSkge1xuICAgIGxvY2F0aW9uUGF0aG5hbWUgPSBsb2NhdGlvblBhdGhuYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgbmV4dExvY2F0aW9uUGF0aG5hbWUgPSBuZXh0TG9jYXRpb25QYXRobmFtZSA/IG5leHRMb2NhdGlvblBhdGhuYW1lLnRvTG93ZXJDYXNlKCkgOiBudWxsO1xuICAgIHRvUGF0aG5hbWUgPSB0b1BhdGhuYW1lLnRvTG93ZXJDYXNlKCk7XG4gIH1cblxuICBsZXQgaXNBY3RpdmUgPSBsb2NhdGlvblBhdGhuYW1lID09PSB0b1BhdGhuYW1lIHx8ICFlbmQgJiYgbG9jYXRpb25QYXRobmFtZS5zdGFydHNXaXRoKHRvUGF0aG5hbWUpICYmIGxvY2F0aW9uUGF0aG5hbWUuY2hhckF0KHRvUGF0aG5hbWUubGVuZ3RoKSA9PT0gXCIvXCI7XG4gIGxldCBpc1BlbmRpbmcgPSBuZXh0TG9jYXRpb25QYXRobmFtZSAhPSBudWxsICYmIChuZXh0TG9jYXRpb25QYXRobmFtZSA9PT0gdG9QYXRobmFtZSB8fCAhZW5kICYmIG5leHRMb2NhdGlvblBhdGhuYW1lLnN0YXJ0c1dpdGgodG9QYXRobmFtZSkgJiYgbmV4dExvY2F0aW9uUGF0aG5hbWUuY2hhckF0KHRvUGF0aG5hbWUubGVuZ3RoKSA9PT0gXCIvXCIpO1xuICBsZXQgYXJpYUN1cnJlbnQgPSBpc0FjdGl2ZSA/IGFyaWFDdXJyZW50UHJvcCA6IHVuZGVmaW5lZDtcbiAgbGV0IGNsYXNzTmFtZTtcblxuICBpZiAodHlwZW9mIGNsYXNzTmFtZVByb3AgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGNsYXNzTmFtZSA9IGNsYXNzTmFtZVByb3Aoe1xuICAgICAgaXNBY3RpdmUsXG4gICAgICBpc1BlbmRpbmdcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICAvLyBJZiB0aGUgY2xhc3NOYW1lIHByb3AgaXMgbm90IGEgZnVuY3Rpb24sIHdlIHVzZSBhIGRlZmF1bHQgYGFjdGl2ZWBcbiAgICAvLyBjbGFzcyBmb3IgPE5hdkxpbmsgLz5zIHRoYXQgYXJlIGFjdGl2ZS4gSW4gdjUgYGFjdGl2ZWAgd2FzIHRoZSBkZWZhdWx0XG4gICAgLy8gdmFsdWUgZm9yIGBhY3RpdmVDbGFzc05hbWVgLCBidXQgd2UgYXJlIHJlbW92aW5nIHRoYXQgQVBJIGFuZCBjYW4gc3RpbGxcbiAgICAvLyB1c2UgdGhlIG9sZCBkZWZhdWx0IGJlaGF2aW9yIGZvciBhIGNsZWFuZXIgdXBncmFkZSBwYXRoIGFuZCBrZWVwIHRoZVxuICAgIC8vIHNpbXBsZSBzdHlsaW5nIHJ1bGVzIHdvcmtpbmcgYXMgdGhleSBjdXJyZW50bHkgZG8uXG4gICAgY2xhc3NOYW1lID0gW2NsYXNzTmFtZVByb3AsIGlzQWN0aXZlID8gXCJhY3RpdmVcIiA6IG51bGwsIGlzUGVuZGluZyA/IFwicGVuZGluZ1wiIDogbnVsbF0uZmlsdGVyKEJvb2xlYW4pLmpvaW4oXCIgXCIpO1xuICB9XG5cbiAgbGV0IHN0eWxlID0gdHlwZW9mIHN0eWxlUHJvcCA9PT0gXCJmdW5jdGlvblwiID8gc3R5bGVQcm9wKHtcbiAgICBpc0FjdGl2ZSxcbiAgICBpc1BlbmRpbmdcbiAgfSkgOiBzdHlsZVByb3A7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChMaW5rLCBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgIFwiYXJpYS1jdXJyZW50XCI6IGFyaWFDdXJyZW50LFxuICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lLFxuICAgIHJlZjogcmVmLFxuICAgIHN0eWxlOiBzdHlsZSxcbiAgICB0bzogdG9cbiAgfSksIHR5cGVvZiBjaGlsZHJlbiA9PT0gXCJmdW5jdGlvblwiID8gY2hpbGRyZW4oe1xuICAgIGlzQWN0aXZlLFxuICAgIGlzUGVuZGluZ1xuICB9KSA6IGNoaWxkcmVuKTtcbn0pO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIE5hdkxpbmsuZGlzcGxheU5hbWUgPSBcIk5hdkxpbmtcIjtcbn1cbi8qKlxuICogQSBgQHJlbWl4LXJ1bi9yb3V0ZXJgLWF3YXJlIGA8Zm9ybT5gLiBJdCBiZWhhdmVzIGxpa2UgYSBub3JtYWwgZm9ybSBleGNlcHRcbiAqIHRoYXQgdGhlIGludGVyYWN0aW9uIHdpdGggdGhlIHNlcnZlciBpcyB3aXRoIGBmZXRjaGAgaW5zdGVhZCBvZiBuZXcgZG9jdW1lbnRcbiAqIHJlcXVlc3RzLCBhbGxvd2luZyBjb21wb25lbnRzIHRvIGFkZCBuaWNlciBVWCB0byB0aGUgcGFnZSBhcyB0aGUgZm9ybSBpc1xuICogc3VibWl0dGVkIGFuZCByZXR1cm5zIHdpdGggZGF0YS5cbiAqL1xuXG5cbmNvbnN0IEZvcm0gPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZigocHJvcHMsIHJlZikgPT4ge1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoRm9ybUltcGwsIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIHJlZjogcmVmXG4gIH0pKTtcbn0pO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIEZvcm0uZGlzcGxheU5hbWUgPSBcIkZvcm1cIjtcbn1cblxuY29uc3QgRm9ybUltcGwgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZigoX3JlZjYsIGZvcndhcmRlZFJlZikgPT4ge1xuICBsZXQge1xuICAgIHJlbG9hZERvY3VtZW50LFxuICAgIHJlcGxhY2UsXG4gICAgbWV0aG9kID0gZGVmYXVsdE1ldGhvZCxcbiAgICBhY3Rpb24sXG4gICAgb25TdWJtaXQsXG4gICAgZmV0Y2hlcktleSxcbiAgICByb3V0ZUlkLFxuICAgIHJlbGF0aXZlXG4gIH0gPSBfcmVmNixcbiAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZjYsIF9leGNsdWRlZDMpO1xuXG4gIGxldCBzdWJtaXQgPSB1c2VTdWJtaXRJbXBsKGZldGNoZXJLZXksIHJvdXRlSWQpO1xuICBsZXQgZm9ybU1ldGhvZCA9IG1ldGhvZC50b0xvd2VyQ2FzZSgpID09PSBcImdldFwiID8gXCJnZXRcIiA6IFwicG9zdFwiO1xuICBsZXQgZm9ybUFjdGlvbiA9IHVzZUZvcm1BY3Rpb24oYWN0aW9uLCB7XG4gICAgcmVsYXRpdmVcbiAgfSk7XG5cbiAgbGV0IHN1Ym1pdEhhbmRsZXIgPSBldmVudCA9PiB7XG4gICAgb25TdWJtaXQgJiYgb25TdWJtaXQoZXZlbnQpO1xuICAgIGlmIChldmVudC5kZWZhdWx0UHJldmVudGVkKSByZXR1cm47XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICBsZXQgc3VibWl0dGVyID0gZXZlbnQubmF0aXZlRXZlbnQuc3VibWl0dGVyO1xuICAgIHN1Ym1pdChzdWJtaXR0ZXIgfHwgZXZlbnQuY3VycmVudFRhcmdldCwge1xuICAgICAgbWV0aG9kLFxuICAgICAgcmVwbGFjZSxcbiAgICAgIHJlbGF0aXZlXG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZm9ybVwiLCBfZXh0ZW5kcyh7XG4gICAgcmVmOiBmb3J3YXJkZWRSZWYsXG4gICAgbWV0aG9kOiBmb3JtTWV0aG9kLFxuICAgIGFjdGlvbjogZm9ybUFjdGlvbixcbiAgICBvblN1Ym1pdDogcmVsb2FkRG9jdW1lbnQgPyBvblN1Ym1pdCA6IHN1Ym1pdEhhbmRsZXJcbiAgfSwgcHJvcHMpKTtcbn0pO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIEZvcm0uZGlzcGxheU5hbWUgPSBcIkZvcm1cIjtcbn1cbi8qKlxuICogVGhpcyBjb21wb25lbnQgd2lsbCBlbXVsYXRlIHRoZSBicm93c2VyJ3Mgc2Nyb2xsIHJlc3RvcmF0aW9uIG9uIGxvY2F0aW9uXG4gKiBjaGFuZ2VzLlxuICovXG5cblxuZnVuY3Rpb24gU2Nyb2xsUmVzdG9yYXRpb24oX3JlZjcpIHtcbiAgbGV0IHtcbiAgICBnZXRLZXksXG4gICAgc3RvcmFnZUtleVxuICB9ID0gX3JlZjc7XG4gIHVzZVNjcm9sbFJlc3RvcmF0aW9uKHtcbiAgICBnZXRLZXksXG4gICAgc3RvcmFnZUtleVxuICB9KTtcbiAgcmV0dXJuIG51bGw7XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgU2Nyb2xsUmVzdG9yYXRpb24uZGlzcGxheU5hbWUgPSBcIlNjcm9sbFJlc3RvcmF0aW9uXCI7XG59IC8vI2VuZHJlZ2lvblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vI3JlZ2lvbiBIb29rc1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuXG52YXIgRGF0YVJvdXRlckhvb2s7XG5cbihmdW5jdGlvbiAoRGF0YVJvdXRlckhvb2spIHtcbiAgRGF0YVJvdXRlckhvb2tbXCJVc2VTY3JvbGxSZXN0b3JhdGlvblwiXSA9IFwidXNlU2Nyb2xsUmVzdG9yYXRpb25cIjtcbiAgRGF0YVJvdXRlckhvb2tbXCJVc2VTdWJtaXRJbXBsXCJdID0gXCJ1c2VTdWJtaXRJbXBsXCI7XG4gIERhdGFSb3V0ZXJIb29rW1wiVXNlRmV0Y2hlclwiXSA9IFwidXNlRmV0Y2hlclwiO1xufSkoRGF0YVJvdXRlckhvb2sgfHwgKERhdGFSb3V0ZXJIb29rID0ge30pKTtcblxudmFyIERhdGFSb3V0ZXJTdGF0ZUhvb2s7XG5cbihmdW5jdGlvbiAoRGF0YVJvdXRlclN0YXRlSG9vaykge1xuICBEYXRhUm91dGVyU3RhdGVIb29rW1wiVXNlRmV0Y2hlcnNcIl0gPSBcInVzZUZldGNoZXJzXCI7XG4gIERhdGFSb3V0ZXJTdGF0ZUhvb2tbXCJVc2VTY3JvbGxSZXN0b3JhdGlvblwiXSA9IFwidXNlU2Nyb2xsUmVzdG9yYXRpb25cIjtcbn0pKERhdGFSb3V0ZXJTdGF0ZUhvb2sgfHwgKERhdGFSb3V0ZXJTdGF0ZUhvb2sgPSB7fSkpO1xuXG5mdW5jdGlvbiBnZXREYXRhUm91dGVyQ29uc29sZUVycm9yKGhvb2tOYW1lKSB7XG4gIHJldHVybiBob29rTmFtZSArIFwiIG11c3QgYmUgdXNlZCB3aXRoaW4gYSBkYXRhIHJvdXRlci4gIFNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9lbi9tYWluL3JvdXRlcnMvcGlja2luZy1hLXJvdXRlci5cIjtcbn1cblxuZnVuY3Rpb24gdXNlRGF0YVJvdXRlckNvbnRleHQoaG9va05hbWUpIHtcbiAgbGV0IGN0eCA9IFJlYWN0LnVzZUNvbnRleHQoVU5TQUZFX0RhdGFSb3V0ZXJDb250ZXh0KTtcbiAgIWN0eCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgZ2V0RGF0YVJvdXRlckNvbnNvbGVFcnJvcihob29rTmFtZSkpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgcmV0dXJuIGN0eDtcbn1cblxuZnVuY3Rpb24gdXNlRGF0YVJvdXRlclN0YXRlKGhvb2tOYW1lKSB7XG4gIGxldCBzdGF0ZSA9IFJlYWN0LnVzZUNvbnRleHQoVU5TQUZFX0RhdGFSb3V0ZXJTdGF0ZUNvbnRleHQpO1xuICAhc3RhdGUgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIGdldERhdGFSb3V0ZXJDb25zb2xlRXJyb3IoaG9va05hbWUpKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHJldHVybiBzdGF0ZTtcbn1cbi8qKlxuICogSGFuZGxlcyB0aGUgY2xpY2sgYmVoYXZpb3IgZm9yIHJvdXRlciBgPExpbms+YCBjb21wb25lbnRzLiBUaGlzIGlzIHVzZWZ1bCBpZlxuICogeW91IG5lZWQgdG8gY3JlYXRlIGN1c3RvbSBgPExpbms+YCBjb21wb25lbnRzIHdpdGggdGhlIHNhbWUgY2xpY2sgYmVoYXZpb3Igd2VcbiAqIHVzZSBpbiBvdXIgZXhwb3J0ZWQgYDxMaW5rPmAuXG4gKi9cblxuXG5mdW5jdGlvbiB1c2VMaW5rQ2xpY2tIYW5kbGVyKHRvLCBfdGVtcCkge1xuICBsZXQge1xuICAgIHRhcmdldCxcbiAgICByZXBsYWNlOiByZXBsYWNlUHJvcCxcbiAgICBzdGF0ZSxcbiAgICBwcmV2ZW50U2Nyb2xsUmVzZXQsXG4gICAgcmVsYXRpdmVcbiAgfSA9IF90ZW1wID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wO1xuICBsZXQgbmF2aWdhdGUgPSB1c2VOYXZpZ2F0ZSgpO1xuICBsZXQgbG9jYXRpb24gPSB1c2VMb2NhdGlvbigpO1xuICBsZXQgcGF0aCA9IHVzZVJlc29sdmVkUGF0aCh0bywge1xuICAgIHJlbGF0aXZlXG4gIH0pO1xuICByZXR1cm4gUmVhY3QudXNlQ2FsbGJhY2soZXZlbnQgPT4ge1xuICAgIGlmIChzaG91bGRQcm9jZXNzTGlua0NsaWNrKGV2ZW50LCB0YXJnZXQpKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpOyAvLyBJZiB0aGUgVVJMIGhhc24ndCBjaGFuZ2VkLCBhIHJlZ3VsYXIgPGE+IHdpbGwgZG8gYSByZXBsYWNlIGluc3RlYWQgb2ZcbiAgICAgIC8vIGEgcHVzaCwgc28gZG8gdGhlIHNhbWUgaGVyZSB1bmxlc3MgdGhlIHJlcGxhY2UgcHJvcCBpcyBleHBsaWNpdGx5IHNldFxuXG4gICAgICBsZXQgcmVwbGFjZSA9IHJlcGxhY2VQcm9wICE9PSB1bmRlZmluZWQgPyByZXBsYWNlUHJvcCA6IGNyZWF0ZVBhdGgobG9jYXRpb24pID09PSBjcmVhdGVQYXRoKHBhdGgpO1xuICAgICAgbmF2aWdhdGUodG8sIHtcbiAgICAgICAgcmVwbGFjZSxcbiAgICAgICAgc3RhdGUsXG4gICAgICAgIHByZXZlbnRTY3JvbGxSZXNldCxcbiAgICAgICAgcmVsYXRpdmVcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwgW2xvY2F0aW9uLCBuYXZpZ2F0ZSwgcGF0aCwgcmVwbGFjZVByb3AsIHN0YXRlLCB0YXJnZXQsIHRvLCBwcmV2ZW50U2Nyb2xsUmVzZXQsIHJlbGF0aXZlXSk7XG59XG4vKipcbiAqIEEgY29udmVuaWVudCB3cmFwcGVyIGZvciByZWFkaW5nIGFuZCB3cml0aW5nIHNlYXJjaCBwYXJhbWV0ZXJzIHZpYSB0aGVcbiAqIFVSTFNlYXJjaFBhcmFtcyBpbnRlcmZhY2UuXG4gKi9cblxuZnVuY3Rpb24gdXNlU2VhcmNoUGFyYW1zKGRlZmF1bHRJbml0KSB7XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcodHlwZW9mIFVSTFNlYXJjaFBhcmFtcyAhPT0gXCJ1bmRlZmluZWRcIiwgXCJZb3UgY2Fubm90IHVzZSB0aGUgYHVzZVNlYXJjaFBhcmFtc2AgaG9vayBpbiBhIGJyb3dzZXIgdGhhdCBkb2VzIG5vdCBcIiArIFwic3VwcG9ydCB0aGUgVVJMU2VhcmNoUGFyYW1zIEFQSS4gSWYgeW91IG5lZWQgdG8gc3VwcG9ydCBJbnRlcm5ldCBcIiArIFwiRXhwbG9yZXIgMTEsIHdlIHJlY29tbWVuZCB5b3UgbG9hZCBhIHBvbHlmaWxsIHN1Y2ggYXMgXCIgKyBcImh0dHBzOi8vZ2l0aHViLmNvbS91bmdhcC91cmwtc2VhcmNoLXBhcmFtc1xcblxcblwiICsgXCJJZiB5b3UncmUgdW5zdXJlIGhvdyB0byBsb2FkIHBvbHlmaWxscywgd2UgcmVjb21tZW5kIHlvdSBjaGVjayBvdXQgXCIgKyBcImh0dHBzOi8vcG9seWZpbGwuaW8vdjMvIHdoaWNoIHByb3ZpZGVzIHNvbWUgcmVjb21tZW5kYXRpb25zIGFib3V0IGhvdyBcIiArIFwidG8gbG9hZCBwb2x5ZmlsbHMgb25seSBmb3IgdXNlcnMgdGhhdCBuZWVkIHRoZW0sIGluc3RlYWQgb2YgZm9yIGV2ZXJ5IFwiICsgXCJ1c2VyLlwiKSA6IHZvaWQgMDtcbiAgbGV0IGRlZmF1bHRTZWFyY2hQYXJhbXNSZWYgPSBSZWFjdC51c2VSZWYoY3JlYXRlU2VhcmNoUGFyYW1zKGRlZmF1bHRJbml0KSk7XG4gIGxldCBsb2NhdGlvbiA9IHVzZUxvY2F0aW9uKCk7XG4gIGxldCBzZWFyY2hQYXJhbXMgPSBSZWFjdC51c2VNZW1vKCgpID0+IGdldFNlYXJjaFBhcmFtc0ZvckxvY2F0aW9uKGxvY2F0aW9uLnNlYXJjaCwgZGVmYXVsdFNlYXJjaFBhcmFtc1JlZi5jdXJyZW50KSwgW2xvY2F0aW9uLnNlYXJjaF0pO1xuICBsZXQgbmF2aWdhdGUgPSB1c2VOYXZpZ2F0ZSgpO1xuICBsZXQgc2V0U2VhcmNoUGFyYW1zID0gUmVhY3QudXNlQ2FsbGJhY2soKG5leHRJbml0LCBuYXZpZ2F0ZU9wdGlvbnMpID0+IHtcbiAgICBjb25zdCBuZXdTZWFyY2hQYXJhbXMgPSBjcmVhdGVTZWFyY2hQYXJhbXModHlwZW9mIG5leHRJbml0ID09PSBcImZ1bmN0aW9uXCIgPyBuZXh0SW5pdChzZWFyY2hQYXJhbXMpIDogbmV4dEluaXQpO1xuICAgIG5hdmlnYXRlKFwiP1wiICsgbmV3U2VhcmNoUGFyYW1zLCBuYXZpZ2F0ZU9wdGlvbnMpO1xuICB9LCBbbmF2aWdhdGUsIHNlYXJjaFBhcmFtc10pO1xuICByZXR1cm4gW3NlYXJjaFBhcmFtcywgc2V0U2VhcmNoUGFyYW1zXTtcbn1cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgbWF5IGJlIHVzZWQgdG8gcHJvZ3JhbW1hdGljYWxseSBzdWJtaXQgYSBmb3JtIChvclxuICogc29tZSBhcmJpdHJhcnkgZGF0YSkgdG8gdGhlIHNlcnZlci5cbiAqL1xuXG5mdW5jdGlvbiB1c2VTdWJtaXQoKSB7XG4gIHJldHVybiB1c2VTdWJtaXRJbXBsKCk7XG59XG5cbmZ1bmN0aW9uIHVzZVN1Ym1pdEltcGwoZmV0Y2hlcktleSwgcm91dGVJZCkge1xuICBsZXQge1xuICAgIHJvdXRlclxuICB9ID0gdXNlRGF0YVJvdXRlckNvbnRleHQoRGF0YVJvdXRlckhvb2suVXNlU3VibWl0SW1wbCk7XG4gIGxldCBkZWZhdWx0QWN0aW9uID0gdXNlRm9ybUFjdGlvbigpO1xuICByZXR1cm4gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKHRhcmdldCwgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGRvY3VtZW50ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJZb3UgYXJlIGNhbGxpbmcgc3VibWl0IGR1cmluZyB0aGUgc2VydmVyIHJlbmRlci4gXCIgKyBcIlRyeSBjYWxsaW5nIHN1Ym1pdCB3aXRoaW4gYSBgdXNlRWZmZWN0YCBvciBjYWxsYmFjayBpbnN0ZWFkLlwiKTtcbiAgICB9XG5cbiAgICBsZXQge1xuICAgICAgbWV0aG9kLFxuICAgICAgZW5jVHlwZSxcbiAgICAgIGZvcm1EYXRhLFxuICAgICAgdXJsXG4gICAgfSA9IGdldEZvcm1TdWJtaXNzaW9uSW5mbyh0YXJnZXQsIGRlZmF1bHRBY3Rpb24sIG9wdGlvbnMpO1xuICAgIGxldCBocmVmID0gdXJsLnBhdGhuYW1lICsgdXJsLnNlYXJjaDtcbiAgICBsZXQgb3B0cyA9IHtcbiAgICAgIHJlcGxhY2U6IG9wdGlvbnMucmVwbGFjZSxcbiAgICAgIGZvcm1EYXRhLFxuICAgICAgZm9ybU1ldGhvZDogbWV0aG9kLFxuICAgICAgZm9ybUVuY1R5cGU6IGVuY1R5cGVcbiAgICB9O1xuXG4gICAgaWYgKGZldGNoZXJLZXkpIHtcbiAgICAgICEocm91dGVJZCAhPSBudWxsKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJObyByb3V0ZUlkIGF2YWlsYWJsZSBmb3IgdXNlRmV0Y2hlcigpXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgIHJvdXRlci5mZXRjaChmZXRjaGVyS2V5LCByb3V0ZUlkLCBocmVmLCBvcHRzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcm91dGVyLm5hdmlnYXRlKGhyZWYsIG9wdHMpO1xuICAgIH1cbiAgfSwgW2RlZmF1bHRBY3Rpb24sIHJvdXRlciwgZmV0Y2hlcktleSwgcm91dGVJZF0pO1xufVxuXG5mdW5jdGlvbiB1c2VGb3JtQWN0aW9uKGFjdGlvbiwgX3RlbXAyKSB7XG4gIGxldCB7XG4gICAgcmVsYXRpdmVcbiAgfSA9IF90ZW1wMiA9PT0gdm9pZCAwID8ge30gOiBfdGVtcDI7XG4gIGxldCB7XG4gICAgYmFzZW5hbWVcbiAgfSA9IFJlYWN0LnVzZUNvbnRleHQoVU5TQUZFX05hdmlnYXRpb25Db250ZXh0KTtcbiAgbGV0IHJvdXRlQ29udGV4dCA9IFJlYWN0LnVzZUNvbnRleHQoVU5TQUZFX1JvdXRlQ29udGV4dCk7XG4gICFyb3V0ZUNvbnRleHQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwidXNlRm9ybUFjdGlvbiBtdXN0IGJlIHVzZWQgaW5zaWRlIGEgUm91dGVDb250ZXh0XCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgbGV0IFttYXRjaF0gPSByb3V0ZUNvbnRleHQubWF0Y2hlcy5zbGljZSgtMSk7XG4gIGxldCByZXNvbHZlZEFjdGlvbiA9IGFjdGlvbiAhPSBudWxsID8gYWN0aW9uIDogXCIuXCI7IC8vIFNoYWxsb3cgY2xvbmUgcGF0aCBzbyB3ZSBjYW4gbW9kaWZ5IGl0IGJlbG93LCBvdGhlcndpc2Ugd2UgbW9kaWZ5IHRoZVxuICAvLyBvYmplY3QgcmVmZXJlbmNlZCBieSB1c2VNZW1vIGluc2lkZSB1c2VSZXNvbHZlZFBhdGhcblxuICBsZXQgcGF0aCA9IF9leHRlbmRzKHt9LCB1c2VSZXNvbHZlZFBhdGgocmVzb2x2ZWRBY3Rpb24sIHtcbiAgICByZWxhdGl2ZVxuICB9KSk7IC8vIFByZXZpb3VzbHkgd2Ugc2V0IHRoZSBkZWZhdWx0IGFjdGlvbiB0byBcIi5cIi4gVGhlIHByb2JsZW0gd2l0aCB0aGlzIGlzIHRoYXRcbiAgLy8gYHVzZVJlc29sdmVkUGF0aChcIi5cIilgIGV4Y2x1ZGVzIHNlYXJjaCBwYXJhbXMgYW5kIHRoZSBoYXNoIG9mIHRoZSByZXNvbHZlZFxuICAvLyBVUkwuIFRoaXMgaXMgdGhlIGludGVuZGVkIGJlaGF2aW9yIG9mIHdoZW4gXCIuXCIgaXMgc3BlY2lmaWNhbGx5IHByb3ZpZGVkIGFzXG4gIC8vIHRoZSBmb3JtIGFjdGlvbiwgYnV0IGluY29uc2lzdGVudCB3LyBicm93c2VycyB3aGVuIHRoZSBhY3Rpb24gaXMgb21pdHRlZC5cbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3JlbWl4LXJ1bi9yZW1peC9pc3N1ZXMvOTI3XG5cblxuICBsZXQgbG9jYXRpb24gPSB1c2VMb2NhdGlvbigpO1xuXG4gIGlmIChhY3Rpb24gPT0gbnVsbCkge1xuICAgIC8vIFNhZmUgdG8gd3JpdGUgdG8gdGhlc2UgZGlyZWN0bHkgaGVyZSBzaW5jZSBpZiBhY3Rpb24gd2FzIHVuZGVmaW5lZCwgd2VcbiAgICAvLyB3b3VsZCBoYXZlIGNhbGxlZCB1c2VSZXNvbHZlZFBhdGgoXCIuXCIpIHdoaWNoIHdpbGwgbmV2ZXIgaW5jbHVkZSBhIHNlYXJjaFxuICAgIC8vIG9yIGhhc2hcbiAgICBwYXRoLnNlYXJjaCA9IGxvY2F0aW9uLnNlYXJjaDtcbiAgICBwYXRoLmhhc2ggPSBsb2NhdGlvbi5oYXNoOyAvLyBXaGVuIGdyYWJiaW5nIHNlYXJjaCBwYXJhbXMgZnJvbSB0aGUgVVJMLCByZW1vdmUgdGhlIGF1dG9tYXRpY2FsbHlcbiAgICAvLyBpbnNlcnRlZCA/aW5kZXggcGFyYW0gc28gd2UgbWF0Y2ggdGhlIHVzZVJlc29sdmVkUGF0aCBzZWFyY2ggYmVoYXZpb3JcbiAgICAvLyB3aGljaCB3b3VsZCBub3QgaW5jbHVkZSA/aW5kZXhcblxuICAgIGlmIChtYXRjaC5yb3V0ZS5pbmRleCkge1xuICAgICAgbGV0IHBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMocGF0aC5zZWFyY2gpO1xuICAgICAgcGFyYW1zLmRlbGV0ZShcImluZGV4XCIpO1xuICAgICAgcGF0aC5zZWFyY2ggPSBwYXJhbXMudG9TdHJpbmcoKSA/IFwiP1wiICsgcGFyYW1zLnRvU3RyaW5nKCkgOiBcIlwiO1xuICAgIH1cbiAgfVxuXG4gIGlmICgoIWFjdGlvbiB8fCBhY3Rpb24gPT09IFwiLlwiKSAmJiBtYXRjaC5yb3V0ZS5pbmRleCkge1xuICAgIHBhdGguc2VhcmNoID0gcGF0aC5zZWFyY2ggPyBwYXRoLnNlYXJjaC5yZXBsYWNlKC9eXFw/LywgXCI/aW5kZXgmXCIpIDogXCI/aW5kZXhcIjtcbiAgfSAvLyBJZiB3ZSdyZSBvcGVyYXRpbmcgd2l0aGluIGEgYmFzZW5hbWUsIHByZXBlbmQgaXQgdG8gdGhlIHBhdGhuYW1lIHByaW9yXG4gIC8vIHRvIGNyZWF0aW5nIHRoZSBmb3JtIGFjdGlvbi4gIElmIHRoaXMgaXMgYSByb290IG5hdmlnYXRpb24sIHRoZW4ganVzdCB1c2VcbiAgLy8gdGhlIHJhdyBiYXNlbmFtZSB3aGljaCBhbGxvd3MgdGhlIGJhc2VuYW1lIHRvIGhhdmUgZnVsbCBjb250cm9sIG92ZXIgdGhlXG4gIC8vIHByZXNlbmNlIG9mIGEgdHJhaWxpbmcgc2xhc2ggb24gcm9vdCBhY3Rpb25zXG5cblxuICBpZiAoYmFzZW5hbWUgIT09IFwiL1wiKSB7XG4gICAgcGF0aC5wYXRobmFtZSA9IHBhdGgucGF0aG5hbWUgPT09IFwiL1wiID8gYmFzZW5hbWUgOiBqb2luUGF0aHMoW2Jhc2VuYW1lLCBwYXRoLnBhdGhuYW1lXSk7XG4gIH1cblxuICByZXR1cm4gY3JlYXRlUGF0aChwYXRoKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlRmV0Y2hlckZvcm0oZmV0Y2hlcktleSwgcm91dGVJZCkge1xuICBsZXQgRmV0Y2hlckZvcm0gPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZigocHJvcHMsIHJlZikgPT4ge1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChGb3JtSW1wbCwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgICByZWY6IHJlZixcbiAgICAgIGZldGNoZXJLZXk6IGZldGNoZXJLZXksXG4gICAgICByb3V0ZUlkOiByb3V0ZUlkXG4gICAgfSkpO1xuICB9KTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgRmV0Y2hlckZvcm0uZGlzcGxheU5hbWUgPSBcImZldGNoZXIuRm9ybVwiO1xuICB9XG5cbiAgcmV0dXJuIEZldGNoZXJGb3JtO1xufVxuXG5sZXQgZmV0Y2hlcklkID0gMDtcbi8qKlxuICogSW50ZXJhY3RzIHdpdGggcm91dGUgbG9hZGVycyBhbmQgYWN0aW9ucyB3aXRob3V0IGNhdXNpbmcgYSBuYXZpZ2F0aW9uLiBHcmVhdFxuICogZm9yIGFueSBpbnRlcmFjdGlvbiB0aGF0IHN0YXlzIG9uIHRoZSBzYW1lIHBhZ2UuXG4gKi9cblxuZnVuY3Rpb24gdXNlRmV0Y2hlcigpIHtcbiAgdmFyIF9yb3V0ZSRtYXRjaGVzO1xuXG4gIGxldCB7XG4gICAgcm91dGVyXG4gIH0gPSB1c2VEYXRhUm91dGVyQ29udGV4dChEYXRhUm91dGVySG9vay5Vc2VGZXRjaGVyKTtcbiAgbGV0IHJvdXRlID0gUmVhY3QudXNlQ29udGV4dChVTlNBRkVfUm91dGVDb250ZXh0KTtcbiAgIXJvdXRlID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcInVzZUZldGNoZXIgbXVzdCBiZSB1c2VkIGluc2lkZSBhIFJvdXRlQ29udGV4dFwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIGxldCByb3V0ZUlkID0gKF9yb3V0ZSRtYXRjaGVzID0gcm91dGUubWF0Y2hlc1tyb3V0ZS5tYXRjaGVzLmxlbmd0aCAtIDFdKSA9PSBudWxsID8gdm9pZCAwIDogX3JvdXRlJG1hdGNoZXMucm91dGUuaWQ7XG4gICEocm91dGVJZCAhPSBudWxsKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJ1c2VGZXRjaGVyIGNhbiBvbmx5IGJlIHVzZWQgb24gcm91dGVzIHRoYXQgY29udGFpbiBhIHVuaXF1ZSBcXFwiaWRcXFwiXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgbGV0IFtmZXRjaGVyS2V5XSA9IFJlYWN0LnVzZVN0YXRlKCgpID0+IFN0cmluZygrK2ZldGNoZXJJZCkpO1xuICBsZXQgW0Zvcm1dID0gUmVhY3QudXNlU3RhdGUoKCkgPT4ge1xuICAgICFyb3V0ZUlkID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIk5vIHJvdXRlSWQgYXZhaWxhYmxlIGZvciBmZXRjaGVyLkZvcm0oKVwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgcmV0dXJuIGNyZWF0ZUZldGNoZXJGb3JtKGZldGNoZXJLZXksIHJvdXRlSWQpO1xuICB9KTtcbiAgbGV0IFtsb2FkXSA9IFJlYWN0LnVzZVN0YXRlKCgpID0+IGhyZWYgPT4ge1xuICAgICFyb3V0ZXIgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiTm8gcm91dGVyIGF2YWlsYWJsZSBmb3IgZmV0Y2hlci5sb2FkKClcIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICFyb3V0ZUlkID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIk5vIHJvdXRlSWQgYXZhaWxhYmxlIGZvciBmZXRjaGVyLmxvYWQoKVwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgcm91dGVyLmZldGNoKGZldGNoZXJLZXksIHJvdXRlSWQsIGhyZWYpO1xuICB9KTtcbiAgbGV0IHN1Ym1pdCA9IHVzZVN1Ym1pdEltcGwoZmV0Y2hlcktleSwgcm91dGVJZCk7XG4gIGxldCBmZXRjaGVyID0gcm91dGVyLmdldEZldGNoZXIoZmV0Y2hlcktleSk7XG4gIGxldCBmZXRjaGVyV2l0aENvbXBvbmVudHMgPSBSZWFjdC51c2VNZW1vKCgpID0+IF9leHRlbmRzKHtcbiAgICBGb3JtLFxuICAgIHN1Ym1pdCxcbiAgICBsb2FkXG4gIH0sIGZldGNoZXIpLCBbZmV0Y2hlciwgRm9ybSwgc3VibWl0LCBsb2FkXSk7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgLy8gSXMgdGhpcyBidXN0ZWQgd2hlbiB0aGUgUmVhY3QgdGVhbSBnZXRzIHJlYWwgd2VpcmQgYW5kIGNhbGxzIGVmZmVjdHNcbiAgICAvLyB0d2ljZSBvbiBtb3VudD8gIFdlIHJlYWxseSBqdXN0IG5lZWQgdG8gZ2FyYmFnZSBjb2xsZWN0IGhlcmUgd2hlbiB0aGlzXG4gICAgLy8gZmV0Y2hlciBpcyBubyBsb25nZXIgYXJvdW5kLlxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBpZiAoIXJvdXRlcikge1xuICAgICAgICBjb25zb2xlLndhcm4oXCJObyBmZXRjaGVyIGF2YWlsYWJsZSB0byBjbGVhbiB1cCBmcm9tIHVzZUZldGNoZXIoKVwiKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICByb3V0ZXIuZGVsZXRlRmV0Y2hlcihmZXRjaGVyS2V5KTtcbiAgICB9O1xuICB9LCBbcm91dGVyLCBmZXRjaGVyS2V5XSk7XG4gIHJldHVybiBmZXRjaGVyV2l0aENvbXBvbmVudHM7XG59XG4vKipcbiAqIFByb3ZpZGVzIGFsbCBmZXRjaGVycyBjdXJyZW50bHkgb24gdGhlIHBhZ2UuIFVzZWZ1bCBmb3IgbGF5b3V0cyBhbmQgcGFyZW50XG4gKiByb3V0ZXMgdGhhdCBuZWVkIHRvIHByb3ZpZGUgcGVuZGluZy9vcHRpbWlzdGljIFVJIHJlZ2FyZGluZyB0aGUgZmV0Y2guXG4gKi9cblxuZnVuY3Rpb24gdXNlRmV0Y2hlcnMoKSB7XG4gIGxldCBzdGF0ZSA9IHVzZURhdGFSb3V0ZXJTdGF0ZShEYXRhUm91dGVyU3RhdGVIb29rLlVzZUZldGNoZXJzKTtcbiAgcmV0dXJuIFsuLi5zdGF0ZS5mZXRjaGVycy52YWx1ZXMoKV07XG59XG5jb25zdCBTQ1JPTExfUkVTVE9SQVRJT05fU1RPUkFHRV9LRVkgPSBcInJlYWN0LXJvdXRlci1zY3JvbGwtcG9zaXRpb25zXCI7XG5sZXQgc2F2ZWRTY3JvbGxQb3NpdGlvbnMgPSB7fTtcbi8qKlxuICogV2hlbiByZW5kZXJlZCBpbnNpZGUgYSBSb3V0ZXJQcm92aWRlciwgd2lsbCByZXN0b3JlIHNjcm9sbCBwb3NpdGlvbnMgb24gbmF2aWdhdGlvbnNcbiAqL1xuXG5mdW5jdGlvbiB1c2VTY3JvbGxSZXN0b3JhdGlvbihfdGVtcDMpIHtcbiAgbGV0IHtcbiAgICBnZXRLZXksXG4gICAgc3RvcmFnZUtleVxuICB9ID0gX3RlbXAzID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wMztcbiAgbGV0IHtcbiAgICByb3V0ZXJcbiAgfSA9IHVzZURhdGFSb3V0ZXJDb250ZXh0KERhdGFSb3V0ZXJIb29rLlVzZVNjcm9sbFJlc3RvcmF0aW9uKTtcbiAgbGV0IHtcbiAgICByZXN0b3JlU2Nyb2xsUG9zaXRpb24sXG4gICAgcHJldmVudFNjcm9sbFJlc2V0XG4gIH0gPSB1c2VEYXRhUm91dGVyU3RhdGUoRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VTY3JvbGxSZXN0b3JhdGlvbik7XG4gIGxldCBsb2NhdGlvbiA9IHVzZUxvY2F0aW9uKCk7XG4gIGxldCBtYXRjaGVzID0gdXNlTWF0Y2hlcygpO1xuICBsZXQgbmF2aWdhdGlvbiA9IHVzZU5hdmlnYXRpb24oKTsgLy8gVHJpZ2dlciBtYW51YWwgc2Nyb2xsIHJlc3RvcmF0aW9uIHdoaWxlIHdlJ3JlIGFjdGl2ZVxuXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgd2luZG93Lmhpc3Rvcnkuc2Nyb2xsUmVzdG9yYXRpb24gPSBcIm1hbnVhbFwiO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICB3aW5kb3cuaGlzdG9yeS5zY3JvbGxSZXN0b3JhdGlvbiA9IFwiYXV0b1wiO1xuICAgIH07XG4gIH0sIFtdKTsgLy8gU2F2ZSBwb3NpdGlvbnMgb24gdW5sb2FkXG5cbiAgdXNlQmVmb3JlVW5sb2FkKFJlYWN0LnVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBpZiAobmF2aWdhdGlvbi5zdGF0ZSA9PT0gXCJpZGxlXCIpIHtcbiAgICAgIGxldCBrZXkgPSAoZ2V0S2V5ID8gZ2V0S2V5KGxvY2F0aW9uLCBtYXRjaGVzKSA6IG51bGwpIHx8IGxvY2F0aW9uLmtleTtcbiAgICAgIHNhdmVkU2Nyb2xsUG9zaXRpb25zW2tleV0gPSB3aW5kb3cuc2Nyb2xsWTtcbiAgICB9XG5cbiAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKHN0b3JhZ2VLZXkgfHwgU0NST0xMX1JFU1RPUkFUSU9OX1NUT1JBR0VfS0VZLCBKU09OLnN0cmluZ2lmeShzYXZlZFNjcm9sbFBvc2l0aW9ucykpO1xuICAgIHdpbmRvdy5oaXN0b3J5LnNjcm9sbFJlc3RvcmF0aW9uID0gXCJhdXRvXCI7XG4gIH0sIFtzdG9yYWdlS2V5LCBnZXRLZXksIG5hdmlnYXRpb24uc3RhdGUsIGxvY2F0aW9uLCBtYXRjaGVzXSkpOyAvLyBSZWFkIGluIGFueSBzYXZlZCBzY3JvbGwgbG9jYXRpb25zXG5cbiAgUmVhY3QudXNlTGF5b3V0RWZmZWN0KCgpID0+IHtcbiAgICB0cnkge1xuICAgICAgbGV0IHNlc3Npb25Qb3NpdGlvbnMgPSBzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKHN0b3JhZ2VLZXkgfHwgU0NST0xMX1JFU1RPUkFUSU9OX1NUT1JBR0VfS0VZKTtcblxuICAgICAgaWYgKHNlc3Npb25Qb3NpdGlvbnMpIHtcbiAgICAgICAgc2F2ZWRTY3JvbGxQb3NpdGlvbnMgPSBKU09OLnBhcnNlKHNlc3Npb25Qb3NpdGlvbnMpO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHsvLyBuby1vcCwgdXNlIGRlZmF1bHQgZW1wdHkgb2JqZWN0XG4gICAgfVxuICB9LCBbc3RvcmFnZUtleV0pOyAvLyBFbmFibGUgc2Nyb2xsIHJlc3RvcmF0aW9uIGluIHRoZSByb3V0ZXJcblxuICBSZWFjdC51c2VMYXlvdXRFZmZlY3QoKCkgPT4ge1xuICAgIGxldCBkaXNhYmxlU2Nyb2xsUmVzdG9yYXRpb24gPSByb3V0ZXIgPT0gbnVsbCA/IHZvaWQgMCA6IHJvdXRlci5lbmFibGVTY3JvbGxSZXN0b3JhdGlvbihzYXZlZFNjcm9sbFBvc2l0aW9ucywgKCkgPT4gd2luZG93LnNjcm9sbFksIGdldEtleSk7XG4gICAgcmV0dXJuICgpID0+IGRpc2FibGVTY3JvbGxSZXN0b3JhdGlvbiAmJiBkaXNhYmxlU2Nyb2xsUmVzdG9yYXRpb24oKTtcbiAgfSwgW3JvdXRlciwgZ2V0S2V5XSk7IC8vIFJlc3RvcmUgc2Nyb2xsaW5nIHdoZW4gc3RhdGUucmVzdG9yZVNjcm9sbFBvc2l0aW9uIGNoYW5nZXNcblxuICBSZWFjdC51c2VMYXlvdXRFZmZlY3QoKCkgPT4ge1xuICAgIC8vIEV4cGxpY2l0IGZhbHNlIG1lYW5zIGRvbid0IGRvIGFueXRoaW5nICh1c2VkIGZvciBzdWJtaXNzaW9ucylcbiAgICBpZiAocmVzdG9yZVNjcm9sbFBvc2l0aW9uID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gYmVlbiBoZXJlIGJlZm9yZSwgc2Nyb2xsIHRvIGl0XG5cblxuICAgIGlmICh0eXBlb2YgcmVzdG9yZVNjcm9sbFBvc2l0aW9uID09PSBcIm51bWJlclwiKSB7XG4gICAgICB3aW5kb3cuc2Nyb2xsVG8oMCwgcmVzdG9yZVNjcm9sbFBvc2l0aW9uKTtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIHRyeSB0byBzY3JvbGwgdG8gdGhlIGhhc2hcblxuXG4gICAgaWYgKGxvY2F0aW9uLmhhc2gpIHtcbiAgICAgIGxldCBlbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGxvY2F0aW9uLmhhc2guc2xpY2UoMSkpO1xuXG4gICAgICBpZiAoZWwpIHtcbiAgICAgICAgZWwuc2Nyb2xsSW50b1ZpZXcoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH0gLy8gT3B0IG91dCBvZiBzY3JvbGwgcmVzZXQgaWYgdGhpcyBsaW5rIHJlcXVlc3RlZCBpdFxuXG5cbiAgICBpZiAocHJldmVudFNjcm9sbFJlc2V0ID09PSB0cnVlKSB7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBvdGhlcndpc2UgZ28gdG8gdGhlIHRvcCBvbiBuZXcgbG9jYXRpb25zXG5cblxuICAgIHdpbmRvdy5zY3JvbGxUbygwLCAwKTtcbiAgfSwgW2xvY2F0aW9uLCByZXN0b3JlU2Nyb2xsUG9zaXRpb24sIHByZXZlbnRTY3JvbGxSZXNldF0pO1xufVxuXG5mdW5jdGlvbiB1c2VCZWZvcmVVbmxvYWQoY2FsbGJhY2spIHtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImJlZm9yZXVubG9hZFwiLCBjYWxsYmFjayk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwiYmVmb3JldW5sb2FkXCIsIGNhbGxiYWNrKTtcbiAgICB9O1xuICB9LCBbY2FsbGJhY2tdKTtcbn0gLy8jZW5kcmVnaW9uXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8jcmVnaW9uIFV0aWxzXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5cbmZ1bmN0aW9uIHdhcm5pbmcoY29uZCwgbWVzc2FnZSkge1xuICBpZiAoIWNvbmQpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gXCJ1bmRlZmluZWRcIikgY29uc29sZS53YXJuKG1lc3NhZ2UpO1xuXG4gICAgdHJ5IHtcbiAgICAgIC8vIFdlbGNvbWUgdG8gZGVidWdnaW5nIFJlYWN0IFJvdXRlciFcbiAgICAgIC8vXG4gICAgICAvLyBUaGlzIGVycm9yIGlzIHRocm93biBhcyBhIGNvbnZlbmllbmNlIHNvIHlvdSBjYW4gbW9yZSBlYXNpbHlcbiAgICAgIC8vIGZpbmQgdGhlIHNvdXJjZSBmb3IgYSB3YXJuaW5nIHRoYXQgYXBwZWFycyBpbiB0aGUgY29uc29sZSBieVxuICAgICAgLy8gZW5hYmxpbmcgXCJwYXVzZSBvbiBleGNlcHRpb25zXCIgaW4geW91ciBKYXZhU2NyaXB0IGRlYnVnZ2VyLlxuICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZW1wdHlcbiAgICB9IGNhdGNoIChlKSB7fVxuICB9XG59IC8vI2VuZHJlZ2lvblxuXG5leHBvcnQgeyBCcm93c2VyUm91dGVyLCBGb3JtLCBIYXNoUm91dGVyLCBMaW5rLCBOYXZMaW5rLCBTY3JvbGxSZXN0b3JhdGlvbiwgY3JlYXRlQnJvd3NlclJvdXRlciwgY3JlYXRlSGFzaFJvdXRlciwgY3JlYXRlU2VhcmNoUGFyYW1zLCBIaXN0b3J5Um91dGVyIGFzIHVuc3RhYmxlX0hpc3RvcnlSb3V0ZXIsIHVzZUZldGNoZXIsIHVzZUZldGNoZXJzLCB1c2VGb3JtQWN0aW9uLCB1c2VMaW5rQ2xpY2tIYW5kbGVyLCB1c2VTZWFyY2hQYXJhbXMsIHVzZVN1Ym1pdCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIlxyXG5cclxuY29uc3QgQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQoKVxyXG5cclxuZnVuY3Rpb24gQ29udGV4dFByb3ZpZGVyKHsgY2hpbGRyZW4gfSkge1xyXG5cclxuICAgY29uc3QgW3RoaXNQYXRpZW50LCBzZXRUaGlzUGF0aWVudF0gPSB1c2VTdGF0ZSh7fSlcclxuICAgY29uc3QgW2V2ZW50cywgc2V0RXZlbnRzXSA9IHVzZVN0YXRlKFtdKVxyXG5cclxuICAgZnVuY3Rpb24gZ2V0QWdlKGRhdGUpIHtcclxuICAgICAgY29uc3QgdG9kYXkgPSBuZXcgRGF0ZSgpO1xyXG4gICAgICBjb25zdCBiaXJ0aERhdGUgPSBuZXcgRGF0ZShkYXRlKTtcclxuICAgICAgbGV0IGFnZSA9IHRvZGF5LmdldEZ1bGxZZWFyKCkgLSBiaXJ0aERhdGUuZ2V0RnVsbFllYXIoKTtcclxuICAgICAgY29uc3QgbSA9IHRvZGF5LmdldE1vbnRoKCkgLSBiaXJ0aERhdGUuZ2V0TW9udGgoKTtcclxuICAgICAgaWYgKG0gPCAwIHx8IChtID09PSAwICYmIHRvZGF5LmdldERhdGUoKSA8IGJpcnRoRGF0ZS5nZXREYXRlKCkpKSB7XHJcbiAgICAgICAgIGFnZS0tXHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIGAke2FnZX0gYW5vKHMpYFxyXG4gICB9XHJcblxyXG4gICBmdW5jdGlvbiBmb3JtYXREYXRlKGRhdGUsIGZvcm1hdCkge1xyXG4gICAgICBjb25zdCBpc29EYXRlID0gbmV3IERhdGUoZGF0ZSlcclxuICAgICAgbGV0IG9wdGlvbnNcclxuICAgICAgbGV0IGZvcm1hdHRlZERhdGVcclxuICAgICAgaWYgKGZvcm1hdCA9PT0gXCJzaG9ydFwiKSB7XHJcbiAgICAgICAgIG9wdGlvbnMgPSB7IHdlZWtkYXk6ICdsb25nJywgeWVhcjogJ251bWVyaWMnLCBtb250aDogJ2xvbmcnLCBkYXk6ICdudW1lcmljJyB9O1xyXG4gICAgICAgICBmb3JtYXR0ZWREYXRlID0gaXNvRGF0ZS50b0xvY2FsZVN0cmluZygncHQtQlInKVxyXG4gICAgICB9IGVsc2UgaWYgKGZvcm1hdCA9PT0gXCJsb25nXCIpIHtcclxuICAgICAgICAgb3B0aW9ucyA9IHsgd2Vla2RheTogJ2xvbmcnLCB5ZWFyOiAnbnVtZXJpYycsIG1vbnRoOiAnbG9uZycsIGRheTogJ251bWVyaWMnIH07XHJcbiAgICAgICAgIGZvcm1hdHRlZERhdGUgPSBpc29EYXRlLnRvTG9jYWxlRGF0ZVN0cmluZygncHQtQlInLCBvcHRpb25zKVxyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBmb3JtYXR0ZWREYXRlXHJcbiAgIH1cclxuXHJcbiAgIHJldHVybiAoXHJcbiAgICAgIDxDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXt7XHJcbiAgICAgICAgIHRoaXNQYXRpZW50LFxyXG4gICAgICAgICBzZXRUaGlzUGF0aWVudCxcclxuICAgICAgICAgZXZlbnRzLFxyXG4gICAgICAgICBzZXRFdmVudHMsXHJcbiAgICAgICAgIGdldEFnZSxcclxuICAgICAgICAgZm9ybWF0RGF0ZVxyXG4gICAgICB9fT5cclxuICAgICAgICAge2NoaWxkcmVufVxyXG4gICAgICA8L0NvbnRleHQuUHJvdmlkZXI+XHJcbiAgIClcclxufVxyXG5cclxuZXhwb3J0IHsgQ29udGV4dFByb3ZpZGVyLCBDb250ZXh0IH0iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2luZGV4LmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2luZGV4LmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIlxyXG5pbXBvcnQgU3BhSWNvbiBmcm9tIFwiQG11aS9pY29ucy1tYXRlcmlhbC9TcGFcIlxyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gSGVhZGVyKCkge1xyXG5cclxuICAgcmV0dXJuIChcclxuICAgICAgPGhlYWRlciBjbGFzc05hbWU9XCJcIj5cclxuICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJiZy1zbGF0ZS04MDAgZmxleCBqdXN0aWZ5LWJldHdlZW4gaXRlbXMtc3RyZXRjaFwiPlxyXG4gICAgICAgICAgICA8bmF2IGNsYXNzTmFtZT1cImZsZXggaXRlbXMtc3RyZXRjaCBtbC0yXCI+XHJcbiAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidXBwZXJjYXNlIGZvbnQtYm9sZCB0ZXh0LXNtIGJnLXNsYXRlLTcwMCByb3VuZGVkLXQgbXQtMiBtci0xIHRleHQtd2hpdGUgcHgtNSBwci0zIGZsZXggaXRlbXMtY2VudGVyXCI+XHJcbiAgICAgICAgICAgICAgICAgIDxhIGhyZWY9XCJcIj5QYWNpZW50ZTwvYT5cclxuICAgICAgICAgICAgICAgICAgPGEgaHJlZj1cIlwiIGNsYXNzTmFtZT1cImZvbnQtbm9ybWFsIG1sLTIgdGV4dC1bOHB4XVwiPiYjeDI3MTU7PC9hPlxyXG4gICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ1cHBlcmNhc2UgZm9udC1ib2xkIHRleHQtc20gcm91bmRlZC10IG10LTIgbXItMSB0ZXh0LXdoaXRlIHB4LTUgZmxleCBpdGVtcy1jZW50ZXJcIj5cclxuICAgICAgICAgICAgICAgICAgPGEgaHJlZj1cIlwiPkVtZXJnw6puY2lhPC9hPlxyXG4gICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9uYXY+XHJcbiAgICAgICAgICAgIDxoMSBpZD1cImxvZ29cIiBjbGFzc05hbWU9XCJ0ZXh0LXhsIGZvbnQtc2VyaWYgbXktMiBteC00IG1yLTRcIj5cclxuICAgICAgICAgICAgICAgPGEgaHJlZj1cIi9cIiBjbGFzc05hbWU9XCJ0ZXh0LXdoaXRlIGZsZXhcIj5cclxuICAgICAgICAgICAgICAgICAgPFNwYUljb24gY2xhc3NOYW1lPVwibXItMVwiIC8+XHJcbiAgICAgICAgICAgICAgICAgIFBST05UVcOBUklPIEVXXHJcbiAgICAgICAgICAgICAgIDwvYT5cclxuICAgICAgICAgICAgPC9oMT5cclxuICAgICAgICAgPC9kaXY+XHJcbiAgICAgIDwvaGVhZGVyPlxyXG4gICApXHJcbn0iLCJ2YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZGVmUHJvcHMgPSBPYmplY3QuZGVmaW5lUHJvcGVydGllcztcbnZhciBfX2dldE93blByb3BEZXNjcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzO1xudmFyIF9fZ2V0T3duUHJvcFN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19wcm9wSXNFbnVtID0gT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcbnZhciBfX2RlZk5vcm1hbFByb3AgPSAob2JqLCBrZXksIHZhbHVlKSA9PiBrZXkgaW4gb2JqID8gX19kZWZQcm9wKG9iaiwga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUsIHZhbHVlIH0pIDogb2JqW2tleV0gPSB2YWx1ZTtcbnZhciBfX3NwcmVhZFZhbHVlcyA9IChhLCBiKSA9PiB7XG4gIGZvciAodmFyIHByb3AgaW4gYiB8fCAoYiA9IHt9KSlcbiAgICBpZiAoX19oYXNPd25Qcm9wLmNhbGwoYiwgcHJvcCkpXG4gICAgICBfX2RlZk5vcm1hbFByb3AoYSwgcHJvcCwgYltwcm9wXSk7XG4gIGlmIChfX2dldE93blByb3BTeW1ib2xzKVxuICAgIGZvciAodmFyIHByb3Agb2YgX19nZXRPd25Qcm9wU3ltYm9scyhiKSkge1xuICAgICAgaWYgKF9fcHJvcElzRW51bS5jYWxsKGIsIHByb3ApKVxuICAgICAgICBfX2RlZk5vcm1hbFByb3AoYSwgcHJvcCwgYltwcm9wXSk7XG4gICAgfVxuICByZXR1cm4gYTtcbn07XG52YXIgX19zcHJlYWRQcm9wcyA9IChhLCBiKSA9PiBfX2RlZlByb3BzKGEsIF9fZ2V0T3duUHJvcERlc2NzKGIpKTtcbnZhciBfX29ialJlc3QgPSAoc291cmNlLCBleGNsdWRlKSA9PiB7XG4gIHZhciB0YXJnZXQgPSB7fTtcbiAgZm9yICh2YXIgcHJvcCBpbiBzb3VyY2UpXG4gICAgaWYgKF9faGFzT3duUHJvcC5jYWxsKHNvdXJjZSwgcHJvcCkgJiYgZXhjbHVkZS5pbmRleE9mKHByb3ApIDwgMClcbiAgICAgIHRhcmdldFtwcm9wXSA9IHNvdXJjZVtwcm9wXTtcbiAgaWYgKHNvdXJjZSAhPSBudWxsICYmIF9fZ2V0T3duUHJvcFN5bWJvbHMpXG4gICAgZm9yICh2YXIgcHJvcCBvZiBfX2dldE93blByb3BTeW1ib2xzKHNvdXJjZSkpIHtcbiAgICAgIGlmIChleGNsdWRlLmluZGV4T2YocHJvcCkgPCAwICYmIF9fcHJvcElzRW51bS5jYWxsKHNvdXJjZSwgcHJvcCkpXG4gICAgICAgIHRhcmdldFtwcm9wXSA9IHNvdXJjZVtwcm9wXTtcbiAgICB9XG4gIHJldHVybiB0YXJnZXQ7XG59O1xuaW1wb3J0IFJlYWN0LCB7IGNyZWF0ZUNvbnRleHQsIHVzZVJlZHVjZXIsIHVzZUVmZmVjdCwgdXNlQ29udGV4dCwgdXNlUmVmLCB1c2VNZW1vLCB1c2VDYWxsYmFjaywgdXNlU3RhdGUsIGNyZWF0ZUVsZW1lbnQsIHVzZUxheW91dEVmZmVjdCwgdXNlRGVidWdWYWx1ZSwgdXNlSW1wZXJhdGl2ZUhhbmRsZSB9IGZyb20gXCJyZWFjdFwiO1xudmFyIHByb3BUeXBlcyA9IHsgZXhwb3J0czoge30gfTtcbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCQxID0gXCJTRUNSRVRfRE9fTk9UX1BBU1NfVEhJU19PUl9ZT1VfV0lMTF9CRV9GSVJFRFwiO1xudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0XzEgPSBSZWFjdFByb3BUeXBlc1NlY3JldCQxO1xudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gUmVhY3RQcm9wVHlwZXNTZWNyZXRfMTtcbmZ1bmN0aW9uIGVtcHR5RnVuY3Rpb24oKSB7XG59XG5mdW5jdGlvbiBlbXB0eUZ1bmN0aW9uV2l0aFJlc2V0KCkge1xufVxuZW1wdHlGdW5jdGlvbldpdGhSZXNldC5yZXNldFdhcm5pbmdDYWNoZSA9IGVtcHR5RnVuY3Rpb247XG52YXIgZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zID0gZnVuY3Rpb24oKSB7XG4gIGZ1bmN0aW9uIHNoaW0ocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lLCBzZWNyZXQpIHtcbiAgICBpZiAoc2VjcmV0ID09PSBSZWFjdFByb3BUeXBlc1NlY3JldCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgZXJyID0gbmV3IEVycm9yKFwiQ2FsbGluZyBQcm9wVHlwZXMgdmFsaWRhdG9ycyBkaXJlY3RseSBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBgcHJvcC10eXBlc2AgcGFja2FnZS4gVXNlIFByb3BUeXBlcy5jaGVja1Byb3BUeXBlcygpIHRvIGNhbGwgdGhlbS4gUmVhZCBtb3JlIGF0IGh0dHA6Ly9mYi5tZS91c2UtY2hlY2stcHJvcC10eXBlc1wiKTtcbiAgICBlcnIubmFtZSA9IFwiSW52YXJpYW50IFZpb2xhdGlvblwiO1xuICAgIHRocm93IGVycjtcbiAgfVxuICBzaGltLmlzUmVxdWlyZWQgPSBzaGltO1xuICBmdW5jdGlvbiBnZXRTaGltKCkge1xuICAgIHJldHVybiBzaGltO1xuICB9XG4gIHZhciBSZWFjdFByb3BUeXBlcyA9IHtcbiAgICBhcnJheTogc2hpbSxcbiAgICBiaWdpbnQ6IHNoaW0sXG4gICAgYm9vbDogc2hpbSxcbiAgICBmdW5jOiBzaGltLFxuICAgIG51bWJlcjogc2hpbSxcbiAgICBvYmplY3Q6IHNoaW0sXG4gICAgc3RyaW5nOiBzaGltLFxuICAgIHN5bWJvbDogc2hpbSxcbiAgICBhbnk6IHNoaW0sXG4gICAgYXJyYXlPZjogZ2V0U2hpbSxcbiAgICBlbGVtZW50OiBzaGltLFxuICAgIGVsZW1lbnRUeXBlOiBzaGltLFxuICAgIGluc3RhbmNlT2Y6IGdldFNoaW0sXG4gICAgbm9kZTogc2hpbSxcbiAgICBvYmplY3RPZjogZ2V0U2hpbSxcbiAgICBvbmVPZjogZ2V0U2hpbSxcbiAgICBvbmVPZlR5cGU6IGdldFNoaW0sXG4gICAgc2hhcGU6IGdldFNoaW0sXG4gICAgZXhhY3Q6IGdldFNoaW0sXG4gICAgY2hlY2tQcm9wVHlwZXM6IGVtcHR5RnVuY3Rpb25XaXRoUmVzZXQsXG4gICAgcmVzZXRXYXJuaW5nQ2FjaGU6IGVtcHR5RnVuY3Rpb25cbiAgfTtcbiAgUmVhY3RQcm9wVHlwZXMuUHJvcFR5cGVzID0gUmVhY3RQcm9wVHlwZXM7XG4gIHJldHVybiBSZWFjdFByb3BUeXBlcztcbn07XG57XG4gIHByb3BUeXBlcy5leHBvcnRzID0gZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zKCk7XG59XG52YXIgUHJvcFR5cGVzID0gcHJvcFR5cGVzLmV4cG9ydHM7XG5jb25zdCBTRVRfUVVFUlkgPSBcIlNFVF9RVUVSWVwiO1xuY29uc3QgU0VUX0lURU1TID0gXCJTRVRfSVRFTVNcIjtcbmNvbnN0IFNFVF9JVEVNU19FUlJPUiA9IFwiU0VUX0lURU1TX0VSUk9SXCI7XG5jb25zdCBDTEVBUiA9IFwiQ0xFQVJcIjtcbmNvbnN0IFNFVF9ISUdITElHSFRFRCA9IFwiU0VUX0hJR0hMSUdIVEVEXCI7XG5jb25zdCBDTEVBUl9ISUdITElHSFRFRCA9IFwiQ0xFQVJfSElHSExJR0hURURcIjtcbmNvbnN0IE5FWFRfSElHSExJR0hURUQgPSBcIk5FWFRfSElHSExJR0hURURcIjtcbmNvbnN0IFBSRVZfSElHSExJR0hURUQgPSBcIlBSRVZfSElHSExJR0hURURcIjtcbmNvbnN0IFNFVF9TRUxFQ1RFRCA9IFwiU0VUX1NFTEVDVEVEXCI7XG5jb25zdCB1bmRlZiA9IHZvaWQgMDtcbmZ1bmN0aW9uIGlzVW5kZWZpbmVkJDEodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID09PSB1bmRlZjtcbn1cbmNvbnN0IGhpZ2hsaWdodGVkSXRlbSA9IChpbmRleCwgaXRlbXMpID0+IHtcbiAgaWYgKCFpdGVtc1tpbmRleF0pXG4gICAgcmV0dXJuIHVuZGVmO1xuICByZXR1cm4geyBpbmRleCwgdGV4dDogaXRlbXNbaW5kZXhdLnRleHQgfTtcbn07XG5jb25zdCByZWR1Y2VyID0gKHN0YXRlLCBhY3Rpb24pID0+IHtcbiAgY29uc3QgbmV3U3RhdGUgPSAoKCkgPT4ge1xuICAgIGxldCBuZXdTdGF0ZTIsIGl0ZW07XG4gICAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgICAgY2FzZSBTRVRfUVVFUlk6XG4gICAgICAgIG5ld1N0YXRlMiA9IHtcbiAgICAgICAgICBpdGVtc0Vycm9yOiBmYWxzZSxcbiAgICAgICAgICBxdWVyeTogYWN0aW9uLnF1ZXJ5LFxuICAgICAgICAgIHNlbGVjdGVkOiB1bmRlZlxuICAgICAgICB9O1xuICAgICAgICBpZiAoYWN0aW9uLnF1ZXJ5Lmxlbmd0aCA8IHN0YXRlLnByb3BzLm1pblF1ZXJ5TGVuZ3RoKVxuICAgICAgICAgIG5ld1N0YXRlMi5jYW5TaG93TGlzdGJveCA9IGZhbHNlO1xuICAgICAgICBpZiAoYWN0aW9uLnF1ZXJ5Lmxlbmd0aCA9PT0gMCAmJiBzdGF0ZS5wcm9wcy5kZWZhdWx0TGlzdGJveClcbiAgICAgICAgICBuZXdTdGF0ZTIuY2FuU2hvd0xpc3Rib3ggPSB0cnVlO1xuICAgICAgICByZXR1cm4gbmV3U3RhdGUyO1xuICAgICAgY2FzZSBTRVRfSVRFTVM6XG4gICAgICAgIG5ld1N0YXRlMiA9IHtcbiAgICAgICAgICBpdGVtczogYWN0aW9uLml0ZW1zLFxuICAgICAgICAgIGl0ZW1zRXJyb3I6IGZhbHNlLFxuICAgICAgICAgIGhpZ2hsaWdodGVkOiBhY3Rpb24uaXRlbXMubGVuZ3RoICYmIHN0YXRlLnF1ZXJ5Lmxlbmd0aCA/IGhpZ2hsaWdodGVkSXRlbSgwLCBhY3Rpb24uaXRlbXMpIDogdW5kZWZcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHN0YXRlLnF1ZXJ5Lmxlbmd0aCB8fCBhY3Rpb24uaXRlbXMubGVuZ3RoKVxuICAgICAgICAgIG5ld1N0YXRlMi5jYW5TaG93TGlzdGJveCA9IHRydWU7XG4gICAgICAgIHJldHVybiBuZXdTdGF0ZTI7XG4gICAgICBjYXNlIENMRUFSOlxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHF1ZXJ5OiBcIlwiLFxuICAgICAgICAgIGl0ZW1zOiBbXSxcbiAgICAgICAgICBpdGVtc0Vycm9yOiBmYWxzZSxcbiAgICAgICAgICBjYW5TaG93TGlzdGJveDogZmFsc2UsXG4gICAgICAgICAgaGlnaGxpZ2h0ZWQ6IHVuZGVmLFxuICAgICAgICAgIHNlbGVjdGVkOiB1bmRlZlxuICAgICAgICB9O1xuICAgICAgY2FzZSBTRVRfSVRFTVNfRVJST1I6XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgaXRlbXM6IFtdLFxuICAgICAgICAgIGl0ZW1zRXJyb3I6IHRydWUsXG4gICAgICAgICAgY2FuU2hvd0xpc3Rib3g6IGZhbHNlXG4gICAgICAgIH07XG4gICAgICBjYXNlIFNFVF9ISUdITElHSFRFRDpcbiAgICAgICAgcmV0dXJuIHsgaGlnaGxpZ2h0ZWQ6IGhpZ2hsaWdodGVkSXRlbShhY3Rpb24uaW5kZXgsIHN0YXRlLml0ZW1zKSB9O1xuICAgICAgY2FzZSBDTEVBUl9ISUdITElHSFRFRDpcbiAgICAgICAgcmV0dXJuIHsgaGlnaGxpZ2h0ZWQ6IHVuZGVmIH07XG4gICAgICBjYXNlIFBSRVZfSElHSExJR0hURUQ6XG4gICAgICAgIHJldHVybiBzdGF0ZS5oaWdobGlnaHRlZCAmJiBzdGF0ZS5oaWdobGlnaHRlZC5pbmRleCA+IDAgPyB7IGhpZ2hsaWdodGVkOiBoaWdobGlnaHRlZEl0ZW0oc3RhdGUuaGlnaGxpZ2h0ZWQuaW5kZXggLSAxLCBzdGF0ZS5pdGVtcykgfSA6IHt9O1xuICAgICAgY2FzZSBORVhUX0hJR0hMSUdIVEVEOlxuICAgICAgICByZXR1cm4gc3RhdGUuaGlnaGxpZ2h0ZWQgJiYgc3RhdGUuaGlnaGxpZ2h0ZWQuaW5kZXggPCBzdGF0ZS5pdGVtcy5sZW5ndGggLSAxID8geyBoaWdobGlnaHRlZDogaGlnaGxpZ2h0ZWRJdGVtKHN0YXRlLmhpZ2hsaWdodGVkLmluZGV4ICsgMSwgc3RhdGUuaXRlbXMpIH0gOiB7fTtcbiAgICAgIGNhc2UgU0VUX1NFTEVDVEVEOlxuICAgICAgICBpdGVtID0gaXNVbmRlZmluZWQkMShhY3Rpb24uaW5kZXgpID8gYWN0aW9uLml0ZW0gOiBzdGF0ZS5pdGVtc1thY3Rpb24uaW5kZXhdO1xuICAgICAgICByZXR1cm4geyBzZWxlY3RlZDogaXRlbSwgcXVlcnk6IGl0ZW0gPyBpdGVtLnRleHQgOiB1bmRlZiB9O1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBhY3Rpb24gdHlwZSBwYXNzZWQgdG8gcmVkdWNlclwiKTtcbiAgICB9XG4gIH0pKCk7XG4gIHJldHVybiBfX3NwcmVhZFZhbHVlcyhfX3NwcmVhZFZhbHVlcyh7fSwgc3RhdGUpLCBuZXdTdGF0ZSk7XG59O1xuY29uc3Qgc2V0UXVlcnkgPSAocXVlcnkpID0+IHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBTRVRfUVVFUlksXG4gICAgcXVlcnlcbiAgfTtcbn07XG5jb25zdCBzZXRJdGVtcyA9IChpdGVtcykgPT4ge1xuICByZXR1cm4ge1xuICAgIHR5cGU6IFNFVF9JVEVNUyxcbiAgICBpdGVtc1xuICB9O1xufTtcbmNvbnN0IHNldEl0ZW1zRXJyb3IgPSAoKSA9PiB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogU0VUX0lURU1TX0VSUk9SXG4gIH07XG59O1xuY29uc3QgY2xlYXIgPSAoKSA9PiB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogQ0xFQVJcbiAgfTtcbn07XG5jb25zdCBzZXRIaWdobGlnaHRlZCA9IChpbmRleCkgPT4ge1xuICByZXR1cm4ge1xuICAgIHR5cGU6IFNFVF9ISUdITElHSFRFRCxcbiAgICBpbmRleFxuICB9O1xufTtcbmNvbnN0IGhpZ2hsaWdodFByZXYgPSAoKSA9PiB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogUFJFVl9ISUdITElHSFRFRFxuICB9O1xufTtcbmNvbnN0IGhpZ2hsaWdodE5leHQgPSAoKSA9PiB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogTkVYVF9ISUdITElHSFRFRFxuICB9O1xufTtcbmNvbnN0IHNldFNlbGVjdGVkID0gKGkpID0+IHtcbiAgY29uc3QgdHlwZSA9IFNFVF9TRUxFQ1RFRDtcbiAgcmV0dXJuIHR5cGVvZiBpID09PSBcIm9iamVjdFwiID8geyB0eXBlLCBpdGVtOiBpIH0gOiB7IHR5cGUsIGluZGV4OiBpIH07XG59O1xudmFyIGpzeFJ1bnRpbWUgPSB7IGV4cG9ydHM6IHt9IH07XG52YXIgcmVhY3RKc3hSdW50aW1lX3Byb2R1Y3Rpb25fbWluID0ge307XG4vKlxub2JqZWN0LWFzc2lnblxuKGMpIFNpbmRyZSBTb3JodXNcbkBsaWNlbnNlIE1JVFxuKi9cbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBwcm9wSXNFbnVtZXJhYmxlID0gT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcbmZ1bmN0aW9uIHRvT2JqZWN0KHZhbCkge1xuICBpZiAodmFsID09PSBudWxsIHx8IHZhbCA9PT0gdm9pZCAwKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIk9iamVjdC5hc3NpZ24gY2Fubm90IGJlIGNhbGxlZCB3aXRoIG51bGwgb3IgdW5kZWZpbmVkXCIpO1xuICB9XG4gIHJldHVybiBPYmplY3QodmFsKTtcbn1cbmZ1bmN0aW9uIHNob3VsZFVzZU5hdGl2ZSgpIHtcbiAgdHJ5IHtcbiAgICBpZiAoIU9iamVjdC5hc3NpZ24pIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdmFyIHRlc3QxID0gbmV3IFN0cmluZyhcImFiY1wiKTtcbiAgICB0ZXN0MVs1XSA9IFwiZGVcIjtcbiAgICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDEpWzBdID09PSBcIjVcIikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB2YXIgdGVzdDIgPSB7fTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IDEwOyBpKyspIHtcbiAgICAgIHRlc3QyW1wiX1wiICsgU3RyaW5nLmZyb21DaGFyQ29kZShpKV0gPSBpO1xuICAgIH1cbiAgICB2YXIgb3JkZXIyID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDIpLm1hcChmdW5jdGlvbihuMikge1xuICAgICAgcmV0dXJuIHRlc3QyW24yXTtcbiAgICB9KTtcbiAgICBpZiAob3JkZXIyLmpvaW4oXCJcIikgIT09IFwiMDEyMzQ1Njc4OVwiKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHZhciB0ZXN0MyA9IHt9O1xuICAgIFwiYWJjZGVmZ2hpamtsbW5vcHFyc3RcIi5zcGxpdChcIlwiKS5mb3JFYWNoKGZ1bmN0aW9uKGxldHRlcikge1xuICAgICAgdGVzdDNbbGV0dGVyXSA9IGxldHRlcjtcbiAgICB9KTtcbiAgICBpZiAoT2JqZWN0LmtleXMoT2JqZWN0LmFzc2lnbih7fSwgdGVzdDMpKS5qb2luKFwiXCIpICE9PSBcImFiY2RlZmdoaWprbG1ub3BxcnN0XCIpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuc2hvdWxkVXNlTmF0aXZlKCkgPyBPYmplY3QuYXNzaWduIDogZnVuY3Rpb24odGFyZ2V0LCBzb3VyY2UpIHtcbiAgdmFyIGZyb207XG4gIHZhciB0byA9IHRvT2JqZWN0KHRhcmdldCk7XG4gIHZhciBzeW1ib2xzO1xuICBmb3IgKHZhciBzID0gMTsgcyA8IGFyZ3VtZW50cy5sZW5ndGg7IHMrKykge1xuICAgIGZyb20gPSBPYmplY3QoYXJndW1lbnRzW3NdKTtcbiAgICBmb3IgKHZhciBrZXkgaW4gZnJvbSkge1xuICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwoZnJvbSwga2V5KSkge1xuICAgICAgICB0b1trZXldID0gZnJvbVtrZXldO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgICBzeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGZyb20pO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzeW1ib2xzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChwcm9wSXNFbnVtZXJhYmxlLmNhbGwoZnJvbSwgc3ltYm9sc1tpXSkpIHtcbiAgICAgICAgICB0b1tzeW1ib2xzW2ldXSA9IGZyb21bc3ltYm9sc1tpXV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRvO1xufTtcbi8qKiBAbGljZW5zZSBSZWFjdCB2MTcuMC4yXG4gKiByZWFjdC1qc3gtcnVudGltZS5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG52YXIgZiA9IFJlYWN0LCBnID0gNjAxMDM7XG5yZWFjdEpzeFJ1bnRpbWVfcHJvZHVjdGlvbl9taW4uRnJhZ21lbnQgPSA2MDEwNztcbmlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgU3ltYm9sLmZvcikge1xuICB2YXIgaCA9IFN5bWJvbC5mb3I7XG4gIGcgPSBoKFwicmVhY3QuZWxlbWVudFwiKTtcbiAgcmVhY3RKc3hSdW50aW1lX3Byb2R1Y3Rpb25fbWluLkZyYWdtZW50ID0gaChcInJlYWN0LmZyYWdtZW50XCIpO1xufVxudmFyIG0gPSBmLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVELlJlYWN0Q3VycmVudE93bmVyLCBuID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSwgcCA9IHsga2V5OiB0cnVlLCByZWY6IHRydWUsIF9fc2VsZjogdHJ1ZSwgX19zb3VyY2U6IHRydWUgfTtcbmZ1bmN0aW9uIHEoYywgYSwgaykge1xuICB2YXIgYiwgZCA9IHt9LCBlID0gbnVsbCwgbCA9IG51bGw7XG4gIGsgIT09IHZvaWQgMCAmJiAoZSA9IFwiXCIgKyBrKTtcbiAgYS5rZXkgIT09IHZvaWQgMCAmJiAoZSA9IFwiXCIgKyBhLmtleSk7XG4gIGEucmVmICE9PSB2b2lkIDAgJiYgKGwgPSBhLnJlZik7XG4gIGZvciAoYiBpbiBhKVxuICAgIG4uY2FsbChhLCBiKSAmJiAhcC5oYXNPd25Qcm9wZXJ0eShiKSAmJiAoZFtiXSA9IGFbYl0pO1xuICBpZiAoYyAmJiBjLmRlZmF1bHRQcm9wcylcbiAgICBmb3IgKGIgaW4gYSA9IGMuZGVmYXVsdFByb3BzLCBhKVxuICAgICAgZFtiXSA9PT0gdm9pZCAwICYmIChkW2JdID0gYVtiXSk7XG4gIHJldHVybiB7ICQkdHlwZW9mOiBnLCB0eXBlOiBjLCBrZXk6IGUsIHJlZjogbCwgcHJvcHM6IGQsIF9vd25lcjogbS5jdXJyZW50IH07XG59XG5yZWFjdEpzeFJ1bnRpbWVfcHJvZHVjdGlvbl9taW4uanN4ID0gcTtcbnJlYWN0SnN4UnVudGltZV9wcm9kdWN0aW9uX21pbi5qc3hzID0gcTtcbntcbiAganN4UnVudGltZS5leHBvcnRzID0gcmVhY3RKc3hSdW50aW1lX3Byb2R1Y3Rpb25fbWluO1xufVxuY29uc3QganN4ID0ganN4UnVudGltZS5leHBvcnRzLmpzeDtcbmNvbnN0IGpzeHMgPSBqc3hSdW50aW1lLmV4cG9ydHMuanN4cztcbmNvbnN0IEZyYWdtZW50ID0ganN4UnVudGltZS5leHBvcnRzLkZyYWdtZW50O1xuY29uc3QgU3RhdGVDb250ZXh0ID0gY3JlYXRlQ29udGV4dCgpO1xuY29uc3QgU3RhdGVDb250ZXh0UHJvdmlkZXIgPSAocHJvcHMpID0+IHtcbiAgY29uc3Qge1xuICAgIHRleHQgPSBcIlwiLFxuICAgIGl0ZW1zID0gW11cbiAgfSA9IHByb3BzO1xuICBjb25zdCBfYTIgPSBwcm9wcywge1xuICAgIGNoaWxkcmVuXG4gIH0gPSBfYTIsIHByb3BzTWludXNDaGlsZHJlbiA9IF9fb2JqUmVzdChfYTIsIFtcbiAgICBcImNoaWxkcmVuXCJcbiAgXSk7XG4gIGNvbnN0IFtzdGF0ZSwgZGlzcGF0Y2hdID0gdXNlUmVkdWNlcihyZWR1Y2VyLCB7XG4gICAgcXVlcnk6IHRleHQsXG4gICAgaXRlbXMsXG4gICAgaXRlbXNFcnJvcjogZmFsc2UsXG4gICAgY2FuU2hvd0xpc3Rib3g6IGZhbHNlLFxuICAgIGhpZ2hsaWdodGVkOiB1bmRlZixcbiAgICBzZWxlY3RlZDogdW5kZWYsXG4gICAgcHJvcHM6IHByb3BzTWludXNDaGlsZHJlblxuICB9KTtcbiAgdXNlRWZmZWN0KCgpID0+IGRpc3BhdGNoKHNldFF1ZXJ5KHRleHQpKSwgW3RleHRdKTtcbiAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBqc3goU3RhdGVDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IHtcbiAgICAgIHN0YXRlLFxuICAgICAgZGlzcGF0Y2hcbiAgICB9LFxuICAgIGNoaWxkcmVuXG4gIH0pO1xufTtcbmNvbnN0IHN0eWxlcyQxID0ge1xuICBsaXN0Ym94OiB7XG4gICAgcG9zaXRpb246IFwiYWJzb2x1dGVcIixcbiAgICB6SW5kZXg6IDRcbiAgfVxufTtcbmZ1bmN0aW9uIGVzY2FwZVN0cmluZ1JlZ2V4cChzdHJpbmcpIHtcbiAgaWYgKHR5cGVvZiBzdHJpbmcgIT09IFwic3RyaW5nXCIpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRXhwZWN0ZWQgYSBzdHJpbmdcIik7XG4gIH1cbiAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9bfFxcXFx7fSgpW1xcXV4kKyo/Ll0vZywgXCJcXFxcJCZcIikucmVwbGFjZSgvLS9nLCBcIlxcXFx4MmRcIik7XG59XG5mdW5jdGlvbiBNYXRjaGluZ1RleHQocHJvcHMpIHtcbiAgY29uc3Qge1xuICAgIHRleHQsXG4gICAgbWF0Y2gsXG4gICAgZ2xvYmFsLFxuICAgIHN0eWxlczogc3R5bGVzMlxuICB9ID0gcHJvcHM7XG4gIGNvbnN0IHBhdHRlcm5QcmVmaXggPSBnbG9iYWwgPyBcIlwiIDogXCJeXCI7XG4gIGNvbnN0IHBhdHRlcm4gPSBgJHtwYXR0ZXJuUHJlZml4fSgke2VzY2FwZVN0cmluZ1JlZ2V4cChtYXRjaCl9KWA7XG4gIGNvbnN0IHJlZ2V4ID0gbmV3IFJlZ0V4cChwYXR0ZXJuLCBcImlcIik7XG4gIGNvbnN0IHBhcnRzID0gbWF0Y2ggPyB0ZXh0LnNwbGl0KHJlZ2V4KS5maWx0ZXIoKHBhcnQpID0+IHBhcnQubGVuZ3RoKSA6IFt0ZXh0XTtcbiAgY29uc3QgbWF0Y2hpbmdUZXh0ID0gcGFydHMubWFwKChwYXJ0LCBpbmRleCkgPT4ge1xuICAgIGNvbnN0IGlzTWF0Y2ggPSBwYXJ0LnRvTG93ZXJDYXNlKCkgPT09IG1hdGNoLnRvTG93ZXJDYXNlKCk7XG4gICAgcmV0dXJuIGlzTWF0Y2ggPyAvKiBAX19QVVJFX18gKi8ganN4KFwic3Ryb25nXCIsIHtcbiAgICAgIGNsYXNzTmFtZTogc3R5bGVzMi5tYXRjaCxcbiAgICAgIGNoaWxkcmVuOiBwYXJ0c1tpbmRleF1cbiAgICB9LCBgcGFydCR7aW5kZXh9YCkgOiAvKiBAX19QVVJFX18gKi8ganN4KFJlYWN0LkZyYWdtZW50LCB7XG4gICAgICBjaGlsZHJlbjogcGFydHNbaW5kZXhdXG4gICAgfSwgYHBhcnQke2luZGV4fWApO1xuICB9KTtcbiAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBqc3goRnJhZ21lbnQsIHtcbiAgICBjaGlsZHJlbjogbWF0Y2hpbmdUZXh0XG4gIH0pO1xufVxuZnVuY3Rpb24gSXRlbShwcm9wcykge1xuICBjb25zdCB7XG4gICAgaW5kZXgsXG4gICAgaXRlbSxcbiAgICBzdHlsZXM6IHN0eWxlczJcbiAgfSA9IHByb3BzO1xuICBjb25zdCB7XG4gICAgc3RhdGUsXG4gICAgZGlzcGF0Y2hcbiAgfSA9IHVzZUNvbnRleHQoU3RhdGVDb250ZXh0KTtcbiAgY29uc3Qge1xuICAgIGhpZ2hsaWdodGVkLFxuICAgIHF1ZXJ5XG4gIH0gPSBzdGF0ZTtcbiAgY29uc3QgSXRlbUNvbnRlbnRzID0gc3RhdGUucHJvcHMuSXRlbTtcbiAgY29uc3QgZ2xvYmFsTWF0Y2ggPSBpdGVtLnNlYXJjaFR5cGUgPT09IFwiY29udGFpbnNcIjtcbiAgY29uc3QgaXNIaWdobGlnaHRlZCA9IGhpZ2hsaWdodGVkICYmIGluZGV4ID09PSBoaWdobGlnaHRlZC5pbmRleDtcbiAgY29uc3QgZGl2Q2xhc3NOYW1lID0gc3R5bGVzMltpc0hpZ2hsaWdodGVkID8gXCJoaWdobGlnaHRlZEl0ZW1cIiA6IFwiaXRlbVwiXTtcbiAgY29uc3QgaGFuZGxlTW91c2VFbnRlciA9ICgpID0+IHtcbiAgICBkaXNwYXRjaChzZXRIaWdobGlnaHRlZChpbmRleCkpO1xuICB9O1xuICBjb25zdCBoYW5kbGVDbGljayA9ICgpID0+IHtcbiAgICBkaXNwYXRjaChzZXRTZWxlY3RlZChpbmRleCkpO1xuICB9O1xuICBjb25zdCBzZXRDdXN0b21TZWxlY3RlZCA9ICh2YWx1ZSwgZGlzcGxheUZpZWxkKSA9PiB7XG4gICAgZGlzcGF0Y2goc2V0U2VsZWN0ZWQoe1xuICAgICAgdmFsdWUsXG4gICAgICBkaXNwbGF5RmllbGQsXG4gICAgICB0ZXh0OiB2YWx1ZVtkaXNwbGF5RmllbGRdXG4gICAgfSkpO1xuICB9O1xuICBjb25zdCBpdGVtQ29udGVudHMgPSBJdGVtQ29udGVudHMgPyAvKiBAX19QVVJFX18gKi8ganN4KEl0ZW1Db250ZW50cywge1xuICAgIGFwcGVhcnNJbkRlZmF1bHRMaXN0Ym94OiBpdGVtLmRlZmF1bHRMaXN0Ym94LFxuICAgIGdyb3VwSWQ6IGl0ZW0uZ3JvdXBJZCxcbiAgICBncm91cEluZGV4OiBpdGVtLmdyb3VwSW5kZXgsXG4gICAgZ3JvdXBOYW1lOiBpdGVtLmdyb3VwTmFtZSxcbiAgICBpbmRleCxcbiAgICBpc0hpZ2hsaWdodGVkLFxuICAgIGl0ZW06IGl0ZW0udmFsdWUsXG4gICAgcXVlcnksXG4gICAgc2VhcmNoVHlwZTogaXRlbS5zZWFyY2hUeXBlLFxuICAgIHNldFNlbGVjdGVkOiBzZXRDdXN0b21TZWxlY3RlZCxcbiAgICB0b3RhbEl0ZW1zOiBzdGF0ZS5pdGVtcy5sZW5ndGhcbiAgfSkgOiBzdGF0ZS5wcm9wcy5tYXRjaFRleHQgJiYgIWl0ZW0uZGVmYXVsdExpc3Rib3ggPyAvKiBAX19QVVJFX18gKi8ganN4KE1hdGNoaW5nVGV4dCwge1xuICAgIHRleHQ6IGl0ZW0udGV4dCxcbiAgICBtYXRjaDogcXVlcnksXG4gICAgZ2xvYmFsOiBnbG9iYWxNYXRjaCxcbiAgICBzdHlsZXM6IHN0eWxlczJcbiAgfSkgOiAvKiBAX19QVVJFX18gKi8ganN4KEZyYWdtZW50LCB7XG4gICAgY2hpbGRyZW46IGl0ZW0udGV4dFxuICB9KTtcbiAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBqc3goXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogZGl2Q2xhc3NOYW1lLFxuICAgIG9uTW91c2VFbnRlcjogaGFuZGxlTW91c2VFbnRlcixcbiAgICBvbk1vdXNlRG93bjogaGFuZGxlQ2xpY2ssXG4gICAgcm9sZTogXCJvcHRpb25cIixcbiAgICBcImFyaWEtc2VsZWN0ZWRcIjogaXNIaWdobGlnaHRlZCxcbiAgICBcImFyaWEtbGFiZWxcIjogaXRlbS50ZXh0LFxuICAgIGNoaWxkcmVuOiBpdGVtQ29udGVudHNcbiAgfSk7XG59XG5mdW5jdGlvbiBJdGVtRmlyc3QocHJvcHMpIHtcbiAgY29uc3Qge1xuICAgIGdyb3VwTmFtZSxcbiAgICBpbmRleCxcbiAgICBpdGVtLFxuICAgIHN0eWxlczogc3R5bGVzMlxuICB9ID0gcHJvcHM7XG4gIGNvbnN0IHtcbiAgICBzdGF0ZVxuICB9ID0gdXNlQ29udGV4dChTdGF0ZUNvbnRleHQpO1xuICBjb25zdCBHcm91cE5hbWUgPSBzdGF0ZS5wcm9wcy5Hcm91cE5hbWU7XG4gIGNvbnN0IGdyb3VwSGVhZGluZyA9ICEhZ3JvdXBOYW1lICYmIChHcm91cE5hbWUgPyAvKiBAX19QVVJFX18gKi8ganN4KEdyb3VwTmFtZSwge1xuICAgIGlkOiBpdGVtLmdyb3VwSWQsXG4gICAgaW5kZXg6IGl0ZW0uZ3JvdXBJbmRleCxcbiAgICBjaGlsZHJlbjogZ3JvdXBOYW1lXG4gIH0pIDogZ3JvdXBOYW1lKTtcbiAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBqc3hzKFJlYWN0LkZyYWdtZW50LCB7XG4gICAgY2hpbGRyZW46IFshIWdyb3VwSGVhZGluZyAmJiAvKiBAX19QVVJFX18gKi8ganN4KFwiZGl2XCIsIHtcbiAgICAgIGNsYXNzTmFtZTogc3R5bGVzMi5ncm91cEhlYWRpbmcsXG4gICAgICBjaGlsZHJlbjogZ3JvdXBIZWFkaW5nXG4gICAgfSksIC8qIEBfX1BVUkVfXyAqLyBqc3goSXRlbSwge1xuICAgICAgaW5kZXgsXG4gICAgICBpdGVtLFxuICAgICAgc3R5bGVzOiBzdHlsZXMyXG4gICAgfSwgYGl0ZW0ke2luZGV4fWApXVxuICB9KTtcbn1cbmZ1bmN0aW9uIExpc3Rib3gocHJvcHMpIHtcbiAgY29uc3Qge1xuICAgIGlkLFxuICAgIGl0ZW1zLFxuICAgIG5vSXRlbXNNZXNzYWdlLFxuICAgIHN0eWxlczogc3R5bGVzMlxuICB9ID0gcHJvcHM7XG4gIGNvbnN0IHtcbiAgICBzdGF0ZVxuICB9ID0gdXNlQ29udGV4dChTdGF0ZUNvbnRleHQpO1xuICBjb25zdCBpdGVtRWxlbWVudHMgPSAoKSA9PiB7XG4gICAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBqc3goXCJkaXZcIiwge1xuICAgICAgaWQsXG4gICAgICBjbGFzc05hbWU6IHN0eWxlczIubGlzdGJveCxcbiAgICAgIHN0eWxlOiBzdHlsZXMkMS5saXN0Ym94LFxuICAgICAgcm9sZTogXCJsaXN0Ym94XCIsXG4gICAgICBjaGlsZHJlbjogaXRlbXMubWFwKChpdGVtLCBpbmRleCkgPT4gaW5kZXggPT09IDAgfHwgaXRlbS5ncm91cEluZGV4ICE9PSBpdGVtc1tpbmRleCAtIDFdLmdyb3VwSW5kZXggPyAvKiBAX19QVVJFX18gKi8ganN4KEl0ZW1GaXJzdCwge1xuICAgICAgICBncm91cE5hbWU6IGl0ZW0uZ3JvdXBOYW1lLFxuICAgICAgICBpbmRleCxcbiAgICAgICAgaXRlbSxcbiAgICAgICAgc3R5bGVzOiBzdHlsZXMyXG4gICAgICB9LCBgaXRlbSR7aW5kZXh9YCkgOiAvKiBAX19QVVJFX18gKi8ganN4KEl0ZW0sIHtcbiAgICAgICAgaW5kZXgsXG4gICAgICAgIGl0ZW0sXG4gICAgICAgIHN0eWxlczogc3R5bGVzMlxuICAgICAgfSwgYGl0ZW0ke2luZGV4fWApKVxuICAgIH0pO1xuICB9O1xuICBjb25zdCBub0l0ZW1zTXNnID0gKCkgPT4ge1xuICAgIHJldHVybiAvKiBAX19QVVJFX18gKi8ganN4KFwiZGl2XCIsIHtcbiAgICAgIGlkLFxuICAgICAgY2xhc3NOYW1lOiBzdHlsZXMyLmxpc3Rib3gsXG4gICAgICBzdHlsZTogc3R5bGVzJDEubGlzdGJveCxcbiAgICAgIGNoaWxkcmVuOiAvKiBAX19QVVJFX18gKi8ganN4KFwiZGl2XCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBzdHlsZXMyLm5vSXRlbXMsXG4gICAgICAgIGNoaWxkcmVuOiBub0l0ZW1zTWVzc2FnZVxuICAgICAgfSlcbiAgICB9KTtcbiAgfTtcbiAgY29uc3QgbGlzdGJveCA9ICgpID0+IHtcbiAgICBpZiAoaXRlbXMgJiYgaXRlbXMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gaXRlbUVsZW1lbnRzKCk7XG4gICAgfSBlbHNlIGlmIChub0l0ZW1zTWVzc2FnZSAmJiBzdGF0ZS5xdWVyeSkge1xuICAgICAgcmV0dXJuIG5vSXRlbXNNc2coKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBqc3goUmVhY3QuRnJhZ21lbnQsIHt9KTtcbiAgICB9XG4gIH07XG4gIHJldHVybiBsaXN0Ym94KCk7XG59XG5mdW5jdGlvbiBFcnJvcmJveChwcm9wcykge1xuICBjb25zdCB7XG4gICAgaWQsXG4gICAgZXJyb3JNZXNzYWdlLFxuICAgIHN0eWxlczogc3R5bGVzMlxuICB9ID0gcHJvcHM7XG4gIHJldHVybiAvKiBAX19QVVJFX18gKi8ganN4KFwiZGl2XCIsIHtcbiAgICBpZCxcbiAgICBjbGFzc05hbWU6IHN0eWxlczIuZXJyb3Jib3gsXG4gICAgc3R5bGU6IHN0eWxlcyQxLmxpc3Rib3gsXG4gICAgY2hpbGRyZW46IC8qIEBfX1BVUkVfXyAqLyBqc3goXCJkaXZcIiwge1xuICAgICAgY2xhc3NOYW1lOiBzdHlsZXMyLmVycm9yTWVzc2FnZSxcbiAgICAgIGNoaWxkcmVuOiBlcnJvck1lc3NhZ2VcbiAgICB9KVxuICB9KTtcbn1cbmZ1bmN0aW9uIHVzZURlYm91bmNlZENhbGxiYWNrKGZ1bmMsIHdhaXQsIG9wdGlvbnMpIHtcbiAgdmFyIF90aGlzID0gdGhpcztcbiAgdmFyIGxhc3RDYWxsVGltZSA9IHVzZVJlZihudWxsKTtcbiAgdmFyIGxhc3RJbnZva2VUaW1lID0gdXNlUmVmKDApO1xuICB2YXIgdGltZXJJZCA9IHVzZVJlZihudWxsKTtcbiAgdmFyIGxhc3RBcmdzID0gdXNlUmVmKFtdKTtcbiAgdmFyIGxhc3RUaGlzID0gdXNlUmVmKCk7XG4gIHZhciByZXN1bHQgPSB1c2VSZWYoKTtcbiAgdmFyIGZ1bmNSZWYgPSB1c2VSZWYoZnVuYyk7XG4gIHZhciBtb3VudGVkID0gdXNlUmVmKHRydWUpO1xuICBmdW5jUmVmLmN1cnJlbnQgPSBmdW5jO1xuICB2YXIgdXNlUkFGID0gIXdhaXQgJiYgd2FpdCAhPT0gMCAmJiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiO1xuICBpZiAodHlwZW9mIGZ1bmMgIT09IFwiZnVuY3Rpb25cIikge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJFeHBlY3RlZCBhIGZ1bmN0aW9uXCIpO1xuICB9XG4gIHdhaXQgPSArd2FpdCB8fCAwO1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgdmFyIGxlYWRpbmcgPSAhIW9wdGlvbnMubGVhZGluZztcbiAgdmFyIHRyYWlsaW5nID0gXCJ0cmFpbGluZ1wiIGluIG9wdGlvbnMgPyAhIW9wdGlvbnMudHJhaWxpbmcgOiB0cnVlO1xuICB2YXIgbWF4aW5nID0gXCJtYXhXYWl0XCIgaW4gb3B0aW9ucztcbiAgdmFyIG1heFdhaXQgPSBtYXhpbmcgPyBNYXRoLm1heCgrb3B0aW9ucy5tYXhXYWl0IHx8IDAsIHdhaXQpIDogbnVsbDtcbiAgdXNlRWZmZWN0KGZ1bmN0aW9uKCkge1xuICAgIG1vdW50ZWQuY3VycmVudCA9IHRydWU7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgbW91bnRlZC5jdXJyZW50ID0gZmFsc2U7XG4gICAgfTtcbiAgfSwgW10pO1xuICB2YXIgZGVib3VuY2VkID0gdXNlTWVtbyhmdW5jdGlvbigpIHtcbiAgICB2YXIgaW52b2tlRnVuYyA9IGZ1bmN0aW9uKHRpbWUpIHtcbiAgICAgIHZhciBhcmdzID0gbGFzdEFyZ3MuY3VycmVudDtcbiAgICAgIHZhciB0aGlzQXJnID0gbGFzdFRoaXMuY3VycmVudDtcbiAgICAgIGxhc3RBcmdzLmN1cnJlbnQgPSBsYXN0VGhpcy5jdXJyZW50ID0gbnVsbDtcbiAgICAgIGxhc3RJbnZva2VUaW1lLmN1cnJlbnQgPSB0aW1lO1xuICAgICAgcmV0dXJuIHJlc3VsdC5jdXJyZW50ID0gZnVuY1JlZi5jdXJyZW50LmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICAgIH07XG4gICAgdmFyIHN0YXJ0VGltZXIgPSBmdW5jdGlvbihwZW5kaW5nRnVuYywgd2FpdDIpIHtcbiAgICAgIGlmICh1c2VSQUYpXG4gICAgICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKHRpbWVySWQuY3VycmVudCk7XG4gICAgICB0aW1lcklkLmN1cnJlbnQgPSB1c2VSQUYgPyByZXF1ZXN0QW5pbWF0aW9uRnJhbWUocGVuZGluZ0Z1bmMpIDogc2V0VGltZW91dChwZW5kaW5nRnVuYywgd2FpdDIpO1xuICAgIH07XG4gICAgdmFyIHNob3VsZEludm9rZSA9IGZ1bmN0aW9uKHRpbWUpIHtcbiAgICAgIGlmICghbW91bnRlZC5jdXJyZW50KVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB2YXIgdGltZVNpbmNlTGFzdENhbGwgPSB0aW1lIC0gbGFzdENhbGxUaW1lLmN1cnJlbnQ7XG4gICAgICB2YXIgdGltZVNpbmNlTGFzdEludm9rZSA9IHRpbWUgLSBsYXN0SW52b2tlVGltZS5jdXJyZW50O1xuICAgICAgcmV0dXJuICFsYXN0Q2FsbFRpbWUuY3VycmVudCB8fCB0aW1lU2luY2VMYXN0Q2FsbCA+PSB3YWl0IHx8IHRpbWVTaW5jZUxhc3RDYWxsIDwgMCB8fCBtYXhpbmcgJiYgdGltZVNpbmNlTGFzdEludm9rZSA+PSBtYXhXYWl0O1xuICAgIH07XG4gICAgdmFyIHRyYWlsaW5nRWRnZSA9IGZ1bmN0aW9uKHRpbWUpIHtcbiAgICAgIHRpbWVySWQuY3VycmVudCA9IG51bGw7XG4gICAgICBpZiAodHJhaWxpbmcgJiYgbGFzdEFyZ3MuY3VycmVudCkge1xuICAgICAgICByZXR1cm4gaW52b2tlRnVuYyh0aW1lKTtcbiAgICAgIH1cbiAgICAgIGxhc3RBcmdzLmN1cnJlbnQgPSBsYXN0VGhpcy5jdXJyZW50ID0gbnVsbDtcbiAgICAgIHJldHVybiByZXN1bHQuY3VycmVudDtcbiAgICB9O1xuICAgIHZhciB0aW1lckV4cGlyZWQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciB0aW1lID0gRGF0ZS5ub3coKTtcbiAgICAgIGlmIChzaG91bGRJbnZva2UodGltZSkpIHtcbiAgICAgICAgcmV0dXJuIHRyYWlsaW5nRWRnZSh0aW1lKTtcbiAgICAgIH1cbiAgICAgIGlmICghbW91bnRlZC5jdXJyZW50KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciB0aW1lU2luY2VMYXN0Q2FsbCA9IHRpbWUgLSBsYXN0Q2FsbFRpbWUuY3VycmVudDtcbiAgICAgIHZhciB0aW1lU2luY2VMYXN0SW52b2tlID0gdGltZSAtIGxhc3RJbnZva2VUaW1lLmN1cnJlbnQ7XG4gICAgICB2YXIgdGltZVdhaXRpbmcgPSB3YWl0IC0gdGltZVNpbmNlTGFzdENhbGw7XG4gICAgICB2YXIgcmVtYWluaW5nV2FpdCA9IG1heGluZyA/IE1hdGgubWluKHRpbWVXYWl0aW5nLCBtYXhXYWl0IC0gdGltZVNpbmNlTGFzdEludm9rZSkgOiB0aW1lV2FpdGluZztcbiAgICAgIHN0YXJ0VGltZXIodGltZXJFeHBpcmVkLCByZW1haW5pbmdXYWl0KTtcbiAgICB9O1xuICAgIHZhciBmdW5jMiA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgIH1cbiAgICAgIHZhciB0aW1lID0gRGF0ZS5ub3coKTtcbiAgICAgIHZhciBpc0ludm9raW5nID0gc2hvdWxkSW52b2tlKHRpbWUpO1xuICAgICAgbGFzdEFyZ3MuY3VycmVudCA9IGFyZ3M7XG4gICAgICBsYXN0VGhpcy5jdXJyZW50ID0gX3RoaXM7XG4gICAgICBsYXN0Q2FsbFRpbWUuY3VycmVudCA9IHRpbWU7XG4gICAgICBpZiAoaXNJbnZva2luZykge1xuICAgICAgICBpZiAoIXRpbWVySWQuY3VycmVudCAmJiBtb3VudGVkLmN1cnJlbnQpIHtcbiAgICAgICAgICBsYXN0SW52b2tlVGltZS5jdXJyZW50ID0gbGFzdENhbGxUaW1lLmN1cnJlbnQ7XG4gICAgICAgICAgc3RhcnRUaW1lcih0aW1lckV4cGlyZWQsIHdhaXQpO1xuICAgICAgICAgIHJldHVybiBsZWFkaW5nID8gaW52b2tlRnVuYyhsYXN0Q2FsbFRpbWUuY3VycmVudCkgOiByZXN1bHQuY3VycmVudDtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWF4aW5nKSB7XG4gICAgICAgICAgc3RhcnRUaW1lcih0aW1lckV4cGlyZWQsIHdhaXQpO1xuICAgICAgICAgIHJldHVybiBpbnZva2VGdW5jKGxhc3RDYWxsVGltZS5jdXJyZW50KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKCF0aW1lcklkLmN1cnJlbnQpIHtcbiAgICAgICAgc3RhcnRUaW1lcih0aW1lckV4cGlyZWQsIHdhaXQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdC5jdXJyZW50O1xuICAgIH07XG4gICAgZnVuYzIuY2FuY2VsID0gZnVuY3Rpb24oKSB7XG4gICAgICBpZiAodGltZXJJZC5jdXJyZW50KSB7XG4gICAgICAgIHVzZVJBRiA/IGNhbmNlbEFuaW1hdGlvbkZyYW1lKHRpbWVySWQuY3VycmVudCkgOiBjbGVhclRpbWVvdXQodGltZXJJZC5jdXJyZW50KTtcbiAgICAgIH1cbiAgICAgIGxhc3RJbnZva2VUaW1lLmN1cnJlbnQgPSAwO1xuICAgICAgbGFzdEFyZ3MuY3VycmVudCA9IGxhc3RDYWxsVGltZS5jdXJyZW50ID0gbGFzdFRoaXMuY3VycmVudCA9IHRpbWVySWQuY3VycmVudCA9IG51bGw7XG4gICAgfTtcbiAgICBmdW5jMi5pc1BlbmRpbmcgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiAhIXRpbWVySWQuY3VycmVudDtcbiAgICB9O1xuICAgIGZ1bmMyLmZsdXNoID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gIXRpbWVySWQuY3VycmVudCA/IHJlc3VsdC5jdXJyZW50IDogdHJhaWxpbmdFZGdlKERhdGUubm93KCkpO1xuICAgIH07XG4gICAgcmV0dXJuIGZ1bmMyO1xuICB9LCBbbGVhZGluZywgbWF4aW5nLCB3YWl0LCBtYXhXYWl0LCB0cmFpbGluZywgdXNlUkFGXSk7XG4gIHJldHVybiBkZWJvdW5jZWQ7XG59XG5mdW5jdGlvbiB2YWx1ZUVxdWFsaXR5KGxlZnQsIHJpZ2h0KSB7XG4gIHJldHVybiBsZWZ0ID09PSByaWdodDtcbn1cbmZ1bmN0aW9uIGFkanVzdEZ1bmN0aW9uVmFsdWVPZlNldFN0YXRlKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIiA/IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfSA6IHZhbHVlO1xufVxuZnVuY3Rpb24gdXNlU3RhdGVJZ25vcmVDYWxsYmFjayhpbml0aWFsU3RhdGUpIHtcbiAgdmFyIF9hMiA9IHVzZVN0YXRlKGFkanVzdEZ1bmN0aW9uVmFsdWVPZlNldFN0YXRlKGluaXRpYWxTdGF0ZSkpLCBzdGF0ZSA9IF9hMlswXSwgc2V0U3RhdGUgPSBfYTJbMV07XG4gIHZhciBzZXRTdGF0ZUlnbm9yZUNhbGxiYWNrID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gc2V0U3RhdGUoYWRqdXN0RnVuY3Rpb25WYWx1ZU9mU2V0U3RhdGUodmFsdWUpKTtcbiAgfSwgW10pO1xuICByZXR1cm4gW3N0YXRlLCBzZXRTdGF0ZUlnbm9yZUNhbGxiYWNrXTtcbn1cbmZ1bmN0aW9uIHVzZURlYm91bmNlKHZhbHVlLCBkZWxheSwgb3B0aW9ucykge1xuICB2YXIgZXEgPSBvcHRpb25zICYmIG9wdGlvbnMuZXF1YWxpdHlGbiB8fCB2YWx1ZUVxdWFsaXR5O1xuICB2YXIgX2EyID0gdXNlU3RhdGVJZ25vcmVDYWxsYmFjayh2YWx1ZSksIHN0YXRlID0gX2EyWzBdLCBkaXNwYXRjaCA9IF9hMlsxXTtcbiAgdmFyIGRlYm91bmNlZCA9IHVzZURlYm91bmNlZENhbGxiYWNrKHVzZUNhbGxiYWNrKGZ1bmN0aW9uKHZhbHVlMikge1xuICAgIHJldHVybiBkaXNwYXRjaCh2YWx1ZTIpO1xuICB9LCBbZGlzcGF0Y2hdKSwgZGVsYXksIG9wdGlvbnMpO1xuICB2YXIgcHJldmlvdXNWYWx1ZSA9IHVzZVJlZih2YWx1ZSk7XG4gIGlmICghZXEocHJldmlvdXNWYWx1ZS5jdXJyZW50LCB2YWx1ZSkpIHtcbiAgICBkZWJvdW5jZWQodmFsdWUpO1xuICAgIHByZXZpb3VzVmFsdWUuY3VycmVudCA9IHZhbHVlO1xuICB9XG4gIHJldHVybiBbc3RhdGUsIGRlYm91bmNlZF07XG59XG4vKiEgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbkNvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuXG5QZXJtaXNzaW9uIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBhbmQvb3IgZGlzdHJpYnV0ZSB0aGlzIHNvZnR3YXJlIGZvciBhbnlcbnB1cnBvc2Ugd2l0aCBvciB3aXRob3V0IGZlZSBpcyBoZXJlYnkgZ3JhbnRlZC5cblxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiBBTkQgVEhFIEFVVEhPUiBESVNDTEFJTVMgQUxMIFdBUlJBTlRJRVMgV0lUSFxuUkVHQVJEIFRPIFRISVMgU09GVFdBUkUgSU5DTFVESU5HIEFMTCBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZXG5BTkQgRklUTkVTUy4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUiBCRSBMSUFCTEUgRk9SIEFOWSBTUEVDSUFMLCBESVJFQ1QsXG5JTkRJUkVDVCwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIE9SIEFOWSBEQU1BR0VTIFdIQVRTT0VWRVIgUkVTVUxUSU5HIEZST01cbkxPU1MgT0YgVVNFLCBEQVRBIE9SIFBST0ZJVFMsIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBORUdMSUdFTkNFIE9SXG5PVEhFUiBUT1JUSU9VUyBBQ1RJT04sIEFSSVNJTkcgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgVVNFIE9SXG5QRVJGT1JNQU5DRSBPRiBUSElTIFNPRlRXQVJFLlxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cbmZ1bmN0aW9uIF9fYXdhaXRlcih0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcbiAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbihyZXNvbHZlKSB7XG4gICAgICByZXNvbHZlKHZhbHVlKTtcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZWplY3QoZSk7XG4gICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7XG4gICAgICB0cnkge1xuICAgICAgICBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJlamVjdChlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHtcbiAgICAgIHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpO1xuICAgIH1cbiAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gIH0pO1xufVxuZnVuY3Rpb24gX19nZW5lcmF0b3IodGhpc0FyZywgYm9keSkge1xuICB2YXIgXyA9IHsgbGFiZWw6IDAsIHNlbnQ6IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0WzBdICYgMSlcbiAgICAgIHRocm93IHRbMV07XG4gICAgcmV0dXJuIHRbMV07XG4gIH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYyLCB5LCB0LCBnMjtcbiAgcmV0dXJuIGcyID0geyBuZXh0OiB2ZXJiKDApLCBcInRocm93XCI6IHZlcmIoMSksIFwicmV0dXJuXCI6IHZlcmIoMikgfSwgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIChnMltTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0pLCBnMjtcbiAgZnVuY3Rpb24gdmVyYihuMikge1xuICAgIHJldHVybiBmdW5jdGlvbih2KSB7XG4gICAgICByZXR1cm4gc3RlcChbbjIsIHZdKTtcbiAgICB9O1xuICB9XG4gIGZ1bmN0aW9uIHN0ZXAob3ApIHtcbiAgICBpZiAoZjIpXG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcbiAgICB3aGlsZSAoXylcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChmMiA9IDEsIHkgJiYgKHQgPSBvcFswXSAmIDIgPyB5W1wicmV0dXJuXCJdIDogb3BbMF0gPyB5W1widGhyb3dcIl0gfHwgKCh0ID0geVtcInJldHVyblwiXSkgJiYgdC5jYWxsKHkpLCAwKSA6IHkubmV4dCkgJiYgISh0ID0gdC5jYWxsKHksIG9wWzFdKSkuZG9uZSlcbiAgICAgICAgICByZXR1cm4gdDtcbiAgICAgICAgaWYgKHkgPSAwLCB0KVxuICAgICAgICAgIG9wID0gW29wWzBdICYgMiwgdC52YWx1ZV07XG4gICAgICAgIHN3aXRjaCAob3BbMF0pIHtcbiAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgdCA9IG9wO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgXy5sYWJlbCsrO1xuICAgICAgICAgICAgcmV0dXJuIHsgdmFsdWU6IG9wWzFdLCBkb25lOiBmYWxzZSB9O1xuICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgIF8ubGFiZWwrKztcbiAgICAgICAgICAgIHkgPSBvcFsxXTtcbiAgICAgICAgICAgIG9wID0gWzBdO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgY2FzZSA3OlxuICAgICAgICAgICAgb3AgPSBfLm9wcy5wb3AoKTtcbiAgICAgICAgICAgIF8udHJ5cy5wb3AoKTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBpZiAoISh0ID0gXy50cnlzLCB0ID0gdC5sZW5ndGggPiAwICYmIHRbdC5sZW5ndGggLSAxXSkgJiYgKG9wWzBdID09PSA2IHx8IG9wWzBdID09PSAyKSkge1xuICAgICAgICAgICAgICBfID0gMDtcbiAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAob3BbMF0gPT09IDMgJiYgKCF0IHx8IG9wWzFdID4gdFswXSAmJiBvcFsxXSA8IHRbM10pKSB7XG4gICAgICAgICAgICAgIF8ubGFiZWwgPSBvcFsxXTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAob3BbMF0gPT09IDYgJiYgXy5sYWJlbCA8IHRbMV0pIHtcbiAgICAgICAgICAgICAgXy5sYWJlbCA9IHRbMV07XG4gICAgICAgICAgICAgIHQgPSBvcDtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkge1xuICAgICAgICAgICAgICBfLmxhYmVsID0gdFsyXTtcbiAgICAgICAgICAgICAgXy5vcHMucHVzaChvcCk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRbMl0pXG4gICAgICAgICAgICAgIF8ub3BzLnBvcCgpO1xuICAgICAgICAgICAgXy50cnlzLnBvcCgpO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIG9wID0gWzYsIGVdO1xuICAgICAgICB5ID0gMDtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIGYyID0gdCA9IDA7XG4gICAgICB9XG4gICAgaWYgKG9wWzBdICYgNSlcbiAgICAgIHRocm93IG9wWzFdO1xuICAgIHJldHVybiB7IHZhbHVlOiBvcFswXSA/IG9wWzFdIDogdm9pZCAwLCBkb25lOiB0cnVlIH07XG4gIH1cbn1cbnZhciBub29wID0gZnVuY3Rpb24oKSB7XG59O1xudmFyIFVOREVGSU5FRCA9IG5vb3AoKTtcbnZhciBPQkpFQ1QgPSBPYmplY3Q7XG52YXIgaXNVbmRlZmluZWQgPSBmdW5jdGlvbih2KSB7XG4gIHJldHVybiB2ID09PSBVTkRFRklORUQ7XG59O1xudmFyIGlzRnVuY3Rpb24gPSBmdW5jdGlvbih2KSB7XG4gIHJldHVybiB0eXBlb2YgdiA9PSBcImZ1bmN0aW9uXCI7XG59O1xudmFyIG1lcmdlT2JqZWN0cyA9IGZ1bmN0aW9uKGEsIGIpIHtcbiAgcmV0dXJuIE9CSkVDVC5hc3NpZ24oe30sIGEsIGIpO1xufTtcbnZhciBTVFJfVU5ERUZJTkVEID0gXCJ1bmRlZmluZWRcIjtcbnZhciBoYXNXaW5kb3cgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHR5cGVvZiB3aW5kb3cgIT0gU1RSX1VOREVGSU5FRDtcbn07XG52YXIgaGFzRG9jdW1lbnQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHR5cGVvZiBkb2N1bWVudCAhPSBTVFJfVU5ERUZJTkVEO1xufTtcbnZhciBoYXNSZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGhhc1dpbmRvdygpICYmIHR5cGVvZiB3aW5kb3dbXCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWVcIl0gIT0gU1RSX1VOREVGSU5FRDtcbn07XG52YXIgdGFibGUgPSAvKiBAX19QVVJFX18gKi8gbmV3IFdlYWtNYXAoKTtcbnZhciBjb3VudGVyID0gMDtcbnZhciBzdGFibGVIYXNoID0gZnVuY3Rpb24oYXJnKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIGFyZztcbiAgdmFyIGNvbnN0cnVjdG9yID0gYXJnICYmIGFyZy5jb25zdHJ1Y3RvcjtcbiAgdmFyIGlzRGF0ZSA9IGNvbnN0cnVjdG9yID09IERhdGU7XG4gIHZhciByZXN1bHQ7XG4gIHZhciBpbmRleDtcbiAgaWYgKE9CSkVDVChhcmcpID09PSBhcmcgJiYgIWlzRGF0ZSAmJiBjb25zdHJ1Y3RvciAhPSBSZWdFeHApIHtcbiAgICByZXN1bHQgPSB0YWJsZS5nZXQoYXJnKTtcbiAgICBpZiAocmVzdWx0KVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICByZXN1bHQgPSArK2NvdW50ZXIgKyBcIn5cIjtcbiAgICB0YWJsZS5zZXQoYXJnLCByZXN1bHQpO1xuICAgIGlmIChjb25zdHJ1Y3RvciA9PSBBcnJheSkge1xuICAgICAgcmVzdWx0ID0gXCJAXCI7XG4gICAgICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCBhcmcubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgIHJlc3VsdCArPSBzdGFibGVIYXNoKGFyZ1tpbmRleF0pICsgXCIsXCI7XG4gICAgICB9XG4gICAgICB0YWJsZS5zZXQoYXJnLCByZXN1bHQpO1xuICAgIH1cbiAgICBpZiAoY29uc3RydWN0b3IgPT0gT0JKRUNUKSB7XG4gICAgICByZXN1bHQgPSBcIiNcIjtcbiAgICAgIHZhciBrZXlzID0gT0JKRUNULmtleXMoYXJnKS5zb3J0KCk7XG4gICAgICB3aGlsZSAoIWlzVW5kZWZpbmVkKGluZGV4ID0ga2V5cy5wb3AoKSkpIHtcbiAgICAgICAgaWYgKCFpc1VuZGVmaW5lZChhcmdbaW5kZXhdKSkge1xuICAgICAgICAgIHJlc3VsdCArPSBpbmRleCArIFwiOlwiICsgc3RhYmxlSGFzaChhcmdbaW5kZXhdKSArIFwiLFwiO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0YWJsZS5zZXQoYXJnLCByZXN1bHQpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXN1bHQgPSBpc0RhdGUgPyBhcmcudG9KU09OKCkgOiB0eXBlID09IFwic3ltYm9sXCIgPyBhcmcudG9TdHJpbmcoKSA6IHR5cGUgPT0gXCJzdHJpbmdcIiA/IEpTT04uc3RyaW5naWZ5KGFyZykgOiBcIlwiICsgYXJnO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xudmFyIG9ubGluZSA9IHRydWU7XG52YXIgaXNPbmxpbmUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG9ubGluZTtcbn07XG52YXIgaGFzV2luID0gaGFzV2luZG93KCk7XG52YXIgaGFzRG9jID0gaGFzRG9jdW1lbnQoKTtcbnZhciBvbldpbmRvd0V2ZW50ID0gaGFzV2luICYmIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyID8gd2luZG93LmFkZEV2ZW50TGlzdGVuZXIuYmluZCh3aW5kb3cpIDogbm9vcDtcbnZhciBvbkRvY3VtZW50RXZlbnQgPSBoYXNEb2MgPyBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyLmJpbmQoZG9jdW1lbnQpIDogbm9vcDtcbnZhciBvZmZXaW5kb3dFdmVudCA9IGhhc1dpbiAmJiB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lciA/IHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyLmJpbmQod2luZG93KSA6IG5vb3A7XG52YXIgb2ZmRG9jdW1lbnRFdmVudCA9IGhhc0RvYyA/IGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIuYmluZChkb2N1bWVudCkgOiBub29wO1xudmFyIGlzVmlzaWJsZSA9IGZ1bmN0aW9uKCkge1xuICB2YXIgdmlzaWJpbGl0eVN0YXRlID0gaGFzRG9jICYmIGRvY3VtZW50LnZpc2liaWxpdHlTdGF0ZTtcbiAgcmV0dXJuIGlzVW5kZWZpbmVkKHZpc2liaWxpdHlTdGF0ZSkgfHwgdmlzaWJpbGl0eVN0YXRlICE9PSBcImhpZGRlblwiO1xufTtcbnZhciBpbml0Rm9jdXMgPSBmdW5jdGlvbihjYWxsYmFjaykge1xuICBvbkRvY3VtZW50RXZlbnQoXCJ2aXNpYmlsaXR5Y2hhbmdlXCIsIGNhbGxiYWNrKTtcbiAgb25XaW5kb3dFdmVudChcImZvY3VzXCIsIGNhbGxiYWNrKTtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIG9mZkRvY3VtZW50RXZlbnQoXCJ2aXNpYmlsaXR5Y2hhbmdlXCIsIGNhbGxiYWNrKTtcbiAgICBvZmZXaW5kb3dFdmVudChcImZvY3VzXCIsIGNhbGxiYWNrKTtcbiAgfTtcbn07XG52YXIgaW5pdFJlY29ubmVjdCA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gIHZhciBvbk9ubGluZSA9IGZ1bmN0aW9uKCkge1xuICAgIG9ubGluZSA9IHRydWU7XG4gICAgY2FsbGJhY2soKTtcbiAgfTtcbiAgdmFyIG9uT2ZmbGluZSA9IGZ1bmN0aW9uKCkge1xuICAgIG9ubGluZSA9IGZhbHNlO1xuICB9O1xuICBvbldpbmRvd0V2ZW50KFwib25saW5lXCIsIG9uT25saW5lKTtcbiAgb25XaW5kb3dFdmVudChcIm9mZmxpbmVcIiwgb25PZmZsaW5lKTtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIG9mZldpbmRvd0V2ZW50KFwib25saW5lXCIsIG9uT25saW5lKTtcbiAgICBvZmZXaW5kb3dFdmVudChcIm9mZmxpbmVcIiwgb25PZmZsaW5lKTtcbiAgfTtcbn07XG52YXIgcHJlc2V0ID0ge1xuICBpc09ubGluZSxcbiAgaXNWaXNpYmxlXG59O1xudmFyIGRlZmF1bHRDb25maWdPcHRpb25zID0ge1xuICBpbml0Rm9jdXMsXG4gIGluaXRSZWNvbm5lY3Rcbn07XG52YXIgSVNfU0VSVkVSID0gIWhhc1dpbmRvdygpIHx8IFwiRGVub1wiIGluIHdpbmRvdztcbnZhciByQUYgPSBmdW5jdGlvbihmMikge1xuICByZXR1cm4gaGFzUmVxdWVzdEFuaW1hdGlvbkZyYW1lKCkgPyB3aW5kb3dbXCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWVcIl0oZjIpIDogc2V0VGltZW91dChmMiwgMSk7XG59O1xudmFyIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QgPSBJU19TRVJWRVIgPyB1c2VFZmZlY3QgOiB1c2VMYXlvdXRFZmZlY3Q7XG52YXIgbmF2aWdhdG9yQ29ubmVjdGlvbiA9IHR5cGVvZiBuYXZpZ2F0b3IgIT09IFwidW5kZWZpbmVkXCIgJiYgbmF2aWdhdG9yLmNvbm5lY3Rpb247XG52YXIgc2xvd0Nvbm5lY3Rpb24gPSAhSVNfU0VSVkVSICYmIG5hdmlnYXRvckNvbm5lY3Rpb24gJiYgKFtcInNsb3ctMmdcIiwgXCIyZ1wiXS5pbmNsdWRlcyhuYXZpZ2F0b3JDb25uZWN0aW9uLmVmZmVjdGl2ZVR5cGUpIHx8IG5hdmlnYXRvckNvbm5lY3Rpb24uc2F2ZURhdGEpO1xudmFyIHNlcmlhbGl6ZSA9IGZ1bmN0aW9uKGtleSkge1xuICBpZiAoaXNGdW5jdGlvbihrZXkpKSB7XG4gICAgdHJ5IHtcbiAgICAgIGtleSA9IGtleSgpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAga2V5ID0gXCJcIjtcbiAgICB9XG4gIH1cbiAgdmFyIGFyZ3MgPSBbXS5jb25jYXQoa2V5KTtcbiAga2V5ID0gdHlwZW9mIGtleSA9PSBcInN0cmluZ1wiID8ga2V5IDogKEFycmF5LmlzQXJyYXkoa2V5KSA/IGtleS5sZW5ndGggOiBrZXkpID8gc3RhYmxlSGFzaChrZXkpIDogXCJcIjtcbiAgdmFyIGluZm9LZXkgPSBrZXkgPyBcIiRzd3IkXCIgKyBrZXkgOiBcIlwiO1xuICByZXR1cm4gW2tleSwgYXJncywgaW5mb0tleV07XG59O1xudmFyIFNXUkdsb2JhbFN0YXRlID0gLyogQF9fUFVSRV9fICovIG5ldyBXZWFrTWFwKCk7XG52YXIgRk9DVVNfRVZFTlQgPSAwO1xudmFyIFJFQ09OTkVDVF9FVkVOVCA9IDE7XG52YXIgTVVUQVRFX0VWRU5UID0gMjtcbnZhciBicm9hZGNhc3RTdGF0ZSA9IGZ1bmN0aW9uKGNhY2hlMiwga2V5LCBkYXRhLCBlcnJvciwgaXNWYWxpZGF0aW5nLCByZXZhbGlkYXRlLCBicm9hZGNhc3QpIHtcbiAgaWYgKGJyb2FkY2FzdCA9PT0gdm9pZCAwKSB7XG4gICAgYnJvYWRjYXN0ID0gdHJ1ZTtcbiAgfVxuICB2YXIgX2EyID0gU1dSR2xvYmFsU3RhdGUuZ2V0KGNhY2hlMiksIEVWRU5UX1JFVkFMSURBVE9SUyA9IF9hMlswXSwgU1RBVEVfVVBEQVRFUlMgPSBfYTJbMV0sIEZFVENIID0gX2EyWzNdO1xuICB2YXIgcmV2YWxpZGF0b3JzID0gRVZFTlRfUkVWQUxJREFUT1JTW2tleV07XG4gIHZhciB1cGRhdGVycyA9IFNUQVRFX1VQREFURVJTW2tleV07XG4gIGlmIChicm9hZGNhc3QgJiYgdXBkYXRlcnMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHVwZGF0ZXJzLmxlbmd0aDsgKytpKSB7XG4gICAgICB1cGRhdGVyc1tpXShkYXRhLCBlcnJvciwgaXNWYWxpZGF0aW5nKTtcbiAgICB9XG4gIH1cbiAgaWYgKHJldmFsaWRhdGUpIHtcbiAgICBkZWxldGUgRkVUQ0hba2V5XTtcbiAgICBpZiAocmV2YWxpZGF0b3JzICYmIHJldmFsaWRhdG9yc1swXSkge1xuICAgICAgcmV0dXJuIHJldmFsaWRhdG9yc1swXShNVVRBVEVfRVZFTlQpLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBjYWNoZTIuZ2V0KGtleSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGNhY2hlMi5nZXQoa2V5KTtcbn07XG52YXIgX190aW1lc3RhbXAgPSAwO1xudmFyIGdldFRpbWVzdGFtcCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gKytfX3RpbWVzdGFtcDtcbn07XG52YXIgaW50ZXJuYWxNdXRhdGUgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGFyZ3MgPSBbXTtcbiAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gIH1cbiAgcmV0dXJuIF9fYXdhaXRlcih2b2lkIDAsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbigpIHtcbiAgICB2YXIgY2FjaGUyLCBfa2V5LCBfZGF0YSwgX29wdHMsIG9wdGlvbnMsIHBvcHVsYXRlQ2FjaGUsIHJldmFsaWRhdGUsIHJvbGxiYWNrT25FcnJvciwgb3B0aW1pc3RpY0RhdGEsIF9hMiwga2V5LCBrZXlJbmZvLCBfYiwgTVVUQVRJT04sIGRhdGEsIGVycm9yLCBiZWZvcmVNdXRhdGlvblRzLCBoYXNPcHRpbWlzdGljRGF0YSwgcm9sbGJhY2tEYXRhLCByZXM7XG4gICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uKF9jKSB7XG4gICAgICBzd2l0Y2ggKF9jLmxhYmVsKSB7XG4gICAgICAgIGNhc2UgMDpcbiAgICAgICAgICBjYWNoZTIgPSBhcmdzWzBdLCBfa2V5ID0gYXJnc1sxXSwgX2RhdGEgPSBhcmdzWzJdLCBfb3B0cyA9IGFyZ3NbM107XG4gICAgICAgICAgb3B0aW9ucyA9IHR5cGVvZiBfb3B0cyA9PT0gXCJib29sZWFuXCIgPyB7IHJldmFsaWRhdGU6IF9vcHRzIH0gOiBfb3B0cyB8fCB7fTtcbiAgICAgICAgICBwb3B1bGF0ZUNhY2hlID0gaXNVbmRlZmluZWQob3B0aW9ucy5wb3B1bGF0ZUNhY2hlKSA/IHRydWUgOiBvcHRpb25zLnBvcHVsYXRlQ2FjaGU7XG4gICAgICAgICAgcmV2YWxpZGF0ZSA9IG9wdGlvbnMucmV2YWxpZGF0ZSAhPT0gZmFsc2U7XG4gICAgICAgICAgcm9sbGJhY2tPbkVycm9yID0gb3B0aW9ucy5yb2xsYmFja09uRXJyb3IgIT09IGZhbHNlO1xuICAgICAgICAgIG9wdGltaXN0aWNEYXRhID0gb3B0aW9ucy5vcHRpbWlzdGljRGF0YTtcbiAgICAgICAgICBfYTIgPSBzZXJpYWxpemUoX2tleSksIGtleSA9IF9hMlswXSwga2V5SW5mbyA9IF9hMlsyXTtcbiAgICAgICAgICBpZiAoIWtleSlcbiAgICAgICAgICAgIHJldHVybiBbMl07XG4gICAgICAgICAgX2IgPSBTV1JHbG9iYWxTdGF0ZS5nZXQoY2FjaGUyKSwgTVVUQVRJT04gPSBfYlsyXTtcbiAgICAgICAgICBpZiAoYXJncy5sZW5ndGggPCAzKSB7XG4gICAgICAgICAgICByZXR1cm4gWzIsIGJyb2FkY2FzdFN0YXRlKGNhY2hlMiwga2V5LCBjYWNoZTIuZ2V0KGtleSksIFVOREVGSU5FRCwgVU5ERUZJTkVELCByZXZhbGlkYXRlLCB0cnVlKV07XG4gICAgICAgICAgfVxuICAgICAgICAgIGRhdGEgPSBfZGF0YTtcbiAgICAgICAgICBiZWZvcmVNdXRhdGlvblRzID0gZ2V0VGltZXN0YW1wKCk7XG4gICAgICAgICAgTVVUQVRJT05ba2V5XSA9IFtiZWZvcmVNdXRhdGlvblRzLCAwXTtcbiAgICAgICAgICBoYXNPcHRpbWlzdGljRGF0YSA9ICFpc1VuZGVmaW5lZChvcHRpbWlzdGljRGF0YSk7XG4gICAgICAgICAgcm9sbGJhY2tEYXRhID0gY2FjaGUyLmdldChrZXkpO1xuICAgICAgICAgIGlmIChoYXNPcHRpbWlzdGljRGF0YSkge1xuICAgICAgICAgICAgY2FjaGUyLnNldChrZXksIG9wdGltaXN0aWNEYXRhKTtcbiAgICAgICAgICAgIGJyb2FkY2FzdFN0YXRlKGNhY2hlMiwga2V5LCBvcHRpbWlzdGljRGF0YSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKGRhdGEpKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBkYXRhID0gZGF0YShjYWNoZTIuZ2V0KGtleSkpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgIGVycm9yID0gZXJyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIShkYXRhICYmIGlzRnVuY3Rpb24oZGF0YS50aGVuKSkpXG4gICAgICAgICAgICByZXR1cm4gWzMsIDJdO1xuICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgZGF0YS5jYXRjaChmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgICAgZXJyb3IgPSBlcnI7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgIF07XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICBkYXRhID0gX2Muc2VudCgpO1xuICAgICAgICAgIGlmIChiZWZvcmVNdXRhdGlvblRzICE9PSBNVVRBVElPTltrZXldWzBdKSB7XG4gICAgICAgICAgICBpZiAoZXJyb3IpXG4gICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgcmV0dXJuIFsyLCBkYXRhXTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGVycm9yICYmIGhhc09wdGltaXN0aWNEYXRhICYmIHJvbGxiYWNrT25FcnJvcikge1xuICAgICAgICAgICAgcG9wdWxhdGVDYWNoZSA9IHRydWU7XG4gICAgICAgICAgICBkYXRhID0gcm9sbGJhY2tEYXRhO1xuICAgICAgICAgICAgY2FjaGUyLnNldChrZXksIHJvbGxiYWNrRGF0YSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIF9jLmxhYmVsID0gMjtcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgIGlmIChwb3B1bGF0ZUNhY2hlKSB7XG4gICAgICAgICAgICBpZiAoIWVycm9yKSB7XG4gICAgICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKHBvcHVsYXRlQ2FjaGUpKSB7XG4gICAgICAgICAgICAgICAgZGF0YSA9IHBvcHVsYXRlQ2FjaGUoZGF0YSwgcm9sbGJhY2tEYXRhKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBjYWNoZTIuc2V0KGtleSwgZGF0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYWNoZTIuc2V0KGtleUluZm8sIG1lcmdlT2JqZWN0cyhjYWNoZTIuZ2V0KGtleUluZm8pLCB7IGVycm9yIH0pKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgTVVUQVRJT05ba2V5XVsxXSA9IGdldFRpbWVzdGFtcCgpO1xuICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgYnJvYWRjYXN0U3RhdGUoY2FjaGUyLCBrZXksIGRhdGEsIGVycm9yLCBVTkRFRklORUQsIHJldmFsaWRhdGUsICEhcG9wdWxhdGVDYWNoZSlcbiAgICAgICAgICBdO1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgcmVzID0gX2Muc2VudCgpO1xuICAgICAgICAgIGlmIChlcnJvcilcbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgIHJldHVybiBbMiwgcG9wdWxhdGVDYWNoZSA/IHJlcyA6IGRhdGFdO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcbn07XG52YXIgcmV2YWxpZGF0ZUFsbEtleXMgPSBmdW5jdGlvbihyZXZhbGlkYXRvcnMsIHR5cGUpIHtcbiAgZm9yICh2YXIga2V5IGluIHJldmFsaWRhdG9ycykge1xuICAgIGlmIChyZXZhbGlkYXRvcnNba2V5XVswXSlcbiAgICAgIHJldmFsaWRhdG9yc1trZXldWzBdKHR5cGUpO1xuICB9XG59O1xudmFyIGluaXRDYWNoZSA9IGZ1bmN0aW9uKHByb3ZpZGVyLCBvcHRpb25zKSB7XG4gIGlmICghU1dSR2xvYmFsU3RhdGUuaGFzKHByb3ZpZGVyKSkge1xuICAgIHZhciBvcHRzID0gbWVyZ2VPYmplY3RzKGRlZmF1bHRDb25maWdPcHRpb25zLCBvcHRpb25zKTtcbiAgICB2YXIgRVZFTlRfUkVWQUxJREFUT1JTID0ge307XG4gICAgdmFyIG11dGF0ZTIgPSBpbnRlcm5hbE11dGF0ZS5iaW5kKFVOREVGSU5FRCwgcHJvdmlkZXIpO1xuICAgIHZhciB1bm1vdW50ID0gbm9vcDtcbiAgICBTV1JHbG9iYWxTdGF0ZS5zZXQocHJvdmlkZXIsIFtFVkVOVF9SRVZBTElEQVRPUlMsIHt9LCB7fSwge30sIG11dGF0ZTJdKTtcbiAgICBpZiAoIUlTX1NFUlZFUikge1xuICAgICAgdmFyIHJlbGVhc2VGb2N1c18xID0gb3B0cy5pbml0Rm9jdXMoc2V0VGltZW91dC5iaW5kKFVOREVGSU5FRCwgcmV2YWxpZGF0ZUFsbEtleXMuYmluZChVTkRFRklORUQsIEVWRU5UX1JFVkFMSURBVE9SUywgRk9DVVNfRVZFTlQpKSk7XG4gICAgICB2YXIgcmVsZWFzZVJlY29ubmVjdF8xID0gb3B0cy5pbml0UmVjb25uZWN0KHNldFRpbWVvdXQuYmluZChVTkRFRklORUQsIHJldmFsaWRhdGVBbGxLZXlzLmJpbmQoVU5ERUZJTkVELCBFVkVOVF9SRVZBTElEQVRPUlMsIFJFQ09OTkVDVF9FVkVOVCkpKTtcbiAgICAgIHVubW91bnQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmVsZWFzZUZvY3VzXzEgJiYgcmVsZWFzZUZvY3VzXzEoKTtcbiAgICAgICAgcmVsZWFzZVJlY29ubmVjdF8xICYmIHJlbGVhc2VSZWNvbm5lY3RfMSgpO1xuICAgICAgICBTV1JHbG9iYWxTdGF0ZS5kZWxldGUocHJvdmlkZXIpO1xuICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIFtwcm92aWRlciwgbXV0YXRlMiwgdW5tb3VudF07XG4gIH1cbiAgcmV0dXJuIFtwcm92aWRlciwgU1dSR2xvYmFsU3RhdGUuZ2V0KHByb3ZpZGVyKVs0XV07XG59O1xudmFyIG9uRXJyb3JSZXRyeSA9IGZ1bmN0aW9uKF8sIF9fLCBjb25maWcsIHJldmFsaWRhdGUsIG9wdHMpIHtcbiAgdmFyIG1heFJldHJ5Q291bnQgPSBjb25maWcuZXJyb3JSZXRyeUNvdW50O1xuICB2YXIgY3VycmVudFJldHJ5Q291bnQgPSBvcHRzLnJldHJ5Q291bnQ7XG4gIHZhciB0aW1lb3V0ID0gfn4oKE1hdGgucmFuZG9tKCkgKyAwLjUpICogKDEgPDwgKGN1cnJlbnRSZXRyeUNvdW50IDwgOCA/IGN1cnJlbnRSZXRyeUNvdW50IDogOCkpKSAqIGNvbmZpZy5lcnJvclJldHJ5SW50ZXJ2YWw7XG4gIGlmICghaXNVbmRlZmluZWQobWF4UmV0cnlDb3VudCkgJiYgY3VycmVudFJldHJ5Q291bnQgPiBtYXhSZXRyeUNvdW50KSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHNldFRpbWVvdXQocmV2YWxpZGF0ZSwgdGltZW91dCwgb3B0cyk7XG59O1xudmFyIF9hID0gaW5pdENhY2hlKC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCkpLCBjYWNoZSA9IF9hWzBdLCBtdXRhdGUgPSBfYVsxXTtcbnZhciBkZWZhdWx0Q29uZmlnID0gbWVyZ2VPYmplY3RzKHtcbiAgb25Mb2FkaW5nU2xvdzogbm9vcCxcbiAgb25TdWNjZXNzOiBub29wLFxuICBvbkVycm9yOiBub29wLFxuICBvbkVycm9yUmV0cnksXG4gIG9uRGlzY2FyZGVkOiBub29wLFxuICByZXZhbGlkYXRlT25Gb2N1czogdHJ1ZSxcbiAgcmV2YWxpZGF0ZU9uUmVjb25uZWN0OiB0cnVlLFxuICByZXZhbGlkYXRlSWZTdGFsZTogdHJ1ZSxcbiAgc2hvdWxkUmV0cnlPbkVycm9yOiB0cnVlLFxuICBlcnJvclJldHJ5SW50ZXJ2YWw6IHNsb3dDb25uZWN0aW9uID8gMWU0IDogNWUzLFxuICBmb2N1c1Rocm90dGxlSW50ZXJ2YWw6IDUgKiAxZTMsXG4gIGRlZHVwaW5nSW50ZXJ2YWw6IDIgKiAxZTMsXG4gIGxvYWRpbmdUaW1lb3V0OiBzbG93Q29ubmVjdGlvbiA/IDVlMyA6IDNlMyxcbiAgY29tcGFyZTogZnVuY3Rpb24oY3VycmVudERhdGEsIG5ld0RhdGEpIHtcbiAgICByZXR1cm4gc3RhYmxlSGFzaChjdXJyZW50RGF0YSkgPT0gc3RhYmxlSGFzaChuZXdEYXRhKTtcbiAgfSxcbiAgaXNQYXVzZWQ6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSxcbiAgY2FjaGUsXG4gIG11dGF0ZSxcbiAgZmFsbGJhY2s6IHt9XG59LCBwcmVzZXQpO1xudmFyIG1lcmdlQ29uZmlncyA9IGZ1bmN0aW9uKGEsIGIpIHtcbiAgdmFyIHYgPSBtZXJnZU9iamVjdHMoYSwgYik7XG4gIGlmIChiKSB7XG4gICAgdmFyIHUxID0gYS51c2UsIGYxID0gYS5mYWxsYmFjaztcbiAgICB2YXIgdTIgPSBiLnVzZSwgZjIgPSBiLmZhbGxiYWNrO1xuICAgIGlmICh1MSAmJiB1Mikge1xuICAgICAgdi51c2UgPSB1MS5jb25jYXQodTIpO1xuICAgIH1cbiAgICBpZiAoZjEgJiYgZjIpIHtcbiAgICAgIHYuZmFsbGJhY2sgPSBtZXJnZU9iamVjdHMoZjEsIGYyKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHY7XG59O1xudmFyIFNXUkNvbmZpZ0NvbnRleHQgPSBjcmVhdGVDb250ZXh0KHt9KTtcbnZhciBTV1JDb25maWckMSA9IGZ1bmN0aW9uKHByb3BzKSB7XG4gIHZhciB2YWx1ZSA9IHByb3BzLnZhbHVlO1xuICB2YXIgZXh0ZW5kZWRDb25maWcgPSBtZXJnZUNvbmZpZ3ModXNlQ29udGV4dChTV1JDb25maWdDb250ZXh0KSwgdmFsdWUpO1xuICB2YXIgcHJvdmlkZXIgPSB2YWx1ZSAmJiB2YWx1ZS5wcm92aWRlcjtcbiAgdmFyIGNhY2hlQ29udGV4dCA9IHVzZVN0YXRlKGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBwcm92aWRlciA/IGluaXRDYWNoZShwcm92aWRlcihleHRlbmRlZENvbmZpZy5jYWNoZSB8fCBjYWNoZSksIHZhbHVlKSA6IFVOREVGSU5FRDtcbiAgfSlbMF07XG4gIGlmIChjYWNoZUNvbnRleHQpIHtcbiAgICBleHRlbmRlZENvbmZpZy5jYWNoZSA9IGNhY2hlQ29udGV4dFswXTtcbiAgICBleHRlbmRlZENvbmZpZy5tdXRhdGUgPSBjYWNoZUNvbnRleHRbMV07XG4gIH1cbiAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdChmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gY2FjaGVDb250ZXh0ID8gY2FjaGVDb250ZXh0WzJdIDogVU5ERUZJTkVEO1xuICB9LCBbXSk7XG4gIHJldHVybiBjcmVhdGVFbGVtZW50KFNXUkNvbmZpZ0NvbnRleHQuUHJvdmlkZXIsIG1lcmdlT2JqZWN0cyhwcm9wcywge1xuICAgIHZhbHVlOiBleHRlbmRlZENvbmZpZ1xuICB9KSk7XG59O1xudmFyIHVzZVN0YXRlV2l0aERlcHMgPSBmdW5jdGlvbihzdGF0ZSwgdW5tb3VudGVkUmVmKSB7XG4gIHZhciByZXJlbmRlciA9IHVzZVN0YXRlKHt9KVsxXTtcbiAgdmFyIHN0YXRlUmVmID0gdXNlUmVmKHN0YXRlKTtcbiAgdmFyIHN0YXRlRGVwZW5kZW5jaWVzUmVmID0gdXNlUmVmKHtcbiAgICBkYXRhOiBmYWxzZSxcbiAgICBlcnJvcjogZmFsc2UsXG4gICAgaXNWYWxpZGF0aW5nOiBmYWxzZVxuICB9KTtcbiAgdmFyIHNldFN0YXRlID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24ocGF5bG9hZCkge1xuICAgIHZhciBzaG91bGRSZXJlbmRlciA9IGZhbHNlO1xuICAgIHZhciBjdXJyZW50U3RhdGUgPSBzdGF0ZVJlZi5jdXJyZW50O1xuICAgIGZvciAodmFyIF8gaW4gcGF5bG9hZCkge1xuICAgICAgdmFyIGsgPSBfO1xuICAgICAgaWYgKGN1cnJlbnRTdGF0ZVtrXSAhPT0gcGF5bG9hZFtrXSkge1xuICAgICAgICBjdXJyZW50U3RhdGVba10gPSBwYXlsb2FkW2tdO1xuICAgICAgICBpZiAoc3RhdGVEZXBlbmRlbmNpZXNSZWYuY3VycmVudFtrXSkge1xuICAgICAgICAgIHNob3VsZFJlcmVuZGVyID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoc2hvdWxkUmVyZW5kZXIgJiYgIXVubW91bnRlZFJlZi5jdXJyZW50KSB7XG4gICAgICByZXJlbmRlcih7fSk7XG4gICAgfVxuICB9LCBbXSk7XG4gIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoZnVuY3Rpb24oKSB7XG4gICAgc3RhdGVSZWYuY3VycmVudCA9IHN0YXRlO1xuICB9KTtcbiAgcmV0dXJuIFtzdGF0ZVJlZiwgc3RhdGVEZXBlbmRlbmNpZXNSZWYuY3VycmVudCwgc2V0U3RhdGVdO1xufTtcbnZhciBub3JtYWxpemUgPSBmdW5jdGlvbihhcmdzKSB7XG4gIHJldHVybiBpc0Z1bmN0aW9uKGFyZ3NbMV0pID8gW2FyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0gfHwge31dIDogW2FyZ3NbMF0sIG51bGwsIChhcmdzWzFdID09PSBudWxsID8gYXJnc1syXSA6IGFyZ3NbMV0pIHx8IHt9XTtcbn07XG52YXIgdXNlU1dSQ29uZmlnID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBtZXJnZU9iamVjdHMoZGVmYXVsdENvbmZpZywgdXNlQ29udGV4dChTV1JDb25maWdDb250ZXh0KSk7XG59O1xudmFyIHdpdGhBcmdzID0gZnVuY3Rpb24oaG9vaykge1xuICByZXR1cm4gZnVuY3Rpb24gdXNlU1dSQXJncygpIHtcbiAgICB2YXIgYXJncyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHZhciBmYWxsYmFja0NvbmZpZyA9IHVzZVNXUkNvbmZpZygpO1xuICAgIHZhciBfYTIgPSBub3JtYWxpemUoYXJncyksIGtleSA9IF9hMlswXSwgZm4gPSBfYTJbMV0sIF9jb25maWcgPSBfYTJbMl07XG4gICAgdmFyIGNvbmZpZyA9IG1lcmdlQ29uZmlncyhmYWxsYmFja0NvbmZpZywgX2NvbmZpZyk7XG4gICAgdmFyIG5leHQgPSBob29rO1xuICAgIHZhciB1c2UgPSBjb25maWcudXNlO1xuICAgIGlmICh1c2UpIHtcbiAgICAgIGZvciAodmFyIGkgPSB1c2UubGVuZ3RoOyBpLS0gPiAwOyApIHtcbiAgICAgICAgbmV4dCA9IHVzZVtpXShuZXh0KTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5leHQoa2V5LCBmbiB8fCBjb25maWcuZmV0Y2hlciwgY29uZmlnKTtcbiAgfTtcbn07XG52YXIgc3Vic2NyaWJlQ2FsbGJhY2sgPSBmdW5jdGlvbihrZXksIGNhbGxiYWNrcywgY2FsbGJhY2spIHtcbiAgdmFyIGtleWVkUmV2YWxpZGF0b3JzID0gY2FsbGJhY2tzW2tleV0gfHwgKGNhbGxiYWNrc1trZXldID0gW10pO1xuICBrZXllZFJldmFsaWRhdG9ycy5wdXNoKGNhbGxiYWNrKTtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBpbmRleCA9IGtleWVkUmV2YWxpZGF0b3JzLmluZGV4T2YoY2FsbGJhY2spO1xuICAgIGlmIChpbmRleCA+PSAwKSB7XG4gICAgICBrZXllZFJldmFsaWRhdG9yc1tpbmRleF0gPSBrZXllZFJldmFsaWRhdG9yc1trZXllZFJldmFsaWRhdG9ycy5sZW5ndGggLSAxXTtcbiAgICAgIGtleWVkUmV2YWxpZGF0b3JzLnBvcCgpO1xuICAgIH1cbiAgfTtcbn07XG52YXIgV0lUSF9ERURVUEUgPSB7IGRlZHVwZTogdHJ1ZSB9O1xudmFyIHVzZVNXUkhhbmRsZXIgPSBmdW5jdGlvbihfa2V5LCBmZXRjaGVyMiwgY29uZmlnKSB7XG4gIHZhciBjYWNoZTIgPSBjb25maWcuY2FjaGUsIGNvbXBhcmUgPSBjb25maWcuY29tcGFyZSwgZmFsbGJhY2tEYXRhID0gY29uZmlnLmZhbGxiYWNrRGF0YSwgc3VzcGVuc2UgPSBjb25maWcuc3VzcGVuc2UsIHJldmFsaWRhdGVPbk1vdW50ID0gY29uZmlnLnJldmFsaWRhdGVPbk1vdW50LCByZWZyZXNoSW50ZXJ2YWwgPSBjb25maWcucmVmcmVzaEludGVydmFsLCByZWZyZXNoV2hlbkhpZGRlbiA9IGNvbmZpZy5yZWZyZXNoV2hlbkhpZGRlbiwgcmVmcmVzaFdoZW5PZmZsaW5lID0gY29uZmlnLnJlZnJlc2hXaGVuT2ZmbGluZTtcbiAgdmFyIF9hMiA9IFNXUkdsb2JhbFN0YXRlLmdldChjYWNoZTIpLCBFVkVOVF9SRVZBTElEQVRPUlMgPSBfYTJbMF0sIFNUQVRFX1VQREFURVJTID0gX2EyWzFdLCBNVVRBVElPTiA9IF9hMlsyXSwgRkVUQ0ggPSBfYTJbM107XG4gIHZhciBfYiA9IHNlcmlhbGl6ZShfa2V5KSwga2V5ID0gX2JbMF0sIGZuQXJncyA9IF9iWzFdLCBrZXlJbmZvID0gX2JbMl07XG4gIHZhciBpbml0aWFsTW91bnRlZFJlZiA9IHVzZVJlZihmYWxzZSk7XG4gIHZhciB1bm1vdW50ZWRSZWYgPSB1c2VSZWYoZmFsc2UpO1xuICB2YXIga2V5UmVmID0gdXNlUmVmKGtleSk7XG4gIHZhciBmZXRjaGVyUmVmID0gdXNlUmVmKGZldGNoZXIyKTtcbiAgdmFyIGNvbmZpZ1JlZiA9IHVzZVJlZihjb25maWcpO1xuICB2YXIgZ2V0Q29uZmlnID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGNvbmZpZ1JlZi5jdXJyZW50O1xuICB9O1xuICB2YXIgaXNBY3RpdmUgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZ2V0Q29uZmlnKCkuaXNWaXNpYmxlKCkgJiYgZ2V0Q29uZmlnKCkuaXNPbmxpbmUoKTtcbiAgfTtcbiAgdmFyIHBhdGNoRmV0Y2hJbmZvID0gZnVuY3Rpb24oaW5mbzIpIHtcbiAgICByZXR1cm4gY2FjaGUyLnNldChrZXlJbmZvLCBtZXJnZU9iamVjdHMoY2FjaGUyLmdldChrZXlJbmZvKSwgaW5mbzIpKTtcbiAgfTtcbiAgdmFyIGNhY2hlZCA9IGNhY2hlMi5nZXQoa2V5KTtcbiAgdmFyIGZhbGxiYWNrID0gaXNVbmRlZmluZWQoZmFsbGJhY2tEYXRhKSA/IGNvbmZpZy5mYWxsYmFja1trZXldIDogZmFsbGJhY2tEYXRhO1xuICB2YXIgZGF0YSA9IGlzVW5kZWZpbmVkKGNhY2hlZCkgPyBmYWxsYmFjayA6IGNhY2hlZDtcbiAgdmFyIGluZm8gPSBjYWNoZTIuZ2V0KGtleUluZm8pIHx8IHt9O1xuICB2YXIgZXJyb3IgPSBpbmZvLmVycm9yO1xuICB2YXIgaXNJbml0aWFsTW91bnQgPSAhaW5pdGlhbE1vdW50ZWRSZWYuY3VycmVudDtcbiAgdmFyIHNob3VsZFJldmFsaWRhdGUgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAoaXNJbml0aWFsTW91bnQgJiYgIWlzVW5kZWZpbmVkKHJldmFsaWRhdGVPbk1vdW50KSlcbiAgICAgIHJldHVybiByZXZhbGlkYXRlT25Nb3VudDtcbiAgICBpZiAoZ2V0Q29uZmlnKCkuaXNQYXVzZWQoKSlcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gc3VzcGVuc2UgPyAhaXNVbmRlZmluZWQoZGF0YSkgOiBpc1VuZGVmaW5lZChkYXRhKSB8fCBjb25maWcucmV2YWxpZGF0ZUlmU3RhbGU7XG4gIH07XG4gIHZhciByZXNvbHZlVmFsaWRhdGluZyA9IGZ1bmN0aW9uKCkge1xuICAgIGlmICgha2V5IHx8ICFmZXRjaGVyMilcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICBpZiAoaW5mby5pc1ZhbGlkYXRpbmcpXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICByZXR1cm4gaXNJbml0aWFsTW91bnQgJiYgc2hvdWxkUmV2YWxpZGF0ZSgpO1xuICB9O1xuICB2YXIgaXNWYWxpZGF0aW5nID0gcmVzb2x2ZVZhbGlkYXRpbmcoKTtcbiAgdmFyIF9jID0gdXNlU3RhdGVXaXRoRGVwcyh7XG4gICAgZGF0YSxcbiAgICBlcnJvcixcbiAgICBpc1ZhbGlkYXRpbmdcbiAgfSwgdW5tb3VudGVkUmVmKSwgc3RhdGVSZWYgPSBfY1swXSwgc3RhdGVEZXBlbmRlbmNpZXMgPSBfY1sxXSwgc2V0U3RhdGUgPSBfY1syXTtcbiAgdmFyIHJldmFsaWRhdGUgPSB1c2VDYWxsYmFjayhmdW5jdGlvbihyZXZhbGlkYXRlT3B0cykge1xuICAgIHJldHVybiBfX2F3YWl0ZXIodm9pZCAwLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgY3VycmVudEZldGNoZXIsIG5ld0RhdGEsIHN0YXJ0QXQsIGxvYWRpbmcsIG9wdHMsIHNob3VsZFN0YXJ0TmV3UmVxdWVzdCwgaXNDdXJyZW50S2V5TW91bnRlZCwgY2xlYW51cFN0YXRlLCBuZXdTdGF0ZSwgZmluaXNoUmVxdWVzdEFuZFVwZGF0ZVN0YXRlLCBtdXRhdGlvbkluZm8sIGVycl8xO1xuICAgICAgdmFyIF9hMztcbiAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbihfYjIpIHtcbiAgICAgICAgc3dpdGNoIChfYjIubGFiZWwpIHtcbiAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICBjdXJyZW50RmV0Y2hlciA9IGZldGNoZXJSZWYuY3VycmVudDtcbiAgICAgICAgICAgIGlmICgha2V5IHx8ICFjdXJyZW50RmV0Y2hlciB8fCB1bm1vdW50ZWRSZWYuY3VycmVudCB8fCBnZXRDb25maWcoKS5pc1BhdXNlZCgpKSB7XG4gICAgICAgICAgICAgIHJldHVybiBbMiwgZmFsc2VdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbG9hZGluZyA9IHRydWU7XG4gICAgICAgICAgICBvcHRzID0gcmV2YWxpZGF0ZU9wdHMgfHwge307XG4gICAgICAgICAgICBzaG91bGRTdGFydE5ld1JlcXVlc3QgPSAhRkVUQ0hba2V5XSB8fCAhb3B0cy5kZWR1cGU7XG4gICAgICAgICAgICBpc0N1cnJlbnRLZXlNb3VudGVkID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIHJldHVybiAhdW5tb3VudGVkUmVmLmN1cnJlbnQgJiYga2V5ID09PSBrZXlSZWYuY3VycmVudCAmJiBpbml0aWFsTW91bnRlZFJlZi5jdXJyZW50O1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNsZWFudXBTdGF0ZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICB2YXIgcmVxdWVzdEluZm8gPSBGRVRDSFtrZXldO1xuICAgICAgICAgICAgICBpZiAocmVxdWVzdEluZm8gJiYgcmVxdWVzdEluZm9bMV0gPT09IHN0YXJ0QXQpIHtcbiAgICAgICAgICAgICAgICBkZWxldGUgRkVUQ0hba2V5XTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIG5ld1N0YXRlID0geyBpc1ZhbGlkYXRpbmc6IGZhbHNlIH07XG4gICAgICAgICAgICBmaW5pc2hSZXF1ZXN0QW5kVXBkYXRlU3RhdGUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgcGF0Y2hGZXRjaEluZm8oeyBpc1ZhbGlkYXRpbmc6IGZhbHNlIH0pO1xuICAgICAgICAgICAgICBpZiAoaXNDdXJyZW50S2V5TW91bnRlZCgpKSB7XG4gICAgICAgICAgICAgICAgc2V0U3RhdGUobmV3U3RhdGUpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcGF0Y2hGZXRjaEluZm8oe1xuICAgICAgICAgICAgICBpc1ZhbGlkYXRpbmc6IHRydWVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgc2V0U3RhdGUoeyBpc1ZhbGlkYXRpbmc6IHRydWUgfSk7XG4gICAgICAgICAgICBfYjIubGFiZWwgPSAxO1xuICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgIF9iMi50cnlzLnB1c2goWzEsIDMsICwgNF0pO1xuICAgICAgICAgICAgaWYgKHNob3VsZFN0YXJ0TmV3UmVxdWVzdCkge1xuICAgICAgICAgICAgICBicm9hZGNhc3RTdGF0ZShjYWNoZTIsIGtleSwgc3RhdGVSZWYuY3VycmVudC5kYXRhLCBzdGF0ZVJlZi5jdXJyZW50LmVycm9yLCB0cnVlKTtcbiAgICAgICAgICAgICAgaWYgKGNvbmZpZy5sb2FkaW5nVGltZW91dCAmJiAhY2FjaGUyLmdldChrZXkpKSB7XG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgIGlmIChsb2FkaW5nICYmIGlzQ3VycmVudEtleU1vdW50ZWQoKSkge1xuICAgICAgICAgICAgICAgICAgICBnZXRDb25maWcoKS5vbkxvYWRpbmdTbG93KGtleSwgY29uZmlnKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LCBjb25maWcubG9hZGluZ1RpbWVvdXQpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIEZFVENIW2tleV0gPSBbY3VycmVudEZldGNoZXIuYXBwbHkodm9pZCAwLCBmbkFyZ3MpLCBnZXRUaW1lc3RhbXAoKV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBfYTMgPSBGRVRDSFtrZXldLCBuZXdEYXRhID0gX2EzWzBdLCBzdGFydEF0ID0gX2EzWzFdO1xuICAgICAgICAgICAgcmV0dXJuIFs0LCBuZXdEYXRhXTtcbiAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICBuZXdEYXRhID0gX2IyLnNlbnQoKTtcbiAgICAgICAgICAgIGlmIChzaG91bGRTdGFydE5ld1JlcXVlc3QpIHtcbiAgICAgICAgICAgICAgc2V0VGltZW91dChjbGVhbnVwU3RhdGUsIGNvbmZpZy5kZWR1cGluZ0ludGVydmFsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghRkVUQ0hba2V5XSB8fCBGRVRDSFtrZXldWzFdICE9PSBzdGFydEF0KSB7XG4gICAgICAgICAgICAgIGlmIChzaG91bGRTdGFydE5ld1JlcXVlc3QpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNDdXJyZW50S2V5TW91bnRlZCgpKSB7XG4gICAgICAgICAgICAgICAgICBnZXRDb25maWcoKS5vbkRpc2NhcmRlZChrZXkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gWzIsIGZhbHNlXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHBhdGNoRmV0Y2hJbmZvKHtcbiAgICAgICAgICAgICAgZXJyb3I6IFVOREVGSU5FRFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBuZXdTdGF0ZS5lcnJvciA9IFVOREVGSU5FRDtcbiAgICAgICAgICAgIG11dGF0aW9uSW5mbyA9IE1VVEFUSU9OW2tleV07XG4gICAgICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKG11dGF0aW9uSW5mbykgJiYgKHN0YXJ0QXQgPD0gbXV0YXRpb25JbmZvWzBdIHx8IHN0YXJ0QXQgPD0gbXV0YXRpb25JbmZvWzFdIHx8IG11dGF0aW9uSW5mb1sxXSA9PT0gMCkpIHtcbiAgICAgICAgICAgICAgZmluaXNoUmVxdWVzdEFuZFVwZGF0ZVN0YXRlKCk7XG4gICAgICAgICAgICAgIGlmIChzaG91bGRTdGFydE5ld1JlcXVlc3QpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNDdXJyZW50S2V5TW91bnRlZCgpKSB7XG4gICAgICAgICAgICAgICAgICBnZXRDb25maWcoKS5vbkRpc2NhcmRlZChrZXkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gWzIsIGZhbHNlXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghY29tcGFyZShzdGF0ZVJlZi5jdXJyZW50LmRhdGEsIG5ld0RhdGEpKSB7XG4gICAgICAgICAgICAgIG5ld1N0YXRlLmRhdGEgPSBuZXdEYXRhO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgbmV3U3RhdGUuZGF0YSA9IHN0YXRlUmVmLmN1cnJlbnQuZGF0YTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghY29tcGFyZShjYWNoZTIuZ2V0KGtleSksIG5ld0RhdGEpKSB7XG4gICAgICAgICAgICAgIGNhY2hlMi5zZXQoa2V5LCBuZXdEYXRhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzaG91bGRTdGFydE5ld1JlcXVlc3QpIHtcbiAgICAgICAgICAgICAgaWYgKGlzQ3VycmVudEtleU1vdW50ZWQoKSkge1xuICAgICAgICAgICAgICAgIGdldENvbmZpZygpLm9uU3VjY2VzcyhuZXdEYXRhLCBrZXksIGNvbmZpZyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBbMywgNF07XG4gICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgZXJyXzEgPSBfYjIuc2VudCgpO1xuICAgICAgICAgICAgY2xlYW51cFN0YXRlKCk7XG4gICAgICAgICAgICBpZiAoIWdldENvbmZpZygpLmlzUGF1c2VkKCkpIHtcbiAgICAgICAgICAgICAgcGF0Y2hGZXRjaEluZm8oeyBlcnJvcjogZXJyXzEgfSk7XG4gICAgICAgICAgICAgIG5ld1N0YXRlLmVycm9yID0gZXJyXzE7XG4gICAgICAgICAgICAgIGlmIChzaG91bGRTdGFydE5ld1JlcXVlc3QgJiYgaXNDdXJyZW50S2V5TW91bnRlZCgpKSB7XG4gICAgICAgICAgICAgICAgZ2V0Q29uZmlnKCkub25FcnJvcihlcnJfMSwga2V5LCBjb25maWcpO1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgY29uZmlnLnNob3VsZFJldHJ5T25FcnJvciA9PT0gXCJib29sZWFuXCIgJiYgY29uZmlnLnNob3VsZFJldHJ5T25FcnJvciB8fCBpc0Z1bmN0aW9uKGNvbmZpZy5zaG91bGRSZXRyeU9uRXJyb3IpICYmIGNvbmZpZy5zaG91bGRSZXRyeU9uRXJyb3IoZXJyXzEpKSB7XG4gICAgICAgICAgICAgICAgICBpZiAoaXNBY3RpdmUoKSkge1xuICAgICAgICAgICAgICAgICAgICBnZXRDb25maWcoKS5vbkVycm9yUmV0cnkoZXJyXzEsIGtleSwgY29uZmlnLCByZXZhbGlkYXRlLCB7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0cnlDb3VudDogKG9wdHMucmV0cnlDb3VudCB8fCAwKSArIDEsXG4gICAgICAgICAgICAgICAgICAgICAgZGVkdXBlOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIFszLCA0XTtcbiAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICBsb2FkaW5nID0gZmFsc2U7XG4gICAgICAgICAgICBmaW5pc2hSZXF1ZXN0QW5kVXBkYXRlU3RhdGUoKTtcbiAgICAgICAgICAgIGlmIChpc0N1cnJlbnRLZXlNb3VudGVkKCkgJiYgc2hvdWxkU3RhcnROZXdSZXF1ZXN0KSB7XG4gICAgICAgICAgICAgIGJyb2FkY2FzdFN0YXRlKGNhY2hlMiwga2V5LCBuZXdTdGF0ZS5kYXRhLCBuZXdTdGF0ZS5lcnJvciwgZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIFsyLCB0cnVlXTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH0sIFtrZXldKTtcbiAgdmFyIGJvdW5kTXV0YXRlID0gdXNlQ2FsbGJhY2soaW50ZXJuYWxNdXRhdGUuYmluZChVTkRFRklORUQsIGNhY2hlMiwgZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGtleVJlZi5jdXJyZW50O1xuICB9KSwgW10pO1xuICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KGZ1bmN0aW9uKCkge1xuICAgIGZldGNoZXJSZWYuY3VycmVudCA9IGZldGNoZXIyO1xuICAgIGNvbmZpZ1JlZi5jdXJyZW50ID0gY29uZmlnO1xuICB9KTtcbiAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdChmdW5jdGlvbigpIHtcbiAgICBpZiAoIWtleSlcbiAgICAgIHJldHVybjtcbiAgICB2YXIga2V5Q2hhbmdlZCA9IGtleSAhPT0ga2V5UmVmLmN1cnJlbnQ7XG4gICAgdmFyIHNvZnRSZXZhbGlkYXRlID0gcmV2YWxpZGF0ZS5iaW5kKFVOREVGSU5FRCwgV0lUSF9ERURVUEUpO1xuICAgIHZhciBvblN0YXRlVXBkYXRlID0gZnVuY3Rpb24odXBkYXRlZERhdGEsIHVwZGF0ZWRFcnJvciwgdXBkYXRlZElzVmFsaWRhdGluZykge1xuICAgICAgc2V0U3RhdGUobWVyZ2VPYmplY3RzKHtcbiAgICAgICAgZXJyb3I6IHVwZGF0ZWRFcnJvcixcbiAgICAgICAgaXNWYWxpZGF0aW5nOiB1cGRhdGVkSXNWYWxpZGF0aW5nXG4gICAgICB9LCBjb21wYXJlKHN0YXRlUmVmLmN1cnJlbnQuZGF0YSwgdXBkYXRlZERhdGEpID8gVU5ERUZJTkVEIDoge1xuICAgICAgICBkYXRhOiB1cGRhdGVkRGF0YVxuICAgICAgfSkpO1xuICAgIH07XG4gICAgdmFyIG5leHRGb2N1c1JldmFsaWRhdGVkQXQgPSAwO1xuICAgIHZhciBvblJldmFsaWRhdGUgPSBmdW5jdGlvbih0eXBlKSB7XG4gICAgICBpZiAodHlwZSA9PSBGT0NVU19FVkVOVCkge1xuICAgICAgICB2YXIgbm93ID0gRGF0ZS5ub3coKTtcbiAgICAgICAgaWYgKGdldENvbmZpZygpLnJldmFsaWRhdGVPbkZvY3VzICYmIG5vdyA+IG5leHRGb2N1c1JldmFsaWRhdGVkQXQgJiYgaXNBY3RpdmUoKSkge1xuICAgICAgICAgIG5leHRGb2N1c1JldmFsaWRhdGVkQXQgPSBub3cgKyBnZXRDb25maWcoKS5mb2N1c1Rocm90dGxlSW50ZXJ2YWw7XG4gICAgICAgICAgc29mdFJldmFsaWRhdGUoKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh0eXBlID09IFJFQ09OTkVDVF9FVkVOVCkge1xuICAgICAgICBpZiAoZ2V0Q29uZmlnKCkucmV2YWxpZGF0ZU9uUmVjb25uZWN0ICYmIGlzQWN0aXZlKCkpIHtcbiAgICAgICAgICBzb2Z0UmV2YWxpZGF0ZSgpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHR5cGUgPT0gTVVUQVRFX0VWRU5UKSB7XG4gICAgICAgIHJldHVybiByZXZhbGlkYXRlKCk7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfTtcbiAgICB2YXIgdW5zdWJVcGRhdGUgPSBzdWJzY3JpYmVDYWxsYmFjayhrZXksIFNUQVRFX1VQREFURVJTLCBvblN0YXRlVXBkYXRlKTtcbiAgICB2YXIgdW5zdWJFdmVudHMgPSBzdWJzY3JpYmVDYWxsYmFjayhrZXksIEVWRU5UX1JFVkFMSURBVE9SUywgb25SZXZhbGlkYXRlKTtcbiAgICB1bm1vdW50ZWRSZWYuY3VycmVudCA9IGZhbHNlO1xuICAgIGtleVJlZi5jdXJyZW50ID0ga2V5O1xuICAgIGluaXRpYWxNb3VudGVkUmVmLmN1cnJlbnQgPSB0cnVlO1xuICAgIGlmIChrZXlDaGFuZ2VkKSB7XG4gICAgICBzZXRTdGF0ZSh7XG4gICAgICAgIGRhdGEsXG4gICAgICAgIGVycm9yLFxuICAgICAgICBpc1ZhbGlkYXRpbmdcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoc2hvdWxkUmV2YWxpZGF0ZSgpKSB7XG4gICAgICBpZiAoaXNVbmRlZmluZWQoZGF0YSkgfHwgSVNfU0VSVkVSKSB7XG4gICAgICAgIHNvZnRSZXZhbGlkYXRlKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByQUYoc29mdFJldmFsaWRhdGUpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICB1bm1vdW50ZWRSZWYuY3VycmVudCA9IHRydWU7XG4gICAgICB1bnN1YlVwZGF0ZSgpO1xuICAgICAgdW5zdWJFdmVudHMoKTtcbiAgICB9O1xuICB9LCBba2V5LCByZXZhbGlkYXRlXSk7XG4gIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoZnVuY3Rpb24oKSB7XG4gICAgdmFyIHRpbWVyO1xuICAgIGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICB2YXIgaW50ZXJ2YWwgPSBpc0Z1bmN0aW9uKHJlZnJlc2hJbnRlcnZhbCkgPyByZWZyZXNoSW50ZXJ2YWwoZGF0YSkgOiByZWZyZXNoSW50ZXJ2YWw7XG4gICAgICBpZiAoaW50ZXJ2YWwgJiYgdGltZXIgIT09IC0xKSB7XG4gICAgICAgIHRpbWVyID0gc2V0VGltZW91dChleGVjdXRlLCBpbnRlcnZhbCk7XG4gICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGV4ZWN1dGUoKSB7XG4gICAgICBpZiAoIXN0YXRlUmVmLmN1cnJlbnQuZXJyb3IgJiYgKHJlZnJlc2hXaGVuSGlkZGVuIHx8IGdldENvbmZpZygpLmlzVmlzaWJsZSgpKSAmJiAocmVmcmVzaFdoZW5PZmZsaW5lIHx8IGdldENvbmZpZygpLmlzT25saW5lKCkpKSB7XG4gICAgICAgIHJldmFsaWRhdGUoV0lUSF9ERURVUEUpLnRoZW4obmV4dCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZXh0KCk7XG4gICAgICB9XG4gICAgfVxuICAgIG5leHQoKTtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICBpZiAodGltZXIpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVyKTtcbiAgICAgICAgdGltZXIgPSAtMTtcbiAgICAgIH1cbiAgICB9O1xuICB9LCBbcmVmcmVzaEludGVydmFsLCByZWZyZXNoV2hlbkhpZGRlbiwgcmVmcmVzaFdoZW5PZmZsaW5lLCByZXZhbGlkYXRlXSk7XG4gIHVzZURlYnVnVmFsdWUoZGF0YSk7XG4gIGlmIChzdXNwZW5zZSAmJiBpc1VuZGVmaW5lZChkYXRhKSAmJiBrZXkpIHtcbiAgICBmZXRjaGVyUmVmLmN1cnJlbnQgPSBmZXRjaGVyMjtcbiAgICBjb25maWdSZWYuY3VycmVudCA9IGNvbmZpZztcbiAgICB1bm1vdW50ZWRSZWYuY3VycmVudCA9IGZhbHNlO1xuICAgIHRocm93IGlzVW5kZWZpbmVkKGVycm9yKSA/IHJldmFsaWRhdGUoV0lUSF9ERURVUEUpIDogZXJyb3I7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBtdXRhdGU6IGJvdW5kTXV0YXRlLFxuICAgIGdldCBkYXRhKCkge1xuICAgICAgc3RhdGVEZXBlbmRlbmNpZXMuZGF0YSA9IHRydWU7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9LFxuICAgIGdldCBlcnJvcigpIHtcbiAgICAgIHN0YXRlRGVwZW5kZW5jaWVzLmVycm9yID0gdHJ1ZTtcbiAgICAgIHJldHVybiBlcnJvcjtcbiAgICB9LFxuICAgIGdldCBpc1ZhbGlkYXRpbmcoKSB7XG4gICAgICBzdGF0ZURlcGVuZGVuY2llcy5pc1ZhbGlkYXRpbmcgPSB0cnVlO1xuICAgICAgcmV0dXJuIGlzVmFsaWRhdGluZztcbiAgICB9XG4gIH07XG59O1xuT0JKRUNULmRlZmluZVByb3BlcnR5KFNXUkNvbmZpZyQxLCBcImRlZmF1bHRcIiwge1xuICB2YWx1ZTogZGVmYXVsdENvbmZpZ1xufSk7XG52YXIgdXNlU1dSID0gd2l0aEFyZ3ModXNlU1dSSGFuZGxlcik7XG52YXIgZGlzdCA9IHt9O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGRpc3QsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbnZhciBfZGVmYXVsdCA9IGRpc3QuZGVmYXVsdCA9IGZpcnN0T2ZUeXBlO1xuZnVuY3Rpb24gZmlyc3RPZlR5cGUoY29sbGVjdGlvbiwgdHlwZSkge1xuICBmb3IgKGNvbnN0IGkgaW4gY29sbGVjdGlvbikge1xuICAgIGlmICh0eXBlb2YgY29sbGVjdGlvbltpXSA9PT0gdHlwZSkge1xuICAgICAgcmV0dXJuIGNvbGxlY3Rpb25baV07XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBzd3JMYWdneU1pZGRsZXdhcmUodXNlU1dSTmV4dCkge1xuICByZXR1cm4gKGtleSwgZmV0Y2hlcjIsIGNvbmZpZykgPT4ge1xuICAgIGNvbnN0IGxhZ2d5RGF0YVJlZiA9IHVzZVJlZigpO1xuICAgIGNvbnN0IHN3ciA9IHVzZVNXUk5leHQoa2V5LCBmZXRjaGVyMiwgY29uZmlnKTtcbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgaWYgKHN3ci5kYXRhICE9PSB2b2lkIDApIHtcbiAgICAgICAgbGFnZ3lEYXRhUmVmLmN1cnJlbnQgPSBzd3IuZGF0YTtcbiAgICAgIH1cbiAgICB9LCBbc3dyLmRhdGFdKTtcbiAgICBjb25zdCByZXNldExhZ2d5ID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgICAgbGFnZ3lEYXRhUmVmLmN1cnJlbnQgPSB2b2lkIDA7XG4gICAgfSwgW10pO1xuICAgIGNvbnN0IGRhdGFPckxhZ2d5RGF0YSA9IHN3ci5kYXRhID09PSB2b2lkIDAgPyBsYWdneURhdGFSZWYuY3VycmVudCA6IHN3ci5kYXRhO1xuICAgIGNvbnN0IGlzTGFnZ2luZyA9IHN3ci5kYXRhID09PSB2b2lkIDAgJiYgbGFnZ3lEYXRhUmVmLmN1cnJlbnQgIT09IHZvaWQgMDtcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgc3dyLCB7XG4gICAgICBkYXRhOiBkYXRhT3JMYWdneURhdGEsXG4gICAgICBpc0xhZ2dpbmcsXG4gICAgICByZXNldExhZ2d5XG4gICAgfSk7XG4gIH07XG59XG5jb25zdCBjb252ZXJ0TGlzdGJveFRvRnVuY3Rpb24gPSAobGlzdGJveCwgbWF4SXRlbXMpID0+IHtcbiAgaWYgKHR5cGVvZiBsaXN0Ym94ID09PSBcImZ1bmN0aW9uXCIpXG4gICAgcmV0dXJuIGxpc3Rib3g7XG4gIHJldHVybiAoKSA9PiBQcm9taXNlLnJlc29sdmUoQXJyYXkuaXNBcnJheShsaXN0Ym94KSA/IGxpc3Rib3ggOiBbX19zcHJlYWRWYWx1ZXMoX19zcHJlYWRWYWx1ZXMoe30sIGxpc3Rib3gpLCB7IG5hbWU6IFwiXCIsIHJhdGlvOiBtYXhJdGVtcyB9KV0pO1xufTtcbmNvbnN0IGZpbHRlclN1cHBsaWVkRGF0YSA9IChncm91cCwgcXVlcnkpID0+IHtcbiAgY29uc3QgeyBkYXRhLCBkaXNwbGF5RmllbGQsIHNlYXJjaFR5cGUgfSA9IGdyb3VwO1xuICBjb25zdCBjYXNlSW5zZW5zaXRpdmVTZWFyY2hUeXBlID0gc2VhcmNoVHlwZSA/IHNlYXJjaFR5cGUudG9Mb3dlckNhc2UoKSA6IHNlYXJjaFR5cGU7XG4gIHN3aXRjaCAoY2FzZUluc2Vuc2l0aXZlU2VhcmNoVHlwZSkge1xuICAgIGNhc2UgXCJzdGFydHN3aXRoXCI6XG4gICAgICByZXR1cm4gZGF0YS5maWx0ZXIoKGl0ZW0pID0+IGl0ZW1UZXh0KGl0ZW0sIGRpc3BsYXlGaWVsZCkudG9Mb3dlckNhc2UoKS5zdGFydHNXaXRoKHF1ZXJ5LnRvTG93ZXJDYXNlKCkpKTtcbiAgICBjYXNlIFwiY29udGFpbnNcIjpcbiAgICAgIHJldHVybiBkYXRhLmZpbHRlcigoaXRlbSkgPT4gaXRlbVRleHQoaXRlbSwgZGlzcGxheUZpZWxkKS50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKHF1ZXJ5LnRvTG93ZXJDYXNlKCkpKTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGRhdGE7XG4gIH1cbn07XG5jb25zdCBsaW1pdFJlc3VsdHMgPSAoZ3JvdXBzLCBsaXN0Ym94UHJvcCwgbWF4SXRlbXMpID0+IHtcbiAgY29uc3QgcmF0aW9zID0gbGlzdGJveFByb3AubWFwKChncm91cCkgPT4gZ3JvdXAucmF0aW8gfHwgMSk7XG4gIGNvbnN0IHJhdGlvVG90YWwgPSByYXRpb3MucmVkdWNlKCh0b3RhbCwgcmF0aW8pID0+IHRvdGFsICsgcmF0aW8sIDApO1xuICBjb25zdCByYXRpb011bHRpcGxpZXIgPSBtYXhJdGVtcyAvIHJhdGlvVG90YWw7XG4gIGNvbnN0IHJlc3VsdFRvdGFsID0gZ3JvdXBzLmZsYXQoKS5sZW5ndGg7XG4gIGNvbnN0IGdyb3VwQ291bnRzID0gW107XG4gIGxldCB1bmFzc2lnbmVkU2xvdHMgPSByZXN1bHRUb3RhbCA8IG1heEl0ZW1zID8gcmVzdWx0VG90YWwgOiBtYXhJdGVtcztcbiAgd2hpbGUgKHVuYXNzaWduZWRTbG90cyA+IDApIHtcbiAgICBncm91cHMgPSBncm91cHMubWFwKChncm91cCwgaSkgPT4ge1xuICAgICAgaWYgKCFncm91cENvdW50c1tpXSkge1xuICAgICAgICBncm91cENvdW50c1tpXSA9IE1hdGgucm91bmQocmF0aW9zW2ldICogcmF0aW9NdWx0aXBsaWVyKTtcbiAgICAgICAgaWYgKGdyb3VwQ291bnRzW2ldID4gZ3JvdXAubGVuZ3RoKVxuICAgICAgICAgIGdyb3VwQ291bnRzW2ldID0gZ3JvdXAubGVuZ3RoO1xuICAgICAgICB1bmFzc2lnbmVkU2xvdHMgPSB1bmFzc2lnbmVkU2xvdHMgLSBncm91cENvdW50c1tpXTtcbiAgICAgIH0gZWxzZSBpZiAoZ3JvdXBDb3VudHNbaV0gPCBncm91cC5sZW5ndGgpIHtcbiAgICAgICAgdW5hc3NpZ25lZFNsb3RzIC09ICsrZ3JvdXBDb3VudHNbaV07XG4gICAgICB9XG4gICAgICByZXR1cm4gZ3JvdXA7XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIGdyb3Vwcy5tYXAoKGdyb3VwLCBpbmRleCkgPT4gZ3JvdXAuc2xpY2UoMCwgZ3JvdXBDb3VudHNbaW5kZXhdKSk7XG59O1xuY29uc3QgaXRlbVRleHQgPSAoaXRlbSwgZGlzcGxheUZpZWxkKSA9PiB7XG4gIGNvbnN0IGl0ZW1UeXBlID0gdHlwZW9mIGl0ZW07XG4gIGNvbnN0IHRleHQgPSBpdGVtVHlwZSA9PT0gXCJzdHJpbmdcIiAmJiBpc1VuZGVmaW5lZCQxKGRpc3BsYXlGaWVsZCkgPyBpdGVtIDogaXRlbVtkaXNwbGF5RmllbGRdO1xuICByZXR1cm4gaXNVbmRlZmluZWQkMSh0ZXh0KSA/IF9kZWZhdWx0KGl0ZW0sIFwic3RyaW5nXCIpIHx8IFwiXCIgOiB0ZXh0O1xufTtcbmNvbnN0IHN3ck9wdGlvbnMgPSAoaXNJbW11dGFibGUpID0+IHtcbiAgY29uc3Qgc3dyQmFzZU9wdGlvbnMgPSB7XG4gICAgdXNlOiBbc3dyTGFnZ3lNaWRkbGV3YXJlXVxuICB9O1xuICByZXR1cm4gaXNJbW11dGFibGUgPyBfX3NwcmVhZFByb3BzKF9fc3ByZWFkVmFsdWVzKHt9LCBzd3JCYXNlT3B0aW9ucyksIHtcbiAgICByZXZhbGlkYXRlSWZTdGFsZTogZmFsc2UsXG4gICAgcmV2YWxpZGF0ZU9uRm9jdXM6IGZhbHNlLFxuICAgIHJldmFsaWRhdGVPblJlY29ubmVjdDogZmFsc2VcbiAgfSkgOiBzd3JCYXNlT3B0aW9ucztcbn07XG5jb25zdCBmZXRjaGVyID0gKHF1ZXJ5LCBsaXN0Ym94LCBkZWZhdWx0TGlzdGJveCwgbWluUXVlcnlMZW5ndGgsIG1heEl0ZW1zKSA9PiB7XG4gIGlmIChkZWZhdWx0TGlzdGJveCAmJiBxdWVyeS5sZW5ndGggPiAwICYmIHF1ZXJ5Lmxlbmd0aCA8IG1pblF1ZXJ5TGVuZ3RoKVxuICAgIHJldHVybiBbXTtcbiAgZWxzZSBpZiAoIWRlZmF1bHRMaXN0Ym94ICYmIHF1ZXJ5Lmxlbmd0aCA8IG1pblF1ZXJ5TGVuZ3RoKVxuICAgIHJldHVybiBbXTtcbiAgY29uc3QgaXNEZWZhdWx0TGlzdGJveCA9IGRlZmF1bHRMaXN0Ym94ICYmICFxdWVyeS5sZW5ndGg7XG4gIGNvbnN0IGxpc3Rib3hQcm9taXNlID0gY29udmVydExpc3Rib3hUb0Z1bmN0aW9uKGlzRGVmYXVsdExpc3Rib3ggPyBkZWZhdWx0TGlzdGJveCA6IGxpc3Rib3gsIG1heEl0ZW1zKShxdWVyeSk7XG4gIHJldHVybiBsaXN0Ym94UHJvbWlzZS50aGVuKChsaXN0Ym94UHJvcCkgPT4ge1xuICAgIGNvbnN0IHByb21pc2VzID0gbGlzdGJveFByb3AubWFwKChncm91cCkgPT4gdHlwZW9mIGdyb3VwLmRhdGEgPT09IFwiZnVuY3Rpb25cIiA/IGdyb3VwLmRhdGEocXVlcnkpIDogUHJvbWlzZS5yZXNvbHZlKGZpbHRlclN1cHBsaWVkRGF0YShncm91cCwgcXVlcnkpKSk7XG4gICAgcmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzKS50aGVuKChncm91cHMpID0+IHtcbiAgICAgIGdyb3VwcyA9IGdyb3Vwcy5yZWR1Y2UoKHByZXZHcm91cHMsIGdyb3VwLCBncm91cEluZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0IHsgaWQ6IGdyb3VwSWQsIG5hbWU6IGdyb3VwTmFtZSwgZGlzcGxheUZpZWxkLCBzZWFyY2hUeXBlIH0gPSBsaXN0Ym94UHJvcFtncm91cEluZGV4XTtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAuLi5wcmV2R3JvdXBzLFxuICAgICAgICAgIGdyb3VwLm1hcCgoaXRlbSkgPT4gKHtcbiAgICAgICAgICAgIHZhbHVlOiBpdGVtLFxuICAgICAgICAgICAgdGV4dDogaXRlbVRleHQoaXRlbSwgZGlzcGxheUZpZWxkKSxcbiAgICAgICAgICAgIGdyb3VwSW5kZXgsXG4gICAgICAgICAgICBncm91cElkLFxuICAgICAgICAgICAgZ3JvdXBOYW1lLFxuICAgICAgICAgICAgc2VhcmNoVHlwZSxcbiAgICAgICAgICAgIGRpc3BsYXlGaWVsZCxcbiAgICAgICAgICAgIGRlZmF1bHRMaXN0Ym94OiBpc0RlZmF1bHRMaXN0Ym94XG4gICAgICAgICAgfSkpXG4gICAgICAgIF07XG4gICAgICB9LCBbXSk7XG4gICAgICBpZiAoZ3JvdXBzLmxlbmd0aClcbiAgICAgICAgZ3JvdXBzID0gbGltaXRSZXN1bHRzKGdyb3VwcywgbGlzdGJveFByb3AsIG1heEl0ZW1zKTtcbiAgICAgIHJldHVybiBncm91cHMuZmxhdCgpO1xuICAgIH0pO1xuICB9KTtcbn07XG5jb25zdCB1c2VEYXRhID0gKHF1ZXJ5LCBpc0ltbXV0YWJsZSwgbGlzdGJveCwgZGVmYXVsdExpc3Rib3gsIG1pblF1ZXJ5TGVuZ3RoLCBtYXhJdGVtcykgPT4ge1xuICBjb25zdCBkdW1teUFyZ1RvRW5zdXJlQ2FjaGluZ09mWmVyb0xlbmd0aFN0cmluZ3MgPSBcIlhcIjtcbiAgY29uc3Qgc3dyT2JqID0gdXNlU1dSKFtcbiAgICBxdWVyeS50b0xvd2VyQ2FzZSgpLFxuICAgIGR1bW15QXJnVG9FbnN1cmVDYWNoaW5nT2ZaZXJvTGVuZ3RoU3RyaW5nc1xuICBdLCAocXVlcnkyKSA9PiBmZXRjaGVyKHF1ZXJ5MiwgbGlzdGJveCwgZGVmYXVsdExpc3Rib3gsIG1pblF1ZXJ5TGVuZ3RoLCBtYXhJdGVtcyksIHN3ck9wdGlvbnMoaXNJbW11dGFibGUpKTtcbiAgcmV0dXJuIHN3ck9iajtcbn07XG5jb25zdCBzdHlsZXMgPSB7XG4gIGNvbnRhaW5lcjoge1xuICAgIHBvc2l0aW9uOiBcInJlbGF0aXZlXCIsXG4gICAgdGV4dEFsaWduOiBcImxlZnRcIlxuICB9LFxuICBjb250YWluZXJGb2N1czoge1xuICAgIHBvc2l0aW9uOiBcInJlbGF0aXZlXCIsXG4gICAgdGV4dEFsaWduOiBcImxlZnRcIlxuICB9LFxuICBxdWVyeToge1xuICAgIHBvc2l0aW9uOiBcInJlbGF0aXZlXCIsXG4gICAgekluZGV4OiAxLFxuICAgIGJhY2tncm91bmRDb2xvcjogXCJ0cmFuc3BhcmVudFwiXG4gIH0sXG4gIHF1ZXJ5Tm9UeXBlYWhlYWQ6IHtcbiAgICBwb3NpdGlvbjogXCJyZWxhdGl2ZVwiXG4gIH0sXG4gIHR5cGVhaGVhZDoge1xuICAgIHBvc2l0aW9uOiBcImFic29sdXRlXCIsXG4gICAgekluZGV4OiAwLFxuICAgIHRvcDogMCxcbiAgICBsZWZ0OiAwXG4gIH0sXG4gIGNsZWFyQnV0dG9uOiB7XG4gICAgekluZGV4OiAyXG4gIH0sXG4gIGNhbmNlbEJ1dHRvbjoge1xuICAgIHpJbmRleDogM1xuICB9XG59O1xudmFyIHN1cHBvcnRlZFR5cGVzID0gW1widGV4dGFyZWFcIiwgXCJ0ZXh0XCIsIFwic2VhcmNoXCIsIFwidGVsXCIsIFwidXJsXCIsIFwicGFzc3dvcmRcIl07XG52YXIgbmF0dXJhbFNlbGVjdGlvbiQxID0gZnVuY3Rpb24oZWxlbWVudCkge1xuICByZXR1cm4gISEoZWxlbWVudC5zZXRTZWxlY3Rpb25SYW5nZSAmJiB+c3VwcG9ydGVkVHlwZXMuaW5kZXhPZihlbGVtZW50LnR5cGUpKTtcbn07XG52YXIgbmF0dXJhbFNlbGVjdGlvbiA9IG5hdHVyYWxTZWxlY3Rpb24kMTtcbnZhciBzZXRpZnkgPSBmdW5jdGlvbihlbGVtZW50LCB2YWx1ZSkge1xuICB2YXIgY2FuU2V0ID0gbmF0dXJhbFNlbGVjdGlvbihlbGVtZW50KSAmJiBlbGVtZW50ID09PSBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xuICBpZiAoY2FuU2V0KSB7XG4gICAgdmFyIHN0YXJ0ID0gZWxlbWVudC5zZWxlY3Rpb25TdGFydCwgZW5kID0gZWxlbWVudC5zZWxlY3Rpb25FbmQ7XG4gICAgZWxlbWVudC52YWx1ZSA9IHZhbHVlO1xuICAgIGVsZW1lbnQuc2V0U2VsZWN0aW9uUmFuZ2Uoc3RhcnQsIGVuZCk7XG4gIH0gZWxzZSB7XG4gICAgZWxlbWVudC52YWx1ZSA9IHZhbHVlO1xuICB9XG59O1xuY29uc3Qgc3RhcnRzV2l0aENhc2VJbnNlbnNpdGl2ZSA9IChzdHIsIHN0YXJ0c1dpdGgpID0+IHtcbiAgaWYgKHR5cGVvZiBzdHIgIT09IFwic3RyaW5nXCIpXG4gICAgcmV0dXJuIGZhbHNlO1xuICBpZiAodHlwZW9mIHN0YXJ0c1dpdGggIT09IFwic3RyaW5nXCIpXG4gICAgcmV0dXJuIGZhbHNlO1xuICByZXR1cm4gc3RyLnRvTG93ZXJDYXNlKCkuc3RhcnRzV2l0aChzdGFydHNXaXRoLnRvTG93ZXJDYXNlKCkpO1xufTtcbmNvbnN0IHVzZUl0ZW1zU3RhdGUgPSAoc3dyRGF0YSkgPT4ge1xuICBjb25zdCB7IGRpc3BhdGNoIH0gPSB1c2VDb250ZXh0KFN0YXRlQ29udGV4dCk7XG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgZGlzcGF0Y2goc2V0SXRlbXMoc3dyRGF0YSB8fCBbXSkpO1xuICB9LCBbc3dyRGF0YSwgZGlzcGF0Y2hdKTtcbn07XG5jb25zdCB1c2VJdGVtc0Vycm9yID0gKGVycm9yKSA9PiB7XG4gIGNvbnN0IHsgZGlzcGF0Y2ggfSA9IHVzZUNvbnRleHQoU3RhdGVDb250ZXh0KTtcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoZXJyb3IpXG4gICAgICBkaXNwYXRjaChzZXRJdGVtc0Vycm9yKCkpO1xuICB9LCBbZXJyb3IsIGRpc3BhdGNoXSk7XG59O1xuY29uc3QgdXNlUXVlcnlDaGFuZ2UgPSAocXVlcnksIHF1ZXJ5SW5wdXQsIHR5cGVhaGVhZElucHV0LCBvbkNoYW5nZSkgPT4ge1xuICBjb25zdCBmaXJzdFVwZGF0ZSA9IHVzZVJlZih0cnVlKTtcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBoYXNUeXBlYWhlYWQgPSAhIXR5cGVhaGVhZElucHV0LmN1cnJlbnQ7XG4gICAgY29uc3QgdmFsdWUgPSAoKCkgPT4ge1xuICAgICAgY29uc3QgY3VycmVudFZhbHVlID0gaGFzVHlwZWFoZWFkID8gdHlwZWFoZWFkSW5wdXQuY3VycmVudC52YWx1ZSA6IFwiXCI7XG4gICAgICBpZiAoIXF1ZXJ5KVxuICAgICAgICByZXR1cm4gXCJcIjtcbiAgICAgIGlmICghY3VycmVudFZhbHVlLnN0YXJ0c1dpdGgocXVlcnkpKVxuICAgICAgICByZXR1cm4gXCJcIjtcbiAgICAgIHJldHVybiBjdXJyZW50VmFsdWU7XG4gICAgfSkoKTtcbiAgICBpZiAoaGFzVHlwZWFoZWFkKVxuICAgICAgdHlwZWFoZWFkSW5wdXQuY3VycmVudC52YWx1ZSA9IHZhbHVlO1xuICAgIHNldGlmeShxdWVyeUlucHV0LmN1cnJlbnQsIHF1ZXJ5KTtcbiAgICBpZiAoIShmaXJzdFVwZGF0ZS5jdXJyZW50ICYmICFxdWVyeSkpIHtcbiAgICAgIGlmICh0eXBlb2Ygb25DaGFuZ2UgPT09IFwiZnVuY3Rpb25cIilcbiAgICAgICAgb25DaGFuZ2UocXVlcnkpO1xuICAgIH1cbiAgICBmaXJzdFVwZGF0ZS5jdXJyZW50ID0gZmFsc2U7XG4gIH0sIFtxdWVyeSwgb25DaGFuZ2UsIHF1ZXJ5SW5wdXQsIHR5cGVhaGVhZElucHV0XSk7XG59O1xuY29uc3QgdXNlSGlnaGxpZ2h0ID0gKGhpZ2hsaWdodGVkLCBoYXNGb2N1cywgcXVlcnlJbnB1dCwgdHlwZWFoZWFkSW5wdXQpID0+IHtcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCB0eXBlQWhlYWRWYWx1ZSA9IGhpZ2hsaWdodGVkICYmIGhhc0ZvY3VzICYmIHF1ZXJ5SW5wdXQuY3VycmVudC52YWx1ZS5sZW5ndGggPiAwICYmIHN0YXJ0c1dpdGhDYXNlSW5zZW5zaXRpdmUoaGlnaGxpZ2h0ZWQudGV4dCwgcXVlcnlJbnB1dC5jdXJyZW50LnZhbHVlKSA/IGhpZ2hsaWdodGVkLnRleHQgOiBcIlwiO1xuICAgIGNvbnN0IHF1ZXJ5VmFsdWUgPSBmb3JtYXRRdWVyeShxdWVyeUlucHV0LmN1cnJlbnQudmFsdWUsIHR5cGVBaGVhZFZhbHVlKTtcbiAgICBpZiAodHlwZWFoZWFkSW5wdXQuY3VycmVudClcbiAgICAgIHR5cGVhaGVhZElucHV0LmN1cnJlbnQudmFsdWUgPSB0eXBlQWhlYWRWYWx1ZTtcbiAgICBzZXRpZnkocXVlcnlJbnB1dC5jdXJyZW50LCBxdWVyeVZhbHVlKTtcbiAgfSwgW2hpZ2hsaWdodGVkLCBoYXNGb2N1cywgcXVlcnlJbnB1dCwgdHlwZWFoZWFkSW5wdXRdKTtcbn07XG5jb25zdCB1c2VTZWxlY3RlZCA9IChzZWxlY3RlZCwgcXVlcnlJbnB1dCwgdHlwZWFoZWFkSW5wdXQsIG9uU2VsZWN0KSA9PiB7XG4gIGNvbnN0IGZpcnN0VXBkYXRlID0gdXNlUmVmKHRydWUpO1xuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGxldCB2YWx1ZSwgZGlzcGxheUZpZWxkO1xuICAgIGlmIChpc1VuZGVmaW5lZCQxKHNlbGVjdGVkKSkge1xuICAgICAgdmFsdWUgPSB1bmRlZjtcbiAgICAgIGRpc3BsYXlGaWVsZCA9IHVuZGVmO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodHlwZWFoZWFkSW5wdXQuY3VycmVudClcbiAgICAgICAgdHlwZWFoZWFkSW5wdXQuY3VycmVudC52YWx1ZSA9IFwiXCI7XG4gICAgICBxdWVyeUlucHV0LmN1cnJlbnQuYmx1cigpO1xuICAgICAgdmFsdWUgPSBzZWxlY3RlZC52YWx1ZTtcbiAgICAgIGRpc3BsYXlGaWVsZCA9IHNlbGVjdGVkLmRpc3BsYXlGaWVsZDtcbiAgICB9XG4gICAgaWYgKCEoZmlyc3RVcGRhdGUuY3VycmVudCAmJiBpc1VuZGVmaW5lZCQxKHNlbGVjdGVkKSkpIHtcbiAgICAgIGlmICh0eXBlb2Ygb25TZWxlY3QgPT09IFwiZnVuY3Rpb25cIilcbiAgICAgICAgb25TZWxlY3QodmFsdWUsIGRpc3BsYXlGaWVsZCk7XG4gICAgfVxuICAgIGZpcnN0VXBkYXRlLmN1cnJlbnQgPSBmYWxzZTtcbiAgfSwgW3NlbGVjdGVkLCBvblNlbGVjdCwgcXVlcnlJbnB1dCwgdHlwZWFoZWFkSW5wdXRdKTtcbn07XG5jb25zdCBmb3JtYXRRdWVyeSA9IChxdWVyeSwgdHlwZWFoZWFkKSA9PiB7XG4gIGNvbnN0IGZvcm1hdHRlZFF1ZXJ5ID0gdHlwZWFoZWFkLnN1YnN0cmluZygwLCBxdWVyeS5sZW5ndGgpO1xuICByZXR1cm4gZm9ybWF0dGVkUXVlcnkubGVuZ3RoID4gMCAmJiBxdWVyeS50b0xvd2VyQ2FzZSgpID09PSBmb3JtYXR0ZWRRdWVyeS50b0xvd2VyQ2FzZSgpICYmIHF1ZXJ5ICE9PSBmb3JtYXR0ZWRRdWVyeSA/IGZvcm1hdHRlZFF1ZXJ5IDogcXVlcnk7XG59O1xuY29uc3QgQ29udGFpbmVyID0gUmVhY3QuZm9yd2FyZFJlZigocHJvcHMsIHJlZikgPT4ge1xuICBjb25zdCB7XG4gICAgYXV0b0ZvY3VzLFxuICAgIGNhbmNlbEJ1dHRvbixcbiAgICBjYW5jZWxCdXR0b25BcmlhTGFiZWwsXG4gICAgY2xlYXJCdXR0b24sXG4gICAgY2xlYXJCdXR0b25BcmlhTGFiZWwsXG4gICAgZGVib3VuY2VXYWl0LFxuICAgIGRlZmF1bHRMaXN0Ym94LFxuICAgIGRlZmF1bHRMaXN0Ym94SXNJbW11dGFibGUsXG4gICAgZGlzYWJsZWQsXG4gICAgZW50ZXJLZXlIaW50LFxuICAgIGVycm9yTWVzc2FnZSxcbiAgICBpZCxcbiAgICBsaXN0Ym94LFxuICAgIGxpc3Rib3hJc0ltbXV0YWJsZSxcbiAgICBtYXhJdGVtcyxcbiAgICBtaW5RdWVyeUxlbmd0aCxcbiAgICBuYW1lLFxuICAgIG5vSXRlbXNNZXNzYWdlLFxuICAgIG9uQmx1cixcbiAgICBvbkNoYW5nZSxcbiAgICBvbkVudGVyLFxuICAgIG9uRm9jdXMsXG4gICAgb25TZWxlY3QsXG4gICAgb25UYWIsXG4gICAgcGxhY2Vob2xkZXIsXG4gICAgc3R5bGVzOiBzdHlsZXMkMTIsXG4gICAgdGFiSW5kZXgsXG4gICAgdGV4dCxcbiAgICB0eXBlYWhlYWQsXG4gICAgQ2FuY2VsLFxuICAgIENsZWFyXG4gIH0gPSBwcm9wcztcbiAgY29uc3QgbGlzdGJveElkID0gYCR7aWR9LWxpc3Rib3hgO1xuICBjb25zdCBlcnJvcmJveElkID0gYCR7aWR9LWVycm9yYm94YDtcbiAgY29uc3Qge1xuICAgIHN0YXRlLFxuICAgIGRpc3BhdGNoXG4gIH0gPSB1c2VDb250ZXh0KFN0YXRlQ29udGV4dCk7XG4gIGNvbnN0IFtkZWJvdW5jZWRRdWVyeV0gPSB1c2VEZWJvdW5jZShzdGF0ZS5xdWVyeSwgZGVib3VuY2VXYWl0KTtcbiAgY29uc3QgW2hhc0ZvY3VzLCBzZXRIYXNGb2N1c10gPSB1c2VTdGF0ZShmYWxzZSk7XG4gIGNvbnN0IFtibG9ja0JsdXJIYW5kbGVyLCBzZXRCbG9ja0JsdXJIYW5kbGVyXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgW2F1dG9TZWxlY3QsIHNldEF1dG9TZWxlY3RdID0gdXNlU3RhdGUoISF0ZXh0KTtcbiAgY29uc3QgcXVlcnlJbnB1dCA9IHVzZVJlZihudWxsKTtcbiAgY29uc3QgdHlwZWFoZWFkSW5wdXQgPSB1c2VSZWYobnVsbCk7XG4gIGNvbnN0IGhhc1R5cGVhaGVhZCA9IHR5cGVhaGVhZCAmJiBzdGF0ZS5pdGVtcy5sZW5ndGggPiAxO1xuICBjb25zdCBoYXNDbGVhckJ1dHRvbiA9IGNsZWFyQnV0dG9uICYmICEhc3RhdGUucXVlcnk7XG4gIGNvbnN0IGhhc0NhbmNlbEJ1dHRvbiA9IGNhbmNlbEJ1dHRvbiAmJiBoYXNGb2N1cztcbiAgY29uc3QgaXNFeHBhbmRlZCA9IGhhc0ZvY3VzICYmIHN0YXRlLmNhblNob3dMaXN0Ym94O1xuICBjb25zdCBpc0Vycm9yRXhwYW5kZWQgPSAhIXByb3BzLmVycm9yTWVzc2FnZSAmJiBzdGF0ZS5pdGVtc0Vycm9yO1xuICBjb25zdCBjb250YWluZXJDbGFzc25hbWUgPSBoYXNGb2N1cyA/IFwiY29udGFpbmVyRm9jdXNcIiA6IFwiY29udGFpbmVyXCI7XG4gIGNvbnN0IGNvbnRhaW5lclN0eWxlcyA9IHN0eWxlcyQxMltjb250YWluZXJDbGFzc25hbWVdIHx8IHN0eWxlcyQxMi5jb250YWluZXI7XG4gIGNvbnN0IGRlZmF1bHRDb250YWluZXJTdHlsZXMgPSBzdHlsZXMkMTJbY29udGFpbmVyQ2xhc3NuYW1lXSA/IHVuZGVmIDogc3R5bGVzW2NvbnRhaW5lckNsYXNzbmFtZV07XG4gIGNvbnN0IGlucHV0Q2xhc3NOYW1lID0gaGFzRm9jdXMgPyBcImlucHV0Rm9jdXNcIiA6IFwiaW5wdXRcIjtcbiAgY29uc3QgaW5wdXRTdHlsZXMgPSBzdHlsZXMkMTJbaW5wdXRDbGFzc05hbWVdIHx8IHN0eWxlcyQxMi5pbnB1dDtcbiAgY29uc3QgcXVlcnlEZWZhdWx0U3R5bGUgPSBoYXNUeXBlYWhlYWQgPyBzdHlsZXMucXVlcnkgOiBzdHlsZXMucXVlcnlOb1R5cGVhaGVhZDtcbiAgY29uc3QgaXNJbW11dGFibGUgPSAoKCkgPT4ge1xuICAgIHJldHVybiBsaXN0Ym94SXNJbW11dGFibGUgJiYgIShkZWZhdWx0TGlzdGJveCAmJiAhZGVmYXVsdExpc3Rib3hJc0ltbXV0YWJsZSAmJiBkZWJvdW5jZWRRdWVyeS5sZW5ndGggPT09IDApO1xuICB9KSgpO1xuICBjb25zdCBzd3JSZXN1bHQgPSB1c2VEYXRhKGRlYm91bmNlZFF1ZXJ5ID8gZGVib3VuY2VkUXVlcnkudG9Mb3dlckNhc2UoKSA6IFwiXCIsIGlzSW1tdXRhYmxlLCBsaXN0Ym94LCBkZWZhdWx0TGlzdGJveCwgbWluUXVlcnlMZW5ndGgsIG1heEl0ZW1zKTtcbiAgdXNlSXRlbXNTdGF0ZShzd3JSZXN1bHQuZGF0YSk7XG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgdmFyIF9hMjtcbiAgICBpZiAoYXV0b1NlbGVjdCAmJiBzd3JSZXN1bHQuZGF0YSAmJiAoKF9hMiA9IHN3clJlc3VsdC5kYXRhWzBdKSA9PSBudWxsID8gdm9pZCAwIDogX2EyLnRleHQpID09PSB0ZXh0KSB7XG4gICAgICBkaXNwYXRjaChzZXRTZWxlY3RlZChzd3JSZXN1bHQuZGF0YVswXSkpO1xuICAgICAgc2V0QXV0b1NlbGVjdChmYWxzZSk7XG4gICAgfVxuICB9LCBbYXV0b1NlbGVjdCwgc3dyUmVzdWx0LmRhdGEsIHRleHQsIGRpc3BhdGNoXSk7XG4gIHVzZUl0ZW1zRXJyb3Ioc3dyUmVzdWx0LmVycm9yKTtcbiAgdXNlUXVlcnlDaGFuZ2Uoc3RhdGUucXVlcnksIHF1ZXJ5SW5wdXQsIHR5cGVhaGVhZElucHV0LCBvbkNoYW5nZSk7XG4gIHVzZUhpZ2hsaWdodChzdGF0ZS5oaWdobGlnaHRlZCwgaGFzRm9jdXMsIHF1ZXJ5SW5wdXQsIHR5cGVhaGVhZElucHV0KTtcbiAgdXNlU2VsZWN0ZWQoc3RhdGUuc2VsZWN0ZWQsIHF1ZXJ5SW5wdXQsIHR5cGVhaGVhZElucHV0LCBvblNlbGVjdCk7XG4gIGNvbnN0IG9uVGFiT3JFbnRlciA9IChrZXlQcmVzc2VkKSA9PiB7XG4gICAgY29uc3QgaGlnaGxpZ2h0ZWRJbmRleCA9IHN0YXRlLmhpZ2hsaWdodGVkICYmIHN0YXRlLmhpZ2hsaWdodGVkLmluZGV4O1xuICAgIGNvbnN0IGhpZ2hsaWdodGVkSXRlbTIgPSAhaXNVbmRlZmluZWQkMShoaWdobGlnaHRlZEluZGV4KSA/IHN0YXRlLml0ZW1zW2hpZ2hsaWdodGVkSW5kZXhdIDogdW5kZWY7XG4gICAgY29uc3QgZjIgPSBrZXlQcmVzc2VkLnRvTG93ZXJDYXNlKCkgPT09IFwiZW50ZXJcIiA/IG9uRW50ZXIgOiBvblRhYjtcbiAgICBpZiAoaGlnaGxpZ2h0ZWRJdGVtMilcbiAgICAgIGRpc3BhdGNoKHNldFNlbGVjdGVkKGhpZ2hsaWdodGVkSW5kZXgpKTtcbiAgICBpZiAodHlwZW9mIGYyID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICBmMihxdWVyeUlucHV0LmN1cnJlbnQudmFsdWUsIGhpZ2hsaWdodGVkSXRlbTIpO1xuICB9O1xuICBjb25zdCBjaGVja0tleSA9IChldnQpID0+IHtcbiAgICBzd2l0Y2ggKGV2dC5rZXlDb2RlKSB7XG4gICAgICBjYXNlIDQwOlxuICAgICAgICBkaXNwYXRjaChoaWdobGlnaHROZXh0KCkpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMzg6XG4gICAgICAgIGRpc3BhdGNoKGhpZ2hsaWdodFByZXYoKSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAxMzpcbiAgICAgICAgb25UYWJPckVudGVyKFwiZW50ZXJcIik7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSA5OlxuICAgICAgICBvblRhYk9yRW50ZXIoXCJ0YWJcIik7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAyNzpcbiAgICAgICAgY2xlYXJTdGF0ZSgpO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gIH07XG4gIGNvbnN0IGhhbmRsZUlucHV0ID0gKCkgPT4ge1xuICAgIGRpc3BhdGNoKHNldFF1ZXJ5KHF1ZXJ5SW5wdXQuY3VycmVudC52YWx1ZSkpO1xuICB9O1xuICBjb25zdCBoYW5kbGVDbGVhckJ1dHRvbiA9ICgpID0+IHtcbiAgICBzZXRCbG9ja0JsdXJIYW5kbGVyKHRydWUpO1xuICAgIGNsZWFyU3RhdGUoKTtcbiAgfTtcbiAgY29uc3QgaGFuZGxlQ2FuY2VsQnV0dG9uID0gKCkgPT4ge1xuICAgIGNsZWFyU3RhdGUoKTtcbiAgfTtcbiAgY29uc3QgY2xlYXJTdGF0ZSA9ICgpID0+IHtcbiAgICBxdWVyeUlucHV0LmN1cnJlbnQudmFsdWUgPSBcIlwiO1xuICAgIGlmICh0eXBlYWhlYWQgJiYgdHlwZWFoZWFkSW5wdXQuY3VycmVudClcbiAgICAgIHR5cGVhaGVhZElucHV0LmN1cnJlbnQudmFsdWUgPSBcIlwiO1xuICAgIGRpc3BhdGNoKGNsZWFyKCkpO1xuICAgIHF1ZXJ5SW5wdXQuY3VycmVudC5mb2N1cygpO1xuICB9O1xuICBjb25zdCBoYW5kbGVGb2N1cyA9ICgpID0+IHtcbiAgICBpZiAoIWhhc0ZvY3VzKSB7XG4gICAgICBzZXRIYXNGb2N1cyh0cnVlKTtcbiAgICAgIGlmIChzdGF0ZS5pdGVtcyAmJiBzdGF0ZS5pdGVtcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGRpc3BhdGNoKHNldEhpZ2hsaWdodGVkKDApKTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2Ygb25Gb2N1cyA9PT0gXCJmdW5jdGlvblwiKVxuICAgICAgICBvbkZvY3VzKCk7XG4gICAgfVxuICB9O1xuICBjb25zdCBoYW5kbGVCbHVyID0gKCkgPT4ge1xuICAgIGlmIChibG9ja0JsdXJIYW5kbGVyKSB7XG4gICAgICBxdWVyeUlucHV0LmN1cnJlbnQuZm9jdXMoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2V0SGFzRm9jdXMoZmFsc2UpO1xuICAgICAgaWYgKHR5cGVvZiBvbkJsdXIgPT09IFwiZnVuY3Rpb25cIilcbiAgICAgICAgb25CbHVyKCk7XG4gICAgfVxuICAgIHNldEJsb2NrQmx1ckhhbmRsZXIoZmFsc2UpO1xuICB9O1xuICB1c2VJbXBlcmF0aXZlSGFuZGxlKHJlZiwgKCkgPT4gKHtcbiAgICBmb2N1czogKCkgPT4ge1xuICAgICAgcXVlcnlJbnB1dC5jdXJyZW50LmZvY3VzKCk7XG4gICAgfSxcbiAgICBibHVyOiAoKSA9PiB7XG4gICAgICBxdWVyeUlucHV0LmN1cnJlbnQuYmx1cigpO1xuICAgIH0sXG4gICAgc2VsZWN0OiAoKSA9PiB7XG4gICAgICBxdWVyeUlucHV0LmN1cnJlbnQuc2VsZWN0KCk7XG4gICAgfSxcbiAgICBjbGVhcjogKCkgPT4ge1xuICAgICAgY2xlYXJTdGF0ZSgpO1xuICAgIH0sXG4gICAgcXVlcnk6IChxdWVyeSkgPT4ge1xuICAgICAgaWYgKHR5cGVvZiBxdWVyeSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICBxdWVyeUlucHV0LmN1cnJlbnQudmFsdWUgPSBxdWVyeTtcbiAgICAgICAgcXVlcnlJbnB1dC5jdXJyZW50LmZvY3VzKCk7XG4gICAgICAgIGhhbmRsZUlucHV0KCk7XG4gICAgICB9XG4gICAgfVxuICB9KSk7XG4gIHJldHVybiAvKiBAX19QVVJFX18gKi8ganN4KFJlYWN0LkZyYWdtZW50LCB7XG4gICAgY2hpbGRyZW46IC8qIEBfX1BVUkVfXyAqLyBqc3hzKFwiZGl2XCIsIHtcbiAgICAgIGNsYXNzTmFtZTogY29udGFpbmVyU3R5bGVzLFxuICAgICAgc3R5bGU6IGRlZmF1bHRDb250YWluZXJTdHlsZXMsXG4gICAgICByb2xlOiBcImNvbWJvYm94XCIsXG4gICAgICBcImFyaWEtZXhwYW5kZWRcIjogaXNFeHBhbmRlZCxcbiAgICAgIFwiYXJpYS1vd25zXCI6IGxpc3Rib3hJZCxcbiAgICAgIFwiYXJpYS1oYXNwb3B1cFwiOiBcImxpc3Rib3hcIixcbiAgICAgIGNoaWxkcmVuOiBbLyogQF9fUFVSRV9fICovIGpzeChcImlucHV0XCIsIHtcbiAgICAgICAgaWQsXG4gICAgICAgIG5hbWUsXG4gICAgICAgIGNsYXNzTmFtZTogYCR7aW5wdXRTdHlsZXMgfHwgXCJcIn0gJHtzdHlsZXMkMTIucXVlcnkgfHwgXCJcIn1gLnRyaW0oKSxcbiAgICAgICAgc3R5bGU6IHF1ZXJ5RGVmYXVsdFN0eWxlLFxuICAgICAgICBkaXNhYmxlZCxcbiAgICAgICAgcGxhY2Vob2xkZXIsXG4gICAgICAgIHR5cGU6IFwidGV4dFwiLFxuICAgICAgICBhdXRvRm9jdXMsXG4gICAgICAgIGF1dG9Db21wbGV0ZTogXCJvZmZcIixcbiAgICAgICAgYXV0b0NvcnJlY3Q6IFwib2ZmXCIsXG4gICAgICAgIGF1dG9DYXBpdGFsaXplOiBcIm9mZlwiLFxuICAgICAgICBzcGVsbENoZWNrOiBcImZhbHNlXCIsXG4gICAgICAgIHRhYkluZGV4LFxuICAgICAgICBlbnRlcktleUhpbnQsXG4gICAgICAgIHJlZjogcXVlcnlJbnB1dCxcbiAgICAgICAgb25LZXlEb3duOiBjaGVja0tleSxcbiAgICAgICAgb25JbnB1dDogaGFuZGxlSW5wdXQsXG4gICAgICAgIG9uRm9jdXM6IGhhbmRsZUZvY3VzLFxuICAgICAgICBvbkJsdXI6IGhhbmRsZUJsdXIsXG4gICAgICAgIFwiYXJpYS1hdXRvY29tcGxldGVcIjogXCJib3RoXCIsXG4gICAgICAgIFwiYXJpYS1jb250cm9sc1wiOiBsaXN0Ym94SWRcbiAgICAgIH0pLCBoYXNUeXBlYWhlYWQgJiYgLyogQF9fUFVSRV9fICovIGpzeChcImlucHV0XCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBgJHtpbnB1dFN0eWxlcyB8fCBcIlwifSAke3N0eWxlcyQxMi50eXBlYWhlYWQgfHwgXCJcIn1gLnRyaW0oKSxcbiAgICAgICAgc3R5bGU6IHN0eWxlcy50eXBlYWhlYWQsXG4gICAgICAgIGRpc2FibGVkLFxuICAgICAgICB0eXBlOiBcInRleHRcIixcbiAgICAgICAgYXV0b0NvbXBsZXRlOiBcIm9mZlwiLFxuICAgICAgICBhdXRvQ29ycmVjdDogXCJvZmZcIixcbiAgICAgICAgYXV0b0NhcGl0YWxpemU6IFwib2ZmXCIsXG4gICAgICAgIHNwZWxsQ2hlY2s6IFwiZmFsc2VcIixcbiAgICAgICAgdGFiSW5kZXg6IFwiLTFcIixcbiAgICAgICAgcmVhZE9ubHk6IFwicmVhZG9ubHlcIixcbiAgICAgICAgXCJhcmlhLWhpZGRlblwiOiBcInRydWVcIixcbiAgICAgICAgcmVmOiB0eXBlYWhlYWRJbnB1dFxuICAgICAgfSksIGhhc0NsZWFyQnV0dG9uICYmIC8qIEBfX1BVUkVfXyAqLyBqc3goXCJidXR0b25cIiwge1xuICAgICAgICBjbGFzc05hbWU6IHN0eWxlcyQxMi5jbGVhckJ1dHRvbixcbiAgICAgICAgc3R5bGU6IHN0eWxlcy5jbGVhckJ1dHRvbixcbiAgICAgICAgb25Nb3VzZURvd246IGhhbmRsZUNsZWFyQnV0dG9uLFxuICAgICAgICB0YWJJbmRleDogLTEsXG4gICAgICAgIFwiYXJpYS1sYWJlbFwiOiBjbGVhckJ1dHRvbkFyaWFMYWJlbCxcbiAgICAgICAgY2hpbGRyZW46IC8qIEBfX1BVUkVfXyAqLyBqc3goQ2xlYXIsIHt9KVxuICAgICAgfSksIGhhc0NhbmNlbEJ1dHRvbiAmJiAvKiBAX19QVVJFX18gKi8ganN4KFwiYnV0dG9uXCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBzdHlsZXMkMTIuY2FuY2VsQnV0dG9uLFxuICAgICAgICBzdHlsZTogc3R5bGVzLmNhbmNlbEJ1dHRvbixcbiAgICAgICAgb25Nb3VzZURvd246IGhhbmRsZUNhbmNlbEJ1dHRvbixcbiAgICAgICAgdGFiSW5kZXg6IC0xLFxuICAgICAgICBcImFyaWEtbGFiZWxcIjogY2FuY2VsQnV0dG9uQXJpYUxhYmVsLFxuICAgICAgICBjaGlsZHJlbjogLyogQF9fUFVSRV9fICovIGpzeChDYW5jZWwsIHt9KVxuICAgICAgfSksIGlzRXhwYW5kZWQgJiYgLyogQF9fUFVSRV9fICovIGpzeChMaXN0Ym94LCB7XG4gICAgICAgIGlkOiBsaXN0Ym94SWQsXG4gICAgICAgIGl0ZW1zOiBzdGF0ZS5pdGVtcyxcbiAgICAgICAgbm9JdGVtc01lc3NhZ2UsXG4gICAgICAgIHN0eWxlczogc3R5bGVzJDEyXG4gICAgICB9KSwgaXNFcnJvckV4cGFuZGVkICYmIC8qIEBfX1BVUkVfXyAqLyBqc3goRXJyb3Jib3gsIHtcbiAgICAgICAgaWQ6IGVycm9yYm94SWQsXG4gICAgICAgIGVycm9yTWVzc2FnZSxcbiAgICAgICAgc3R5bGVzOiBzdHlsZXMkMTJcbiAgICAgIH0pXVxuICAgIH0pXG4gIH0pO1xufSk7XG5Db250YWluZXIuZGlzcGxheU5hbWUgPSBcIkNvbnRhaW5lclwiO1xuY29uc3QgcmFuZG9tSWQgPSAoKSA9PiBgdHVybnN0b25lLSR7KDAgfCBNYXRoLnJhbmRvbSgpICogNjA0ZTUpLnRvU3RyaW5nKDM2KX1gO1xuY29uc3QgcHJvcERlZmF1bHRzID0ge1xuICBhdXRvRm9jdXM6IGZhbHNlLFxuICBjYW5jZWxCdXR0b246IGZhbHNlLFxuICBjYW5jZWxCdXR0b25BcmlhTGFiZWw6IFwiQ2FuY2VsXCIsXG4gIGNsZWFyQnV0dG9uOiBmYWxzZSxcbiAgY2xlYXJCdXR0b25BcmlhTGFiZWw6IFwiQ2xlYXIgY29udGVudHNcIixcbiAgZGVib3VuY2VXYWl0OiAyNTAsXG4gIGRlZmF1bHRMaXN0Ym94SXNJbW11dGFibGU6IHRydWUsXG4gIGRpc2FibGVkOiBmYWxzZSxcbiAgaWQ6IHJhbmRvbUlkKCksXG4gIGxpc3Rib3hJc0ltbXV0YWJsZTogdHJ1ZSxcbiAgbWF0Y2hUZXh0OiBmYWxzZSxcbiAgbWF4SXRlbXM6IDEwLFxuICBtaW5RdWVyeUxlbmd0aDogMSxcbiAgcGxhY2Vob2xkZXI6IFwiXCIsXG4gIHN0eWxlczoge30sXG4gIHR5cGVhaGVhZDogdHJ1ZSxcbiAgQ2FuY2VsOiAoKSA9PiBcIkNhbmNlbFwiLFxuICBDbGVhcjogKCkgPT4gXCJcXHhEN1wiXG59O1xuY29uc3QgcmVuZGVyID0gKENvbXBvbmVudCwgY29tcG9uZW50UHJvcHMsIHBsdWdpbkluZGV4LCByZWYpID0+IHtcbiAgY29uc3QgcDIgPSBBcnJheS5pc0FycmF5KGNvbXBvbmVudFByb3BzLnBsdWdpbnMpICYmIGNvbXBvbmVudFByb3BzLnBsdWdpbnNbcGx1Z2luSW5kZXhdO1xuICBpZiAocDIpIHtcbiAgICBjb25zdCBbUGx1Z2luLCBwbHVnaW5Qcm9wc10gPSBBcnJheS5pc0FycmF5KHAyKSA/IHAyIDogW3AyXTtcbiAgICByZXR1cm4gLyogQF9fUFVSRV9fICovIGpzeChQbHVnaW4sIF9fc3ByZWFkUHJvcHMoX19zcHJlYWRWYWx1ZXMoe1xuICAgICAgcmVmXG4gICAgfSwgcGx1Z2luUHJvcHMpLCB7XG4gICAgICBDb21wb25lbnQsXG4gICAgICBjb21wb25lbnRQcm9wcyxcbiAgICAgIHBsdWdpbkluZGV4LFxuICAgICAgcmVuZGVyXG4gICAgfSkpO1xuICB9XG4gIHJldHVybiAvKiBAX19QVVJFX18gKi8ganN4KENvbXBvbmVudCwgX19zcHJlYWRWYWx1ZXMoe1xuICAgIHJlZlxuICB9LCBjb21wb25lbnRQcm9wcykpO1xufTtcbmNvbnN0IFR1cm5zdG9uZSA9IFJlYWN0LmZvcndhcmRSZWYoKHByb3BzLCByZWYpID0+IHtcbiAgY29uc3QgY29tcG9uZW50UHJvcHMgPSBfX3NwcmVhZFZhbHVlcyhfX3NwcmVhZFZhbHVlcyh7fSwgcHJvcERlZmF1bHRzKSwgcHJvcHMpO1xuICByZXR1cm4gLyogQF9fUFVSRV9fICovIGpzeChSZWFjdC5TdHJpY3RNb2RlLCB7XG4gICAgY2hpbGRyZW46IC8qIEBfX1BVUkVfXyAqLyBqc3goU3RhdGVDb250ZXh0UHJvdmlkZXIsIF9fc3ByZWFkUHJvcHMoX19zcHJlYWRWYWx1ZXMoe30sIGNvbXBvbmVudFByb3BzKSwge1xuICAgICAgY2hpbGRyZW46IHJlbmRlcihDb250YWluZXIsIGNvbXBvbmVudFByb3BzLCAwLCByZWYpXG4gICAgfSkpXG4gIH0pO1xufSk7XG5UdXJuc3RvbmUuZGlzcGxheU5hbWUgPSBcIlR1cm5zdG9uZVwiO1xuY29uc3Qgc2VhcmNoVHlwZXMgPSBbXCJzdGFydHN3aXRoXCIsIFwiY29udGFpbnNcIl07XG5jb25zdCBsaXN0Ym94UnVsZXMgPSBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMuZXhhY3Qoe1xuICBkYXRhOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLmFycmF5XSkuaXNSZXF1aXJlZCxcbiAgc2VhcmNoVHlwZTogUHJvcFR5cGVzLm9uZU9mKHNlYXJjaFR5cGVzKSxcbiAgZGlzcGxheUZpZWxkOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIGlkOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gIHJhdGlvOiBQcm9wVHlwZXMubnVtYmVyXG59KSksIFByb3BUeXBlcy5leGFjdCh7XG4gIGRhdGE6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMuYXJyYXldKS5pc1JlcXVpcmVkLFxuICBzZWFyY2hUeXBlOiBQcm9wVHlwZXMub25lT2Yoc2VhcmNoVHlwZXMpLFxuICBkaXNwbGF5RmllbGQ6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKVxufSksIFByb3BUeXBlcy5mdW5jXSk7XG5UdXJuc3RvbmUucHJvcFR5cGVzID0ge1xuICBhdXRvRm9jdXM6IFByb3BUeXBlcy5ib29sLFxuICBjYW5jZWxCdXR0b246IFByb3BUeXBlcy5ib29sLFxuICBjYW5jZWxCdXR0b25BcmlhTGFiZWw6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGNhbmNlbEJ1dHRvblRleHQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGNsZWFyQnV0dG9uOiBQcm9wVHlwZXMuYm9vbCxcbiAgY2xlYXJCdXR0b25BcmlhTGFiZWw6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGNsZWFyQnV0dG9uVGV4dDogUHJvcFR5cGVzLnN0cmluZyxcbiAgZGVib3VuY2VXYWl0OiBQcm9wVHlwZXMubnVtYmVyLFxuICBkZWZhdWx0TGlzdGJveDogbGlzdGJveFJ1bGVzLFxuICBkZWZhdWx0TGlzdGJveElzSW1tdXRhYmxlOiBQcm9wVHlwZXMuYm9vbCxcbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuICBlbnRlcktleUhpbnQ6IFByb3BUeXBlcy5vbmVPZihbXCJlbnRlclwiLCBcImRvbmVcIiwgXCJnb1wiLCBcIm5leHRcIiwgXCJwcmV2aW91c1wiLCBcInNlYXJjaFwiLCBcInNlbmRcIl0pLFxuICBlcnJvck1lc3NhZ2U6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGlkOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBsaXN0Ym94OiBsaXN0Ym94UnVsZXMuaXNSZXF1aXJlZCxcbiAgbGlzdGJveElzSW1tdXRhYmxlOiBQcm9wVHlwZXMuYm9vbCxcbiAgbWF0Y2hUZXh0OiBQcm9wVHlwZXMuYm9vbCxcbiAgbWF4SXRlbXM6IFByb3BUeXBlcy5udW1iZXIsXG4gIG1pblF1ZXJ5TGVuZ3RoOiAocHJvcHMpID0+IHtcbiAgICBQcm9wVHlwZXMuY2hlY2tQcm9wVHlwZXMoe1xuICAgICAgbWluUXVlcnlMZW5ndGg6IFByb3BUeXBlcy5udW1iZXJcbiAgICB9LCB7XG4gICAgICBtaW5RdWVyeUxlbmd0aDogcHJvcHMubWluUXVlcnlMZW5ndGhcbiAgICB9LCBcInByb3BcIiwgXCJUdXJuc3RvbmVcIik7XG4gICAgaWYgKHByb3BzLm1pblF1ZXJ5TGVuZ3RoIDwgcHJvcERlZmF1bHRzLm1pblF1ZXJ5TGVuZ3RoKVxuICAgICAgcmV0dXJuIG5ldyBFcnJvcihgUHJvcCBcIm1pblF1ZXJ5TGVuZ3RoXCIgbXVzdCBiZSBhIG51bWJlciBncmVhdGVyIHRoYW4gJHtwcm9wRGVmYXVsdHMubWluUXVlcnlMZW5ndGggLSAxfWApO1xuICB9LFxuICBuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBub0l0ZW1zTWVzc2FnZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgb25CbHVyOiBQcm9wVHlwZXMuZnVuYyxcbiAgb25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuICBvbkVudGVyOiBQcm9wVHlwZXMuZnVuYyxcbiAgb25Gb2N1czogUHJvcFR5cGVzLmZ1bmMsXG4gIG9uU2VsZWN0OiBQcm9wVHlwZXMuZnVuYyxcbiAgb25UYWI6IFByb3BUeXBlcy5mdW5jLFxuICBwbGFjZWhvbGRlcjogUHJvcFR5cGVzLnN0cmluZyxcbiAgcGx1Z2luczogUHJvcFR5cGVzLmFycmF5LFxuICBzdHlsZXM6IFByb3BUeXBlcy5vYmplY3QsXG4gIHRhYkluZGV4OiBQcm9wVHlwZXMubnVtYmVyLFxuICB0ZXh0OiBQcm9wVHlwZXMuc3RyaW5nLFxuICB0eXBlYWhlYWQ6IFByb3BUeXBlcy5ib29sLFxuICBDYW5jZWw6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgQ2xlYXI6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgSXRlbTogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICBHcm91cE5hbWU6IFByb3BUeXBlcy5lbGVtZW50VHlwZVxufTtcbmV4cG9ydCB7IFR1cm5zdG9uZSBhcyBkZWZhdWx0IH07XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCJcclxuaW1wb3J0IFR1cm5zdG9uZSBmcm9tIFwidHVybnN0b25lXCJcclxuaW1wb3J0IHsgdXNlTmF2aWdhdGUgfSBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbVwiXHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBTZWFyY2hQYXRpZW50KCkge1xyXG5cclxuICAgY29uc3QgbmF2aWdhdGUgPSB1c2VOYXZpZ2F0ZSgpXHJcblxyXG4gICBjb25zdCBsaXN0Ym94ID0ge1xyXG4gICAgICBkYXRhOiAocXVlcnkpID0+XHJcbiAgICAgICAgIGZldGNoKGAvYXBpL3NlYXJjaC9wYXRpZW50cz9xPSR7ZW5jb2RlVVJJQ29tcG9uZW50KHF1ZXJ5KX0mbGltaXQ9MTBgKVxyXG4gICAgICAgICAgICAudGhlbihyZXMgPT4gcmVzLmpzb24oKSksXHJcbiAgICAgIHNlYXJjaFR5cGU6IFwiY29udGFpbnNcIixcclxuICAgICAgZGlzcGxheUZpZWxkOiBcImZ1bGxOYW1lXCJcclxuICAgfVxyXG5cclxuICAgY29uc3QgZGVmYXVsdExpc3Rib3ggPSB7XHJcbiAgICAgIGRhdGE6ICgpID0+IGZldGNoKFwiL2FwaS9wYXRpZW50cy9wb3B1bGFyXCIpLnRoZW4ocmVzID0+IHJlcy5qc29uKCkpLFxyXG4gICAgICBkaXNwbGF5RmllbGQ6IFwiZnVsbE5hbWVcIixcclxuICAgfVxyXG5cclxuICAgY29uc3Qgc3R5bGVzID0ge1xyXG4gICAgICBjb250YWluZXI6IFwiXCIsXHJcbiAgICAgIGNvbnRhaW5lckZvY3VzOiBcIlwiLFxyXG4gICAgICBpbnB1dDogXCJ3LWZ1bGwgYm9yZGVyIGJvcmRlci1ncmF5LTMwMCBweS0yIHB4LTQgcm91bmRlZC1tZCB0ZXh0LWxnXCIsXHJcbiAgICAgIGlucHV0Rm9jdXM6IFwidy1mdWxsIGJvcmRlciBib3JkZXItZ3JheS0zMDAgYm9yZGVyLWItMCBvdXRsaW5lLW5vbmUgcHktMiBweC00IHJvdW5kZWQtdC1tZCAgdGV4dC1sZ1wiLFxyXG4gICAgICBxdWVyeTogXCJcIixcclxuICAgICAgdHlwZWFoZWFkOiBcIlwiLFxyXG4gICAgICBjYW5jZWxCdXR0b246IFwiXCIsXHJcbiAgICAgIGNsZWFyQnV0dG9uOiBcImFic29sdXRlIGluc2V0LXktMCByaWdodC0wIHctOCBpbmxpbmUtZmxleCBpdGVtcy1jZW50ZXIganVzdGlmeS1jZW50ZXJcIixcclxuICAgICAgbGlzdGJveDogXCJiZy13aGl0ZSB3LWZ1bGwgYm9yZGVyIGJvcmRlci10LTAgYm9yZGVyLWdyYXktMzAwIHNoYWRvdyByb3VuZGVkLWItbWQgcHQtMiBwYi0zXCIsXHJcbiAgICAgIG5vSXRlbXM6IFwicHktMSBweC00IHRleHQtZ3JheS01MDBcIixcclxuICAgICAgZXJyb3Jib3g6IFwiXCIsXHJcbiAgICAgIGVycm9yTWVzc2FnZTogXCJcIixcclxuICAgICAgZ3JvdXBIZWFkaW5nOiBcIlwiLFxyXG4gICAgICBpdGVtOiBcInB5LTEgcHgtNFwiLFxyXG4gICAgICBoaWdobGlnaHRlZEl0ZW06IFwicHktMSBweC00IGJnLWdyYXktMjAwIGN1cnNvci1wb2ludGVyXCIsXHJcbiAgICAgIG1hdGNoOiBcIlwiXHJcbiAgIH1cclxuXHJcbiAgIGZ1bmN0aW9uIGhhbmRsZVNlbGVjdChzZWxlY3RlZEl0ZW0sIGRpc3BsYXlGaWVsZCkge1xyXG4gICAgICBzZWxlY3RlZEl0ZW0gJiYgbmF2aWdhdGUoYC9wYXRpZW50cy8ke3NlbGVjdGVkSXRlbS5faWR9L2ApXHJcbiAgIH1cclxuXHJcbiAgIHJldHVybiAoXHJcbiAgICAgIDxUdXJuc3RvbmVcclxuICAgICAgICAgYXV0b0ZvY3VzPXtmYWxzZX1cclxuICAgICAgICAgY2FuY2VsQnV0dG9uPXtmYWxzZX1cclxuICAgICAgICAgY2xlYXJCdXR0b249e3RydWV9XHJcbiAgICAgICAgIGRlYm91bmNlV2FpdD17MjUwfVxyXG4gICAgICAgICBpZD1cInNlYXJjaC1wYXRpZW50XCJcclxuICAgICAgICAgbGlzdGJveD17bGlzdGJveH1cclxuICAgICAgICAgbGlzdGJveElzSW1tdXRhYmxlPXt0cnVlfVxyXG4gICAgICAgICBtYXRjaFRleHQ9e3RydWV9XHJcbiAgICAgICAgIG1heEl0ZW1zPVwiMjBcIlxyXG4gICAgICAgICBub0l0ZW1zTWVzc2FnZT1cIk7Do28gZW5jb250cmFtb3MgbmVuaHVtIHBhY2llbnRlIGNvbSBlc3NlIG5vbWVcIlxyXG4gICAgICAgICBwbGFjZWhvbGRlcj1cIkRpZ2l0ZSBvIG5vbWUgZG8gcGFjaWVudGVcIlxyXG4gICAgICAgICBzdHlsZXM9e3N0eWxlc31cclxuICAgICAgICAgb25TZWxlY3Q9e2hhbmRsZVNlbGVjdH1cclxuICAgICAgICAgdHlwZWFoZWFkPXt0cnVlfVxyXG4gICAgICAgICBkZWZhdWx0TGlzdGJveD17ZGVmYXVsdExpc3Rib3h9XHJcbiAgICAgIC8+XHJcbiAgIClcclxufSIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIlxyXG5cclxuaW1wb3J0IFNlYXJjaFBhdGllbnQgZnJvbSBcIi4uL2NvbXBvbmVudHMvU2VhcmNoUGF0aWVudFwiXHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBIb21lKCkge1xyXG5cclxuICAgcmV0dXJuIChcclxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4IGZsZXgtY29sIGp1c3RpZnktY2VudGVyIG0tMjAgcC0xMCB0ZXh0LXhsXCI+XHJcbiAgICAgICAgIDxTZWFyY2hQYXRpZW50IC8+XHJcbiAgICAgIDwvZGl2ID5cclxuICAgKVxyXG59IiwiaW1wb3J0IFJlYWN0LCB7IHVzZUNvbnRleHQgfSBmcm9tIFwicmVhY3RcIlxyXG5pbXBvcnQgeyBOYXZMaW5rLCB1c2VQYXJhbXMgfSBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbVwiXHJcblxyXG5pbXBvcnQgeyBDb250ZXh0IH0gZnJvbSBcIi4uL0NvbnRleHRcIlxyXG5cclxuaW1wb3J0IENyZWF0ZU5ld0ZvbGRlck91dGxpbmVkSWNvbiBmcm9tIFwiQG11aS9pY29ucy1tYXRlcmlhbC9DcmVhdGVOZXdGb2xkZXJPdXRsaW5lZFwiO1xyXG5pbXBvcnQgRm9sZGVyU2hhcmVkT3V0bGluZWRJY29uIGZyb20gXCJAbXVpL2ljb25zLW1hdGVyaWFsL0ZvbGRlclNoYXJlZE91dGxpbmVkXCJcclxuaW1wb3J0IEZvcm1hdExpc3RCdWxsZXRlZE91dGxpbmVkSWNvbiBmcm9tIFwiQG11aS9pY29ucy1tYXRlcmlhbC9Gb3JtYXRMaXN0QnVsbGV0ZWRPdXRsaW5lZFwiXHJcbmltcG9ydCBCZWRPdXRsaW5lZEljb24gZnJvbSBcIkBtdWkvaWNvbnMtbWF0ZXJpYWwvQmVkT3V0bGluZWRcIlxyXG5pbXBvcnQgTW9uaXRvckhlYXJ0T3V0bGluZWRJY29uIGZyb20gXCJAbXVpL2ljb25zLW1hdGVyaWFsL01vbml0b3JIZWFydE91dGxpbmVkXCJcclxuaW1wb3J0IENoYWlyT3V0bGluZWRJY29uIGZyb20gXCJAbXVpL2ljb25zLW1hdGVyaWFsL0NoYWlyT3V0bGluZWRcIlxyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gUGF0aWVudFNpZGViYXIocHJvcHMpIHtcclxuXHJcbiAgIGNvbnN0IHsgdGhpc1BhdGllbnQgfSA9IHVzZUNvbnRleHQoQ29udGV4dClcclxuICAgY29uc3QgcGF0aWVudFBhdGggPSBgL3BhdGllbnRzLyR7dGhpc1BhdGllbnQuX2lkfWBcclxuXHJcbiAgIHJldHVybiAoXHJcbiAgICAgIDxuYXYgY2xhc3NOYW1lPVwiYmctc2xhdGUtNjAwIGgtc2NyZWVuIHRleHQtd2hpdGUgcHQtNFwiPlxyXG4gICAgICAgICA8dWw+XHJcbiAgICAgICAgICAgIDxsaSBjbGFzc05hbWU9XCJmbGV4IGZsZXgtY29sXCI+XHJcbiAgICAgICAgICAgICAgIDxOYXZMaW5rXHJcbiAgICAgICAgICAgICAgICAgIHRvPXtgJHtwYXRpZW50UGF0aH0vZXZlbnRzL3RpbWVsaW5lP249MWB9XHJcbiAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17XHJcbiAgICAgICAgICAgICAgICAgICAgICh7IGlzQWN0aXZlIH0pID0+IGlzQWN0aXZlID8gXCJiZy1zbGF0ZS0xMDAgdGV4dC1za3ktNzAwIGZvbnQtYm9sZCBweS0yIHB4LTQgYm9yZGVyLWwtOCBib3JkZXItc2t5LTcwMFwiIDogXCJweS0yIHB4LTRcIlxyXG4gICAgICAgICAgICAgICAgICB9PlxyXG4gICAgICAgICAgICAgICAgICA8Rm9ybWF0TGlzdEJ1bGxldGVkT3V0bGluZWRJY29uIGNsYXNzTmFtZT1cIm1yLTFcIiAvPlxyXG4gICAgICAgICAgICAgICAgICBFdmVudG9zIHJlY2VudGVzXHJcbiAgICAgICAgICAgICAgIDwvTmF2TGluaz5cclxuICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgPGxpIGNsYXNzTmFtZT1cImZsZXggZmxleC1jb2xcIj5cclxuICAgICAgICAgICAgICAgPE5hdkxpbmtcclxuICAgICAgICAgICAgICAgICAgdG89e2Ake3BhdGllbnRQYXRofS9kaWFnbm9zaXNgfVxyXG4gICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e1xyXG4gICAgICAgICAgICAgICAgICAgICAoeyBpc0FjdGl2ZSB9KSA9PiBpc0FjdGl2ZSA/IFwiYmctc2xhdGUtMTAwIHRleHQtc2t5LTcwMCBmb250LWJvbGQgcHktMiBweC00IGJvcmRlci1sLTggYm9yZGVyLXNreS03MDBcIiA6IFwicHktMiBweC00XCJcclxuICAgICAgICAgICAgICAgICAgfT5cclxuICAgICAgICAgICAgICAgICAgPENyZWF0ZU5ld0ZvbGRlck91dGxpbmVkSWNvbiBjbGFzc05hbWU9XCJtci0xXCIgLz5cclxuICAgICAgICAgICAgICAgICAgRGlhZ27Ds3N0aWNvcyBhdHVhaXNcclxuICAgICAgICAgICAgICAgPC9OYXZMaW5rPlxyXG4gICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICA8bGkgY2xhc3NOYW1lPVwiZmxleCBmbGV4LWNvbFwiPlxyXG4gICAgICAgICAgICAgICA8TmF2TGlua1xyXG4gICAgICAgICAgICAgICAgICB0bz17YCR7cGF0aWVudFBhdGh9L2NhdGVnb3JpZXMvNjM2YWI0NGZiZjI5NGRkMDMyMWRlZTI3YH1cclxuICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtcclxuICAgICAgICAgICAgICAgICAgICAgKHsgaXNBY3RpdmUgfSkgPT4gaXNBY3RpdmUgPyBcImJnLXNsYXRlLTEwMCB0ZXh0LXNreS03MDAgZm9udC1ib2xkIHB5LTIgcHgtNCBib3JkZXItbC04IGJvcmRlci1za3ktNzAwXCIgOiBcInB5LTIgcHgtNFwiXHJcbiAgICAgICAgICAgICAgICAgIH0+XHJcbiAgICAgICAgICAgICAgICAgIDxDaGFpck91dGxpbmVkSWNvbiBjbGFzc05hbWU9XCJtci0xXCIgLz5cclxuICAgICAgICAgICAgICAgICAgQW1idWxhdMOzcmlvXHJcbiAgICAgICAgICAgICAgIDwvTmF2TGluaz5cclxuICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgPGxpIGNsYXNzTmFtZT1cImZsZXggZmxleC1jb2wgbXQtNFwiPlxyXG4gICAgICAgICAgICAgICA8TmF2TGlua1xyXG4gICAgICAgICAgICAgICAgICB0bz17YCR7cGF0aWVudFBhdGh9L3Byb2ZpbGVgfVxyXG4gICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e1xyXG4gICAgICAgICAgICAgICAgICAgICAoeyBpc0FjdGl2ZSB9KSA9PiBpc0FjdGl2ZSA/IFwiYmctc2xhdGUtMTAwIHRleHQtc2t5LTcwMCBmb250LWJvbGQgcHktMiBweC00IGJvcmRlci1sLTggYm9yZGVyLXNreS03MDBcIiA6IFwicHktMiBweC00XCJcclxuICAgICAgICAgICAgICAgICAgfT5cclxuICAgICAgICAgICAgICAgICAgPEZvbGRlclNoYXJlZE91dGxpbmVkSWNvbiBjbGFzc05hbWU9XCJtci0xXCIgLz5cclxuICAgICAgICAgICAgICAgICAgRGFkb3MgcGVzc29haXNcclxuICAgICAgICAgICAgICAgPC9OYXZMaW5rPlxyXG4gICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICA8L3VsPlxyXG4gICAgICA8L25hdiA+XHJcblxyXG4gICApXHJcbn0iLCJpbXBvcnQgUmVhY3QsIHsgdXNlQ29udGV4dCB9IGZyb20gXCJyZWFjdFwiXHJcbmltcG9ydCB7IExpbmssIE5hdkxpbmssIHVzZVBhcmFtcyB9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCJcclxuXHJcbmltcG9ydCB7IENvbnRleHQgfSBmcm9tIFwiLi4vQ29udGV4dFwiXHJcblxyXG5pbXBvcnQgTWVudU91dGxpbmVkSWNvbiBmcm9tIFwiQG11aS9pY29ucy1tYXRlcmlhbC9NZW51T3V0bGluZWRcIlxyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gUGF0aWVudEluZm8ocHJvcHMpIHtcclxuXHJcbiAgIGNvbnN0IHsgdGhpc1BhdGllbnQsIGdldEFnZSB9ID0gdXNlQ29udGV4dChDb250ZXh0KVxyXG4gICAvLyBjb25zdCB7IHBhdGllbnRJZCB9ID0gdXNlUGFyYW1zKClcclxuXHJcbiAgIC8vIGNvbnN0IHBhdGllbnRQYXRoID0gYC9wYXRpZW50cy8ke3BhdGllbnRJZH1gXHJcblxyXG4gICBjb25zdCBkaWFnbm9zaXNFbCA9IHRoaXNQYXRpZW50LmN1cnJlbnREaWFnbm9zaXM/Lm1hcChpdGVtID0+IChcclxuICAgICAgPExpbmsgdG89XCJcIiBrZXk9e2l0ZW0uX2lkfSBjbGFzc05hbWU9XCJ1bmRlcmxpbmVcIj57aXRlbS5uYW1lfTwvTGluaz5cclxuICAgKSkucmVkdWNlKChwcmV2LCBjdXJyKSA9PiBbcHJldiwgJywgJywgY3Vycl0pXHJcblxyXG4gICByZXR1cm4gKFxyXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImJnLXNsYXRlLTcwMCB0ZXh0LXdoaXRlXCI+XHJcbiAgICAgICAgIDxkaXYgaWQ9XCJwYXRpZW50LWluZm9cIiBjbGFzc05hbWU9XCJwdC0yIHBiLTMgcHgtNCBmbGV4IGl0ZW1zLWJhc2VsaW5lXCI+XHJcbiAgICAgICAgICAgIDxoMiBpZD1cInBhdGllbnQtbmFtZVwiIGNsYXNzTmFtZT1cInRleHQtMnhsIG1yLTMgZm9udC1zZXJpZlwiPlxyXG4gICAgICAgICAgICAgICA8TWVudU91dGxpbmVkSWNvbiBjbGFzc05hbWU9XCJtYi0xIG1yLTJcIiAvPlxyXG4gICAgICAgICAgICAgICB7dGhpc1BhdGllbnQuZnVsbE5hbWV9XHJcbiAgICAgICAgICAgIDwvaDI+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCB0ZXh0LXNtXCI+XHJcbiAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibXItM1wiPlxyXG4gICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJ0ZXh0LWdyYXktMzAwIGZvbnQtc2VyaWZcIj5SZWdpc3RybzogPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJcIj57dGhpc1BhdGllbnQuX2lkfTwvc3Bhbj5cclxuICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibXItM1wiPlxyXG4gICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJ0ZXh0LWdyYXktMzAwIGZvbnQtc2VyaWZcIj5JZGFkZTogPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJcIj57Z2V0QWdlKHRoaXNQYXRpZW50LmRhdGVPZkJpcnRoKX08L3NwYW4+XHJcbiAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIlwiPlxyXG4gICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJ0ZXh0LWdyYXktMzAwIGZvbnQtc2VyaWZcIj5EaWFnbsOzc3RpY29zOiA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cIlwiPntkaWFnbm9zaXNFbH08L3NwYW4+XHJcbiAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgPC9kaXY+XHJcbiAgICAgIDwvZGl2PlxyXG4gICApXHJcbn0iLCJpbXBvcnQgUmVhY3QsIHsgdXNlQ29udGV4dCwgdXNlRWZmZWN0IH0gZnJvbSBcInJlYWN0XCJcclxuaW1wb3J0IHsgdXNlUGFyYW1zLCBPdXRsZXQgfSBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbVwiXHJcblxyXG5pbXBvcnQgeyBDb250ZXh0IH0gZnJvbSBcIi4uLy4uL0NvbnRleHRcIlxyXG5cclxuaW1wb3J0IFBhdGllbnRTaWRlYmFyIGZyb20gXCIuLi8uLi9jb21wb25lbnRzL1BhdGllbnRTaWRlYmFyXCJcclxuaW1wb3J0IFBhdGllbnRJbmZvIGZyb20gXCIuLi8uLi9jb21wb25lbnRzL1BhdGllbnRJbmZvXCJcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFBhdGllbnQoKSB7XHJcblxyXG4gICBjb25zdCB7IHNldFRoaXNQYXRpZW50IH0gPSB1c2VDb250ZXh0KENvbnRleHQpXHJcbiAgIGNvbnN0IHsgcGF0aWVudElkIH0gPSB1c2VQYXJhbXMoKVxyXG5cclxuICAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgICAgZmV0Y2goYC9hcGkvcGF0aWVudHMvJHtwYXRpZW50SWR9YClcclxuICAgICAgICAgLnRoZW4ocmVzID0+IHJlcy5qc29uKCkpXHJcbiAgICAgICAgIC50aGVuKGRhdGEgPT4ge1xyXG4gICAgICAgICAgICBzZXRUaGlzUGF0aWVudChkYXRhKVxyXG4gICAgICAgICB9KVxyXG4gICB9LCBbcGF0aWVudElkXSlcclxuXHJcbiAgIHJldHVybiAoXHJcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiXCI+XHJcbiAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiXCI+XHJcbiAgICAgICAgICAgIDxQYXRpZW50SW5mbyAvPlxyXG4gICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4XCI+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidy0xLzZcIj5cclxuICAgICAgICAgICAgICAgPFBhdGllbnRTaWRlYmFyIC8+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInctZnVsbFwiPlxyXG4gICAgICAgICAgICAgICA8T3V0bGV0IC8+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICA8L2Rpdj5cclxuICAgICAgPC9kaXYgPlxyXG4gICApXHJcbn0iLCJpbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0LCB1c2VDb250ZXh0LCB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiXHJcbmltcG9ydCB7IExpbmssIHVzZVNlYXJjaFBhcmFtcywgdXNlUGFyYW1zIH0gZnJvbSBcInJlYWN0LXJvdXRlci1kb21cIlxyXG5pbXBvcnQgeyBDb250ZXh0IH0gZnJvbSBcIi4uLy4uL0NvbnRleHRcIlxyXG5cclxuaW1wb3J0IENhbGVuZGFyTW9udGhPdXRsaW5lZEljb24gZnJvbSBcIkBtdWkvaWNvbnMtbWF0ZXJpYWwvQ2FsZW5kYXJNb250aE91dGxpbmVkXCJcclxuaW1wb3J0IFBlcnNvbk91dGxpbmVPdXRsaW5lZEljb24gZnJvbSBcIkBtdWkvaWNvbnMtbWF0ZXJpYWwvUGVyc29uT3V0bGluZU91dGxpbmVkXCJcclxuaW1wb3J0IEFzc2lnbm1lbnRMYXRlT3V0bGluZWRJY29uIGZyb20gXCJAbXVpL2ljb25zLW1hdGVyaWFsL0Fzc2lnbm1lbnRMYXRlT3V0bGluZWRcIlxyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gVGltZWxpbmUoKSB7XHJcblxyXG4gICBjb25zdCB7IGZvcm1hdERhdGUsIHRoaXNQYXRpZW50IH0gPSB1c2VDb250ZXh0KENvbnRleHQpXHJcbiAgIGNvbnN0IFt0aW1lbGluZSwgc2V0VGltZWxpbmVdID0gdXNlU3RhdGUoW10pXHJcbiAgIGNvbnN0IHsgcGF0aWVudElkIH0gPSB1c2VQYXJhbXMoKVxyXG4gICBjb25zdCBbc2VhcmNoUGFyYW1zLCBzZXRTZWFyY2hQYXJhbXNdID0gdXNlU2VhcmNoUGFyYW1zKClcclxuXHJcbiAgIGNvbnN0IG51bU9mRXZlbnRzID0gc2VhcmNoUGFyYW1zLmdldChcIm5cIilcclxuXHJcbiAgIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICAgIGZldGNoKGAvYXBpL3BhdGllbnRzLyR7cGF0aWVudElkfS9ldmVudHM/bj0ke251bU9mRXZlbnRzfWApXHJcbiAgICAgICAgIC50aGVuKHJlcyA9PiByZXMuanNvbigpKVxyXG4gICAgICAgICAudGhlbihkYXRhID0+IHNldFRpbWVsaW5lKGRhdGEpKVxyXG4gICAgICAgICAuY2F0Y2goZXJyID0+IHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coZXJyKVxyXG4gICAgICAgICB9KVxyXG4gICB9LCBbXSlcclxuXHJcbiAgIGNvbnNvbGUubG9nKHRpbWVsaW5lKVxyXG5cclxuICAgY29uc3QgdGltZWxpbmVFbCA9IHRpbWVsaW5lPy5tYXAoZXZlbnQgPT4ge1xyXG4gICAgICByZXR1cm4gKFxyXG4gICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIml0ZW1zLXN0YXJ0IG1iLTVcIiBrZXk9e2V2ZW50Ll9pZH0+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBqdXN0aWZ5LWJldHdlZW4gaXRlbXMtY2VudGVyIGJnLWdyYXktMTAwIHB4LTIgcHktMSByb3VuZGVkLWZ1bGxcIj5cclxuICAgICAgICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgICAgICAgPExpbmsgdG89XCJvdXRwYXRpZW50XCIgY2xhc3NOYW1lPVwiZmxleCBpdGVtcy1jZW50ZXJcIj5cclxuICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiZ3JvdyBmb250LWJvbGQgdXBwZXJjYXNlIHRleHQtc20gbWwtMVwiPntldmVudC5jYXRlZ29yeS5uYW1lfSBkZSB7ZXZlbnQuc3BlY2lhbHR5fTwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgPC9MaW5rPlxyXG4gICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0ZXh0LXNtXCI+e2Zvcm1hdERhdGUoZXZlbnQuZGF0ZSwgXCJzaG9ydFwiKX08L2Rpdj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicGwtMlwiPlxyXG4gICAgICAgICAgICAgICB7ZXZlbnQuZXhhbSAmJiA8ZGl2PjxzcGFuIGNsYXNzTmFtZT1cInRleHQtZ3JheS01MDAgZm9udC1ib2xkIHVwcGVyY2FzZSB0ZXh0LXNtXCI+RXhhbWU6IDwvc3Bhbj57ZXZlbnQuZXhhbS5qb2luKFwiLCBcIil9PC9kaXY+fVxyXG4gICAgICAgICAgICAgICB7ZXZlbnQuZGlhZ25vc2lzLmxlbmd0aCA+IDAgJiYgPGRpdj48c3BhbiBjbGFzc05hbWU9XCJ0ZXh0LWdyYXktNTAwIGZvbnQtYm9sZCB1cHBlcmNhc2UgdGV4dC1zbVwiPkhEOiA8L3NwYW4+e2V2ZW50LmRpYWdub3Npcy5qb2luKFwiLCBcIil9PC9kaXY+fVxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgPC9kaXYgPlxyXG4gICAgICApXHJcbiAgIH0pXHJcblxyXG4gICByZXR1cm4gKFxyXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInAtNFwiPlxyXG4gICAgICAgICB7dGltZWxpbmVFbH1cclxuICAgICAgPC9kaXY+XHJcbiAgIClcclxufSIsImltcG9ydCBSZWFjdCwgeyB1c2VFZmZlY3QsIHVzZVN0YXRlLCB1c2VDb250ZXh0IH0gZnJvbSBcInJlYWN0XCJcclxuaW1wb3J0IHsgdXNlUGFyYW1zLCB1c2VPdXRsZXRDb250ZXh0LCBOYXZMaW5rLCBPdXRsZXQgfSBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbVwiXHJcbmltcG9ydCB7IENvbnRleHQgfSBmcm9tIFwiLi4vLi4vQ29udGV4dFwiXHJcblxyXG5pbXBvcnQgQ2FsZW5kYXJNb250aE91dGxpbmVkSWNvbiBmcm9tIFwiQG11aS9pY29ucy1tYXRlcmlhbC9DYWxlbmRhck1vbnRoT3V0bGluZWRcIlxyXG5pbXBvcnQgUGVyc29uT3V0bGluZU91dGxpbmVkSWNvbiBmcm9tIFwiQG11aS9pY29ucy1tYXRlcmlhbC9QZXJzb25PdXRsaW5lT3V0bGluZWRcIlxyXG5pbXBvcnQgQXNzaWdubWVudExhdGVPdXRsaW5lZEljb24gZnJvbSBcIkBtdWkvaWNvbnMtbWF0ZXJpYWwvQXNzaWdubWVudExhdGVPdXRsaW5lZFwiXHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBFdmVudHNCeUNhdGVnb3J5KCkge1xyXG5cclxuICAgY29uc3QgeyBmb3JtYXREYXRlLCBldmVudHMsIHNldEV2ZW50cyB9ID0gdXNlQ29udGV4dChDb250ZXh0KVxyXG4gICBjb25zdCB7IHBhdGllbnRJZCwgY2F0ZWdvcnlJZCB9ID0gdXNlUGFyYW1zKClcclxuXHJcbiAgIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICAgIGZldGNoKGAvYXBpL3BhdGllbnRzLyR7cGF0aWVudElkfS9jYXRlZ29yaWVzLyR7Y2F0ZWdvcnlJZH1gKVxyXG4gICAgICAgICAudGhlbihyZXMgPT4gcmVzLmpzb24oKSlcclxuICAgICAgICAgLnRoZW4oZGF0YSA9PiBzZXRFdmVudHMoZGF0YSkpXHJcbiAgICAgIC8vIGNvbnNvbGUubG9nKHRoaXNQYXRpZW50Ll9pZClcclxuICAgfSwgW10pXHJcblxyXG4gICAvLyBjb25zb2xlLmxvZyh0aGlzUGF0aWVudClcclxuXHJcbiAgIGNvbnN0IGV2ZW50c0VsID0gZXZlbnRzLm1hcChldmVudCA9PiB7XHJcblxyXG4gICAgICByZXR1cm4gKFxyXG4gICAgICAgICA8TmF2TGlua1xyXG4gICAgICAgICAgICB0bz17YGV2ZW50cy8ke2V2ZW50Ll9pZH1gfVxyXG4gICAgICAgICAgICBjbGFzc05hbWU9e1xyXG4gICAgICAgICAgICAgICAoeyBpc0FjdGl2ZSB9KSA9PiBpc0FjdGl2ZSA/XHJcbiAgICAgICAgICAgICAgICAgIFwicHktMyBweC00IGJsb2NrIGJvcmRlci1iIGJnLXdoaXRlXCIgOlxyXG4gICAgICAgICAgICAgICAgICBcInB5LTMgcHgtNCBibG9jayBib3JkZXItYlwiXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAga2V5PXtldmVudC5faWR9PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17YHRleHQtc2t5LTcwMCBmb250LXNlbWlib2xkIHRleHQtc20gdXBwZXJjYXNlIG1iLTFgfT5cclxuICAgICAgICAgICAgICAge2V2ZW50LnNwZWNpYWx0eX1cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCB0ZXh0LXNtIGl0ZW1zLWNlbnRlclwiPlxyXG4gICAgICAgICAgICAgICA8Q2FsZW5kYXJNb250aE91dGxpbmVkSWNvbiB2aWV3Qm94PVwiMCAwIDIyIDIyXCIgY2xhc3NOYW1lPVwidy00IGgtNCB0ZXh0LXNsYXRlLTUwMCBtci0xXCIgLz5cclxuICAgICAgICAgICAgICAgPHNwYW4+e2Zvcm1hdERhdGUoZXZlbnQudXBkYXRlZEF0LCBcInNob3J0XCIpfTwvc3Bhbj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCB0ZXh0LXNtXCI+XHJcbiAgICAgICAgICAgICAgIDxQZXJzb25PdXRsaW5lT3V0bGluZWRJY29uIHZpZXdCb3g9XCIwIDAgMjIgMjJcIiBjbGFzc05hbWU9XCJ3LTQgaC00IHRleHQtc2xhdGUtNTAwIG1yLTFcIiAvPlxyXG4gICAgICAgICAgICAgICA8c3Bhbj57ZXZlbnQuZG9jdG9yfTwvc3Bhbj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCB0ZXh0LXNtXCI+XHJcbiAgICAgICAgICAgICAgIDxBc3NpZ25tZW50TGF0ZU91dGxpbmVkSWNvbiB2aWV3Qm94PVwiMCAwIDIyIDIyXCIgY2xhc3NOYW1lPVwidy00IGgtNCB0ZXh0LXNsYXRlLTUwMCBtci0xXCIgLz5cclxuICAgICAgICAgICAgICAgPHNwYW4+e2V2ZW50LmRpYWdub3Npcy5qb2luKFwiLCBcIil9PC9zcGFuPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgPC9OYXZMaW5rPlxyXG4gICAgICApXHJcbiAgIH0pXHJcblxyXG4gICAvLyBmdW5jdGlvbiBjaG9vc2VDYXRlZ29yeSgpIHtcclxuICAgLy8gICAgY29uc3QgY2F0ZWdvcnkgPSBldmVudENhdGVnb3J5XHJcbiAgIC8vICAgIHN3aXRjaCAoY2F0ZWdvcnkpIHtcclxuICAgLy8gICAgICAgY2FzZSAnb3V0cGF0aWVudCc6XHJcbiAgIC8vICAgICAgICAgIHJldHVybiBcIkFtYnVsYXTDs3Jpb1wiXHJcbiAgIC8vICAgICAgICAgIGJyZWFrXHJcbiAgIC8vICAgICAgIGNhc2UgJ2VtZXJnZW5jeSc6XHJcbiAgIC8vICAgICAgICAgIHJldHVybiBcIkVtZXJnw6puY2lhXCJcclxuICAgLy8gICAgICAgICAgYnJlYWtcclxuICAgLy8gICAgICAgY2FzZSAnc3R1ZHknOlxyXG4gICAvLyAgICAgICAgICByZXR1cm4gXCJFeGFtZVwiXHJcbiAgIC8vICAgICAgICAgIGJyZWFrXHJcbiAgIC8vICAgICAgIGNhc2UgJ2lucGF0aWVudCc6XHJcbiAgIC8vICAgICAgICAgIHJldHVybiBcIkludGVybmHDp8Ojb1wiXHJcbiAgIC8vICAgICAgICAgIGJyZWFrXHJcbiAgIC8vICAgICAgIGRlZmF1bHQ6XHJcbiAgIC8vICAgICAgICAgIHJldHVybiBcIkV2ZW50b1wiXHJcbiAgIC8vICAgIH1cclxuICAgLy8gfVxyXG5cclxuICAgcmV0dXJuIChcclxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4IGgtZnVsbFwiPlxyXG4gICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInctMS81IGJnLXNsYXRlLTEwMFwiPlxyXG4gICAgICAgICAgICB7ZXZlbnRzRWx9XHJcbiAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInctZnVsbFwiPlxyXG4gICAgICAgICAgICA8T3V0bGV0IGNvbnRleHQ9e1tldmVudHNdfSAvPlxyXG4gICAgICAgICA8L2Rpdj5cclxuICAgICAgPC9kaXY+XHJcbiAgIClcclxufSIsImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0IH0gZnJvbSBcInJlYWN0XCJcclxuaW1wb3J0IHsgdXNlUGFyYW1zLCB1c2VPdXRsZXRDb250ZXh0IH0gZnJvbSBcInJlYWN0LXJvdXRlci1kb21cIlxyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gRXZlbnREZXRhaWxzKCkge1xyXG5cclxuICAgY29uc3QgW2V2ZW50c10gPSB1c2VPdXRsZXRDb250ZXh0KClcclxuICAgY29uc3QgeyBldmVudElkIH0gPSB1c2VQYXJhbXMoKVxyXG4gICAvLyBjb25zdCBbdGhpc0V2ZW50LCBzZXRUaGlzRXZlbnRdID0gdXNlU3RhdGUoe30pXHJcblxyXG4gICAvLyB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAvLyAgICBjb25zdCBldmVudCA9IGV2ZW50cy5maW5kKGl0ZW0gPT4gaXRlbS5faWQgPT09IGV2ZW50SWQpXHJcbiAgIC8vICAgIHNldFRoaXNFdmVudChldmVudClcclxuICAgLy8gfSwgW2V2ZW50c10pXHJcblxyXG4gICBjb25zdCB0aGlzRXZlbnQgPSBldmVudHMuZmluZChpdGVtID0+IGl0ZW0uX2lkID09PSBldmVudElkKVxyXG5cclxuICAgcmV0dXJuIChcclxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJwLTRcIj5cclxuICAgICAgICAgPGgyIGNsYXNzTmFtZT1cInRleHQteGwgdXBwZXJjYXNlIG1iLTcgZm9udC1zZXJpZlwiPnt0aGlzRXZlbnQgJiYgdGhpc0V2ZW50LmNhdGVnb3J5Lm5hbWV9IGRlIHt0aGlzRXZlbnQgJiYgdGhpc0V2ZW50LnNwZWNpYWx0eX08L2gyPlxyXG4gICAgICA8L2Rpdj5cclxuICAgKVxyXG59IiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiXHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBQcm9maWxlKCkge1xyXG5cclxuICAgcmV0dXJuIChcclxuICAgICAgPGgxIGNsYXNzTmFtZT1cInRleHQtMnhsIHVwcGVyY2FzZSBtYi03IGZvbnQtc2VyaWZcIj5EYWRvcyBwZXNzb2FpczwvaDE+XHJcbiAgIClcclxufSIsImltcG9ydCBSZWFjdCwgeyB1c2VDb250ZXh0IH0gZnJvbSBcInJlYWN0XCJcclxuaW1wb3J0IHsgdXNlT3V0bGV0Q29udGV4dCB9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCJcclxuaW1wb3J0IHsgQ29udGV4dCB9IGZyb20gXCIuLi8uLi9Db250ZXh0XCJcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEN1cnJlbnREaWFnbm9zaXMoKSB7XHJcblxyXG4gICBjb25zdCB7IHRoaXNQYXRpZW50IH0gPSB1c2VDb250ZXh0KENvbnRleHQpXHJcblxyXG4gICBjb25zdCBkaWFnbm9zaXNFbCA9IHRoaXNQYXRpZW50LmN1cnJlbnREaWFnbm9zaXM/Lm1hcChpdGVtID0+IChcclxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJtYi00XCIga2V5PXtpdGVtLl9pZH0+XHJcbiAgICAgICAgIDxoMyBjbGFzc05hbWU9XCJ0ZXh0LW1kIGZvbnQtYm9sZCB0ZXh0LXNreS03MDAgdXBwZXJjYXNlXCI+e2l0ZW0ubmFtZX08L2gzPlxyXG4gICAgICAgICA8cD57aXRlbS5ib2R5fTwvcD5cclxuICAgICAgPC9kaXY+XHJcbiAgICkpXHJcblxyXG4gICByZXR1cm4gKFxyXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInAtNFwiPlxyXG4gICAgICAgICA8aDIgY2xhc3NOYW1lPVwidGV4dC14bCB1cHBlcmNhc2UgbWItNCBmb250LXNlcmlmXCI+RGlhZ27Ds3N0aWNvcyBhdHVhaXM8L2gyPlxyXG4gICAgICAgICB7ZGlhZ25vc2lzRWx9XHJcbiAgICAgIDwvZGl2PlxyXG4gICApXHJcbn0iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCJcbmltcG9ydCB7IFJvdXRlcywgUm91dGUgfSBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbVwiXG5cbmltcG9ydCBcIi4vaW5kZXguY3NzXCJcblxuaW1wb3J0IEhlYWRlciBmcm9tIFwiLi9jb21wb25lbnRzL0hlYWRlclwiXG5pbXBvcnQgSG9tZSBmcm9tIFwiLi9wYWdlcy9Ib21lXCJcbmltcG9ydCBQYXRpZW50IGZyb20gXCIuL3BhZ2VzL3BhdGllbnRzL1BhdGllbnRcIlxuaW1wb3J0IFRpbWVsaW5lIGZyb20gXCIuL3BhZ2VzL3BhdGllbnRzL1RpbWVsaW5lXCJcbmltcG9ydCBFdmVudHNCeUNhdGVnb3J5IGZyb20gXCIuL3BhZ2VzL3BhdGllbnRzL0V2ZW50c0J5Q2F0ZWdvcnlcIlxuaW1wb3J0IEV2ZW50RGV0YWlscyBmcm9tIFwiLi9wYWdlcy9wYXRpZW50cy9FdmVudERldGFpbHNcIlxuaW1wb3J0IFByb2ZpbGUgZnJvbSBcIi4vcGFnZXMvcGF0aWVudHMvUHJvZmlsZVwiXG5pbXBvcnQgQ3VycmVudERpYWdub3NpcyBmcm9tIFwiLi9wYWdlcy9wYXRpZW50cy9DdXJyZW50RGlhZ25vc2lzXCJcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gQXBwKCkge1xuICAgcmV0dXJuIChcbiAgICAgIDxkaXY+XG4gICAgICAgICA8SGVhZGVyIC8+XG4gICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXhcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidy1zY3JlZW4gYmctd2hpdGUgaC1zY3JlZW5cIj5cbiAgICAgICAgICAgICAgIDxSb3V0ZXM+XG5cbiAgICAgICAgICAgICAgICAgIDxSb3V0ZSBwYXRoPVwiL1wiIGVsZW1lbnQ9ezxIb21lIC8+fSAvPlxuXG4gICAgICAgICAgICAgICAgICA8Um91dGUgcGF0aD1cIi9wYXRpZW50cy86cGF0aWVudElkXCIgZWxlbWVudD17PFBhdGllbnQgLz59PlxuICAgICAgICAgICAgICAgICAgICAgPFJvdXRlIHBhdGg9XCJldmVudHMvdGltZWxpbmVcIiBlbGVtZW50PXs8VGltZWxpbmUgLz59IC8+XG4gICAgICAgICAgICAgICAgICAgICA8Um91dGUgcGF0aD1cImRpYWdub3Npc1wiIGVsZW1lbnQ9ezxDdXJyZW50RGlhZ25vc2lzIC8+fSAvPlxuICAgICAgICAgICAgICAgICAgICAgPFJvdXRlIHBhdGg9XCJwcm9maWxlXCIgZWxlbWVudD17PFByb2ZpbGUgLz59IC8+XG4gICAgICAgICAgICAgICAgICAgICA8Um91dGUgcGF0aD1cImNhdGVnb3JpZXMvOmNhdGVnb3J5SWRcIiBlbGVtZW50PXs8RXZlbnRzQnlDYXRlZ29yeSAvPn0+XG4gICAgICAgICAgICAgICAgICAgICAgICA8Um91dGUgcGF0aD1cImV2ZW50cy86ZXZlbnRJZFwiIGVsZW1lbnQ9ezxFdmVudERldGFpbHMgLz59IC8+XG4gICAgICAgICAgICAgICAgICAgICA8L1JvdXRlPlxuICAgICAgICAgICAgICAgICAgPC9Sb3V0ZT5cbiAgICAgICAgICAgICAgIDwvUm91dGVzPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2ID5cbiAgIClcbn0iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCJcbmltcG9ydCBSZWFjdERPTSBmcm9tIFwicmVhY3QtZG9tL2NsaWVudFwiXG5pbXBvcnQgeyBCcm93c2VyUm91dGVyIH0gZnJvbSBcInJlYWN0LXJvdXRlci1kb21cIlxuXG5pbXBvcnQgeyBDb250ZXh0UHJvdmlkZXIgfSBmcm9tIFwiLi9Db250ZXh0XCJcbmltcG9ydCBBcHAgZnJvbSBcIi4vQXBwXCJcblxuUmVhY3RET00uY3JlYXRlUm9vdChkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInJvb3RcIikpLnJlbmRlcihcbiAgIDxDb250ZXh0UHJvdmlkZXI+XG4gICAgICA8QnJvd3NlclJvdXRlcj5cbiAgICAgICAgIDxBcHAgLz5cbiAgICAgIDwvQnJvd3NlclJvdXRlcj5cbiAgIDwvQ29udGV4dFByb3ZpZGVyPlxuKSJdLCJuYW1lcyI6WyJsZWFmUHJvdG90eXBlcyIsImdldFByb3RvIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsImV4cG9ydHMiLCJfY3JlYXRlU3ZnSWNvbiIsIl9qc3hSdW50aW1lIiwiX2RlZmF1bHQiLCJkZWZhdWx0IiwianN4IiwiZCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwidmFsdWUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiX3V0aWxzIiwiY3JlYXRlU3ZnSWNvbiIsImRlZmF1bHRHZW5lcmF0b3IiLCJjb21wb25lbnROYW1lIiwiZ2VuZXJhdGUiLCJjb25maWd1cmUiLCJnZW5lcmF0b3IiLCJyZXNldCIsImNyZWF0ZUNsYXNzTmFtZUdlbmVyYXRvciIsImZvcm1hdE11aUVycm9yTWVzc2FnZSIsImNvZGUiLCJ1cmwiLCJpIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiY2FwaXRhbGl6ZSIsInN0cmluZyIsIkVycm9yIiwiY2hhckF0IiwidG9VcHBlckNhc2UiLCJzbGljZSIsImZ1bmNzIiwicmVkdWNlIiwiYWNjIiwiZnVuYyIsImFyZ3MiLCJhcHBseSIsInRoaXMiLCJhc3NpZ24iLCJiaW5kIiwidGFyZ2V0Iiwic291cmNlIiwia2V5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UiLCJleGNsdWRlZCIsInNvdXJjZUtleXMiLCJrZXlzIiwiaW5kZXhPZiIsInIiLCJlIiwidCIsImYiLCJuIiwiQXJyYXkiLCJpc0FycmF5IiwiaXNQbGFpbk9iamVjdCIsIml0ZW0iLCJjb25zdHJ1Y3RvciIsIm9wdGlvbnMiLCJjbG9uZSIsIm91dHB1dCIsImZvckVhY2giLCJfZXhjbHVkZWQiLCJib3JkZXJSYWRpdXMiLCJ2YWx1ZXMiLCJ4cyIsInNtIiwibWQiLCJsZyIsInhsIiwiZGVmYXVsdEJyZWFrcG9pbnRzIiwidXAiLCJoYW5kbGVCcmVha3BvaW50cyIsInByb3BzIiwicHJvcFZhbHVlIiwic3R5bGVGcm9tUHJvcFZhbHVlIiwidGhlbWUiLCJ0aGVtZUJyZWFrcG9pbnRzIiwiYnJlYWtwb2ludHMiLCJpbmRleCIsImJyZWFrcG9pbnQiLCJjc3NLZXkiLCJnZXRQYXRoIiwib2JqIiwicGF0aCIsImNoZWNrVmFycyIsInZhcnMiLCJ2YWwiLCJzcGxpdCIsImdldFZhbHVlIiwidGhlbWVNYXBwaW5nIiwidHJhbnNmb3JtIiwicHJvcFZhbHVlRmluYWwiLCJ1c2VyVmFsdWUiLCJwcm9wIiwiY3NzUHJvcGVydHkiLCJ0aGVtZUtleSIsImZuIiwicHJvcFR5cGVzIiwiZmlsdGVyUHJvcHMiLCJwcm9wZXJ0aWVzIiwibSIsInAiLCJkaXJlY3Rpb25zIiwiYiIsImwiLCJ4IiwieSIsImFsaWFzZXMiLCJtYXJnaW5YIiwibWFyZ2luWSIsInBhZGRpbmdYIiwicGFkZGluZ1kiLCJnZXRDc3NQcm9wZXJ0aWVzIiwiY2FjaGUiLCJhcmciLCJ1bmRlZmluZWQiLCJhIiwicHJvcGVydHkiLCJkaXJlY3Rpb24iLCJtYXAiLCJkaXIiLCJtZW1vaXplIiwibWFyZ2luS2V5cyIsInBhZGRpbmdLZXlzIiwic3BhY2luZ0tleXMiLCJjcmVhdGVVbmFyeVVuaXQiLCJkZWZhdWx0VmFsdWUiLCJwcm9wTmFtZSIsIl9nZXRQYXRoIiwidGhlbWVTcGFjaW5nIiwiYWJzIiwiY3JlYXRlVW5hcnlTcGFjaW5nIiwidHJhbnNmb3JtZXIiLCJ0cmFuc2Zvcm1lZCIsIk1hdGgiLCJjc3NQcm9wZXJ0aWVzIiwiZ2V0U3R5bGVGcm9tUHJvcFZhbHVlIiwicmVzb2x2ZUNzc1Byb3BlcnR5IiwibWFyZ2luIiwicGFkZGluZyIsInNwYWNpbmciLCJicmVha3BvaW50c0lucHV0IiwicGFsZXR0ZSIsInBhbGV0dGVJbnB1dCIsInNwYWNpbmdJbnB1dCIsInNoYXBlIiwic2hhcGVJbnB1dCIsIm90aGVyIiwidW5pdCIsInN0ZXAiLCJzb3J0ZWRWYWx1ZXMiLCJicmVha3BvaW50c0FzQXJyYXkiLCJzb3J0IiwiYnJlYWtwb2ludDEiLCJicmVha3BvaW50MiIsInNvcnRCcmVha3BvaW50c1ZhbHVlcyIsImRvd24iLCJiZXR3ZWVuIiwic3RhcnQiLCJlbmQiLCJlbmRJbmRleCIsIm9ubHkiLCJub3QiLCJrZXlJbmRleCIsInJlcGxhY2UiLCJjcmVhdGVCcmVha3BvaW50cyIsIm11aSIsImFyZ3NJbnB1dCIsImFyZ3VtZW50Iiwiam9pbiIsImNyZWF0ZVNwYWNpbmciLCJtdWlUaGVtZSIsImNvbXBvbmVudHMiLCJtb2RlIiwic3lzdGVtRGVmYXVsdFRoZW1lIiwiZGVmYXVsdFRoZW1lIiwiY29udGV4dFRoZW1lIiwidXNlVGhlbWVXaXRob3V0RGVmYXVsdCIsImNsYW1wIiwibWluIiwibWF4IiwiZGVjb21wb3NlQ29sb3IiLCJjb2xvciIsInR5cGUiLCJyZSIsIlJlZ0V4cCIsImNvbG9ycyIsIm1hdGNoIiwicGFyc2VJbnQiLCJyb3VuZCIsImhleFRvUmdiIiwibWFya2VyIiwic3Vic3RyaW5nIiwiY29sb3JTcGFjZSIsInNoaWZ0IiwicGFyc2VGbG9hdCIsInJlY29tcG9zZUNvbG9yIiwiZ2V0THVtaW5hbmNlIiwicmdiIiwiaCIsInMiLCJrIiwicHVzaCIsImhzbFRvUmdiIiwiTnVtYmVyIiwidG9GaXhlZCIsImJsYWNrIiwid2hpdGUiLCJBMTAwIiwiQTIwMCIsIkE0MDAiLCJBNzAwIiwibGlnaHQiLCJ0ZXh0IiwicHJpbWFyeSIsInNlY29uZGFyeSIsImRpc2FibGVkIiwiZGl2aWRlciIsImJhY2tncm91bmQiLCJwYXBlciIsImFjdGlvbiIsImFjdGl2ZSIsImhvdmVyIiwiaG92ZXJPcGFjaXR5Iiwic2VsZWN0ZWQiLCJzZWxlY3RlZE9wYWNpdHkiLCJkaXNhYmxlZEJhY2tncm91bmQiLCJkaXNhYmxlZE9wYWNpdHkiLCJmb2N1cyIsImZvY3VzT3BhY2l0eSIsImFjdGl2YXRlZE9wYWNpdHkiLCJkYXJrIiwiaWNvbiIsImFkZExpZ2h0T3JEYXJrIiwiaW50ZW50Iiwic2hhZGUiLCJ0b25hbE9mZnNldCIsInRvbmFsT2Zmc2V0TGlnaHQiLCJ0b25hbE9mZnNldERhcmsiLCJjb2VmZmljaWVudCIsImxpZ2h0ZW4iLCJtYWluIiwiZGFya2VuIiwiY2FzZUFsbENhcHMiLCJ0ZXh0VHJhbnNmb3JtIiwiZGVmYXVsdEZvbnRGYW1pbHkiLCJjcmVhdGVUeXBvZ3JhcGh5IiwidHlwb2dyYXBoeSIsIl9yZWYiLCJmb250RmFtaWx5IiwiZm9udFNpemUiLCJmb250V2VpZ2h0TGlnaHQiLCJmb250V2VpZ2h0UmVndWxhciIsImZvbnRXZWlnaHRNZWRpdW0iLCJmb250V2VpZ2h0Qm9sZCIsImh0bWxGb250U2l6ZSIsImFsbFZhcmlhbnRzIiwicHhUb1JlbSIsInB4VG9SZW0yIiwiY29lZiIsInNpemUiLCJidWlsZFZhcmlhbnQiLCJmb250V2VpZ2h0IiwibGluZUhlaWdodCIsImxldHRlclNwYWNpbmciLCJjYXNpbmciLCJ2YXJpYW50cyIsImgxIiwiaDIiLCJoMyIsImg0IiwiaDUiLCJoNiIsInN1YnRpdGxlMSIsInN1YnRpdGxlMiIsImJvZHkxIiwiYm9keTIiLCJidXR0b24iLCJjYXB0aW9uIiwib3ZlcmxpbmUiLCJjcmVhdGVTaGFkb3ciLCJweCIsImVhc2luZyIsImVhc2VJbk91dCIsImVhc2VPdXQiLCJlYXNlSW4iLCJzaGFycCIsImR1cmF0aW9uIiwic2hvcnRlc3QiLCJzaG9ydGVyIiwic2hvcnQiLCJzdGFuZGFyZCIsImNvbXBsZXgiLCJlbnRlcmluZ1NjcmVlbiIsImxlYXZpbmdTY3JlZW4iLCJmb3JtYXRNcyIsIm1pbGxpc2Vjb25kcyIsImdldEF1dG9IZWlnaHREdXJhdGlvbiIsImhlaWdodCIsImNvbnN0YW50IiwiY3JlYXRlVHJhbnNpdGlvbnMiLCJpbnB1dFRyYW5zaXRpb25zIiwibWVyZ2VkRWFzaW5nIiwibWVyZ2VkRHVyYXRpb24iLCJjcmVhdGUiLCJkdXJhdGlvbk9wdGlvbiIsImVhc2luZ09wdGlvbiIsImRlbGF5IiwiYW5pbWF0ZWRQcm9wIiwibW9iaWxlU3RlcHBlciIsImZhYiIsInNwZWVkRGlhbCIsImFwcEJhciIsImRyYXdlciIsIm1vZGFsIiwic25hY2tiYXIiLCJ0b29sdGlwIiwibWl4aW5zIiwibWl4aW5zSW5wdXQiLCJ0cmFuc2l0aW9ucyIsInRyYW5zaXRpb25zSW5wdXQiLCJ0eXBvZ3JhcGh5SW5wdXQiLCJjb250cmFzdFRocmVzaG9sZCIsImdldERlZmF1bHRQcmltYXJ5IiwiZ2V0RGVmYXVsdFNlY29uZGFyeSIsImVycm9yIiwiZ2V0RGVmYXVsdEVycm9yIiwiaW5mbyIsImdldERlZmF1bHRJbmZvIiwic3VjY2VzcyIsImdldERlZmF1bHRTdWNjZXNzIiwid2FybmluZyIsImdldERlZmF1bHRXYXJuaW5nIiwiZ2V0Q29udHJhc3RUZXh0IiwiY29udHJhc3RUZXh0IiwiZm9yZWdyb3VuZCIsImx1bUEiLCJsdW1CIiwiZ2V0Q29udHJhc3RSYXRpbyIsImF1Z21lbnRDb2xvciIsIm5hbWUiLCJtYWluU2hhZGUiLCJsaWdodFNoYWRlIiwiZGFya1NoYWRlIiwiSlNPTiIsInN0cmluZ2lmeSIsIm1vZGVzIiwiY29tbW9uIiwiZ3JleSIsImNyZWF0ZVBhbGV0dGUiLCJzeXN0ZW1UaGVtZSIsInRvb2xiYXIiLCJtaW5IZWlnaHQiLCJzaGFkb3dzIiwiekluZGV4IiwicGFyYW1zIiwiZGVmYXVsdFByb3BzIiwicmVzb2x2ZVByb3BzIiwiZ2V0VGhlbWVQcm9wcyIsInJlYWN0UHJvcHNSZWdleCIsInRlc3QiLCJjaGFyQ29kZUF0IiwiU3R5bGVTaGVldCIsIl90aGlzIiwiX2luc2VydFRhZyIsInRhZyIsImJlZm9yZSIsInRhZ3MiLCJpbnNlcnRpb25Qb2ludCIsIm5leHRTaWJsaW5nIiwicHJlcGVuZCIsImNvbnRhaW5lciIsImZpcnN0Q2hpbGQiLCJpbnNlcnRCZWZvcmUiLCJpc1NwZWVkeSIsInNwZWVkeSIsImN0ciIsIm5vbmNlIiwiX3Byb3RvIiwiaHlkcmF0ZSIsIm5vZGVzIiwiaW5zZXJ0IiwicnVsZSIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsInNldEF0dHJpYnV0ZSIsImFwcGVuZENoaWxkIiwiY3JlYXRlVGV4dE5vZGUiLCJjcmVhdGVTdHlsZUVsZW1lbnQiLCJzaGVldCIsInN0eWxlU2hlZXRzIiwib3duZXJOb2RlIiwic2hlZXRGb3JUYWciLCJpbnNlcnRSdWxlIiwiY3NzUnVsZXMiLCJmbHVzaCIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsInRyaW0iLCJwYXR0ZXJuIiwicmVwbGFjZW1lbnQiLCJpbmRleG9mIiwic2VhcmNoIiwiYmVnaW4iLCJhcnJheSIsImxpbmUiLCJjb2x1bW4iLCJwb3NpdGlvbiIsImNoYXJhY3RlciIsImNoYXJhY3RlcnMiLCJub2RlIiwicm9vdCIsInBhcmVudCIsImNoaWxkcmVuIiwicmV0dXJuIiwicHJldiIsIm5leHQiLCJwZWVrIiwiY2FyZXQiLCJ0b2tlbiIsImFsbG9jIiwiZGVhbGxvYyIsImRlbGltaXQiLCJkZWxpbWl0ZXIiLCJ3aGl0ZXNwYWNlIiwiZXNjYXBpbmciLCJjb3VudCIsImNvbW1lbnRlciIsImlkZW50aWZpZXIiLCJDT01NRU5UIiwiY2FsbGJhY2siLCJlbGVtZW50IiwiY29tcGlsZSIsInBhcnNlIiwicnVsZXMiLCJydWxlc2V0cyIsInBzZXVkbyIsInBvaW50cyIsImRlY2xhcmF0aW9ucyIsIm9mZnNldCIsImF0cnVsZSIsInByZXZpb3VzIiwidmFyaWFibGUiLCJzY2FubmluZyIsImFtcGVyc2FuZCIsInJlZmVyZW5jZSIsImNvbW1lbnQiLCJkZWNsYXJhdGlvbiIsInJ1bGVzZXQiLCJwb3N0IiwiaiIsInoiLCJpZGVudGlmaWVyV2l0aFBvaW50VHJhY2tpbmciLCJmaXhlZEVsZW1lbnRzIiwiV2Vha01hcCIsImNvbXBhdCIsImlzSW1wbGljaXRSdWxlIiwic2V0IiwicGFyc2VkIiwidG9SdWxlcyIsImdldFJ1bGVzIiwicGFyZW50UnVsZXMiLCJyZW1vdmVMYWJlbCIsImhhc2giLCJkZWZhdWx0U3R5bGlzUGx1Z2lucyIsImV4ZWMiLCJzc3JTdHlsZXMiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZ2V0QXR0cmlidXRlIiwiaGVhZCIsIl9pbnNlcnQiLCJzdHlsaXNQbHVnaW5zIiwiaW5zZXJ0ZWQiLCJub2Rlc1RvSHlkcmF0ZSIsImF0dHJpYiIsImN1cnJlbnRTaGVldCIsImNvbGxlY3Rpb24iLCJmaW5hbGl6aW5nUGx1Z2lucyIsInNlcmlhbGl6ZXIiLCJjb25jYXQiLCJzZWxlY3RvciIsInNlcmlhbGl6ZWQiLCJzaG91bGRDYWNoZSIsInN0eWxlcyIsInJlZ2lzdGVyZWQiLCJzdHIiLCJsZW4iLCJ0b1N0cmluZyIsImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50IiwiYm9yZGVySW1hZ2VPdXRzZXQiLCJib3JkZXJJbWFnZVNsaWNlIiwiYm9yZGVySW1hZ2VXaWR0aCIsImJveEZsZXgiLCJib3hGbGV4R3JvdXAiLCJib3hPcmRpbmFsR3JvdXAiLCJjb2x1bW5Db3VudCIsImNvbHVtbnMiLCJmbGV4IiwiZmxleEdyb3ciLCJmbGV4UG9zaXRpdmUiLCJmbGV4U2hyaW5rIiwiZmxleE5lZ2F0aXZlIiwiZmxleE9yZGVyIiwiZ3JpZFJvdyIsImdyaWRSb3dFbmQiLCJncmlkUm93U3BhbiIsImdyaWRSb3dTdGFydCIsImdyaWRDb2x1bW4iLCJncmlkQ29sdW1uRW5kIiwiZ3JpZENvbHVtblNwYW4iLCJncmlkQ29sdW1uU3RhcnQiLCJtc0dyaWRSb3ciLCJtc0dyaWRSb3dTcGFuIiwibXNHcmlkQ29sdW1uIiwibXNHcmlkQ29sdW1uU3BhbiIsIm9wYWNpdHkiLCJvcmRlciIsIm9ycGhhbnMiLCJ0YWJTaXplIiwid2lkb3dzIiwiem9vbSIsIldlYmtpdExpbmVDbGFtcCIsImZpbGxPcGFjaXR5IiwiZmxvb2RPcGFjaXR5Iiwic3RvcE9wYWNpdHkiLCJzdHJva2VEYXNoYXJyYXkiLCJzdHJva2VEYXNob2Zmc2V0Iiwic3Ryb2tlTWl0ZXJsaW1pdCIsInN0cm9rZU9wYWNpdHkiLCJzdHJva2VXaWR0aCIsImh5cGhlbmF0ZVJlZ2V4IiwiYW5pbWF0aW9uUmVnZXgiLCJpc0N1c3RvbVByb3BlcnR5IiwiaXNQcm9jZXNzYWJsZVZhbHVlIiwicHJvY2Vzc1N0eWxlTmFtZSIsInN0eWxlTmFtZSIsInRvTG93ZXJDYXNlIiwicHJvY2Vzc1N0eWxlVmFsdWUiLCJwMSIsInAyIiwiY3Vyc29yIiwiaGFuZGxlSW50ZXJwb2xhdGlvbiIsIm1lcmdlZFByb3BzIiwiaW50ZXJwb2xhdGlvbiIsIl9fZW1vdGlvbl9zdHlsZXMiLCJhbmltIiwiX2tleSIsImludGVycG9sYXRlZCIsIl9pIiwiY3JlYXRlU3RyaW5nRnJvbU9iamVjdCIsInByZXZpb3VzQ3Vyc29yIiwicmVzdWx0IiwiY2FjaGVkIiwibGFiZWxQYXR0ZXJuIiwic3RyaW5nTW9kZSIsInN0cmluZ3MiLCJyYXciLCJsYXN0SW5kZXgiLCJpZGVudGlmaWVyTmFtZSIsInVzZUluc2VydGlvbkVmZmVjdCIsIkVtb3Rpb25DYWNoZUNvbnRleHQiLCJ1c2VMYXlvdXRFZmZlY3QiLCJjcmVhdGVDb250ZXh0IiwiSFRNTEVsZW1lbnQiLCJQcm92aWRlciIsIndpdGhFbW90aW9uQ2FjaGUiLCJmb3J3YXJkUmVmIiwicmVmIiwidXNlQ29udGV4dCIsInJlZ2lzdGVyZWRTdHlsZXMiLCJjbGFzc05hbWVzIiwicmF3Q2xhc3NOYW1lIiwiY2xhc3NOYW1lIiwiaXNTdHJpbmdUYWciLCJ0ZXN0T21pdFByb3BzT25TdHJpbmdUYWciLCJ0ZXN0T21pdFByb3BzT25Db21wb25lbnQiLCJnZXREZWZhdWx0U2hvdWxkRm9yd2FyZFByb3AiLCJjb21wb3NlU2hvdWxkRm9yd2FyZFByb3BzIiwiaXNSZWFsIiwic2hvdWxkRm9yd2FyZFByb3AiLCJvcHRpb25zU2hvdWxkRm9yd2FyZFByb3AiLCJfX2Vtb3Rpb25fZm9yd2FyZFByb3AiLCJjdXJyZW50IiwibmV3U3R5bGVkIiwiY3JlYXRlU3R5bGVkIiwidGFyZ2V0Q2xhc3NOYW1lIiwiX19lbW90aW9uX3JlYWwiLCJiYXNlVGFnIiwiX19lbW90aW9uX2Jhc2UiLCJsYWJlbCIsImRlZmF1bHRTaG91bGRGb3J3YXJkUHJvcCIsInNob3VsZFVzZUFzIiwiU3R5bGVkIiwiRmluYWxUYWciLCJhcyIsImNsYXNzSW50ZXJwb2xhdGlvbnMiLCJmaW5hbFNob3VsZEZvcndhcmRQcm9wIiwibmV3UHJvcHMiLCJGcmFnbWVudCIsImRpc3BsYXlOYW1lIiwid2l0aENvbXBvbmVudCIsIm5leHRUYWciLCJuZXh0T3B0aW9ucyIsInRhZ05hbWUiLCJpc0VtcHR5IiwicHJvcHNUb0NsYXNzS2V5IiwidmFyaWFudCIsImNsYXNzS2V5IiwiaGFuZGxlcnMiLCJzdHlsZSIsImdldEJvcmRlciIsImJvcmRlciIsImJvcmRlclRvcCIsImJvcmRlclJpZ2h0IiwiYm9yZGVyQm90dG9tIiwiYm9yZGVyTGVmdCIsImJvcmRlckNvbG9yIiwiYm9yZGVyVG9wQ29sb3IiLCJib3JkZXJSaWdodENvbG9yIiwiYm9yZGVyQm90dG9tQ29sb3IiLCJib3JkZXJMZWZ0Q29sb3IiLCJkaXNwbGF5IiwiZ2FwIiwiY29sdW1uR2FwIiwicm93R2FwIiwid2lkdGgiLCJtYXhXaWR0aCIsIl9wcm9wcyR0aGVtZSIsIl9wcm9wcyR0aGVtZSRicmVha3BvaSIsIl9wcm9wcyR0aGVtZSRicmVha3BvaTIiLCJtaW5XaWR0aCIsIm1heEhlaWdodCIsImZvbnRTdHlsZSIsInRleHRBbGlnbiIsImZpbHRlclByb3BzTWFwcGluZyIsImJvcmRlcnMiLCJmbGV4Ym94IiwiZ3JpZCIsInBvc2l0aW9ucyIsInNpemluZyIsInN0eWxlRm5OYW1lIiwic3R5bGVGdW5jdGlvblN4Iiwic3R5bGVGdW5jdGlvbk1hcHBpbmciLCJwcm9wVG9TdHlsZUZ1bmN0aW9uIiwiZ2V0VGhlbWVWYWx1ZSIsImlucHV0UHJvcHMiLCJzdHlsZUZ1bmN0aW9uIiwic3giLCJ0cmF2ZXJzZSIsInN4SW5wdXQiLCJzeE9iamVjdCIsImVtcHR5QnJlYWtwb2ludHMiLCJfYnJlYWtwb2ludHNJbnB1dCRrZXkiLCJjcmVhdGVFbXB0eUJyZWFrcG9pbnRPYmplY3QiLCJicmVha3BvaW50c0tleXMiLCJjc3MiLCJzdHlsZUtleSIsIm1heWJlRm4iLCJicmVha3BvaW50c1ZhbHVlcyIsIm9iamVjdHMiLCJhbGxLZXlzIiwib2JqZWN0IiwidW5pb24iLCJTZXQiLCJldmVyeSIsIm9iamVjdHNIYXZlU2FtZUtleXMiLCJicmVha3BvaW50T3V0cHV0IiwidW5zdGFibGVfY3JlYXRlU3R5bGVGdW5jdGlvblN4IiwiX2V4Y2x1ZGVkMiIsIl9leGNsdWRlZDMiLCJpbnB1dCIsInJvb3RTaG91bGRGb3J3YXJkUHJvcCIsInNsb3RTaG91bGRGb3J3YXJkUHJvcCIsInN5c3RlbVN4IiwiX19tdWlfc3lzdGVtU3giLCJpbnB1dE9wdGlvbnMiLCJwcm9jZXNzb3IiLCJmaWx0ZXIiLCJzbG90IiwiY29tcG9uZW50U2xvdCIsInNraXBWYXJpYW50c1Jlc29sdmVyIiwiaW5wdXRTa2lwVmFyaWFudHNSZXNvbHZlciIsInNraXBTeCIsImlucHV0U2tpcFN4Iiwib3ZlcnJpZGVzUmVzb2x2ZXIiLCJzaG91bGRGb3J3YXJkUHJvcE9wdGlvbiIsImRlZmF1bHRTdHlsZWRSZXNvbHZlciIsInN0eWxlZCIsIm11aVN0eWxlZFJlc29sdmVyIiwic3R5bGVBcmciLCJleHByZXNzaW9ucyIsImV4cHJlc3Npb25zV2l0aERlZmF1bHRUaGVtZSIsInN0eWxlc0FyZyIsInRoZW1lSW5wdXQiLCJ0cmFuc2Zvcm1lZFN0eWxlQXJnIiwic3R5bGVPdmVycmlkZXMiLCJnZXRTdHlsZU92ZXJyaWRlcyIsInJlc29sdmVkU3R5bGVPdmVycmlkZXMiLCJlbnRyaWVzIiwic2xvdEtleSIsInNsb3RTdHlsZSIsIl90aGVtZSRjb21wb25lbnRzIiwiX3RoZW1lJGNvbXBvbmVudHMkbmFtIiwib3duZXJTdGF0ZSIsInZhcmlhbnRzU3R5bGVzIiwidGhlbWVWYXJpYW50cyIsInRoZW1lVmFyaWFudCIsImlzTWF0Y2giLCJ2YXJpYW50c1Jlc29sdmVyIiwiZGVmaW5pdGlvbiIsImdldFZhcmlhbnRTdHlsZXMiLCJudW1PZkN1c3RvbUZuc0FwcGxpZWQiLCJwbGFjZWhvbGRlcnMiLCJmaWxsIiwiX3JlZjIiLCJ3aXRoQ29uZmlnIiwiZ2xvYmFsU3RhdGVDbGFzc2VzTWFwcGluZyIsImNoZWNrZWQiLCJjb21wbGV0ZWQiLCJleHBhbmRlZCIsImZvY3VzZWQiLCJmb2N1c1Zpc2libGUiLCJyZXF1aXJlZCIsImdlbmVyYXRlVXRpbGl0eUNsYXNzIiwiZ2xvYmFsU3RhdGVQcmVmaXgiLCJnbG9iYWxTdGF0ZUNsYXNzIiwiZ2V0U3ZnSWNvblV0aWxpdHlDbGFzcyIsInNsb3RzIiwiZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyIsIlN2Z0ljb25Sb290IiwiX3RoZW1lJHRyYW5zaXRpb25zIiwiX3RoZW1lJHRyYW5zaXRpb25zJGNyIiwiX3RoZW1lJHRyYW5zaXRpb25zMiIsIl90aGVtZSR0cmFuc2l0aW9uczIkZCIsIl90aGVtZSR0eXBvZ3JhcGh5IiwiX3RoZW1lJHR5cG9ncmFwaHkkcHhUIiwiX3RoZW1lJHR5cG9ncmFwaHkyIiwiX3RoZW1lJHR5cG9ncmFwaHkyJHB4IiwiX3RoZW1lJHR5cG9ncmFwaHkzIiwiX3RoZW1lJHR5cG9ncmFwaHkzJHB4IiwiX3BhbGV0dGUkb3duZXJTdGF0ZSRjIiwiX3BhbGV0dGUiLCJfcGFsZXR0ZSRvd25lclN0YXRlJGMyIiwiX3BhbGV0dGUyIiwiX3BhbGV0dGUyJGFjdGlvbiIsIl9wYWxldHRlMyIsIl9wYWxldHRlMyRhY3Rpb24iLCJ1c2VyU2VsZWN0IiwidHJhbnNpdGlvbiIsImluaGVyaXQiLCJzbWFsbCIsIm1lZGl1bSIsImxhcmdlIiwiU3ZnSWNvbiIsImluUHJvcHMiLCJjb21wb25lbnQiLCJodG1sQ29sb3IiLCJpbmhlcml0Vmlld0JveCIsInRpdGxlQWNjZXNzIiwidmlld0JveCIsImluc3RhbmNlRm9udFNpemUiLCJtb3JlIiwiY2xhc3NlcyIsImdldFV0aWxpdHlDbGFzcyIsImNvbXBvc2VDbGFzc2VzIiwidXNlVXRpbGl0eUNsYXNzZXMiLCJmb2N1c2FibGUiLCJyb2xlIiwibXVpTmFtZSIsIkNvbXBvbmVudCIsIndhaXQiLCJ0aW1lb3V0IiwiZGVib3VuY2VkIiwiY2xlYXJUaW1lb3V0Iiwic2V0VGltZW91dCIsImNsZWFyIiwidmFsaWRhdG9yIiwicmVhc29uIiwibXVpTmFtZXMiLCJvd25lckRvY3VtZW50IiwiZGVmYXVsdFZpZXciLCJ3aW5kb3ciLCJjb21wb25lbnROYW1lSW5FcnJvciIsInNldFJlZiIsImdsb2JhbElkIiwibWF5YmVSZWFjdFVzZUlkIiwiaWRPdmVycmlkZSIsInJlYWN0SWQiLCJkZWZhdWx0SWQiLCJzZXREZWZhdWx0SWQiLCJpZCIsInVzZUdsb2JhbElkIiwibG9jYXRpb24iLCJwcm9wRnVsbE5hbWUiLCJjb250cm9sbGVkIiwiZGVmYXVsdFByb3AiLCJzdGF0ZSIsImlzQ29udHJvbGxlZCIsInZhbHVlU3RhdGUiLCJzZXRWYWx1ZSIsIm5ld1ZhbHVlIiwicmVmcyIsImluc3RhbmNlIiwiaGFkRm9jdXNWaXNpYmxlUmVjZW50bHlUaW1lb3V0IiwiaGFkS2V5Ym9hcmRFdmVudCIsImhhZEZvY3VzVmlzaWJsZVJlY2VudGx5IiwiaW5wdXRUeXBlc1doaXRlbGlzdCIsInRlbCIsImVtYWlsIiwicGFzc3dvcmQiLCJudW1iZXIiLCJkYXRlIiwibW9udGgiLCJ3ZWVrIiwidGltZSIsImRhdGV0aW1lIiwiaGFuZGxlS2V5RG93biIsImV2ZW50IiwibWV0YUtleSIsImFsdEtleSIsImN0cmxLZXkiLCJoYW5kbGVQb2ludGVyRG93biIsImhhbmRsZVZpc2liaWxpdHlDaGFuZ2UiLCJ2aXNpYmlsaXR5U3RhdGUiLCJkb2MiLCJhZGRFdmVudExpc3RlbmVyIiwiaXNGb2N1c1Zpc2libGVSZWYiLCJvbkZvY3VzIiwibWF0Y2hlcyIsInJlYWRPbmx5IiwiaXNDb250ZW50RWRpdGFibGUiLCJmb2N1c1RyaWdnZXJzS2V5Ym9hcmRNb2RhbGl0eSIsImlzRm9jdXNWaXNpYmxlIiwib25CbHVyIiwidW5zdGFibGVfQ2xhc3NOYW1lR2VuZXJhdG9yIiwiY29uc29sZSIsIndhcm4iLCJfX19DU1NfTE9BREVSX0VYUE9SVF9fXyIsIm1vZHVsZSIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJsaXN0IiwiY29udGVudCIsIm5lZWRMYXllciIsIm1vZHVsZXMiLCJtZWRpYSIsImRlZHVwZSIsInN1cHBvcnRzIiwibGF5ZXIiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwiX2siLCJjc3NNYXBwaW5nIiwiYnRvYSIsImJhc2U2NCIsInVuZXNjYXBlIiwiZGF0YSIsInNvdXJjZU1hcHBpbmciLCJzb3VyY2VVUkxzIiwic291cmNlcyIsInNvdXJjZVJvb3QiLCJhYSIsImNhIiwiYyIsImRhIiwiZWEiLCJmYSIsImhhIiwiYWRkIiwiaWEiLCJqYSIsImthIiwibGEiLCJtYSIsInYiLCJnIiwiYWNjZXB0c0Jvb2xlYW5zIiwiYXR0cmlidXRlTmFtZSIsImF0dHJpYnV0ZU5hbWVzcGFjZSIsIm11c3RVc2VQcm9wZXJ0eSIsInByb3BlcnR5TmFtZSIsInNhbml0aXplVVJMIiwicmVtb3ZlRW1wdHlTdHJpbmciLCJyYSIsInNhIiwidGEiLCJwYSIsImlzTmFOIiwicWEiLCJvYSIsInJlbW92ZUF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZU5TIiwieGxpbmtIcmVmIiwidWEiLCJfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRCIsInZhIiwiU3ltYm9sIiwiZm9yIiwid2EiLCJ5YSIsInphIiwiQWEiLCJCYSIsIkNhIiwiRGEiLCJFYSIsIkZhIiwiR2EiLCJIYSIsIklhIiwiSmEiLCJpdGVyYXRvciIsIkthIiwiTGEiLCJBIiwiTWEiLCJzdGFjayIsIk5hIiwiT2EiLCJwcmVwYXJlU3RhY2tUcmFjZSIsIlJlZmxlY3QiLCJjb25zdHJ1Y3QiLCJpbmNsdWRlcyIsIlBhIiwicmVuZGVyIiwiUWEiLCIkJHR5cGVvZiIsIl9jb250ZXh0IiwiX3BheWxvYWQiLCJfaW5pdCIsIlJhIiwiU2EiLCJUYSIsIm5vZGVOYW1lIiwiVmEiLCJfdmFsdWVUcmFja2VyIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiY29uZmlndXJhYmxlIiwic3RvcFRyYWNraW5nIiwiVWEiLCJXYSIsIlhhIiwiYWN0aXZlRWxlbWVudCIsImJvZHkiLCJZYSIsImRlZmF1bHRDaGVja2VkIiwiX3dyYXBwZXJTdGF0ZSIsImluaXRpYWxDaGVja2VkIiwiWmEiLCJpbml0aWFsVmFsdWUiLCJhYiIsImJiIiwiY2IiLCJkYiIsImViIiwiZmIiLCJkZWZhdWx0U2VsZWN0ZWQiLCJnYiIsImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIiwiaGIiLCJpYiIsImpiIiwidGV4dENvbnRlbnQiLCJrYiIsImxiIiwibWIiLCJuYiIsIm5hbWVzcGFjZVVSSSIsImlubmVySFRNTCIsInZhbHVlT2YiLCJNU0FwcCIsImV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uIiwib2IiLCJsYXN0Q2hpbGQiLCJub2RlVHlwZSIsIm5vZGVWYWx1ZSIsInBiIiwiYXNwZWN0UmF0aW8iLCJncmlkQXJlYSIsImxpbmVDbGFtcCIsInFiIiwicmIiLCJzYiIsInNldFByb3BlcnR5IiwidGIiLCJtZW51aXRlbSIsImFyZWEiLCJiYXNlIiwiYnIiLCJjb2wiLCJlbWJlZCIsImhyIiwiaW1nIiwia2V5Z2VuIiwibGluayIsIm1ldGEiLCJwYXJhbSIsInRyYWNrIiwid2JyIiwidWIiLCJ2YiIsImlzIiwid2IiLCJ4YiIsInNyY0VsZW1lbnQiLCJjb3JyZXNwb25kaW5nVXNlRWxlbWVudCIsInliIiwiemIiLCJBYiIsIkJiIiwiQ2IiLCJzdGF0ZU5vZGUiLCJEYiIsIkViIiwiRmIiLCJHYiIsIkhiIiwiSWIiLCJKYiIsIktiIiwiTGIiLCJNYiIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJOYiIsIm9uRXJyb3IiLCJPYiIsIlBiIiwiUWIiLCJSYiIsIlNiIiwiVGIiLCJWYiIsImFsdGVybmF0ZSIsImZsYWdzIiwiV2IiLCJtZW1vaXplZFN0YXRlIiwiZGVoeWRyYXRlZCIsIlhiIiwiWmIiLCJjaGlsZCIsInNpYmxpbmciLCJZYiIsIiRiIiwiYWMiLCJ1bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrIiwiYmMiLCJ1bnN0YWJsZV9jYW5jZWxDYWxsYmFjayIsImNjIiwidW5zdGFibGVfc2hvdWxkWWllbGQiLCJkYyIsInVuc3RhYmxlX3JlcXVlc3RQYWludCIsIkIiLCJ1bnN0YWJsZV9ub3ciLCJlYyIsInVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsIiwiZmMiLCJ1bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eSIsImdjIiwidW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHkiLCJoYyIsInVuc3RhYmxlX05vcm1hbFByaW9yaXR5IiwiaWMiLCJ1bnN0YWJsZV9Mb3dQcmlvcml0eSIsImpjIiwidW5zdGFibGVfSWRsZVByaW9yaXR5Iiwia2MiLCJsYyIsIm9jIiwiY2x6MzIiLCJwYyIsInFjIiwibG9nIiwiTE4yIiwicmMiLCJzYyIsInRjIiwidWMiLCJwZW5kaW5nTGFuZXMiLCJzdXNwZW5kZWRMYW5lcyIsInBpbmdlZExhbmVzIiwiZW50YW5nbGVkTGFuZXMiLCJlbnRhbmdsZW1lbnRzIiwidmMiLCJ4YyIsInljIiwiemMiLCJBYyIsImV2ZW50VGltZXMiLCJDYyIsIkMiLCJEYyIsIkVjIiwiRmMiLCJHYyIsIkhjIiwiSWMiLCJKYyIsIktjIiwiTGMiLCJNYyIsIk5jIiwiT2MiLCJNYXAiLCJQYyIsIlFjIiwiUmMiLCJTYyIsImRlbGV0ZSIsInBvaW50ZXJJZCIsIlRjIiwibmF0aXZlRXZlbnQiLCJibG9ja2VkT24iLCJkb21FdmVudE5hbWUiLCJldmVudFN5c3RlbUZsYWdzIiwidGFyZ2V0Q29udGFpbmVycyIsIlZjIiwiV2MiLCJwcmlvcml0eSIsImlzRGVoeWRyYXRlZCIsImNvbnRhaW5lckluZm8iLCJYYyIsIlljIiwiZGlzcGF0Y2hFdmVudCIsIlpjIiwiJGMiLCJhZCIsImJkIiwiY2QiLCJSZWFjdEN1cnJlbnRCYXRjaENvbmZpZyIsImRkIiwiZWQiLCJmZCIsImdkIiwiaGQiLCJVYyIsInN0b3BQcm9wYWdhdGlvbiIsImpkIiwia2QiLCJsZCIsIm5kIiwib2QiLCJrZXlDb2RlIiwiY2hhckNvZGUiLCJwZCIsInFkIiwicmQiLCJfcmVhY3ROYW1lIiwiX3RhcmdldEluc3QiLCJjdXJyZW50VGFyZ2V0IiwiaXNEZWZhdWx0UHJldmVudGVkIiwiZGVmYXVsdFByZXZlbnRlZCIsInJldHVyblZhbHVlIiwiaXNQcm9wYWdhdGlvblN0b3BwZWQiLCJwcmV2ZW50RGVmYXVsdCIsImNhbmNlbEJ1YmJsZSIsInBlcnNpc3QiLCJpc1BlcnNpc3RlbnQiLCJ3ZCIsInhkIiwieWQiLCJzZCIsImV2ZW50UGhhc2UiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsInRpbWVTdGFtcCIsIkRhdGUiLCJub3ciLCJpc1RydXN0ZWQiLCJ0ZCIsInVkIiwidmlldyIsImRldGFpbCIsInZkIiwiQWQiLCJzY3JlZW5YIiwic2NyZWVuWSIsImNsaWVudFgiLCJjbGllbnRZIiwicGFnZVgiLCJwYWdlWSIsInNoaWZ0S2V5IiwiZ2V0TW9kaWZpZXJTdGF0ZSIsInpkIiwiYnV0dG9ucyIsInJlbGF0ZWRUYXJnZXQiLCJmcm9tRWxlbWVudCIsInRvRWxlbWVudCIsIm1vdmVtZW50WCIsIm1vdmVtZW50WSIsIkJkIiwiRGQiLCJkYXRhVHJhbnNmZXIiLCJGZCIsIkhkIiwiYW5pbWF0aW9uTmFtZSIsImVsYXBzZWRUaW1lIiwicHNldWRvRWxlbWVudCIsIklkIiwiY2xpcGJvYXJkRGF0YSIsIkpkIiwiTGQiLCJNZCIsIkVzYyIsIlNwYWNlYmFyIiwiTGVmdCIsIlVwIiwiUmlnaHQiLCJEb3duIiwiRGVsIiwiV2luIiwiTWVudSIsIkFwcHMiLCJTY3JvbGwiLCJNb3pQcmludGFibGVLZXkiLCJOZCIsIk9kIiwiQWx0IiwiQ29udHJvbCIsIk1ldGEiLCJTaGlmdCIsIlBkIiwiUWQiLCJyZXBlYXQiLCJsb2NhbGUiLCJ3aGljaCIsIlJkIiwiVGQiLCJwcmVzc3VyZSIsInRhbmdlbnRpYWxQcmVzc3VyZSIsInRpbHRYIiwidGlsdFkiLCJ0d2lzdCIsInBvaW50ZXJUeXBlIiwiaXNQcmltYXJ5IiwiVmQiLCJ0b3VjaGVzIiwidGFyZ2V0VG91Y2hlcyIsImNoYW5nZWRUb3VjaGVzIiwiWGQiLCJZZCIsImRlbHRhWCIsIndoZWVsRGVsdGFYIiwiZGVsdGFZIiwid2hlZWxEZWx0YVkiLCJ3aGVlbERlbHRhIiwiZGVsdGFaIiwiZGVsdGFNb2RlIiwiWmQiLCIkZCIsImFlIiwiYmUiLCJkb2N1bWVudE1vZGUiLCJjZSIsImRlIiwiZWUiLCJmZSIsImdlIiwiaGUiLCJpZSIsImxlIiwicmFuZ2UiLCJtZSIsIm5lIiwib2UiLCJsaXN0ZW5lcnMiLCJwZSIsInFlIiwic2UiLCJ0ZSIsInVlIiwidmUiLCJ3ZSIsInhlIiwieWUiLCJ6ZSIsIm9uaW5wdXQiLCJBZSIsImRldGFjaEV2ZW50IiwiQmUiLCJDZSIsImF0dGFjaEV2ZW50IiwiRGUiLCJFZSIsIkZlIiwiSGUiLCJJZSIsIkplIiwiS2UiLCJMZSIsImNvbnRhaW5zIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJNZSIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudFdpbmRvdyIsImhyZWYiLCJOZSIsImNvbnRlbnRFZGl0YWJsZSIsIk9lIiwiZm9jdXNlZEVsZW0iLCJzZWxlY3Rpb25SYW5nZSIsImRvY3VtZW50RWxlbWVudCIsInNlbGVjdGlvblN0YXJ0Iiwic2VsZWN0aW9uRW5kIiwiZ2V0U2VsZWN0aW9uIiwiZXh0ZW5kIiwicmFuZ2VDb3VudCIsImFuY2hvck5vZGUiLCJhbmNob3JPZmZzZXQiLCJmb2N1c05vZGUiLCJmb2N1c09mZnNldCIsImNyZWF0ZVJhbmdlIiwic2V0U3RhcnQiLCJyZW1vdmVBbGxSYW5nZXMiLCJhZGRSYW5nZSIsInNldEVuZCIsImxlZnQiLCJzY3JvbGxMZWZ0IiwidG9wIiwic2Nyb2xsVG9wIiwiUGUiLCJRZSIsIlJlIiwiU2UiLCJUZSIsIlVlIiwiVmUiLCJXZSIsImFuaW1hdGlvbmVuZCIsImFuaW1hdGlvbml0ZXJhdGlvbiIsImFuaW1hdGlvbnN0YXJ0IiwidHJhbnNpdGlvbmVuZCIsIlhlIiwiWWUiLCJaZSIsImFuaW1hdGlvbiIsIiRlIiwiYWYiLCJiZiIsImNmIiwiZGYiLCJlZiIsImZmIiwiZ2YiLCJoZiIsImxmIiwibWYiLCJuZiIsIlViIiwibGlzdGVuZXIiLCJEIiwib2YiLCJoYXMiLCJwZiIsInFmIiwicmYiLCJyYW5kb20iLCJzZiIsImNhcHR1cmUiLCJwYXNzaXZlIiwiSiIsInUiLCJ3IiwiRiIsInRmIiwidWYiLCJwYXJlbnRXaW5kb3ciLCJ2ZiIsIndmIiwibmEiLCJ4YSIsIiRhIiwiYmEiLCJqZSIsImNoYXIiLCJrZSIsInVuc2hpZnQiLCJ4ZiIsInlmIiwiemYiLCJBZiIsIkJmIiwiQ2YiLCJEZiIsIkVmIiwiX19odG1sIiwiRmYiLCJHZiIsIkhmIiwiUHJvbWlzZSIsIkpmIiwicXVldWVNaWNyb3Rhc2siLCJyZXNvbHZlIiwidGhlbiIsImNhdGNoIiwiSWYiLCJLZiIsIkxmIiwiTWYiLCJwcmV2aW91c1NpYmxpbmciLCJOZiIsIk9mIiwiUGYiLCJRZiIsIlJmIiwiU2YiLCJUZiIsIlVmIiwiRSIsIkciLCJWZiIsIkgiLCJXZiIsIlhmIiwiWWYiLCJjb250ZXh0VHlwZXMiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0IiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQiLCJaZiIsImNoaWxkQ29udGV4dFR5cGVzIiwiJGYiLCJhZyIsImJnIiwiZ2V0Q2hpbGRDb250ZXh0IiwiY2ciLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dCIsImRnIiwiZWciLCJmZyIsImdnIiwiaGciLCJqZyIsImtnIiwibWciLCJuZyIsIm9nIiwicGciLCJxZyIsInJnIiwic2ciLCJ0ZyIsInVnIiwidmciLCJ3ZyIsInhnIiwieWciLCJJIiwiemciLCJBZyIsIkJnIiwiZWxlbWVudFR5cGUiLCJkZWxldGlvbnMiLCJDZyIsInBlbmRpbmdQcm9wcyIsIm92ZXJmbG93IiwidHJlZUNvbnRleHQiLCJyZXRyeUxhbmUiLCJEZyIsIkVnIiwiRmciLCJHZyIsIm1lbW9pemVkUHJvcHMiLCJIZyIsIklnIiwiSmciLCJLZyIsIkxnIiwiTWciLCJOZyIsIk9nIiwiUGciLCJRZyIsIlJnIiwiX2N1cnJlbnRWYWx1ZSIsIlNnIiwiY2hpbGRMYW5lcyIsIlRnIiwiZGVwZW5kZW5jaWVzIiwiZmlyc3RDb250ZXh0IiwibGFuZXMiLCJVZyIsIlZnIiwiY29udGV4dCIsIm1lbW9pemVkVmFsdWUiLCJXZyIsIlhnIiwiWWciLCJpbnRlcmxlYXZlZCIsIlpnIiwiJGciLCJhaCIsInVwZGF0ZVF1ZXVlIiwiYmFzZVN0YXRlIiwiZmlyc3RCYXNlVXBkYXRlIiwibGFzdEJhc2VVcGRhdGUiLCJzaGFyZWQiLCJwZW5kaW5nIiwiZWZmZWN0cyIsImJoIiwiY2giLCJldmVudFRpbWUiLCJsYW5lIiwicGF5bG9hZCIsImRoIiwiSyIsImVoIiwiZmgiLCJnaCIsInEiLCJoaCIsImloIiwiamgiLCJraCIsIm5oIiwiaXNNb3VudGVkIiwiX3JlYWN0SW50ZXJuYWxzIiwiZW5xdWV1ZVNldFN0YXRlIiwiTCIsImxoIiwibWgiLCJlbnF1ZXVlUmVwbGFjZVN0YXRlIiwiZW5xdWV1ZUZvcmNlVXBkYXRlIiwib2giLCJzaG91bGRDb21wb25lbnRVcGRhdGUiLCJpc1B1cmVSZWFjdENvbXBvbmVudCIsInBoIiwiY29udGV4dFR5cGUiLCJ1cGRhdGVyIiwicWgiLCJjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJyaCIsImdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyIsImdldFNuYXBzaG90QmVmb3JlVXBkYXRlIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCIsImNvbXBvbmVudFdpbGxNb3VudCIsImNvbXBvbmVudERpZE1vdW50Iiwic2giLCJfb3duZXIiLCJfc3RyaW5nUmVmIiwidGgiLCJ1aCIsInZoIiwid2giLCJ4aCIsInloIiwiaW1wbGVtZW50YXRpb24iLCJ6aCIsIkFoIiwiZG9uZSIsIkJoIiwiQ2giLCJEaCIsIkVoIiwiRmgiLCJHaCIsIkhoIiwiSWgiLCJKaCIsIktoIiwiTGgiLCJNIiwiTWgiLCJyZXZlYWxPcmRlciIsIk5oIiwiT2giLCJfd29ya0luUHJvZ3Jlc3NWZXJzaW9uUHJpbWFyeSIsIlBoIiwiUmVhY3RDdXJyZW50RGlzcGF0Y2hlciIsIlFoIiwiUmgiLCJOIiwiTyIsIlAiLCJTaCIsIlRoIiwiVWgiLCJWaCIsIlEiLCJXaCIsIlhoIiwiWWgiLCJaaCIsIiRoIiwiYWkiLCJiaSIsImNpIiwiYmFzZVF1ZXVlIiwicXVldWUiLCJkaSIsImVpIiwiZmkiLCJsYXN0UmVuZGVyZWRSZWR1Y2VyIiwiaGFzRWFnZXJTdGF0ZSIsImVhZ2VyU3RhdGUiLCJsYXN0UmVuZGVyZWRTdGF0ZSIsImRpc3BhdGNoIiwiZ2kiLCJoaSIsImlpIiwiamkiLCJraSIsImdldFNuYXBzaG90IiwibGkiLCJtaSIsIlIiLCJuaSIsImxhc3RFZmZlY3QiLCJzdG9yZXMiLCJvaSIsInBpIiwicWkiLCJyaSIsImRlc3Ryb3kiLCJkZXBzIiwic2kiLCJ0aSIsInVpIiwidmkiLCJ3aSIsInhpIiwieWkiLCJ6aSIsIkFpIiwiQmkiLCJDaSIsIkRpIiwiRWkiLCJGaSIsIkdpIiwiSGkiLCJJaSIsIkppIiwicmVhZENvbnRleHQiLCJ1c2VDYWxsYmFjayIsInVzZUVmZmVjdCIsInVzZUltcGVyYXRpdmVIYW5kbGUiLCJ1c2VNZW1vIiwidXNlUmVkdWNlciIsInVzZVJlZiIsInVzZVN0YXRlIiwidXNlRGVidWdWYWx1ZSIsInVzZURlZmVycmVkVmFsdWUiLCJ1c2VUcmFuc2l0aW9uIiwidXNlTXV0YWJsZVNvdXJjZSIsInVzZVN5bmNFeHRlcm5hbFN0b3JlIiwidXNlSWQiLCJ1bnN0YWJsZV9pc05ld1JlY29uY2lsZXIiLCJpZGVudGlmaWVyUHJlZml4IiwiS2kiLCJtZXNzYWdlIiwiZGlnZXN0IiwiTGkiLCJNaSIsIk5pIiwiT2kiLCJQaSIsIlFpIiwiUmkiLCJnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IiLCJjb21wb25lbnREaWRDYXRjaCIsIlNpIiwiY29tcG9uZW50U3RhY2siLCJUaSIsInBpbmdDYWNoZSIsIlVpIiwiVmkiLCJXaSIsIlhpIiwiUmVhY3RDdXJyZW50T3duZXIiLCJZaSIsIlppIiwiJGkiLCJhaiIsImJqIiwiY29tcGFyZSIsImNqIiwiZGoiLCJlaiIsImJhc2VMYW5lcyIsImNhY2hlUG9vbCIsImZqIiwiZ2oiLCJoaiIsImlqIiwiamoiLCJVTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSIsImNvbXBvbmVudFdpbGxVcGRhdGUiLCJjb21wb25lbnREaWRVcGRhdGUiLCJraiIsImxqIiwicGVuZGluZ0NvbnRleHQiLCJtaiIsIkFqIiwiQ2oiLCJEaiIsIm5qIiwib2oiLCJwaiIsImZhbGxiYWNrIiwicWoiLCJyaiIsInRqIiwiZGF0YXNldCIsImRnc3QiLCJ1aiIsInZqIiwiX3JlYWN0UmV0cnkiLCJzaiIsInN1YnRyZWVGbGFncyIsIndqIiwieGoiLCJpc0JhY2t3YXJkcyIsInJlbmRlcmluZyIsInJlbmRlcmluZ1N0YXJ0VGltZSIsImxhc3QiLCJ0YWlsIiwidGFpbE1vZGUiLCJ5aiIsIkVqIiwiUyIsIkZqIiwiR2oiLCJ3YXNNdWx0aXBsZSIsIm11bHRpcGxlIiwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nIiwib25DbGljayIsIm9uY2xpY2siLCJjcmVhdGVFbGVtZW50TlMiLCJhdXRvRm9jdXMiLCJUIiwiSGoiLCJJaiIsIkpqIiwiS2oiLCJVIiwiTGoiLCJXZWFrU2V0IiwiViIsIk1qIiwiVyIsIk5qIiwiT2oiLCJRaiIsIlJqIiwiU2oiLCJUaiIsIlVqIiwiVmoiLCJXaiIsIl9yZWFjdFJvb3RDb250YWluZXIiLCJYaiIsIlgiLCJZaiIsIlpqIiwiYWsiLCJvbkNvbW1pdEZpYmVyVW5tb3VudCIsImNvbXBvbmVudFdpbGxVbm1vdW50IiwiYmsiLCJjayIsImRrIiwiZWsiLCJmayIsImlzSGlkZGVuIiwiZ2siLCJoayIsImlrIiwiamsiLCJrayIsImxrIiwiX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUiLCJzcmMiLCJXayIsIm1rIiwiY2VpbCIsIm5rIiwib2siLCJwayIsIlkiLCJaIiwicWsiLCJyayIsInNrIiwidGsiLCJ1ayIsIkluZmluaXR5IiwidmsiLCJ3ayIsInhrIiwieWsiLCJ6ayIsIkFrIiwiQmsiLCJDayIsIkRrIiwiRWsiLCJjYWxsYmFja05vZGUiLCJleHBpcmF0aW9uVGltZXMiLCJleHBpcmVkTGFuZXMiLCJ3YyIsImNhbGxiYWNrUHJpb3JpdHkiLCJpZyIsIkZrIiwiR2siLCJIayIsIklrIiwiSmsiLCJLayIsIkxrIiwiTWsiLCJOayIsIk9rIiwiUGsiLCJmaW5pc2hlZFdvcmsiLCJmaW5pc2hlZExhbmVzIiwiUWsiLCJ0aW1lb3V0SGFuZGxlIiwiUmsiLCJTayIsIlRrIiwiVWsiLCJWayIsIm11dGFibGVSZWFkTGFuZXMiLCJCYyIsIlBqIiwib25Db21taXRGaWJlclJvb3QiLCJtYyIsIm9uUmVjb3ZlcmFibGVFcnJvciIsIlhrIiwib25Qb3N0Q29tbWl0RmliZXJSb290IiwiWWsiLCJaayIsImFsIiwiaXNSZWFjdENvbXBvbmVudCIsInBlbmRpbmdDaGlsZHJlbiIsImJsIiwibXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YSIsImNsIiwicGVuZGluZ1N1c3BlbnNlQm91bmRhcmllcyIsImRsIiwiZWwiLCJmbCIsImdsIiwiaGwiLCJpbCIsImpsIiwiemoiLCIkayIsImxsIiwicmVwb3J0RXJyb3IiLCJtbCIsIl9pbnRlcm5hbFJvb3QiLCJubCIsIm9sIiwicGwiLCJxbCIsInNsIiwicmwiLCJ1bm1vdW50IiwidW5zdGFibGVfc2NoZWR1bGVIeWRyYXRpb24iLCJzcGxpY2UiLCJmb3JtIiwidGwiLCJ1c2luZ0NsaWVudEVudHJ5UG9pbnQiLCJFdmVudHMiLCJ1bCIsImZpbmRGaWJlckJ5SG9zdEluc3RhbmNlIiwiYnVuZGxlVHlwZSIsInZlcnNpb24iLCJyZW5kZXJlclBhY2thZ2VOYW1lIiwidmwiLCJyZW5kZXJlckNvbmZpZyIsIm92ZXJyaWRlSG9va1N0YXRlIiwib3ZlcnJpZGVIb29rU3RhdGVEZWxldGVQYXRoIiwib3ZlcnJpZGVIb29rU3RhdGVSZW5hbWVQYXRoIiwib3ZlcnJpZGVQcm9wcyIsIm92ZXJyaWRlUHJvcHNEZWxldGVQYXRoIiwib3ZlcnJpZGVQcm9wc1JlbmFtZVBhdGgiLCJzZXRFcnJvckhhbmRsZXIiLCJzZXRTdXNwZW5zZUhhbmRsZXIiLCJzY2hlZHVsZVVwZGF0ZSIsImN1cnJlbnREaXNwYXRjaGVyUmVmIiwiZmluZEhvc3RJbnN0YW5jZUJ5RmliZXIiLCJmaW5kSG9zdEluc3RhbmNlc0ZvclJlZnJlc2giLCJzY2hlZHVsZVJlZnJlc2giLCJzY2hlZHVsZVJvb3QiLCJzZXRSZWZyZXNoSGFuZGxlciIsImdldEN1cnJlbnRGaWJlciIsInJlY29uY2lsZXJWZXJzaW9uIiwiX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fIiwid2wiLCJpc0Rpc2FibGVkIiwic3VwcG9ydHNGaWJlciIsImluamVjdCIsImNyZWF0ZVBvcnRhbCIsImNyZWF0ZVJvb3QiLCJ1bnN0YWJsZV9zdHJpY3RNb2RlIiwiZmluZERPTU5vZGUiLCJmbHVzaFN5bmMiLCJoeWRyYXRlUm9vdCIsImh5ZHJhdGVkU291cmNlcyIsIl9nZXRWZXJzaW9uIiwiX3NvdXJjZSIsInVubW91bnRDb21wb25lbnRBdE5vZGUiLCJ1bnN0YWJsZV9iYXRjaGVkVXBkYXRlcyIsInVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyIiwiY2hlY2tEQ0UiLCJlcnIiLCJfX3NlbGYiLCJfX3NvdXJjZSIsImpzeHMiLCJzZXRTdGF0ZSIsImZvcmNlVXBkYXRlIiwiZXNjYXBlIiwiX3N0YXR1cyIsIl9yZXN1bHQiLCJDaGlsZHJlbiIsInRvQXJyYXkiLCJQcm9maWxlciIsIlB1cmVDb21wb25lbnQiLCJTdHJpY3RNb2RlIiwiU3VzcGVuc2UiLCJjbG9uZUVsZW1lbnQiLCJfY3VycmVudFZhbHVlMiIsIl90aHJlYWRDb3VudCIsIkNvbnN1bWVyIiwiX2RlZmF1bHRWYWx1ZSIsIl9nbG9iYWxOYW1lIiwiY3JlYXRlRmFjdG9yeSIsImNyZWF0ZVJlZiIsImlzVmFsaWRFbGVtZW50IiwibGF6eSIsIm1lbW8iLCJzdGFydFRyYW5zaXRpb24iLCJ1bnN0YWJsZV9hY3QiLCJwb3AiLCJzb3J0SW5kZXgiLCJwZXJmb3JtYW5jZSIsInNldEltbWVkaWF0ZSIsInN0YXJ0VGltZSIsImV4cGlyYXRpb25UaW1lIiwicHJpb3JpdHlMZXZlbCIsIm5hdmlnYXRvciIsInNjaGVkdWxpbmciLCJpc0lucHV0UGVuZGluZyIsIk1lc3NhZ2VDaGFubmVsIiwicG9ydDIiLCJwb3J0MSIsIm9ubWVzc2FnZSIsInBvc3RNZXNzYWdlIiwidW5zdGFibGVfUHJvZmlsaW5nIiwidW5zdGFibGVfY29udGludWVFeGVjdXRpb24iLCJ1bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZSIsImZsb29yIiwidW5zdGFibGVfZ2V0Rmlyc3RDYWxsYmFja05vZGUiLCJ1bnN0YWJsZV9uZXh0IiwidW5zdGFibGVfcGF1c2VFeGVjdXRpb24iLCJ1bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHkiLCJ1bnN0YWJsZV93cmFwQ2FsbGJhY2siLCJzdHlsZXNJbkRPTSIsImdldEluZGV4QnlJZGVudGlmaWVyIiwibW9kdWxlc1RvRG9tIiwiaWRDb3VudE1hcCIsImlkZW50aWZpZXJzIiwiaW5kZXhCeUlkZW50aWZpZXIiLCJzb3VyY2VNYXAiLCJyZWZlcmVuY2VzIiwiYWRkRWxlbWVudFN0eWxlIiwiYnlJbmRleCIsImFwaSIsImRvbUFQSSIsInVwZGF0ZSIsIm5ld09iaiIsInJlbW92ZSIsImxhc3RJZGVudGlmaWVycyIsIm5ld0xpc3QiLCJuZXdMYXN0SWRlbnRpZmllcnMiLCJfaW5kZXgiLCJzdHlsZVRhcmdldCIsInF1ZXJ5U2VsZWN0b3IiLCJjb250ZW50RG9jdW1lbnQiLCJnZXRUYXJnZXQiLCJzZXRBdHRyaWJ1dGVzIiwiYXR0cmlidXRlcyIsInN0eWxlRWxlbWVudCIsImluc2VydFN0eWxlRWxlbWVudCIsInN0eWxlVGFnVHJhbnNmb3JtIiwicmVtb3ZlU3R5bGVFbGVtZW50Iiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJfX2VzTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImdldHRlciIsImdldFByb3RvdHlwZU9mIiwibnMiLCJkZWYiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwibyIsInRvU3RyaW5nVGFnIiwibmMiLCJBY3Rpb24iLCJfZXh0ZW5kcyIsIlBvcFN0YXRlRXZlbnRUeXBlIiwiZ2V0SGlzdG9yeVN0YXRlIiwidXNyIiwiY3JlYXRlTG9jYXRpb24iLCJ0byIsInBhdGhuYW1lIiwicGFyc2VQYXRoIiwic3Vic3RyIiwicGFyc2VkUGF0aCIsImhhc2hJbmRleCIsInNlYXJjaEluZGV4IiwiY3JlYXRlVVJMIiwib3JpZ2luIiwiVVJMIiwiUmVzdWx0VHlwZSIsIm1hdGNoUm91dGVzIiwicm91dGVzIiwibG9jYXRpb25BcmciLCJiYXNlbmFtZSIsInN0cmlwQmFzZW5hbWUiLCJicmFuY2hlcyIsImZsYXR0ZW5Sb3V0ZXMiLCJzY29yZSIsInNpYmxpbmdzIiwiY29tcGFyZUluZGV4ZXMiLCJyb3V0ZXNNZXRhIiwiY2hpbGRyZW5JbmRleCIsInJhbmtSb3V0ZUJyYW5jaGVzIiwibWF0Y2hSb3V0ZUJyYW5jaCIsInNhZmVseURlY29kZVVSSSIsInBhcmVudHNNZXRhIiwicGFyZW50UGF0aCIsInJvdXRlIiwicmVsYXRpdmVQYXRoIiwiY2FzZVNlbnNpdGl2ZSIsInN0YXJ0c1dpdGgiLCJjb21wdXRlU2NvcmUiLCJwYXJhbVJlIiwiaXNTcGxhdCIsInNlZ21lbnRzIiwiaW5pdGlhbFNjb3JlIiwic29tZSIsInNlZ21lbnQiLCJicmFuY2giLCJtYXRjaGVkUGFyYW1zIiwibWF0Y2hlZFBhdGhuYW1lIiwicmVtYWluaW5nUGF0aG5hbWUiLCJwYXRobmFtZUJhc2UiLCJub3JtYWxpemVQYXRobmFtZSIsIm1hdGNoZXIiLCJwYXJhbU5hbWVzIiwiZW5kc1dpdGgiLCJyZWdleHBTb3VyY2UiLCJfIiwicGFyYW1OYW1lIiwiY29tcGlsZVBhdGgiLCJjYXB0dXJlR3JvdXBzIiwic3BsYXRWYWx1ZSIsImRlY29kZVVSSUNvbXBvbmVudCIsInNhZmVseURlY29kZVVSSUNvbXBvbmVudCIsImRlY29kZVVSSSIsInN0YXJ0SW5kZXgiLCJuZXh0Q2hhciIsImNvbmQiLCJnZXRJbnZhbGlkUGF0aEVycm9yIiwiZmllbGQiLCJkZXN0IiwiZ2V0UGF0aENvbnRyaWJ1dGluZ01hdGNoZXMiLCJyZXNvbHZlVG8iLCJ0b0FyZyIsInJvdXRlUGF0aG5hbWVzIiwibG9jYXRpb25QYXRobmFtZSIsImlzUGF0aFJlbGF0aXZlIiwiZnJvbSIsImlzRW1wdHlQYXRoIiwidG9QYXRobmFtZSIsInJvdXRlUGF0aG5hbWVJbmRleCIsInRvU2VnbWVudHMiLCJmcm9tUGF0aG5hbWUiLCJyZXNvbHZlUGF0aG5hbWUiLCJub3JtYWxpemVTZWFyY2giLCJub3JtYWxpemVIYXNoIiwicmVzb2x2ZVBhdGgiLCJoYXNFeHBsaWNpdFRyYWlsaW5nU2xhc2giLCJoYXNDdXJyZW50VHJhaWxpbmdTbGFzaCIsInBhdGhzIiwiRXJyb3JSZXNwb25zZSIsInN0YXR1cyIsInN0YXR1c1RleHQiLCJ2YWxpZEFjdGlvbk1ldGhvZHMiLCJEYXRhU3RhdGljUm91dGVyQ29udGV4dCIsIkRhdGFSb3V0ZXJDb250ZXh0IiwiRGF0YVJvdXRlclN0YXRlQ29udGV4dCIsIk5hdmlnYXRpb25Db250ZXh0IiwiTG9jYXRpb25Db250ZXh0IiwiUm91dGVDb250ZXh0Iiwib3V0bGV0IiwiUm91dGVFcnJvckNvbnRleHQiLCJ1c2VJblJvdXRlckNvbnRleHQiLCJ1c2VOYXZpZ2F0ZSIsInJvdXRlUGF0aG5hbWVzSnNvbiIsImFjdGl2ZVJlZiIsIm5hdmlnYXRlIiwiZ28iLCJyZWxhdGl2ZSIsIk91dGxldENvbnRleHQiLCJ1c2VQYXJhbXMiLCJyb3V0ZU1hdGNoIiwiX3RlbXAyIiwiRGVmYXVsdEVycm9yRWxlbWVudCIsIl9zdGF0ZSRlcnJvcnMiLCJob29rTmFtZSIsInVzZURhdGFSb3V0ZXJTdGF0ZSIsIkRhdGFSb3V0ZXJTdGF0ZUhvb2siLCJVc2VSb3V0ZUVycm9yIiwidGhpc1JvdXRlIiwiZXJyb3JzIiwidXNlUm91dGVFcnJvciIsImxpZ2h0Z3JleSIsInByZVN0eWxlcyIsImJhY2tncm91bmRDb2xvciIsImNvZGVTdHlsZXMiLCJSZW5kZXJFcnJvckJvdW5kYXJ5Iiwic3VwZXIiLCJzdGF0aWMiLCJlcnJvckluZm8iLCJSZW5kZXJlZFJvdXRlIiwicm91dGVDb250ZXh0IiwiZGF0YVN0YXRpY1JvdXRlckNvbnRleHQiLCJlcnJvckVsZW1lbnQiLCJfZGVlcGVzdFJlbmRlcmVkQm91bmRhcnlJZCIsIkRhdGFSb3V0ZXJIb29rIiwiQXdhaXRSZW5kZXJTdGF0dXMiLCJPdXRsZXQiLCJ1c2VPdXRsZXQiLCJSb3V0ZSIsIl9wcm9wcyIsIl9yZWY0IiwiYmFzZW5hbWVQcm9wIiwibG9jYXRpb25Qcm9wIiwibmF2aWdhdGlvblR5cGUiLCJQb3AiLCJzdGF0aWNQcm9wIiwibmF2aWdhdGlvbkNvbnRleHQiLCJ0cmFpbGluZ1BhdGhuYW1lIiwiUm91dGVzIiwiX3JlZjUiLCJkYXRhUm91dGVyQ29udGV4dCIsImRhdGFSb3V0ZXJTdGF0ZUNvbnRleHQiLCJwYXJlbnRNYXRjaGVzIiwicGFyZW50UGFyYW1zIiwicGFyZW50UGF0aG5hbWVCYXNlIiwibG9jYXRpb25Gcm9tQ29udGV4dCIsIl9wYXJzZWRMb2NhdGlvbkFyZyRwYSIsInBhcnNlZExvY2F0aW9uQXJnIiwicmVuZGVyZWRNYXRjaGVzIiwiZGF0YVJvdXRlclN0YXRlIiwiZXJyb3JJbmRleCIsImZpbmRJbmRleCIsInJlZHVjZVJpZ2h0IiwiZ2V0Q2hpbGRyZW4iLCJfcmVuZGVyTWF0Y2hlcyIsInVzZVJvdXRlcyIsInJvdXRlciIsImNyZWF0ZVJvdXRlc0Zyb21DaGlsZHJlbiIsIkF3YWl0RXJyb3JCb3VuZGFyeSIsInByb21pc2UiLCJyZW5kZXJFcnJvciIsInJlamVjdCIsIl90cmFja2VkIiwiX2Vycm9yIiwiX2RhdGEiLCJBYm9ydGVkRGVmZXJyZWRFcnJvciIsIm5ldmVyU2V0dGxlZFByb21pc2UiLCJSZWFjdCIsIkF3YWl0Q29udGV4dCIsInRyZWVQYXRoIiwibG9hZGVyIiwiaGFzRXJyb3JCb3VuZGFyeSIsInNob3VsZFJldmFsaWRhdGUiLCJoYW5kbGUiLCJjcmVhdGVTZWFyY2hQYXJhbXMiLCJpbml0IiwiVVJMU2VhcmNoUGFyYW1zIiwiQnJvd3NlclJvdXRlciIsImhpc3RvcnlSZWYiLCJnZXRMb2NhdGlvbiIsImNyZWF0ZUhyZWYiLCJ2YWxpZGF0ZUxvY2F0aW9uIiwidjVDb21wYXQiLCJnbG9iYWxIaXN0b3J5IiwiaGlzdG9yeSIsImhhbmRsZVBvcCIsImxpc3RlbiIsImVuY29kZUxvY2F0aW9uIiwiUHVzaCIsImhpc3RvcnlTdGF0ZSIsInB1c2hTdGF0ZSIsIlJlcGxhY2UiLCJyZXBsYWNlU3RhdGUiLCJnZXRVcmxCYXNlZEhpc3RvcnkiLCJMaW5rIiwicmVsb2FkRG9jdW1lbnQiLCJwcmV2ZW50U2Nyb2xsUmVzZXQiLCJyZXN0IiwiX3RlbXAiLCJqb2luZWRQYXRobmFtZSIsInVzZUhyZWYiLCJpbnRlcm5hbE9uQ2xpY2siLCJyZXBsYWNlUHJvcCIsImlzTW9kaWZpZWRFdmVudCIsInNob3VsZFByb2Nlc3NMaW5rQ2xpY2siLCJ1c2VMaW5rQ2xpY2tIYW5kbGVyIiwiTmF2TGluayIsImFyaWFDdXJyZW50UHJvcCIsImNsYXNzTmFtZVByb3AiLCJzdHlsZVByb3AiLCJyb3V0ZXJTdGF0ZSIsIm5leHRMb2NhdGlvblBhdGhuYW1lIiwibmF2aWdhdGlvbiIsImlzQWN0aXZlIiwiaXNQZW5kaW5nIiwiYXJpYUN1cnJlbnQiLCJCb29sZWFuIiwiQ29udGV4dCIsIkNvbnRleHRQcm92aWRlciIsInRoaXNQYXRpZW50Iiwic2V0VGhpc1BhdGllbnQiLCJldmVudHMiLCJzZXRFdmVudHMiLCJnZXRBZ2UiLCJ0b2RheSIsImJpcnRoRGF0ZSIsImFnZSIsImdldEZ1bGxZZWFyIiwiZ2V0TW9udGgiLCJnZXREYXRlIiwiZm9ybWF0RGF0ZSIsImZvcm1hdCIsImZvcm1hdHRlZERhdGUiLCJpc29EYXRlIiwid2Vla2RheSIsInllYXIiLCJkYXkiLCJ0b0xvY2FsZVN0cmluZyIsInRvTG9jYWxlRGF0ZVN0cmluZyIsIkhlYWRlciIsIlNwYSIsIl9fZGVmUHJvcCIsIl9fZGVmUHJvcHMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiX19nZXRPd25Qcm9wRGVzY3MiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIiwiX19nZXRPd25Qcm9wU3ltYm9scyIsImdldE93blByb3BlcnR5U3ltYm9scyIsIl9faGFzT3duUHJvcCIsIl9fcHJvcElzRW51bSIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwiX19kZWZOb3JtYWxQcm9wIiwid3JpdGFibGUiLCJfX3NwcmVhZFZhbHVlcyIsIl9fc3ByZWFkUHJvcHMiLCJlbXB0eUZ1bmN0aW9uIiwiZW1wdHlGdW5jdGlvbldpdGhSZXNldCIsInJlc2V0V2FybmluZ0NhY2hlIiwic2hpbSIsInNlY3JldCIsImdldFNoaW0iLCJpc1JlcXVpcmVkIiwiUmVhY3RQcm9wVHlwZXMiLCJiaWdpbnQiLCJib29sIiwic3ltYm9sIiwiYW55IiwiYXJyYXlPZiIsImluc3RhbmNlT2YiLCJvYmplY3RPZiIsIm9uZU9mIiwib25lT2ZUeXBlIiwiZXhhY3QiLCJjaGVja1Byb3BUeXBlcyIsIlByb3BUeXBlcyIsImZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcyIsIlNFVF9RVUVSWSIsIlNFVF9JVEVNUyIsIlNFVF9JVEVNU19FUlJPUiIsIkNMRUFSIiwiU0VUX0hJR0hMSUdIVEVEIiwiTkVYVF9ISUdITElHSFRFRCIsIlBSRVZfSElHSExJR0hURUQiLCJTRVRfU0VMRUNURUQiLCJ1bmRlZiIsImlzVW5kZWZpbmVkJDEiLCJoaWdobGlnaHRlZEl0ZW0iLCJpdGVtcyIsInJlZHVjZXIiLCJuZXdTdGF0ZSIsIm5ld1N0YXRlMiIsIml0ZW1zRXJyb3IiLCJxdWVyeSIsIm1pblF1ZXJ5TGVuZ3RoIiwiY2FuU2hvd0xpc3Rib3giLCJkZWZhdWx0TGlzdGJveCIsImhpZ2hsaWdodGVkIiwic2V0UXVlcnkiLCJzZXRIaWdobGlnaHRlZCIsInNldFNlbGVjdGVkIiwianN4UnVudGltZSIsInJlYWN0SnN4UnVudGltZV9wcm9kdWN0aW9uX21pbiIsInRlc3QxIiwidGVzdDIiLCJuMiIsInRlc3QzIiwibGV0dGVyIiwic2hvdWxkVXNlTmF0aXZlIiwiU3RhdGVDb250ZXh0IiwiU3RhdGVDb250ZXh0UHJvdmlkZXIiLCJfYTIiLCJwcm9wc01pbnVzQ2hpbGRyZW4iLCJleGNsdWRlIiwiX19vYmpSZXN0Iiwic3R5bGVzJDEiLCJsaXN0Ym94IiwiTWF0Y2hpbmdUZXh0IiwiZ2xvYmFsIiwic3R5bGVzMiIsIlR5cGVFcnJvciIsImVzY2FwZVN0cmluZ1JlZ2V4cCIsInJlZ2V4IiwicGFydHMiLCJwYXJ0IiwibWF0Y2hpbmdUZXh0IiwiSXRlbSIsIkl0ZW1Db250ZW50cyIsImdsb2JhbE1hdGNoIiwic2VhcmNoVHlwZSIsImlzSGlnaGxpZ2h0ZWQiLCJkaXZDbGFzc05hbWUiLCJpdGVtQ29udGVudHMiLCJhcHBlYXJzSW5EZWZhdWx0TGlzdGJveCIsImdyb3VwSWQiLCJncm91cEluZGV4IiwiZ3JvdXBOYW1lIiwiZGlzcGxheUZpZWxkIiwidG90YWxJdGVtcyIsIm1hdGNoVGV4dCIsIm9uTW91c2VFbnRlciIsIm9uTW91c2VEb3duIiwiSXRlbUZpcnN0IiwiR3JvdXBOYW1lIiwiZ3JvdXBIZWFkaW5nIiwiTGlzdGJveCIsIm5vSXRlbXNNZXNzYWdlIiwibm9JdGVtcyIsIkVycm9yYm94IiwiZXJyb3JNZXNzYWdlIiwiZXJyb3Jib3giLCJ2YWx1ZUVxdWFsaXR5IiwicmlnaHQiLCJhZGp1c3RGdW5jdGlvblZhbHVlT2ZTZXRTdGF0ZSIsIl9fYXdhaXRlciIsInRoaXNBcmciLCJfYXJndW1lbnRzIiwiZnVsZmlsbGVkIiwicmVqZWN0ZWQiLCJfX2dlbmVyYXRvciIsImYyIiwiZzIiLCJzZW50IiwidHJ5cyIsIm9wcyIsInZlcmIiLCJvcCIsIm5vb3AiLCJVTkRFRklORUQiLCJPQkpFQ1QiLCJpc1VuZGVmaW5lZCIsImlzRnVuY3Rpb24iLCJtZXJnZU9iamVjdHMiLCJTVFJfVU5ERUZJTkVEIiwiaGFzV2luZG93IiwidGFibGUiLCJjb3VudGVyIiwic3RhYmxlSGFzaCIsImlzRGF0ZSIsInRvSlNPTiIsIm9ubGluZSIsImhhc1dpbiIsImhhc0RvYyIsIm9uV2luZG93RXZlbnQiLCJvbkRvY3VtZW50RXZlbnQiLCJvZmZXaW5kb3dFdmVudCIsIm9mZkRvY3VtZW50RXZlbnQiLCJwcmVzZXQiLCJpc09ubGluZSIsImlzVmlzaWJsZSIsImRlZmF1bHRDb25maWdPcHRpb25zIiwiaW5pdEZvY3VzIiwiaW5pdFJlY29ubmVjdCIsIm9uT25saW5lIiwib25PZmZsaW5lIiwiSVNfU0VSVkVSIiwidXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCIsIm5hdmlnYXRvckNvbm5lY3Rpb24iLCJjb25uZWN0aW9uIiwic2xvd0Nvbm5lY3Rpb24iLCJlZmZlY3RpdmVUeXBlIiwic2F2ZURhdGEiLCJzZXJpYWxpemUiLCJTV1JHbG9iYWxTdGF0ZSIsImJyb2FkY2FzdFN0YXRlIiwiY2FjaGUyIiwiaXNWYWxpZGF0aW5nIiwicmV2YWxpZGF0ZSIsImJyb2FkY2FzdCIsIkVWRU5UX1JFVkFMSURBVE9SUyIsIlNUQVRFX1VQREFURVJTIiwiRkVUQ0giLCJyZXZhbGlkYXRvcnMiLCJ1cGRhdGVycyIsIl9fdGltZXN0YW1wIiwiZ2V0VGltZXN0YW1wIiwiaW50ZXJuYWxNdXRhdGUiLCJfb3B0cyIsInBvcHVsYXRlQ2FjaGUiLCJyb2xsYmFja09uRXJyb3IiLCJvcHRpbWlzdGljRGF0YSIsImtleUluZm8iLCJfYiIsIk1VVEFUSU9OIiwiYmVmb3JlTXV0YXRpb25UcyIsImhhc09wdGltaXN0aWNEYXRhIiwicm9sbGJhY2tEYXRhIiwicmVzIiwiX2MiLCJyZXZhbGlkYXRlQWxsS2V5cyIsImluaXRDYWNoZSIsInByb3ZpZGVyIiwib3B0cyIsIm11dGF0ZTIiLCJyZWxlYXNlRm9jdXNfMSIsInJlbGVhc2VSZWNvbm5lY3RfMSIsIl9hIiwibXV0YXRlIiwiZGVmYXVsdENvbmZpZyIsIm9uTG9hZGluZ1Nsb3ciLCJvblN1Y2Nlc3MiLCJvbkVycm9yUmV0cnkiLCJfXyIsImNvbmZpZyIsIm1heFJldHJ5Q291bnQiLCJlcnJvclJldHJ5Q291bnQiLCJjdXJyZW50UmV0cnlDb3VudCIsInJldHJ5Q291bnQiLCJlcnJvclJldHJ5SW50ZXJ2YWwiLCJvbkRpc2NhcmRlZCIsInJldmFsaWRhdGVPbkZvY3VzIiwicmV2YWxpZGF0ZU9uUmVjb25uZWN0IiwicmV2YWxpZGF0ZUlmU3RhbGUiLCJzaG91bGRSZXRyeU9uRXJyb3IiLCJmb2N1c1Rocm90dGxlSW50ZXJ2YWwiLCJkZWR1cGluZ0ludGVydmFsIiwibG9hZGluZ1RpbWVvdXQiLCJjdXJyZW50RGF0YSIsIm5ld0RhdGEiLCJpc1BhdXNlZCIsIm1lcmdlQ29uZmlncyIsInUxIiwidXNlIiwiZjEiLCJ1MiIsIlNXUkNvbmZpZ0NvbnRleHQiLCJub3JtYWxpemUiLCJ1c2VTV1JDb25maWciLCJzdWJzY3JpYmVDYWxsYmFjayIsImNhbGxiYWNrcyIsImtleWVkUmV2YWxpZGF0b3JzIiwiV0lUSF9ERURVUEUiLCJleHRlbmRlZENvbmZpZyIsImNhY2hlQ29udGV4dCIsImhvb2siLCJ1c2VTV1IiLCJmZXRjaGVyMiIsImZhbGxiYWNrRGF0YSIsInN1c3BlbnNlIiwicmV2YWxpZGF0ZU9uTW91bnQiLCJyZWZyZXNoSW50ZXJ2YWwiLCJyZWZyZXNoV2hlbkhpZGRlbiIsInJlZnJlc2hXaGVuT2ZmbGluZSIsImZuQXJncyIsImluaXRpYWxNb3VudGVkUmVmIiwidW5tb3VudGVkUmVmIiwia2V5UmVmIiwiZmV0Y2hlclJlZiIsImNvbmZpZ1JlZiIsImdldENvbmZpZyIsInBhdGNoRmV0Y2hJbmZvIiwiaW5mbzIiLCJpc0luaXRpYWxNb3VudCIsInJlcmVuZGVyIiwic3RhdGVSZWYiLCJzdGF0ZURlcGVuZGVuY2llc1JlZiIsInNob3VsZFJlcmVuZGVyIiwiY3VycmVudFN0YXRlIiwidXNlU3RhdGVXaXRoRGVwcyIsInN0YXRlRGVwZW5kZW5jaWVzIiwicmV2YWxpZGF0ZU9wdHMiLCJjdXJyZW50RmV0Y2hlciIsInN0YXJ0QXQiLCJsb2FkaW5nIiwic2hvdWxkU3RhcnROZXdSZXF1ZXN0IiwiaXNDdXJyZW50S2V5TW91bnRlZCIsImNsZWFudXBTdGF0ZSIsImZpbmlzaFJlcXVlc3RBbmRVcGRhdGVTdGF0ZSIsIm11dGF0aW9uSW5mbyIsImVycl8xIiwiX2EzIiwiX2IyIiwicmVxdWVzdEluZm8iLCJib3VuZE11dGF0ZSIsImtleUNoYW5nZWQiLCJzb2Z0UmV2YWxpZGF0ZSIsIm5leHRGb2N1c1JldmFsaWRhdGVkQXQiLCJ1bnN1YlVwZGF0ZSIsInVwZGF0ZWREYXRhIiwidXBkYXRlZEVycm9yIiwidXBkYXRlZElzVmFsaWRhdGluZyIsInVuc3ViRXZlbnRzIiwidGltZXIiLCJpbnRlcnZhbCIsImV4ZWN1dGUiLCJmYWxsYmFja0NvbmZpZyIsIl9jb25maWciLCJmZXRjaGVyIiwiZGlzdCIsInN3ckxhZ2d5TWlkZGxld2FyZSIsInVzZVNXUk5leHQiLCJsYWdneURhdGFSZWYiLCJzd3IiLCJyZXNldExhZ2d5IiwiZGF0YU9yTGFnZ3lEYXRhIiwiaXNMYWdnaW5nIiwiaXRlbVRleHQiLCJ1c2VEYXRhIiwiaXNJbW11dGFibGUiLCJtYXhJdGVtcyIsInN3ck9iaiIsInF1ZXJ5MiIsImlzRGVmYXVsdExpc3Rib3giLCJsaXN0Ym94UHJvbWlzZSIsInJhdGlvIiwiY29udmVydExpc3Rib3hUb0Z1bmN0aW9uIiwibGlzdGJveFByb3AiLCJwcm9taXNlcyIsImdyb3VwIiwiZmlsdGVyU3VwcGxpZWREYXRhIiwiYWxsIiwiZ3JvdXBzIiwicHJldkdyb3VwcyIsInJhdGlvcyIsInJhdGlvTXVsdGlwbGllciIsInRvdGFsIiwicmVzdWx0VG90YWwiLCJmbGF0IiwiZ3JvdXBDb3VudHMiLCJ1bmFzc2lnbmVkU2xvdHMiLCJsaW1pdFJlc3VsdHMiLCJzd3JCYXNlT3B0aW9ucyIsInN3ck9wdGlvbnMiLCJjb250YWluZXJGb2N1cyIsInF1ZXJ5Tm9UeXBlYWhlYWQiLCJ0eXBlYWhlYWQiLCJjbGVhckJ1dHRvbiIsImNhbmNlbEJ1dHRvbiIsInN1cHBvcnRlZFR5cGVzIiwic2V0aWZ5Iiwic2V0U2VsZWN0aW9uUmFuZ2UiLCJuYXR1cmFsU2VsZWN0aW9uIiwiQ29udGFpbmVyIiwiY2FuY2VsQnV0dG9uQXJpYUxhYmVsIiwiY2xlYXJCdXR0b25BcmlhTGFiZWwiLCJkZWJvdW5jZVdhaXQiLCJkZWZhdWx0TGlzdGJveElzSW1tdXRhYmxlIiwiZW50ZXJLZXlIaW50IiwibGlzdGJveElzSW1tdXRhYmxlIiwib25DaGFuZ2UiLCJvbkVudGVyIiwib25TZWxlY3QiLCJvblRhYiIsInBsYWNlaG9sZGVyIiwic3R5bGVzJDEyIiwidGFiSW5kZXgiLCJDYW5jZWwiLCJDbGVhciIsImxpc3Rib3hJZCIsImVycm9yYm94SWQiLCJkZWJvdW5jZWRRdWVyeSIsImVxIiwiZXF1YWxpdHlGbiIsImluaXRpYWxTdGF0ZSIsInVzZVN0YXRlSWdub3JlQ2FsbGJhY2siLCJsYXN0Q2FsbFRpbWUiLCJsYXN0SW52b2tlVGltZSIsInRpbWVySWQiLCJsYXN0QXJncyIsImxhc3RUaGlzIiwiZnVuY1JlZiIsIm1vdW50ZWQiLCJ1c2VSQUYiLCJsZWFkaW5nIiwidHJhaWxpbmciLCJtYXhpbmciLCJtYXhXYWl0IiwiaW52b2tlRnVuYyIsInN0YXJ0VGltZXIiLCJwZW5kaW5nRnVuYyIsIndhaXQyIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJzaG91bGRJbnZva2UiLCJ0aW1lU2luY2VMYXN0Q2FsbCIsInRpbWVTaW5jZUxhc3RJbnZva2UiLCJ0cmFpbGluZ0VkZ2UiLCJ0aW1lckV4cGlyZWQiLCJ0aW1lV2FpdGluZyIsInJlbWFpbmluZ1dhaXQiLCJmdW5jMiIsImlzSW52b2tpbmciLCJjYW5jZWwiLCJ1c2VEZWJvdW5jZWRDYWxsYmFjayIsInZhbHVlMiIsInByZXZpb3VzVmFsdWUiLCJ1c2VEZWJvdW5jZSIsImhhc0ZvY3VzIiwic2V0SGFzRm9jdXMiLCJibG9ja0JsdXJIYW5kbGVyIiwic2V0QmxvY2tCbHVySGFuZGxlciIsImF1dG9TZWxlY3QiLCJzZXRBdXRvU2VsZWN0IiwicXVlcnlJbnB1dCIsInR5cGVhaGVhZElucHV0IiwiaGFzVHlwZWFoZWFkIiwiaGFzQ2xlYXJCdXR0b24iLCJoYXNDYW5jZWxCdXR0b24iLCJpc0V4cGFuZGVkIiwiaXNFcnJvckV4cGFuZGVkIiwiY29udGFpbmVyQ2xhc3NuYW1lIiwiY29udGFpbmVyU3R5bGVzIiwiZGVmYXVsdENvbnRhaW5lclN0eWxlcyIsImlucHV0U3R5bGVzIiwicXVlcnlEZWZhdWx0U3R5bGUiLCJzd3JSZXN1bHQiLCJzd3JEYXRhIiwidXNlSXRlbXNTdGF0ZSIsInVzZUl0ZW1zRXJyb3IiLCJmaXJzdFVwZGF0ZSIsImN1cnJlbnRWYWx1ZSIsInVzZVF1ZXJ5Q2hhbmdlIiwidHlwZUFoZWFkVmFsdWUiLCJxdWVyeVZhbHVlIiwiZm9ybWF0dGVkUXVlcnkiLCJmb3JtYXRRdWVyeSIsInVzZUhpZ2hsaWdodCIsImJsdXIiLCJ1c2VTZWxlY3RlZCIsIm9uVGFiT3JFbnRlciIsImtleVByZXNzZWQiLCJoaWdobGlnaHRlZEluZGV4IiwiaGlnaGxpZ2h0ZWRJdGVtMiIsImhhbmRsZUlucHV0IiwiY2xlYXJTdGF0ZSIsInNlbGVjdCIsImF1dG9Db21wbGV0ZSIsImF1dG9Db3JyZWN0IiwiYXV0b0NhcGl0YWxpemUiLCJzcGVsbENoZWNrIiwib25LZXlEb3duIiwiZXZ0Iiwib25JbnB1dCIsInByb3BEZWZhdWx0cyIsImNvbXBvbmVudFByb3BzIiwicGx1Z2luSW5kZXgiLCJwbHVnaW5zIiwiUGx1Z2luIiwicGx1Z2luUHJvcHMiLCJUdXJuc3RvbmUiLCJzZWFyY2hUeXBlcyIsImxpc3Rib3hSdWxlcyIsIlNlYXJjaFBhdGllbnQiLCJmZXRjaCIsImpzb24iLCJpbnB1dEZvY3VzIiwic2VsZWN0ZWRJdGVtIiwiX2lkIiwiSG9tZSIsImNhbmNlbEJ1dHRvblRleHQiLCJjbGVhckJ1dHRvblRleHQiLCJQYXRpZW50U2lkZWJhciIsInBhdGllbnRQYXRoIiwiRm9ybWF0TGlzdEJ1bGxldGVkT3V0bGluZWQiLCJDcmVhdGVOZXdGb2xkZXJPdXRsaW5lZCIsIkNoYWlyT3V0bGluZWQiLCJGb2xkZXJTaGFyZWRPdXRsaW5lZCIsIlBhdGllbnRJbmZvIiwiZGlhZ25vc2lzRWwiLCJjdXJyZW50RGlhZ25vc2lzIiwiY3VyciIsIk1lbnVPdXRsaW5lZCIsImZ1bGxOYW1lIiwiZGF0ZU9mQmlydGgiLCJQYXRpZW50IiwicGF0aWVudElkIiwiVGltZWxpbmUiLCJ0aW1lbGluZSIsInNldFRpbWVsaW5lIiwiZGVmYXVsdEluaXQiLCJkZWZhdWx0U2VhcmNoUGFyYW1zUmVmIiwic2VhcmNoUGFyYW1zIiwibG9jYXRpb25TZWFyY2giLCJkZWZhdWx0U2VhcmNoUGFyYW1zIiwiZ2V0QWxsIiwiYXBwZW5kIiwiZ2V0U2VhcmNoUGFyYW1zRm9yTG9jYXRpb24iLCJzZXRTZWFyY2hQYXJhbXMiLCJuZXh0SW5pdCIsIm5hdmlnYXRlT3B0aW9ucyIsIm5ld1NlYXJjaFBhcmFtcyIsInVzZVNlYXJjaFBhcmFtcyIsIm51bU9mRXZlbnRzIiwidGltZWxpbmVFbCIsImNhdGVnb3J5Iiwic3BlY2lhbHR5IiwiZXhhbSIsImRpYWdub3NpcyIsIkV2ZW50c0J5Q2F0ZWdvcnkiLCJjYXRlZ29yeUlkIiwiZXZlbnRzRWwiLCJDYWxlbmRhck1vbnRoT3V0bGluZWQiLCJ1cGRhdGVkQXQiLCJQZXJzb25PdXRsaW5lT3V0bGluZWQiLCJkb2N0b3IiLCJBc3NpZ25tZW50TGF0ZU91dGxpbmVkIiwiRXZlbnREZXRhaWxzIiwiZXZlbnRJZCIsInRoaXNFdmVudCIsImZpbmQiLCJQcm9maWxlIiwiQ3VycmVudERpYWdub3NpcyIsIkFwcCIsIlJlYWN0RE9NIiwiZ2V0RWxlbWVudEJ5SWQiXSwic291cmNlUm9vdCI6IiJ9